!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/45968eff/
%.o	vendor/spdlog/tests/Makefile	/^%.o: %.cpp$/;"	t
A	dependencies/include/SFML/Window/Keyboard.hpp	/^        A = 0,        \/\/\/< The A key$/;"	e	enum:sf::Keyboard::Key
A	dependencies/include/v8-internal.h	/^    typedef internal::Address A;$/;"	t	function:v8::internal::Internals::GetInstanceType	typeref:typename:internal::Address
A	dependencies/include/v8-internal.h	/^    typedef internal::Address A;$/;"	t	function:v8::internal::Internals::ReadEmbedderData	typeref:typename:internal::Address
ACCESS_DELETE	dependencies/include/v8.h	/^  ACCESS_DELETE,$/;"	e	enum:v8::AccessType
ACCESS_GET	dependencies/include/v8.h	/^  ACCESS_GET,$/;"	e	enum:v8::AccessType
ACCESS_HAS	dependencies/include/v8.h	/^  ACCESS_HAS,$/;"	e	enum:v8::AccessType
ACCESS_KEYS	dependencies/include/v8.h	/^  ACCESS_KEYS$/;"	e	enum:v8::AccessType
ACCESS_SET	dependencies/include/v8.h	/^  ACCESS_SET,$/;"	e	enum:v8::AccessType
ALIGN_CENTER	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:alignment
ALIGN_DEFAULT	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:alignment
ALIGN_LEFT	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:alignment
ALIGN_NUMERIC	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:alignment
ALIGN_RIGHT	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:alignment
ALL_CAN_READ	dependencies/include/v8.h	/^  ALL_CAN_READ          = 1,$/;"	e	enum:v8::AccessControl
ALL_CAN_WRITE	dependencies/include/v8.h	/^  ALL_CAN_WRITE         = 1 << 1,$/;"	e	enum:v8::AccessControl
ALL_PROPERTIES	dependencies/include/v8.h	/^  ALL_PROPERTIES = 0,$/;"	e	enum:v8::PropertyFilter
AND_THEN	vendor/spdlog/tests/catch.hpp	/^#define AND_THEN(/;"	d
AND_WHEN	vendor/spdlog/tests/catch.hpp	/^#define AND_WHEN(/;"	d
ANON_TEST_CASE	vendor/spdlog/tests/catch.hpp	/^#define ANON_TEST_CASE(/;"	d
API	dependencies/include/v8-inspector.h	/^namespace API {$/;"	n	namespace:v8_inspector::protocol::Debugger
API	dependencies/include/v8-inspector.h	/^namespace API {$/;"	n	namespace:v8_inspector::protocol::Runtime
API	dependencies/include/v8-inspector.h	/^namespace API {$/;"	n	namespace:v8_inspector::protocol::Schema
API objects	dependencies/include/APIDesign.md	/^# API objects$/;"	c
APP_STL	vendor/spdlog/example/jni/Application.mk	/^APP_STL = gnustl_static$/;"	m
ARCHITECTURE_ID	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	file:
A_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit A_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::A_formatter
A_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class A_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
Accelerometer	dependencies/include/SFML/Window/Sensor.hpp	/^        Accelerometer,    \/\/\/< Measures the raw acceleration (m\/s^2)$/;"	e	enum:sf::Sensor::Type
Accepted	dependencies/include/SFML/Network/Http.hpp	/^            Accepted       = 202, \/\/\/< The request has been accepted, but will be processed l/;"	e	enum:sf::Http::Response::Status
AccessCheckCallback	dependencies/include/v8.h	/^typedef bool (*AccessCheckCallback)(Local<Context> accessing_context,$/;"	t	namespace:v8	typeref:typename:bool (*)(Local<Context> accessing_context,Local<Object> accessed_object,Local<Value> data)
AccessControl	dependencies/include/v8.h	/^enum AccessControl {$/;"	g	namespace:v8
AccessType	dependencies/include/v8.h	/^enum AccessType {$/;"	g	namespace:v8
AccessorGetterCallback	dependencies/include/v8.h	/^typedef void (*AccessorGetterCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(Local<String> property,const PropertyCallbackInfo<Value> & info)
AccessorNameGetterCallback	dependencies/include/v8.h	/^typedef void (*AccessorNameGetterCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(Local<Name> property,const PropertyCallbackInfo<Value> & info)
AccessorNameSetterCallback	dependencies/include/v8.h	/^typedef void (*AccessorNameSetterCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(Local<Name> property,Local<Value> value,const PropertyCallbackInfo<void> & info)
AccessorSetterCallback	dependencies/include/v8.h	/^typedef void (*AccessorSetterCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(Local<String> property,Local<Value> value,const PropertyCallbackInfo<void> & info)
AccessorSignature	dependencies/include/v8.h	/^class V8_EXPORT AccessorSignature : public Data {$/;"	c	namespace:v8
ActivityControl	dependencies/include/v8-profiler.h	/^class V8_EXPORT ActivityControl {  \/\/ NOLINT$/;"	c	namespace:v8
Add	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        Add,            \/\/\/< Pixel = Src * SrcFactor + Dst * DstFactor$/;"	e	enum:sf::BlendMode::Equation
Add	dependencies/include/SFML/Window/Keyboard.hpp	/^        Add,          \/\/\/< The + key$/;"	e	enum:sf::Keyboard::Key
AddTraceEvent	dependencies/include/v8-platform.h	/^  virtual uint64_t AddTraceEvent($/;"	f	class:v8::TracingController	typeref:typename:uint64_t
AddTraceEventWithTimestamp	dependencies/include/v8-platform.h	/^  virtual uint64_t AddTraceEventWithTimestamp($/;"	f	class:v8::TracingController	typeref:typename:uint64_t
AddTraceStateObserver	dependencies/include/v8-platform.h	/^  virtual void AddTraceStateObserver(TraceStateObserver*) {}$/;"	f	class:v8::TracingController	typeref:typename:void
Address	dependencies/include/v8-internal.h	/^typedef uintptr_t Address;$/;"	t	namespace:v8::internal	typeref:typename:uintptr_t
AlResource	dependencies/include/SFML/Audio/AlResource.hpp	/^class SFML_AUDIO_API AlResource$/;"	c	namespace:sf
AllOf	vendor/spdlog/tests/catch.hpp	/^            AllOf( AllOf const& other ) : m_matchers( other.m_matchers ) {}$/;"	f	class:Catch::Matchers::Impl::Generic::AllOf
AllOf	vendor/spdlog/tests/catch.hpp	/^            AllOf() {}$/;"	f	class:Catch::Matchers::Impl::Generic::AllOf
AllOf	vendor/spdlog/tests/catch.hpp	/^        class AllOf : public MatcherImpl<AllOf<ExpressionT>, ExpressionT> {$/;"	c	namespace:Catch::Matchers::Impl::Generic
AllOf	vendor/spdlog/tests/catch.hpp	/^    inline Impl::Generic::AllOf<ExpressionT> AllOf( Impl::Matcher<ExpressionT> const& m1,$/;"	f	namespace:Catch::Matchers	typeref:typename:Impl::Generic::AllOf<ExpressionT>
Allocation	dependencies/include/v8-profiler.h	/^  struct Allocation {$/;"	s	class:v8::AllocationProfile
AllocationBase	dependencies/include/v8.h	/^    void* AllocationBase() const { return allocation_base_; }$/;"	f	class:v8::ArrayBuffer::Contents	typeref:typename:void *
AllocationBase	dependencies/include/v8.h	/^    void* AllocationBase() const { return allocation_base_; }$/;"	f	class:v8::SharedArrayBuffer::Contents	typeref:typename:void *
AllocationLength	dependencies/include/v8.h	/^    size_t AllocationLength() const { return allocation_length_; }$/;"	f	class:v8::ArrayBuffer::Contents	typeref:typename:size_t
AllocationLength	dependencies/include/v8.h	/^    size_t AllocationLength() const { return allocation_length_; }$/;"	f	class:v8::SharedArrayBuffer::Contents	typeref:typename:size_t
AllocationMode	dependencies/include/v8.h	/^    Allocator::AllocationMode AllocationMode() const {$/;"	f	class:v8::ArrayBuffer::Contents	typeref:typename:Allocator::AllocationMode
AllocationMode	dependencies/include/v8.h	/^    Allocator::AllocationMode AllocationMode() const {$/;"	f	class:v8::SharedArrayBuffer::Contents	typeref:typename:Allocator::AllocationMode
AllocationMode	dependencies/include/v8.h	/^    enum class AllocationMode { kNormal, kReservation };$/;"	g	class:v8::ArrayBuffer::Allocator
AllocationProfile	dependencies/include/v8-profiler.h	/^class V8_EXPORT AllocationProfile {$/;"	c	namespace:v8
Allocator	dependencies/include/v8.h	/^    using Allocator = v8::ArrayBuffer::Allocator;$/;"	t	class:v8::SharedArrayBuffer::Contents	typeref:typename:v8::ArrayBuffer::Allocator
Allocator	dependencies/include/v8.h	/^  class V8_EXPORT Allocator { \/\/ NOLINT$/;"	c	class:v8::ArrayBuffer
Always	vendor/spdlog/tests/catch.hpp	/^        Always,$/;"	e	enum:Catch::ShowDurations::OrNot
Android example	vendor/spdlog/README.md	/^#### Android example $/;"	t
AnnotateStrongRetainer	dependencies/include/v8-util.h	/^  void AnnotateStrongRetainer(Global<V>* persistent) {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:void
Any	dependencies/include/SFML/Network/IpAddress.hpp	/^    static const IpAddress Any;       \/\/\/< Value representing any address (0.0.0.0)$/;"	m	class:sf::IpAddress	typeref:typename:const IpAddress
AnyOf	vendor/spdlog/tests/catch.hpp	/^            AnyOf( AnyOf const& other ) : m_matchers( other.m_matchers ) {}$/;"	f	class:Catch::Matchers::Impl::Generic::AnyOf
AnyOf	vendor/spdlog/tests/catch.hpp	/^            AnyOf() {}$/;"	f	class:Catch::Matchers::Impl::Generic::AnyOf
AnyOf	vendor/spdlog/tests/catch.hpp	/^        class AnyOf : public MatcherImpl<AnyOf<ExpressionT>, ExpressionT> {$/;"	c	namespace:Catch::Matchers::Impl::Generic
AnyOf	vendor/spdlog/tests/catch.hpp	/^    inline Impl::Generic::AnyOf<ExpressionT> AnyOf( Impl::Matcher<ExpressionT> const& m1,$/;"	f	namespace:Catch::Matchers	typeref:typename:Impl::Generic::AnyOf<ExpressionT>
AnyPort	dependencies/include/SFML/Network/Socket.hpp	/^        AnyPort = 0 \/\/\/< Special value that tells the system to pick any available port$/;"	e	enum:sf::Socket::__anonccec14c70103
Append	dependencies/include/v8-util.h	/^  static void Append(Impl* impl, PersistentContainerValue value) {$/;"	f	class:v8::DefaultPersistentValueVectorTraits	typeref:typename:void
Append	dependencies/include/v8-util.h	/^  void Append(Global<V> persistent) {$/;"	f	class:v8::PersistentValueVector	typeref:typename:void
Append	dependencies/include/v8-util.h	/^  void Append(Local<V> value) {$/;"	f	class:v8::PersistentValueVector	typeref:typename:void
Approx	vendor/spdlog/tests/catch.hpp	/^        Approx( Approx const& other )$/;"	f	class:Catch::Detail::Approx
Approx	vendor/spdlog/tests/catch.hpp	/^        explicit Approx ( double value )$/;"	f	class:Catch::Detail::Approx
Approx	vendor/spdlog/tests/catch.hpp	/^    class Approx {$/;"	c	namespace:Catch::Detail
Arch	vendor/spdlog/tests/catch.hpp	/^            enum Arch { Big, Little };$/;"	g	struct:Catch::Detail::__anon368216750c10::Endianness
Arg	vendor/spdlog/tests/catch.hpp	/^            Arg( Detail::BoundArgFunction<ConfigT> const& _boundField ) : CommonArgProperties<Co/;"	f	struct:Clara::CommandLine::Arg
Arg	vendor/spdlog/tests/catch.hpp	/^            Arg() {}$/;"	f	struct:Clara::CommandLine::Arg
Arg	vendor/spdlog/tests/catch.hpp	/^        struct Arg : CommonArgProperties<ConfigT>, OptionArgProperties, PositionalArgProperties /;"	s	class:Clara::CommandLine
ArgAutoPtr	vendor/spdlog/tests/catch.hpp	/^        typedef std::auto_ptr<Arg> ArgAutoPtr;$/;"	t	class:Clara::CommandLine	typeref:typename:std::auto_ptr<Arg>
ArgAutoPtr	vendor/spdlog/tests/catch.hpp	/^        typedef std::unique_ptr<Arg> ArgAutoPtr;$/;"	t	class:Clara::CommandLine	typeref:typename:std::unique_ptr<Arg>
ArgBuilder	vendor/spdlog/tests/catch.hpp	/^            ArgBuilder( Arg* arg ) : m_arg( arg ) {}$/;"	f	class:Clara::CommandLine::ArgBuilder
ArgBuilder	vendor/spdlog/tests/catch.hpp	/^        class ArgBuilder {$/;"	c	class:Clara::CommandLine
ArgValue	dependencies/include/libplatform/v8-tracing.h	/^  union ArgValue {$/;"	u	class:v8::platform::tracing::TraceObject
Array	dependencies/include/v8.h	/^class V8_EXPORT Array : public Object {$/;"	c	namespace:v8
ArrayBuffer	dependencies/include/v8.h	/^class V8_EXPORT ArrayBuffer : public Object {$/;"	c	namespace:v8
ArrayBufferCreationMode	dependencies/include/v8.h	/^enum class ArrayBufferCreationMode { kInternalized, kExternalized };$/;"	g	namespace:v8
ArrayBufferView	dependencies/include/v8.h	/^class V8_EXPORT ArrayBufferView : public Object {$/;"	c	namespace:v8
Arrow	dependencies/include/SFML/Window/Cursor.hpp	/^        Arrow,                  \/\/\/< Arrow cursor (default)$/;"	e	enum:sf::Cursor::Type
ArrowWait	dependencies/include/SFML/Window/Cursor.hpp	/^        ArrowWait,              \/\/\/< Busy arrow cursor$/;"	e	enum:sf::Cursor::Type
As	dependencies/include/v8.h	/^  V8_INLINE Local<S> As() const {$/;"	f	class:v8::Local	typeref:typename:V8_INLINE Local<S>
As	dependencies/include/v8.h	/^  V8_INLINE Persistent<S>& As() const {  \/\/ NOLINT$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE Persistent<S> &
AsReference	dependencies/include/v8.h	/^  static MemorySpan<const uint8_t> AsReference(const OwnedBuffer& buff) {$/;"	f	class:v8::WasmModuleObject	typeref:typename:MemorySpan<const uint8_t>
Ascii	dependencies/include/SFML/Network/Ftp.hpp	/^        Ascii,  \/\/\/< Text mode using ASCII encoding$/;"	e	enum:sf::Ftp::TransferMode
AssertionInfo	vendor/spdlog/tests/catch.hpp	/^        AssertionInfo() {}$/;"	f	struct:Catch::AssertionInfo
AssertionInfo	vendor/spdlog/tests/catch.hpp	/^    AssertionInfo::AssertionInfo(   std::string const& _macroName,$/;"	f	class:Catch::AssertionInfo
AssertionInfo	vendor/spdlog/tests/catch.hpp	/^    struct AssertionInfo$/;"	s	namespace:Catch
AssertionPrinter	vendor/spdlog/tests/catch.hpp	/^            AssertionPrinter( std::ostream& _stream, AssertionStats const& _stats, bool _printIn/;"	f	class:Catch::CompactReporter::AssertionPrinter
AssertionPrinter	vendor/spdlog/tests/catch.hpp	/^            AssertionPrinter( std::ostream& _stream, AssertionStats const& _stats, bool _printIn/;"	f	class:Catch::ConsoleReporter::AssertionPrinter
AssertionPrinter	vendor/spdlog/tests/catch.hpp	/^        class AssertionPrinter {$/;"	c	struct:Catch::CompactReporter
AssertionPrinter	vendor/spdlog/tests/catch.hpp	/^        class AssertionPrinter {$/;"	c	struct:Catch::ConsoleReporter
AssertionResult	vendor/spdlog/tests/catch.hpp	/^    AssertionResult::AssertionResult( AssertionInfo const& info, AssertionResultData const& data/;"	f	class:Catch::AssertionResult
AssertionResult	vendor/spdlog/tests/catch.hpp	/^    AssertionResult::AssertionResult() {}$/;"	f	class:Catch::AssertionResult
AssertionResult	vendor/spdlog/tests/catch.hpp	/^    class AssertionResult {$/;"	c	namespace:Catch
AssertionResultData	vendor/spdlog/tests/catch.hpp	/^        AssertionResultData() : resultType( ResultWas::Unknown ) {}$/;"	f	struct:Catch::AssertionResultData
AssertionResultData	vendor/spdlog/tests/catch.hpp	/^    struct AssertionResultData$/;"	s	namespace:Catch
AssertionStats	vendor/spdlog/tests/catch.hpp	/^        AssertionStats( AssertionResult const& _assertionResult,$/;"	f	struct:Catch::AssertionStats
AssertionStats	vendor/spdlog/tests/catch.hpp	/^    struct AssertionStats {$/;"	s	namespace:Catch
Assertions	vendor/spdlog/tests/catch.hpp	/^            typedef std::vector<AssertionStats> Assertions;$/;"	t	struct:Catch::CumulativeReporterBase::SectionNode	typeref:typename:std::vector<AssertionStats>
Asynchronous logger with multi sinks	vendor/spdlog/README.md	/^#### Asynchronous logger with multi sinks  $/;"	t
Asynchronous logging	vendor/spdlog/README.md	/^#### Asynchronous logging$/;"	t
Asynchronous mode	vendor/spdlog/README.md	/^#### Asynchronous mode$/;"	t
Attribute	dependencies/include/SFML/Window/ContextSettings.hpp	/^    enum Attribute$/;"	g	struct:sf::ContextSettings
AutoReg	vendor/spdlog/tests/catch.hpp	/^    AutoReg(    void (C::*method)(),$/;"	f	struct:Catch::AutoReg
AutoReg	vendor/spdlog/tests/catch.hpp	/^    AutoReg::AutoReg(   TestFunction function,$/;"	f	class:Catch::AutoReg
AutoReg	vendor/spdlog/tests/catch.hpp	/^struct AutoReg {$/;"	s	namespace:Catch
Axis	dependencies/include/SFML/Window/Joystick.hpp	/^    enum Axis$/;"	g	class:sf::Joystick
AxisCount	dependencies/include/SFML/Window/Joystick.hpp	/^        AxisCount   = 8   \/\/\/< Maximum number of supported axes$/;"	e	enum:sf::Joystick::__anon1e23a3bc0103
B	dependencies/include/SFML/Window/Keyboard.hpp	/^        B,            \/\/\/< The B key$/;"	e	enum:sf::Keyboard::Key
BOLD	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    const WORD BOLD = FOREGROUND_INTENSITY;$/;"	m	class:spdlog::sinks::wincolor_sink	typeref:typename:const WORD
BUFFER_SIZE	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  enum {BUFFER_SIZE = std::numeric_limits<unsigned long long>::digits10 + 3};$/;"	e	enum:format_int::__anondc8451670803
BYTECODE_COMPILER	dependencies/include/v8.h	/^  BYTECODE_COMPILER,$/;"	e	enum:v8::StateTag
B_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit B_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::B_formatter
B_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class B_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
BackSlash	dependencies/include/SFML/Window/Keyboard.hpp	/^        BackSlash = Backslash,    \/\/\/< \\deprecated Use Backslash instead$/;"	e	enum:sf::Keyboard::Key
BackSpace	dependencies/include/SFML/Window/Keyboard.hpp	/^        BackSpace = Backspace,    \/\/\/< \\deprecated Use Backspace instead$/;"	e	enum:sf::Keyboard::Key
Backslash	dependencies/include/SFML/Window/Keyboard.hpp	/^        Backslash,    \/\/\/< The \\ key$/;"	e	enum:sf::Keyboard::Key
Backspace	dependencies/include/SFML/Window/Keyboard.hpp	/^        Backspace,    \/\/\/< The Backspace key$/;"	e	enum:sf::Keyboard::Key
BadCommandSequence	dependencies/include/SFML/Network/Ftp.hpp	/^            BadCommandSequence      = 503, \/\/\/< Bad sequence of commands$/;"	e	enum:sf::Ftp::Response::Status
BadGateway	dependencies/include/SFML/Network/Http.hpp	/^            BadGateway          = 502, \/\/\/< The gateway server has received an error from the/;"	e	enum:sf::Http::Response::Status
BadRequest	dependencies/include/SFML/Network/Http.hpp	/^            BadRequest          = 400, \/\/\/< The server couldn't understand the request (synta/;"	e	enum:sf::Http::Response::Status
Basic file logger	vendor/spdlog/README.md	/^#### Basic file logger$/;"	t
Begin	dependencies/include/v8-util.h	/^  static Iterator Begin(Impl* impl) { return impl->begin(); }$/;"	f	class:v8::StdMapTraits	typeref:typename:Iterator
Benchmarks	vendor/spdlog/README.md	/^## Benchmarks$/;"	s
BetweenGenerator	vendor/spdlog/tests/catch.hpp	/^    BetweenGenerator( T from, T to ) : m_from( from ), m_to( to ){}$/;"	f	class:Catch::BetweenGenerator
BetweenGenerator	vendor/spdlog/tests/catch.hpp	/^class BetweenGenerator : public IGenerator<T> {$/;"	c	namespace:Catch
Big	vendor/spdlog/tests/catch.hpp	/^            enum Arch { Big, Little };$/;"	e	enum:Catch::Detail::__anon368216750c10::Endianness::Arch
BigInt	dependencies/include/v8.h	/^class V8_EXPORT BigInt : public Primitive {$/;"	c	namespace:v8
BigInt64Array	dependencies/include/v8.h	/^class V8_EXPORT BigInt64Array : public TypedArray {$/;"	c	namespace:v8
BigIntObject	dependencies/include/v8.h	/^class V8_EXPORT BigIntObject : public Object {$/;"	c	namespace:v8
BigUint64Array	dependencies/include/v8.h	/^class V8_EXPORT BigUint64Array : public TypedArray {$/;"	c	namespace:v8
Binary	dependencies/include/SFML/Network/Ftp.hpp	/^        Binary, \/\/\/< Binary mode (file is transfered as a sequence of bytes)$/;"	e	enum:sf::Ftp::TransferMode
Binary logging	vendor/spdlog/README.md	/^#### Binary logging$/;"	t
Black	dependencies/include/SFML/Graphics/Color.hpp	/^    static const Color Black;       \/\/\/< Black predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
BlendMode	dependencies/include/SFML/Graphics/BlendMode.hpp	/^struct SFML_GRAPHICS_API BlendMode$/;"	s	namespace:sf
Blue	dependencies/include/SFML/Graphics/Color.hpp	/^    static const Color Blue;        \/\/\/< Blue predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
Blue	vendor/spdlog/tests/catch.hpp	/^            Blue,$/;"	e	enum:Catch::Colour::Code
Bold	dependencies/include/SFML/Graphics/Text.hpp	/^        Bold          = 1 << 0, \/\/\/< Bold characters$/;"	e	enum:sf::Text::Style
BoolType	dependencies/include/SFML/Network/Packet.hpp	/^    typedef bool (Packet::*BoolType)(std::size_t);$/;"	t	class:sf::Packet	typeref:typename:bool (Packet::*)(std::size_t)
Boolean	dependencies/include/v8.h	/^class V8_EXPORT Boolean : public Primitive {$/;"	c	namespace:v8
BooleanObject	dependencies/include/v8.h	/^class V8_EXPORT BooleanObject : public Object {$/;"	c	namespace:v8
BorgType	vendor/spdlog/tests/catch.hpp	/^    struct BorgType {$/;"	s	namespace:Catch::Detail
BoundArgFunction	vendor/spdlog/tests/catch.hpp	/^            BoundArgFunction( BoundArgFunction const& other ) : functionObj( other.functionObj ?/;"	f	class:Clara::Detail::BoundArgFunction
BoundArgFunction	vendor/spdlog/tests/catch.hpp	/^            BoundArgFunction( IArgFunction<ConfigT>* _functionObj ) : functionObj( _functionObj /;"	f	class:Clara::Detail::BoundArgFunction
BoundArgFunction	vendor/spdlog/tests/catch.hpp	/^            BoundArgFunction() : functionObj( NULL ) {}$/;"	f	class:Clara::Detail::BoundArgFunction
BoundArgFunction	vendor/spdlog/tests/catch.hpp	/^        class BoundArgFunction {$/;"	c	namespace:Clara::Detail
BoundBinaryFunction	vendor/spdlog/tests/catch.hpp	/^            BoundBinaryFunction( void (*_function)( C&, T ) ) : function( _function ) {}$/;"	f	struct:Clara::Detail::BoundBinaryFunction
BoundBinaryFunction	vendor/spdlog/tests/catch.hpp	/^        struct BoundBinaryFunction : IArgFunction<C>{$/;"	s	namespace:Clara::Detail
BoundDataMember	vendor/spdlog/tests/catch.hpp	/^            BoundDataMember( M C::* _member ) : member( _member ) {}$/;"	f	struct:Clara::Detail::BoundDataMember
BoundDataMember	vendor/spdlog/tests/catch.hpp	/^        struct BoundDataMember : IArgFunction<C>{$/;"	s	namespace:Clara::Detail
BoundNullaryMethod	vendor/spdlog/tests/catch.hpp	/^            BoundNullaryMethod( void (C::*_member)() ) : member( _member ) {}$/;"	f	struct:Clara::Detail::BoundNullaryMethod
BoundNullaryMethod	vendor/spdlog/tests/catch.hpp	/^        struct BoundNullaryMethod : IArgFunction<C>{$/;"	s	namespace:Clara::Detail
BoundUnaryFunction	vendor/spdlog/tests/catch.hpp	/^            BoundUnaryFunction( void (*_function)( C& ) ) : function( _function ) {}$/;"	f	struct:Clara::Detail::BoundUnaryFunction
BoundUnaryFunction	vendor/spdlog/tests/catch.hpp	/^        struct BoundUnaryFunction : IArgFunction<C>{$/;"	s	namespace:Clara::Detail
BoundUnaryMethod	vendor/spdlog/tests/catch.hpp	/^            BoundUnaryMethod( void (C::*_member)( M ) ) : member( _member ) {}$/;"	f	struct:Clara::Detail::BoundUnaryMethod
BoundUnaryMethod	vendor/spdlog/tests/catch.hpp	/^        struct BoundUnaryMethod : IArgFunction<C>{$/;"	s	namespace:Clara::Detail
Bright	vendor/spdlog/tests/catch.hpp	/^            Bright = 0x10,$/;"	e	enum:Catch::Colour::Code
BrightGreen	vendor/spdlog/tests/catch.hpp	/^            BrightGreen = Bright | Green,$/;"	e	enum:Catch::Colour::Code
BrightRed	vendor/spdlog/tests/catch.hpp	/^            BrightRed = Bright | Red,$/;"	e	enum:Catch::Colour::Code
BrightWhite	vendor/spdlog/tests/catch.hpp	/^            BrightWhite = Bright | White,$/;"	e	enum:Catch::Colour::Code
Broadcast	dependencies/include/SFML/Network/IpAddress.hpp	/^    static const IpAddress Broadcast; \/\/\/< The "broadcast" address (for sending UDP messages /;"	m	class:sf::IpAddress	typeref:typename:const IpAddress
BufferCount	dependencies/include/SFML/Audio/SoundStream.hpp	/^        BufferCount = 3,    \/\/\/< Number of audio buffers used by the streaming loop$/;"	e	enum:sf::SoundStream::__anon941a085b0203
BufferNotOwned	dependencies/include/v8.h	/^      BufferNotOwned,$/;"	e	enum:v8::ScriptCompiler::CachedData::BufferPolicy
BufferOwned	dependencies/include/v8.h	/^      BufferOwned$/;"	e	enum:v8::ScriptCompiler::CachedData::BufferPolicy
BufferPolicy	dependencies/include/v8.h	/^    enum BufferPolicy {$/;"	g	struct:v8::ScriptCompiler::CachedData
BufferReference	dependencies/include/v8.h	/^    BufferReference(MemorySpan<const uint8_t> span)  \/\/ NOLINT(runtime\/explicit)$/;"	f	class:v8::WasmModuleObject
BufferReference	dependencies/include/v8.h	/^    BufferReference(const uint8_t* start, size_t size)$/;"	f	class:v8::WasmModuleObject
BufferRetries	dependencies/include/SFML/Audio/SoundStream.hpp	/^        BufferRetries = 2   \/\/\/< Number of retries (excluding initial try) for onGetData()$/;"	e	enum:sf::SoundStream::__anon941a085b0203
BuildEmbedderGraphCallback	dependencies/include/v8-profiler.h	/^  typedef void (*BuildEmbedderGraphCallback)(v8::Isolate* isolate,$/;"	t	class:v8::HeapProfiler	typeref:typename:void (*)(v8::Isolate * isolate,v8::EmbedderGraph * graph,void * data)
Button	dependencies/include/SFML/Window/Mouse.hpp	/^    enum Button$/;"	g	class:sf::Mouse
ButtonCount	dependencies/include/SFML/Window/Joystick.hpp	/^        ButtonCount = 32, \/\/\/< Maximum number of supported buttons$/;"	e	enum:sf::Joystick::__anon1e23a3bc0103
ButtonCount	dependencies/include/SFML/Window/Mouse.hpp	/^        ButtonCount \/\/\/< Keep last -- the total number of mouse buttons$/;"	e	enum:sf::Mouse::Button
Bvec2	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef Vector2<bool> Bvec2;$/;"	t	namespace:sf::Glsl	typeref:typename:Vector2<bool>
Bvec3	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef Vector3<bool> Bvec3;$/;"	t	namespace:sf::Glsl	typeref:typename:Vector3<bool>
Bvec4	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef implementation-defined Bvec4;$/;"	t	namespace:sf::Glsl	typeref:typename:implementation-defined
Bvec4	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef priv::Vector4<bool> Bvec4;$/;"	t	namespace:sf::Glsl	typeref:typename:priv::Vector4<bool>
BySectionInfo	vendor/spdlog/tests/catch.hpp	/^			BySectionInfo( BySectionInfo const& other ) : m_other( other.m_other ) {}$/;"	f	struct:Catch::CumulativeReporterBase::BySectionInfo
BySectionInfo	vendor/spdlog/tests/catch.hpp	/^            BySectionInfo( SectionInfo const& other ) : m_other( other ) {}$/;"	f	struct:Catch::CumulativeReporterBase::BySectionInfo
BySectionInfo	vendor/spdlog/tests/catch.hpp	/^        struct BySectionInfo {$/;"	s	struct:Catch::CumulativeReporterBase
ByteLength	dependencies/include/v8.h	/^    size_t ByteLength() const { return byte_length_; }$/;"	f	class:v8::ArrayBuffer::Contents	typeref:typename:size_t
ByteLength	dependencies/include/v8.h	/^    size_t ByteLength() const { return byte_length_; }$/;"	f	class:v8::SharedArrayBuffer::Contents	typeref:typename:size_t
C	dependencies/include/SFML/Window/Keyboard.hpp	/^        C,            \/\/\/< The C key$/;"	e	enum:sf::Keyboard::Key
CAPTURE	vendor/spdlog/tests/catch.hpp	/^#define CAPTURE(/;"	d
CATCH_AND_THEN	vendor/spdlog/tests/catch.hpp	/^#define CATCH_AND_THEN(/;"	d
CATCH_AND_WHEN	vendor/spdlog/tests/catch.hpp	/^#define CATCH_AND_WHEN(/;"	d
CATCH_ANON_TEST_CASE	vendor/spdlog/tests/catch.hpp	/^#define CATCH_ANON_TEST_CASE(/;"	d
CATCH_ARC_ENABLED	vendor/spdlog/tests/catch.hpp	/^#define CATCH_ARC_ENABLED /;"	d
CATCH_ARC_STRONG	vendor/spdlog/tests/catch.hpp	/^#define CATCH_ARC_STRONG /;"	d
CATCH_ARC_STRONG	vendor/spdlog/tests/catch.hpp	/^#define CATCH_ARC_STRONG$/;"	d
CATCH_BREAK_INTO_DEBUGGER	vendor/spdlog/tests/catch.hpp	/^            #define CATCH_BREAK_INTO_DEBUGGER(/;"	d
CATCH_BREAK_INTO_DEBUGGER	vendor/spdlog/tests/catch.hpp	/^    #define CATCH_BREAK_INTO_DEBUGGER(/;"	d
CATCH_BREAK_INTO_DEBUGGER	vendor/spdlog/tests/catch.hpp	/^#define CATCH_BREAK_INTO_DEBUGGER(/;"	d
CATCH_CAPTURE	vendor/spdlog/tests/catch.hpp	/^#define CATCH_CAPTURE(/;"	d
CATCH_CHECK	vendor/spdlog/tests/catch.hpp	/^#define CATCH_CHECK(/;"	d
CATCH_CHECKED_ELSE	vendor/spdlog/tests/catch.hpp	/^#define CATCH_CHECKED_ELSE(/;"	d
CATCH_CHECKED_IF	vendor/spdlog/tests/catch.hpp	/^#define CATCH_CHECKED_IF(/;"	d
CATCH_CHECK_FALSE	vendor/spdlog/tests/catch.hpp	/^#define CATCH_CHECK_FALSE(/;"	d
CATCH_CHECK_NOFAIL	vendor/spdlog/tests/catch.hpp	/^#define CATCH_CHECK_NOFAIL(/;"	d
CATCH_CHECK_NOTHROW	vendor/spdlog/tests/catch.hpp	/^#define CATCH_CHECK_NOTHROW(/;"	d
CATCH_CHECK_THROWS	vendor/spdlog/tests/catch.hpp	/^#define CATCH_CHECK_THROWS(/;"	d
CATCH_CHECK_THROWS_AS	vendor/spdlog/tests/catch.hpp	/^#define CATCH_CHECK_THROWS_AS(/;"	d
CATCH_CONFIG_COLOUR_ANSI	vendor/spdlog/tests/catch.hpp	/^#       define CATCH_CONFIG_COLOUR_ANSI$/;"	d
CATCH_CONFIG_COLOUR_WINDOWS	vendor/spdlog/tests/catch.hpp	/^#       define CATCH_CONFIG_COLOUR_WINDOWS$/;"	d
CATCH_CONFIG_CONSOLE_WIDTH	vendor/spdlog/tests/catch.hpp	/^#define CATCH_CONFIG_CONSOLE_WIDTH /;"	d
CATCH_CONFIG_CPP11_NOEXCEPT	vendor/spdlog/tests/catch.hpp	/^#    define CATCH_CONFIG_CPP11_NOEXCEPT$/;"	d
CATCH_CONFIG_CPP11_NULLPTR	vendor/spdlog/tests/catch.hpp	/^#    define CATCH_CONFIG_CPP11_NULLPTR$/;"	d
CATCH_CONFIG_CPP11_NULLPTR	vendor/spdlog/tests/catch.hpp	/^#define CATCH_CONFIG_CPP11_NULLPTR$/;"	d
CATCH_CONFIG_MAIN	vendor/spdlog/tests/main.cpp	/^#define CATCH_CONFIG_MAIN$/;"	d	file:
CATCH_CONFIG_VARIADIC_MACROS	vendor/spdlog/tests/catch.hpp	/^#define CATCH_CONFIG_VARIADIC_MACROS$/;"	d
CATCH_CPP11	vendor/spdlog/tests/catch.hpp	/^#  define CATCH_CPP11$/;"	d
CATCH_CPP11_OR_GREATER	vendor/spdlog/tests/catch.hpp	/^#  define CATCH_CPP11_OR_GREATER$/;"	d
CATCH_FAIL	vendor/spdlog/tests/catch.hpp	/^    #define CATCH_FAIL(/;"	d
CATCH_GENERATE	vendor/spdlog/tests/catch.hpp	/^#define CATCH_GENERATE(/;"	d
CATCH_GIVEN	vendor/spdlog/tests/catch.hpp	/^#define CATCH_GIVEN(/;"	d
CATCH_IMPL	vendor/spdlog/tests/catch.hpp	/^#  define CATCH_IMPL$/;"	d
CATCH_INFO	vendor/spdlog/tests/catch.hpp	/^#define CATCH_INFO(/;"	d
CATCH_INTERNAL_ERROR	vendor/spdlog/tests/catch.hpp	/^#define CATCH_INTERNAL_ERROR(/;"	d
CATCH_INTERNAL_LINEINFO	vendor/spdlog/tests/catch.hpp	/^#define CATCH_INTERNAL_LINEINFO /;"	d
CATCH_METHOD_AS_TEST_CASE	vendor/spdlog/tests/catch.hpp	/^    #define CATCH_METHOD_AS_TEST_CASE(/;"	d
CATCH_NOEXCEPT	vendor/spdlog/tests/catch.hpp	/^#  define CATCH_NOEXCEPT /;"	d
CATCH_NOEXCEPT_IS	vendor/spdlog/tests/catch.hpp	/^#  define CATCH_NOEXCEPT_IS(/;"	d
CATCH_NOT_IMPLEMENTED	vendor/spdlog/tests/catch.hpp	/^#define CATCH_NOT_IMPLEMENTED /;"	d
CATCH_PLATFORM_IPHONE	vendor/spdlog/tests/catch.hpp	/^#define CATCH_PLATFORM_IPHONE$/;"	d
CATCH_PLATFORM_MAC	vendor/spdlog/tests/catch.hpp	/^#define CATCH_PLATFORM_MAC$/;"	d
CATCH_PLATFORM_WINDOWS	vendor/spdlog/tests/catch.hpp	/^#define CATCH_PLATFORM_WINDOWS$/;"	d
CATCH_REGISTER_LEGACY_REPORTER	vendor/spdlog/tests/catch.hpp	/^#define CATCH_REGISTER_LEGACY_REPORTER(/;"	d
CATCH_REGISTER_REPORTER	vendor/spdlog/tests/catch.hpp	/^#define CATCH_REGISTER_REPORTER(/;"	d
CATCH_REGISTER_TAG_ALIAS	vendor/spdlog/tests/catch.hpp	/^#define CATCH_REGISTER_TAG_ALIAS(/;"	d
CATCH_REQUIRE	vendor/spdlog/tests/catch.hpp	/^#define CATCH_REQUIRE(/;"	d
CATCH_REQUIRE_FALSE	vendor/spdlog/tests/catch.hpp	/^#define CATCH_REQUIRE_FALSE(/;"	d
CATCH_REQUIRE_NOTHROW	vendor/spdlog/tests/catch.hpp	/^#define CATCH_REQUIRE_NOTHROW(/;"	d
CATCH_REQUIRE_THAT	vendor/spdlog/tests/catch.hpp	/^#define CATCH_REQUIRE_THAT(/;"	d
CATCH_REQUIRE_THROWS	vendor/spdlog/tests/catch.hpp	/^#define CATCH_REQUIRE_THROWS(/;"	d
CATCH_REQUIRE_THROWS_AS	vendor/spdlog/tests/catch.hpp	/^#define CATCH_REQUIRE_THROWS_AS(/;"	d
CATCH_SCENARIO	vendor/spdlog/tests/catch.hpp	/^#define CATCH_SCENARIO(/;"	d
CATCH_SCENARIO_METHOD	vendor/spdlog/tests/catch.hpp	/^#define CATCH_SCENARIO_METHOD(/;"	d
CATCH_SCOPED_CAPTURE	vendor/spdlog/tests/catch.hpp	/^#define CATCH_SCOPED_CAPTURE(/;"	d
CATCH_SCOPED_INFO	vendor/spdlog/tests/catch.hpp	/^#define CATCH_SCOPED_INFO(/;"	d
CATCH_SECTION	vendor/spdlog/tests/catch.hpp	/^    #define CATCH_SECTION(/;"	d
CATCH_SUCCEED	vendor/spdlog/tests/catch.hpp	/^    #define CATCH_SUCCEED(/;"	d
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH	vendor/spdlog/tests/catch.hpp	/^#define CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH /;"	d
CATCH_TEST_CASE	vendor/spdlog/tests/catch.hpp	/^    #define CATCH_TEST_CASE(/;"	d
CATCH_TEST_CASE_METHOD	vendor/spdlog/tests/catch.hpp	/^    #define CATCH_TEST_CASE_METHOD(/;"	d
CATCH_THEN	vendor/spdlog/tests/catch.hpp	/^#define CATCH_THEN(/;"	d
CATCH_TRANSLATE_EXCEPTION	vendor/spdlog/tests/catch.hpp	/^#define CATCH_TRANSLATE_EXCEPTION(/;"	d
CATCH_UNSAFE_UNRETAINED	vendor/spdlog/tests/catch.hpp	/^#define CATCH_UNSAFE_UNRETAINED /;"	d
CATCH_UNSAFE_UNRETAINED	vendor/spdlog/tests/catch.hpp	/^#define CATCH_UNSAFE_UNRETAINED$/;"	d
CATCH_WARN	vendor/spdlog/tests/catch.hpp	/^#define CATCH_WARN(/;"	d
CATCH_WHEN	vendor/spdlog/tests/catch.hpp	/^#define CATCH_WHEN(/;"	d
CHECK	vendor/spdlog/tests/catch.hpp	/^#define CHECK(/;"	d
CHECKED_ELSE	vendor/spdlog/tests/catch.hpp	/^#define CHECKED_ELSE(/;"	d
CHECKED_IF	vendor/spdlog/tests/catch.hpp	/^#define CHECKED_IF(/;"	d
CHECK_FALSE	vendor/spdlog/tests/catch.hpp	/^#define CHECK_FALSE(/;"	d
CHECK_NOFAIL	vendor/spdlog/tests/catch.hpp	/^#define CHECK_NOFAIL(/;"	d
CHECK_NOTHROW	vendor/spdlog/tests/catch.hpp	/^#define CHECK_NOTHROW(/;"	d
CHECK_THAT	vendor/spdlog/tests/catch.hpp	/^#define CHECK_THAT(/;"	d
CHECK_THROWS	vendor/spdlog/tests/catch.hpp	/^#define CHECK_THROWS(/;"	d
CHECK_THROWS_AS	vendor/spdlog/tests/catch.hpp	/^#define CHECK_THROWS_AS(/;"	d
CLARA_CONFIG_CONSOLE_WIDTH	vendor/spdlog/tests/catch.hpp	/^#define CLARA_CONFIG_CONSOLE_WIDTH /;"	d
CLARA_CONFIG_MAIN	vendor/spdlog/tests/catch.hpp	/^#    define CLARA_CONFIG_MAIN$/;"	d
CLARA_CONFIG_MAIN_NOT_DEFINED	vendor/spdlog/tests/catch.hpp	/^#    define CLARA_CONFIG_MAIN_NOT_DEFINED$/;"	d
CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE	vendor/spdlog/tests/catch.hpp	/^#define CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE /;"	d
CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE	vendor/spdlog/tests/catch.hpp	/^namespace CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE {$/;"	n
CMAKE_AR	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_AR "\/usr\/bin\/ar")$/;"	v
CMAKE_AR	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_AR "\/usr\/bin\/ar")$/;"	v
CMAKE_BUILD_TYPE	vendor/spdlog/CMakeLists.txt	/^    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose Release or Debug" FORCE)$/;"	v
CMAKE_C11_COMPILE_FEATURES	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C11_COMPILE_FEATURES "c_std_11;c_static_assert")$/;"	v
CMAKE_C90_COMPILE_FEATURES	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C90_COMPILE_FEATURES "c_std_90;c_function_prototypes")$/;"	v
CMAKE_C99_COMPILE_FEATURES	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C99_COMPILE_FEATURES "c_std_99;c_restrict;c_variadic_macros")$/;"	v
CMAKE_CL_SHOWINCLUDES_PREFIX	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_C_CL_SHOWINCLUDES_PREFIX}")$/;"	v
CMAKE_CL_SHOWINCLUDES_PREFIX	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_CXX_CL_SHOWINCLUDES_PREFIX}")$/;"	v
CMAKE_COMPILER_IS_CYGWIN	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_COMPILER_IS_CYGWIN )$/;"	v
CMAKE_COMPILER_IS_CYGWIN	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_COMPILER_IS_CYGWIN )$/;"	v
CMAKE_COMPILER_IS_GNUCC	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_COMPILER_IS_GNUCC 1)$/;"	v
CMAKE_COMPILER_IS_GNUCXX	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_COMPILER_IS_GNUCXX 1)$/;"	v
CMAKE_COMPILER_IS_MINGW	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_COMPILER_IS_MINGW )$/;"	v
CMAKE_COMPILER_IS_MINGW	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_COMPILER_IS_MINGW )$/;"	v
CMAKE_CROSSCOMPILING	build/default/CMakeFiles/3.13.1/CMakeSystem.cmake	/^set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CROSSCOMPILING	build/default/cmake_install.cmake	/^  set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CXX11_COMPILE_FEATURES	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX11_COMPILE_FEATURES "cxx_std_11")$/;"	v
CMAKE_CXX14_COMPILE_FEATURES	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX14_COMPILE_FEATURES "cxx_std_14")$/;"	v
CMAKE_CXX17_COMPILE_FEATURES	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX17_COMPILE_FEATURES "cxx_std_17")$/;"	v
CMAKE_CXX20_COMPILE_FEATURES	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX20_COMPILE_FEATURES "cxx_std_20")$/;"	v
CMAKE_CXX98_COMPILE_FEATURES	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX98_COMPILE_FEATURES "cxx_std_98;cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_att/;"	v
CMAKE_CXX_ABI_COMPILED	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_ABI_COMPILED TRUE)$/;"	v
CMAKE_CXX_CL_SHOWINCLUDES_PREFIX	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_CL_SHOWINCLUDES_PREFIX "")$/;"	v
CMAKE_CXX_COMPILER	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER "\/usr\/bin\/c++")$/;"	v
CMAKE_CXX_COMPILER_ABI	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ABI "ELF")$/;"	v
CMAKE_CXX_COMPILER_AR	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_AR "\/usr\/bin\/gcc-ar")$/;"	v
CMAKE_CXX_COMPILER_ARG1	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ARG1 "")$/;"	v
CMAKE_CXX_COMPILER_ENV_VAR	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ENV_VAR "CXX")$/;"	v
CMAKE_CXX_COMPILER_ID	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID_RUN	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID_RUN 1)$/;"	v
CMAKE_CXX_COMPILER_LOADED	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LOADED 1)$/;"	v
CMAKE_CXX_COMPILER_RANLIB	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_RANLIB "\/usr\/bin\/gcc-ranlib")$/;"	v
CMAKE_CXX_COMPILER_VERSION	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION "8.2.1")$/;"	v
CMAKE_CXX_COMPILER_VERSION_INTERNAL	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION_INTERNAL "")$/;"	v
CMAKE_CXX_COMPILER_WORKS	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WORKS TRUE)$/;"	v
CMAKE_CXX_COMPILER_WRAPPER	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WRAPPER "")$/;"	v
CMAKE_CXX_COMPILE_FEATURES	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILE_FEATURES "cxx_std_98;cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_attri/;"	v
CMAKE_CXX_EXTENSIONS	vendor/spdlog/CMakeLists.txt	/^set(CMAKE_CXX_EXTENSIONS OFF)$/;"	v
CMAKE_CXX_FLAGS	CMakeLists.txt	/^set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Werror -std=c++14")$/;"	v
CMAKE_CXX_IGNORE_EXTENSIONS	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IGNORE_EXTENSIONS inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC)$/;"	v
CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-pc-linux-gnu\/8.2.1;\/usr\/lib;/;"	v
CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")$/;"	v
CMAKE_CXX_IMPLICIT_LINK_LIBRARIES	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_LIBRARIES "stdc++;m;gcc_s;gcc;c;gcc_s;gcc")$/;"	v
CMAKE_CXX_LIBRARY_ARCHITECTURE	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_CXX_LINKER_PREFERENCE	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE 30)$/;"	v
CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES 1)$/;"	v
CMAKE_CXX_PLATFORM_ID	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_PLATFORM_ID "Linux")$/;"	v
CMAKE_CXX_SIMULATE_ID	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_ID "")$/;"	v
CMAKE_CXX_SIMULATE_VERSION	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_VERSION "")$/;"	v
CMAKE_CXX_SIZEOF_DATA_PTR	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIZEOF_DATA_PTR "8")$/;"	v
CMAKE_CXX_SOURCE_FILE_EXTENSIONS	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;mm;CPP)$/;"	v
CMAKE_CXX_STANDARD	CMakeLists.txt	/^set(CMAKE_CXX_STANDARD 11)$/;"	v
CMAKE_CXX_STANDARD	vendor/spdlog/CMakeLists.txt	/^set(CMAKE_CXX_STANDARD 11)$/;"	v
CMAKE_CXX_STANDARD_COMPUTED_DEFAULT	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_STANDARD_COMPUTED_DEFAULT "14")$/;"	v
CMAKE_CXX_STANDARD_LIBRARIES	vendor/spdlog/bench/CMakeLists.txt	/^set(CMAKE_CXX_STANDARD_LIBRARIES -lbenchmark)$/;"	v
CMAKE_CXX_STANDARD_REQUIRED	vendor/spdlog/CMakeLists.txt	/^set(CMAKE_CXX_STANDARD_REQUIRED ON)$/;"	v
CMAKE_C_ABI_COMPILED	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_ABI_COMPILED TRUE)$/;"	v
CMAKE_C_CL_SHOWINCLUDES_PREFIX	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_CL_SHOWINCLUDES_PREFIX "")$/;"	v
CMAKE_C_COMPILER	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER "\/usr\/bin\/cc")$/;"	v
CMAKE_C_COMPILER_ABI	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ABI "ELF")$/;"	v
CMAKE_C_COMPILER_AR	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_AR "\/usr\/bin\/gcc-ar")$/;"	v
CMAKE_C_COMPILER_ARG1	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ARG1 "")$/;"	v
CMAKE_C_COMPILER_ENV_VAR	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ENV_VAR "CC")$/;"	v
CMAKE_C_COMPILER_ID	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ID "GNU")$/;"	v
CMAKE_C_COMPILER_ID_RUN	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ID_RUN 1)$/;"	v
CMAKE_C_COMPILER_LOADED	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_LOADED 1)$/;"	v
CMAKE_C_COMPILER_RANLIB	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_RANLIB "\/usr\/bin\/gcc-ranlib")$/;"	v
CMAKE_C_COMPILER_VERSION	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_VERSION "8.2.1")$/;"	v
CMAKE_C_COMPILER_VERSION_INTERNAL	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_VERSION_INTERNAL "")$/;"	v
CMAKE_C_COMPILER_WORKS	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_WORKS TRUE)$/;"	v
CMAKE_C_COMPILER_WRAPPER	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_WRAPPER "")$/;"	v
CMAKE_C_COMPILE_FEATURES	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILE_FEATURES "c_std_90;c_function_prototypes;c_std_99;c_restrict;c_variadic_macr/;"	v
CMAKE_C_IGNORE_EXTENSIONS	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_IGNORE_EXTENSIONS h;H;o;O;obj;OBJ;def;DEF;rc;RC)$/;"	v
CMAKE_C_IMPLICIT_LINK_DIRECTORIES	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-pc-linux-gnu\/8.2.1;\/usr\/lib;\//;"	v
CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")$/;"	v
CMAKE_C_IMPLICIT_LINK_LIBRARIES	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_LIBRARIES "gcc;gcc_s;c;gcc;gcc_s")$/;"	v
CMAKE_C_LIBRARY_ARCHITECTURE	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_C_LINKER_PREFERENCE	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_LINKER_PREFERENCE 10)$/;"	v
CMAKE_C_PLATFORM_ID	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_PLATFORM_ID "Linux")$/;"	v
CMAKE_C_SIMULATE_ID	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_SIMULATE_ID "")$/;"	v
CMAKE_C_SIMULATE_VERSION	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_SIMULATE_VERSION "")$/;"	v
CMAKE_C_SIZEOF_DATA_PTR	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_SIZEOF_DATA_PTR "8")$/;"	v
CMAKE_C_SOURCE_FILE_EXTENSIONS	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_SOURCE_FILE_EXTENSIONS c;m)$/;"	v
CMAKE_C_STANDARD_COMPUTED_DEFAULT	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_C_STANDARD_COMPUTED_DEFAULT "11")$/;"	v
CMAKE_EXE_LINKER_FLAGS	vendor/spdlog/cmake/sanitizers.cmake	/^    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${SANITIZER_FLAGS} -fuse-ld=gold")$/;"	v
CMAKE_HOST_SYSTEM	build/default/CMakeFiles/3.13.1/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM "Linux-4.20.0-arch1-1-ARCH")$/;"	v
CMAKE_HOST_SYSTEM_NAME	build/default/CMakeFiles/3.13.1/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_NAME "Linux")$/;"	v
CMAKE_HOST_SYSTEM_PROCESSOR	build/default/CMakeFiles/3.13.1/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_PROCESSOR "x86_64")$/;"	v
CMAKE_HOST_SYSTEM_VERSION	build/default/CMakeFiles/3.13.1/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_VERSION "4.20.0-arch1-1-ARCH")$/;"	v
CMAKE_INSTALL_COMPONENT	build/default/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT "${COMPONENT}")$/;"	v
CMAKE_INSTALL_COMPONENT	build/default/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT)$/;"	v
CMAKE_INSTALL_CONFIG_NAME	build/default/cmake_install.cmake	/^    set(CMAKE_INSTALL_CONFIG_NAME "")$/;"	v
CMAKE_INSTALL_MANIFEST	build/default/cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest.txt")$/;"	v
CMAKE_INSTALL_MANIFEST	build/default/cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest_${CMAKE_INSTALL_COMPONENT}.txt")$/;"	v
CMAKE_INSTALL_PREFIX	build/default/cmake_install.cmake	/^  set(CMAKE_INSTALL_PREFIX "\/usr\/local")$/;"	v
CMAKE_INSTALL_SO_NO_EXE	build/default/cmake_install.cmake	/^  set(CMAKE_INSTALL_SO_NO_EXE "0")$/;"	v
CMAKE_INTERNAL_PLATFORM_ABI	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_C_COMPILER_ABI}")$/;"	v
CMAKE_INTERNAL_PLATFORM_ABI	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_CXX_COMPILER_ABI}")$/;"	v
CMAKE_LIBRARY_ARCHITECTURE	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^  set(CMAKE_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_LIBRARY_ARCHITECTURE	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^  set(CMAKE_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_LINKER	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_LINKER "\/usr\/bin\/ld")$/;"	v
CMAKE_LINKER	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_LINKER "\/usr\/bin\/ld")$/;"	v
CMAKE_RANLIB	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^set(CMAKE_RANLIB "\/usr\/bin\/ranlib")$/;"	v
CMAKE_RANLIB	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^set(CMAKE_RANLIB "\/usr\/bin\/ranlib")$/;"	v
CMAKE_SIZEOF_VOID_P	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^  set(CMAKE_SIZEOF_VOID_P "${CMAKE_C_SIZEOF_DATA_PTR}")$/;"	v
CMAKE_SIZEOF_VOID_P	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^  set(CMAKE_SIZEOF_VOID_P "${CMAKE_CXX_SIZEOF_DATA_PTR}")$/;"	v
CMAKE_SYSTEM	build/default/CMakeFiles/3.13.1/CMakeSystem.cmake	/^set(CMAKE_SYSTEM "Linux-4.20.0-arch1-1-ARCH")$/;"	v
CMAKE_SYSTEM_LOADED	build/default/CMakeFiles/3.13.1/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_LOADED 1)$/;"	v
CMAKE_SYSTEM_NAME	build/default/CMakeFiles/3.13.1/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_NAME "Linux")$/;"	v
CMAKE_SYSTEM_PROCESSOR	build/default/CMakeFiles/3.13.1/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_PROCESSOR "x86_64")$/;"	v
CMAKE_SYSTEM_VERSION	build/default/CMakeFiles/3.13.1/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_VERSION "4.20.0-arch1-1-ARCH")$/;"	v
CODE_EVENTS_LIST	dependencies/include/v8-profiler.h	/^#define CODE_EVENTS_LIST(/;"	d
COMPILER	dependencies/include/v8.h	/^  COMPILER,$/;"	e	enum:v8::StateTag
COMPILER_ID	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_VERSION_INTERNAL	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_MAJOR	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MINOR	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_PATCH	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_TWEAK	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
CPP_FILES	vendor/spdlog/tests/Makefile	/^CPP_FILES := $(wildcard *.cpp)$/;"	m
CXX	vendor/spdlog/bench/Makefile	/^CXX	?= g++$/;"	m
CXX	vendor/spdlog/example/Makefile	/^CXX	?= g++$/;"	m
CXX	vendor/spdlog/tests/Makefile	/^CXX	?= g++$/;"	m
CXX_DEBUG_FLAGS	vendor/spdlog/example/Makefile	/^CXX_DEBUG_FLAGS= -g$/;"	m
CXX_RELEASE_FLAGS	vendor/spdlog/bench/Makefile	/^CXX_RELEASE_FLAGS = -O3 -flto -Wl,--no-as-needed$/;"	m
CXX_RELEASE_FLAGS	vendor/spdlog/example/Makefile	/^CXX_RELEASE_FLAGS = -O3 -march=native$/;"	m
CXX_STD	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define CXX_STD /;"	d	file:
CYAN	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    const WORD CYAN = FOREGROUND_GREEN | FOREGROUND_BLUE;$/;"	m	class:spdlog::sinks::wincolor_sink	typeref:typename:const WORD
CYGWIN	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^  set(CYGWIN 1)$/;"	v
CYGWIN	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^  set(CYGWIN 1)$/;"	v
C_DIALECT	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT /;"	d	file:
C_DIALECT	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT$/;"	d	file:
C_DIALECT	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^# define C_DIALECT /;"	d	file:
C_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit C_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::C_formatter
C_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class C_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
CachedData	dependencies/include/v8.h	/^    CachedData()$/;"	f	struct:v8::ScriptCompiler::CachedData
CachedData	dependencies/include/v8.h	/^  struct V8_EXPORT CachedData {$/;"	s	class:v8::ScriptCompiler
CallBlockingTaskOnWorkerThread	dependencies/include/v8-platform.h	/^  virtual void CallBlockingTaskOnWorkerThread(std::unique_ptr<Task> task) {$/;"	f	class:v8::Platform	typeref:typename:void
CallIdleOnForegroundThread	dependencies/include/v8-platform.h	/^      virtual void CallIdleOnForegroundThread(Isolate* isolate,$/;"	f	class:v8::Platform	typeref:typename:V8_DEPRECATE_SOON ("",virtual void)
Callback	dependencies/include/v8.h	/^  typedef void (*Callback)(const WeakCallbackInfo<T>& data);$/;"	t	class:v8::WeakCallbackInfo	typeref:typename:void (*)(const WeakCallbackInfo<T> & data)
Cast	dependencies/include/v8.h	/^  V8_INLINE static Persistent<T>& Cast(const Persistent<S>& that) {  \/\/ NOLINT$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE Persistent<T> &
Cast	dependencies/include/v8.h	/^  template <class S> V8_INLINE static Local<T> Cast(Local<S> that) {$/;"	f	class:v8::Local	typeref:typename:V8_INLINE Local<T>
CastCheck	dependencies/include/v8-internal.h	/^struct CastCheck {$/;"	s	namespace:v8::internal
Catch	vendor/spdlog/tests/catch.hpp	/^    namespace Catch {$/;"	n
Catch	vendor/spdlog/tests/catch.hpp	/^    namespace Catch{$/;"	n
Catch	vendor/spdlog/tests/catch.hpp	/^namespace Catch {$/;"	n
Catch	vendor/spdlog/tests/catch.hpp	/^namespace Catch$/;"	n
Catch	vendor/spdlog/tests/catch.hpp	/^namespace Catch{$/;"	n
CategoryGroupEnabledFlags	dependencies/include/libplatform/v8-tracing.h	/^  enum CategoryGroupEnabledFlags {$/;"	g	class:v8::platform::tracing::TracingController
Channel	dependencies/include/v8-inspector.h	/^  class V8_EXPORT Channel {$/;"	c	class:v8_inspector::V8Inspector
Char	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^    typedef typename Context::char_type Char;$/;"	t	function:internal::char_converter::operator ()	typeref:typename:Context::char_type
Char	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  typedef typename Context::char_type Char;$/;"	t	class:internal::arg_converter	typeref:typename:Context::char_type
CheckInitialized	dependencies/include/v8-internal.h	/^  V8_INLINE static void CheckInitialized(v8::Isolate* isolate) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE void
ChildNodes	vendor/spdlog/tests/catch.hpp	/^            typedef std::vector<Ptr<ChildNodeT> > ChildNodes;$/;"	t	struct:Catch::CumulativeReporterBase::Node	typeref:typename:std::vector<Ptr<ChildNodeT>>
ChildSections	vendor/spdlog/tests/catch.hpp	/^            typedef std::vector<Ptr<SectionNode> > ChildSections;$/;"	t	struct:Catch::CumulativeReporterBase::SectionNode	typeref:typename:std::vector<Ptr<SectionNode>>
Chunk	dependencies/include/SFML/Audio/SoundStream.hpp	/^    struct Chunk$/;"	s	class:sf::SoundStream
CircleShape	dependencies/include/SFML/Graphics/CircleShape.hpp	/^class SFML_GRAPHICS_API CircleShape : public Shape$/;"	c	namespace:sf
Clara	vendor/spdlog/tests/catch.hpp	/^namespace Clara {$/;"	n
Clear	dependencies/include/v8-util.h	/^  static void Clear(Impl* impl) {$/;"	f	class:v8::DefaultPersistentValueVectorTraits	typeref:typename:void
Clear	dependencies/include/v8-util.h	/^  void Clear() {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:void
Clear	dependencies/include/v8-util.h	/^  void Clear() {$/;"	f	class:v8::PersistentValueVector	typeref:typename:void
Clear	dependencies/include/v8.h	/^  V8_INLINE void Clear() { val_ = nullptr; }$/;"	f	class:v8::Local	typeref:typename:V8_INLINE void
ClearAndLeak	dependencies/include/v8-util.h	/^  static PersistentContainerValue ClearAndLeak(Global<V>* persistent) {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:PersistentContainerValue
ClearAndLeak	dependencies/include/v8-util.h	/^  static PersistentContainerValue ClearAndLeak(Global<V>* persistent) {$/;"	f	class:v8::PersistentValueVector	typeref:typename:PersistentContainerValue
ClearWeak	dependencies/include/v8.h	/^  V8_INLINE void ClearWeak() { ClearWeak<void>(); }$/;"	f	class:v8::PersistentBase	typeref:typename:V8_INLINE void
Client	dependencies/include/v8.h	/^  class Client {$/;"	c	class:v8::WasmStreaming
Clipboard	dependencies/include/SFML/Window/Clipboard.hpp	/^class SFML_WINDOW_API Clipboard$/;"	c	namespace:sf
Clock	dependencies/include/SFML/System/Clock.hpp	/^class SFML_SYSTEM_API Clock$/;"	c	namespace:sf
Cloning loggers	vendor/spdlog/README.md	/^#### Cloning loggers $/;"	t
Close	dependencies/include/SFML/Window/WindowStyle.hpp	/^        Close      = 1 << 2, \/\/\/< Title bar + close button$/;"	e	enum:sf::Style::__anonc2dbfd350103
Closed	dependencies/include/SFML/Window/Event.hpp	/^        Closed,                 \/\/\/< The window requested to be closed (no data)$/;"	e	enum:sf::Event::EventType
ClosingConnection	dependencies/include/SFML/Network/Ftp.hpp	/^            ClosingConnection     = 221, \/\/\/< Service closing control connection$/;"	e	enum:sf::Ftp::Response::Status
ClosingDataConnection	dependencies/include/SFML/Network/Ftp.hpp	/^            ClosingDataConnection = 226, \/\/\/< Closing data connection, requested file action /;"	e	enum:sf::Ftp::Response::Status
Code	vendor/spdlog/tests/catch.hpp	/^        enum Code {$/;"	g	struct:Catch::Colour
CodeEvent	dependencies/include/v8-profiler.h	/^class V8_EXPORT CodeEvent {$/;"	c	namespace:v8
CodeEventHandler	dependencies/include/v8-profiler.h	/^class V8_EXPORT CodeEventHandler {$/;"	c	namespace:v8
CodeEventType	dependencies/include/v8-profiler.h	/^enum CodeEventType {$/;"	g	namespace:v8
Color	dependencies/include/SFML/Graphics/Color.hpp	/^class SFML_GRAPHICS_API Color$/;"	c	namespace:sf
Colour	vendor/spdlog/tests/catch.hpp	/^    Colour::Colour( Code _colourCode ) : m_moved( false ) { use( _colourCode ); }$/;"	f	class:Catch::Colour
Colour	vendor/spdlog/tests/catch.hpp	/^    Colour::Colour( Colour const& _other ) : m_moved( false ) { const_cast<Colour&>( _other ).m_/;"	f	class:Catch::Colour
Colour	vendor/spdlog/tests/catch.hpp	/^    struct Colour {$/;"	s	namespace:Catch
Comma	dependencies/include/SFML/Window/Keyboard.hpp	/^        Comma,        \/\/\/< The , key$/;"	e	enum:sf::Keyboard::Key
CommandLine	vendor/spdlog/tests/catch.hpp	/^        CommandLine( CommandLine const& other )$/;"	f	class:Clara::CommandLine
CommandLine	vendor/spdlog/tests/catch.hpp	/^        CommandLine()$/;"	f	class:Clara::CommandLine
CommandLine	vendor/spdlog/tests/catch.hpp	/^    class CommandLine {$/;"	c	namespace:Clara
CommandNotImplemented	dependencies/include/SFML/Network/Ftp.hpp	/^            CommandNotImplemented   = 502, \/\/\/< Command not implemented$/;"	e	enum:sf::Ftp::Response::Status
CommandUnknown	dependencies/include/SFML/Network/Ftp.hpp	/^            CommandUnknown          = 500, \/\/\/< Syntax error, command unrecognized$/;"	e	enum:sf::Ftp::Response::Status
CommonArgProperties	vendor/spdlog/tests/catch.hpp	/^        CommonArgProperties( Detail::BoundArgFunction<ConfigT> const& _boundField ) : boundField/;"	f	struct:Clara::CommonArgProperties
CommonArgProperties	vendor/spdlog/tests/catch.hpp	/^        CommonArgProperties() {}$/;"	f	struct:Clara::CommonArgProperties
CommonArgProperties	vendor/spdlog/tests/catch.hpp	/^    struct CommonArgProperties {$/;"	s	namespace:Clara
CompactReporter	vendor/spdlog/tests/catch.hpp	/^        CompactReporter( ReporterConfig const& _config )$/;"	f	struct:Catch::CompactReporter
CompactReporter	vendor/spdlog/tests/catch.hpp	/^    struct CompactReporter : StreamingReporterBase {$/;"	s	namespace:Catch
CompileOptions	dependencies/include/v8.h	/^  enum CompileOptions {$/;"	g	class:v8::ScriptCompiler
CompiledWasmModule	dependencies/include/v8.h	/^class V8_EXPORT CompiledWasmModule {$/;"	c	namespace:v8
Completed	vendor/spdlog/tests/catch.hpp	/^            Completed$/;"	e	enum:Catch::SectionTracking::TrackedSection::RunState
CompositeGenerator	vendor/spdlog/tests/catch.hpp	/^    CompositeGenerator( CompositeGenerator& other )$/;"	f	class:Catch::CompositeGenerator
CompositeGenerator	vendor/spdlog/tests/catch.hpp	/^    CompositeGenerator() : m_totalSize( 0 ) {}$/;"	f	class:Catch::CompositeGenerator
CompositeGenerator	vendor/spdlog/tests/catch.hpp	/^class CompositeGenerator {$/;"	c	namespace:Catch
Config	vendor/spdlog/tests/catch.hpp	/^        Config( ConfigData const& data )$/;"	f	class:Catch::Config
Config	vendor/spdlog/tests/catch.hpp	/^        Config()$/;"	f	class:Catch::Config
Config	vendor/spdlog/tests/catch.hpp	/^    class Config : public SharedImpl<IConfig> {$/;"	c	namespace:Catch
ConfigData	vendor/spdlog/tests/catch.hpp	/^        ConfigData()$/;"	f	struct:Catch::ConfigData
ConfigData	vendor/spdlog/tests/catch.hpp	/^    struct ConfigData {$/;"	s	namespace:Catch
Configuring and running an instance of V8	dependencies/include/APIDesign.md	/^# Configuring and running an instance of V8$/;"	c
ConnectionClosed	dependencies/include/SFML/Network/Ftp.hpp	/^            ConnectionClosed = 1002, \/\/\/< Not part of the FTP standard, generated by SFML whe/;"	e	enum:sf::Ftp::Response::Status
ConnectionFailed	dependencies/include/SFML/Network/Ftp.hpp	/^            ConnectionFailed = 1001, \/\/\/< Not part of the FTP standard, generated by SFML whe/;"	e	enum:sf::Ftp::Response::Status
ConnectionFailed	dependencies/include/SFML/Network/Http.hpp	/^            ConnectionFailed = 1001  \/\/\/< Connection with server failed$/;"	e	enum:sf::Http::Response::Status
ConsoleReporter	vendor/spdlog/tests/catch.hpp	/^        ConsoleReporter( ReporterConfig const& _config )$/;"	f	struct:Catch::ConsoleReporter
ConsoleReporter	vendor/spdlog/tests/catch.hpp	/^    struct ConsoleReporter : StreamingReporterBase {$/;"	s	namespace:Catch
ConstIterator	dependencies/include/SFML/System/String.hpp	/^    typedef std::basic_string<Uint32>::const_iterator ConstIterator; \/\/\/< Read-only iterator /;"	t	class:sf::String	typeref:typename:std::basic_string<Uint32>::const_iterator
ConstructorBehavior	dependencies/include/v8.h	/^enum class ConstructorBehavior { kThrow, kAllow };$/;"	g	namespace:v8
Contains	dependencies/include/v8-util.h	/^  bool Contains(const K& key) {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:bool
Contains	vendor/spdlog/tests/catch.hpp	/^                Contains( NSString* substr ) : StringHolder( substr ){}$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::Contains
Contains	vendor/spdlog/tests/catch.hpp	/^            Contains( Contains const& other ) : m_substr( other.m_substr ){}$/;"	f	struct:Catch::Matchers::Impl::StdString::Contains
Contains	vendor/spdlog/tests/catch.hpp	/^            Contains( NSString* substr ){ return Impl::NSStringMatchers::Contains( substr ); }$/;"	f	namespace:Catch::Matchers	typeref:typename:Impl::NSStringMatchers::Contains
Contains	vendor/spdlog/tests/catch.hpp	/^            Contains( std::string const& substr ) : m_substr( substr ){}$/;"	f	struct:Catch::Matchers::Impl::StdString::Contains
Contains	vendor/spdlog/tests/catch.hpp	/^            struct Contains : StringHolder<Contains> {$/;"	s	namespace:Catch::Matchers::Impl::NSStringMatchers
Contains	vendor/spdlog/tests/catch.hpp	/^        struct Contains : MatcherImpl<Contains, std::string> {$/;"	s	namespace:Catch::Matchers::Impl::StdString
Contains	vendor/spdlog/tests/catch.hpp	/^    inline Impl::StdString::Contains    Contains( const char* substr ) {$/;"	f	namespace:Catch::Matchers	typeref:typename:Impl::StdString::Contains
Contains	vendor/spdlog/tests/catch.hpp	/^    inline Impl::StdString::Contains    Contains( std::string const& substr ) {$/;"	f	namespace:Catch::Matchers	typeref:typename:Impl::StdString::Contains
Contents	dependencies/include/v8.h	/^    Contents()$/;"	f	class:v8::ArrayBuffer::Contents
Contents	dependencies/include/v8.h	/^    Contents()$/;"	f	class:v8::SharedArrayBuffer::Contents
Contents	dependencies/include/v8.h	/^  class V8_EXPORT Contents {  \/\/ NOLINT$/;"	c	class:v8::SharedArrayBuffer
Contents	dependencies/include/v8.h	/^  class V8_EXPORT Contents { \/\/ NOLINT$/;"	c	class:v8::ArrayBuffer
Context	dependencies/include/SFML/Window/Context.hpp	/^class SFML_WINDOW_API Context : GlResource, NonCopyable$/;"	c	namespace:sf
Context	vendor/spdlog/tests/catch.hpp	/^        Context() : m_config( NULL ), m_runner( NULL ), m_resultCapture( NULL ) {}$/;"	f	class:Catch::Context
Context	vendor/spdlog/tests/catch.hpp	/^    class Context : public IMutableContext {$/;"	c	namespace:Catch
ContextDestroyCallback	dependencies/include/SFML/Window/GlResource.hpp	/^typedef void(*ContextDestroyCallback)(void*);$/;"	t	namespace:sf	typeref:typename:void (*)(void *)
ContextSettings	dependencies/include/SFML/Window/ContextSettings.hpp	/^    explicit ContextSettings(unsigned int depth = 0, unsigned int stencil = 0, unsigned int anti/;"	f	struct:sf::ContextSettings
ContextSettings	dependencies/include/SFML/Window/ContextSettings.hpp	/^struct ContextSettings$/;"	s	namespace:sf
ContinueOnFailure	vendor/spdlog/tests/catch.hpp	/^        ContinueOnFailure = 0x01,   \/\/ Failures fail test, but execution continues$/;"	e	enum:Catch::ResultDisposition::Flags
ControlOption	dependencies/include/v8-profiler.h	/^  enum ControlOption {$/;"	g	class:v8::ActivityControl
ConvertableToTraceFormat	dependencies/include/v8-platform.h	/^class ConvertableToTraceFormat {$/;"	c	namespace:v8
ConvexShape	dependencies/include/SFML/Graphics/ConvexShape.hpp	/^class SFML_GRAPHICS_API ConvexShape : public Shape$/;"	c	namespace:sf
CoordinateType	dependencies/include/SFML/Graphics/Texture.hpp	/^    enum CoordinateType$/;"	g	class:sf::Texture
Copy	dependencies/include/v8.h	/^  V8_INLINE static void Copy(const Persistent<S, M>& source,$/;"	f	class:v8::NonCopyablePersistentTraits	typeref:typename:V8_INLINE void
Copy	dependencies/include/v8.h	/^  static V8_INLINE void Copy(const Persistent<S, M>& source,$/;"	f	struct:v8::CopyablePersistentTraits	typeref:typename:V8_INLINE void
CopyablePersistent	dependencies/include/v8.h	/^  typedef Persistent<T, CopyablePersistentTraits<T> > CopyablePersistent;$/;"	t	struct:v8::CopyablePersistentTraits	typeref:typename:Persistent<T,CopyablePersistentTraits<T>>
CopyablePersistentTraits	dependencies/include/v8.h	/^struct CopyablePersistentTraits {$/;"	s	namespace:v8
CopyableStream	vendor/spdlog/tests/catch.hpp	/^        CopyableStream( CopyableStream const& other ) {$/;"	f	struct:Catch::CopyableStream
CopyableStream	vendor/spdlog/tests/catch.hpp	/^        CopyableStream() {}$/;"	f	struct:Catch::CopyableStream
CopyableStream	vendor/spdlog/tests/catch.hpp	/^    struct CopyableStream {$/;"	s	namespace:Catch
Core	dependencies/include/SFML/Window/ContextSettings.hpp	/^        Core    = 1 << 0, \/\/\/< Core attribute$/;"	e	enum:sf::ContextSettings::Attribute
Count	dependencies/include/SFML/Window/Event.hpp	/^        Count                   \/\/\/< Keep last -- the total number of event types$/;"	e	enum:sf::Event::EventType
Count	dependencies/include/SFML/Window/Joystick.hpp	/^        Count       = 8,  \/\/\/< Maximum number of supported joysticks$/;"	e	enum:sf::Joystick::__anon1e23a3bc0103
Count	dependencies/include/SFML/Window/Sensor.hpp	/^        Count             \/\/\/< Keep last -- the total number of sensor types$/;"	e	enum:sf::Sensor::Type
Counts	vendor/spdlog/tests/catch.hpp	/^        Counts() : passed( 0 ), failed( 0 ), failedButOk( 0 ) {}$/;"	f	struct:Catch::Counts
Counts	vendor/spdlog/tests/catch.hpp	/^    struct Counts {$/;"	s	namespace:Catch
CpuProfile	dependencies/include/v8-profiler.h	/^class V8_EXPORT CpuProfile {$/;"	c	namespace:v8
CpuProfileDeoptFrame	dependencies/include/v8-profiler.h	/^struct CpuProfileDeoptFrame {$/;"	s	namespace:v8
CpuProfileDeoptInfo	dependencies/include/v8-profiler.h	/^struct V8_EXPORT CpuProfileDeoptInfo {$/;"	s	namespace:v8
CpuProfileNode	dependencies/include/v8-profiler.h	/^class V8_EXPORT CpuProfileNode {$/;"	c	namespace:v8
CpuProfiler	dependencies/include/v8-profiler.h	/^class V8_EXPORT CpuProfiler {$/;"	c	namespace:v8
CpuProfilingMode	dependencies/include/v8-profiler.h	/^enum CpuProfilingMode {$/;"	g	namespace:v8
Created	dependencies/include/SFML/Network/Http.hpp	/^            Created        = 201, \/\/\/< The resource has successfully been created$/;"	e	enum:sf::Http::Response::Status
CreationContext	dependencies/include/v8.h	/^  V8_INLINE static Local<Context> CreationContext($/;"	f	class:v8::Object	typeref:typename:V8_INLINE Local<Context>
Cross	dependencies/include/SFML/Window/Cursor.hpp	/^        Cross,                  \/\/\/< Crosshair cursor$/;"	e	enum:sf::Cursor::Type
CumulativeReporterBase	vendor/spdlog/tests/catch.hpp	/^        CumulativeReporterBase( ReporterConfig const& _config )$/;"	f	struct:Catch::CumulativeReporterBase
CumulativeReporterBase	vendor/spdlog/tests/catch.hpp	/^    struct CumulativeReporterBase : SharedImpl<IStreamingReporter> {$/;"	s	namespace:Catch
CurrentTexture	dependencies/include/SFML/Graphics/Shader.hpp	/^    static CurrentTextureType CurrentTexture;$/;"	m	class:sf::Shader	typeref:typename:CurrentTextureType
CurrentTextureType	dependencies/include/SFML/Graphics/Shader.hpp	/^    struct CurrentTextureType {};$/;"	s	class:sf::Shader
CurrentValueSerializerFormatVersion	dependencies/include/v8-value-serializer-version.h	/^constexpr uint32_t CurrentValueSerializerFormatVersion() { return 13; }$/;"	f	namespace:v8	typeref:typename:uint32_t
Cursor	dependencies/include/SFML/Window/Cursor.hpp	/^class SFML_WINDOW_API Cursor : NonCopyable$/;"	c	namespace:sf
Custom error handler	vendor/spdlog/README.md	/^#### Custom error handler$/;"	t
Cyan	dependencies/include/SFML/Graphics/Color.hpp	/^    static const Color Cyan;        \/\/\/< Cyan predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
Cyan	vendor/spdlog/tests/catch.hpp	/^            Cyan,$/;"	e	enum:Catch::Colour::Code
D	dependencies/include/SFML/Window/Keyboard.hpp	/^        D,            \/\/\/< The D key$/;"	e	enum:sf::Keyboard::Key
DATA_SIZE	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  static const size_t DATA_SIZE =$/;"	m	class:format_arg_store	typeref:typename:const size_t
DEC	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#define DEC(/;"	d	file:
DEC	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:
DEFAULT	dependencies/include/v8.h	/^  DEFAULT               = 0,$/;"	e	enum:v8::AccessControl
DIGITS	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^const char basic_data<T>::DIGITS[] =$/;"	m	class:internal::basic_data<T>	typeref:typename:const char[]
DIGITS	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  static const char DIGITS[];$/;"	m	struct:internal::basic_data	typeref:typename:const char[]
DISABLED	dependencies/include/libplatform/v8-tracing.h	/^  enum Mode { DISABLED = 0, RECORDING_MODE };$/;"	e	enum:v8::platform::tracing::TracingController::Mode
D_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit D_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::D_formatter
D_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class D_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
Daily files	vendor/spdlog/README.md	/^#### Daily files$/;"	t
Dash	dependencies/include/SFML/Window/Keyboard.hpp	/^        Dash      = Hyphen,       \/\/\/< \\deprecated Use Hyphen instead$/;"	e	enum:sf::Keyboard::Key
Data	dependencies/include/SFML/Network/TcpSocket.hpp	/^        std::vector<char> Data;         \/\/\/< Data of the packet$/;"	m	struct:sf::TcpSocket::PendingPacket	typeref:typename:std::vector<char>
Data	dependencies/include/v8.h	/^    void* Data() const { return data_; }$/;"	f	class:v8::ArrayBuffer::Contents	typeref:typename:void *
Data	dependencies/include/v8.h	/^    void* Data() const { return data_; }$/;"	f	class:v8::SharedArrayBuffer::Contents	typeref:typename:void *
Data	dependencies/include/v8.h	/^class V8_EXPORT Data {$/;"	c	namespace:v8
DataConnectionAlreadyOpened	dependencies/include/SFML/Network/Ftp.hpp	/^            DataConnectionAlreadyOpened = 125, \/\/\/< Data connection already opened, transfer /;"	e	enum:sf::Ftp::Response::Status
DataConnectionOpened	dependencies/include/SFML/Network/Ftp.hpp	/^            DataConnectionOpened  = 225, \/\/\/< Data connection open, no transfer in progress$/;"	e	enum:sf::Ftp::Response::Status
DataConnectionUnavailable	dependencies/include/SFML/Network/Ftp.hpp	/^            DataConnectionUnavailable = 425, \/\/\/< Can't open data connection$/;"	e	enum:sf::Ftp::Response::Status
DataView	dependencies/include/v8.h	/^class V8_EXPORT DataView : public ArrayBufferView {$/;"	c	namespace:v8
Date	dependencies/include/v8.h	/^class V8_EXPORT Date : public Object {$/;"	c	namespace:v8
Debug	dependencies/include/SFML/Window/ContextSettings.hpp	/^        Debug   = 1 << 2  \/\/\/< Debug attribute$/;"	e	enum:sf::ContextSettings::Attribute
Debugger	dependencies/include/v8-inspector.h	/^namespace Debugger {$/;"	n	namespace:v8_inspector::protocol
Default	dependencies/include/SFML/Graphics/RenderStates.hpp	/^    static const RenderStates Default; \/\/\/< Special instance holding the default render state/;"	m	class:sf::RenderStates	typeref:typename:const RenderStates
Default	dependencies/include/SFML/Window/ContextSettings.hpp	/^        Default = 0,      \/\/\/< Non-debug, compatibility context (this and the core attribute /;"	e	enum:sf::ContextSettings::Attribute
Default	dependencies/include/SFML/Window/WindowStyle.hpp	/^        Default = Titlebar | Resize | Close \/\/\/< Default window style$/;"	e	enum:sf::Style::__anonc2dbfd350103
DefaultForReporter	vendor/spdlog/tests/catch.hpp	/^        DefaultForReporter,$/;"	e	enum:Catch::ShowDurations::OrNot
DefaultGlobalMapTraits	dependencies/include/v8-util.h	/^class DefaultGlobalMapTraits : public StdMapTraits<K, V> {$/;"	c	namespace:v8
DefaultPersistentValueMapTraits	dependencies/include/v8-util.h	/^class DefaultPersistentValueMapTraits : public StdMapTraits<K, V> {$/;"	c	namespace:v8
DefaultPersistentValueVectorTraits	dependencies/include/v8-util.h	/^class DefaultPersistentValueVectorTraits {$/;"	c	namespace:v8
Delegate	dependencies/include/v8.h	/^  class V8_EXPORT Delegate {$/;"	c	class:v8::ValueDeserializer
Delegate	dependencies/include/v8.h	/^  class V8_EXPORT Delegate {$/;"	c	class:v8::ValueSerializer
Delete	dependencies/include/SFML/Network/Http.hpp	/^            Delete \/\/\/< Request in delete mode, useful for a REST API$/;"	e	enum:sf::Http::Request::Method
Delete	dependencies/include/SFML/Window/Keyboard.hpp	/^        Delete,       \/\/\/< The Delete key$/;"	e	enum:sf::Keyboard::Key
Deleter	dependencies/include/v8.h	/^    DeleterCallback Deleter() const { return deleter_; }$/;"	f	class:v8::ArrayBuffer::Contents	typeref:typename:DeleterCallback
Deleter	dependencies/include/v8.h	/^    DeleterCallback Deleter() const { return deleter_; }$/;"	f	class:v8::SharedArrayBuffer::Contents	typeref:typename:DeleterCallback
DeleterCallback	dependencies/include/v8.h	/^    using DeleterCallback = void (*)(void* buffer, size_t length, void* info);$/;"	t	class:v8::ArrayBuffer::Contents
DeleterCallback	dependencies/include/v8.h	/^    using DeleterCallback = void (*)(void* buffer, size_t length, void* info);$/;"	t	class:v8::SharedArrayBuffer::Contents
DeleterData	dependencies/include/v8.h	/^    void* DeleterData() const { return deleter_data_; }$/;"	f	class:v8::ArrayBuffer::Contents	typeref:typename:void *
DeleterData	dependencies/include/v8.h	/^    void* DeleterData() const { return deleter_data_; }$/;"	f	class:v8::SharedArrayBuffer::Contents	typeref:typename:void *
Detail	vendor/spdlog/tests/catch.hpp	/^    namespace Detail {$/;"	n	namespace:Catch
Detail	vendor/spdlog/tests/catch.hpp	/^    namespace Detail {$/;"	n	namespace:Clara
Detail	vendor/spdlog/tests/catch.hpp	/^    namespace Detail{$/;"	n	namespace:Catch
Detail	vendor/spdlog/tests/catch.hpp	/^namespace Detail {$/;"	n	namespace:Catch
DidntThrowException	vendor/spdlog/tests/catch.hpp	/^        DidntThrowException = Exception | 2,$/;"	e	enum:Catch::ResultWas::OfType
DirectoryOk	dependencies/include/SFML/Network/Ftp.hpp	/^            DirectoryOk           = 257, \/\/\/< PATHNAME created$/;"	e	enum:sf::Ftp::Response::Status
DirectoryResponse	dependencies/include/SFML/Network/Ftp.hpp	/^    class SFML_NETWORK_API DirectoryResponse : public Response$/;"	c	class:sf::Ftp
DirectoryStatus	dependencies/include/SFML/Network/Ftp.hpp	/^            DirectoryStatus       = 212, \/\/\/< Directory status$/;"	e	enum:sf::Ftp::Response::Status
Disable	vendor/spdlog/tests/catch.hpp	/^        typedef void Disable;$/;"	t	struct:Catch::FalseType	typeref:typename:void
DiscardSystemPages	dependencies/include/v8-platform.h	/^  virtual bool DiscardSystemPages(void* address, size_t size) { return true; }$/;"	f	class:v8::PageAllocator	typeref:typename:bool
Disconnected	dependencies/include/SFML/Network/Socket.hpp	/^        Disconnected, \/\/\/< The TCP socket has been disconnected$/;"	e	enum:sf::Socket::Status
Dispose	dependencies/include/v8-util.h	/^  static void Dispose(Isolate* isolate, Global<V> value, K key) {}$/;"	f	class:v8::DefaultGlobalMapTraits	typeref:typename:void
Dispose	dependencies/include/v8-util.h	/^  static void Dispose(Isolate* isolate, Global<V> value, K key) {}$/;"	f	class:v8::DefaultPersistentValueMapTraits	typeref:typename:void
Dispose	dependencies/include/v8.h	/^    virtual void Dispose() { delete this; }$/;"	f	class:v8::String::ExternalStringResourceBase	typeref:typename:void
DisposeCallbackData	dependencies/include/v8-util.h	/^  static void DisposeCallbackData(WeakCallbackDataType* data) { }$/;"	f	class:v8::DefaultPersistentValueMapTraits	typeref:typename:void
DisposeCallbackData	dependencies/include/v8-util.h	/^  static void DisposeCallbackData(WeakCallbackDataType* data) {}$/;"	f	class:v8::DefaultGlobalMapTraits	typeref:typename:void
DisposeWeak	dependencies/include/v8-util.h	/^  static void DisposeWeak(const WeakCallbackInfo<WeakCallbackDataType>& data) {}$/;"	f	class:v8::DefaultGlobalMapTraits	typeref:typename:void
Divide	dependencies/include/SFML/Window/Keyboard.hpp	/^        Divide,       \/\/\/< The \/ key$/;"	e	enum:sf::Keyboard::Key
DoWhat	vendor/spdlog/tests/catch.hpp	/^        struct OnUnusedOptions { enum DoWhat { Ignore, Fail }; };$/;"	g	struct:Catch::Session::OnUnusedOptions
Documentation	vendor/spdlog/README.md	/^## Documentation$/;"	s
Done	dependencies/include/SFML/Network/Socket.hpp	/^        Done,         \/\/\/< The socket has sent \/ received the data$/;"	e	enum:sf::Socket::Status
DontDelete	dependencies/include/v8.h	/^  DontDelete = 1 << 2$/;"	e	enum:v8::PropertyAttribute
DontEnum	dependencies/include/v8.h	/^  DontEnum = 1 << 1,$/;"	e	enum:v8::PropertyAttribute
Down	dependencies/include/SFML/Window/Keyboard.hpp	/^        Down,         \/\/\/< Down arrow$/;"	e	enum:sf::Keyboard::Key
Drawable	dependencies/include/SFML/Graphics/Drawable.hpp	/^class SFML_GRAPHICS_API Drawable$/;"	c	namespace:sf
DstAlpha	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        DstAlpha,         \/\/\/< (dst.a, dst.a, dst.a, dst.a)$/;"	e	enum:sf::BlendMode::Factor
DstColor	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        DstColor,         \/\/\/< (dst.r, dst.g, dst.b, dst.a)$/;"	e	enum:sf::BlendMode::Factor
DumpWithoutCrashing	dependencies/include/v8-platform.h	/^  virtual void DumpWithoutCrashing() {}$/;"	f	class:v8::Platform	typeref:typename:void
Dynamic	dependencies/include/SFML/Graphics/VertexBuffer.hpp	/^        Dynamic, \/\/\/< Occasionally changing data$/;"	e	enum:sf::VertexBuffer::Usage
E	dependencies/include/SFML/Window/Keyboard.hpp	/^        E,            \/\/\/< The E key$/;"	e	enum:sf::Keyboard::Key
ECHO_TO_CONSOLE	dependencies/include/libplatform/v8-tracing.h	/^  ECHO_TO_CONSOLE,$/;"	e	enum:v8::platform::tracing::TraceRecordMode
ECMAScript-like capabilities	dependencies/include/APIDesign.md	/^# ECMAScript-like capabilities$/;"	c
ENABLED_FOR_ETW_EXPORT	dependencies/include/libplatform/v8-tracing.h	/^    ENABLED_FOR_ETW_EXPORT = 1 << 3$/;"	e	enum:v8::platform::tracing::TracingController::CategoryGroupEnabledFlags
ENABLED_FOR_EVENT_CALLBACK	dependencies/include/libplatform/v8-tracing.h	/^    ENABLED_FOR_EVENT_CALLBACK = 1 << 2,$/;"	e	enum:v8::platform::tracing::TracingController::CategoryGroupEnabledFlags
ENABLED_FOR_RECORDING	dependencies/include/libplatform/v8-tracing.h	/^    ENABLED_FOR_RECORDING = 1 << 0,$/;"	e	enum:v8::platform::tracing::TracingController::CategoryGroupEnabledFlags
EXTERNAL	dependencies/include/v8.h	/^  EXTERNAL,$/;"	e	enum:v8::StateTag
E_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit E_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::E_formatter
E_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class E_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
Ebcdic	dependencies/include/SFML/Network/Ftp.hpp	/^        Ebcdic  \/\/\/< Text mode using EBCDIC encoding$/;"	e	enum:sf::Ftp::TransferMode
ElementPrinter	vendor/spdlog/tests/catch.hpp	/^  struct ElementPrinter {$/;"	s	namespace:Catch::TupleDetail
ElementPrinter	vendor/spdlog/tests/catch.hpp	/^  struct ElementPrinter<Tuple,N,false> {$/;"	s	namespace:Catch::TupleDetail
EmbedderGraph	dependencies/include/v8-profiler.h	/^class V8_EXPORT EmbedderGraph {$/;"	c	namespace:v8
Empty	dependencies/include/v8-util.h	/^  static bool Empty(Impl* impl) { return impl->empty(); }$/;"	f	class:v8::StdMapTraits	typeref:typename:bool
Empty	dependencies/include/v8.h	/^  V8_INLINE void Empty() { val_ = 0; }$/;"	f	class:v8::PersistentBase	typeref:typename:V8_INLINE void
Enable	vendor/spdlog/tests/catch.hpp	/^        typedef void Enable;$/;"	t	struct:Catch::TrueType	typeref:typename:void
EnableArgumentFilter	dependencies/include/libplatform/v8-tracing.h	/^  void EnableArgumentFilter() { enable_argument_filter_ = true; }$/;"	f	class:v8::platform::tracing::TraceConfig	typeref:typename:void
EnableSystrace	dependencies/include/libplatform/v8-tracing.h	/^  void EnableSystrace() { enable_systrace_ = true; }$/;"	f	class:v8::platform::tracing::TraceConfig	typeref:typename:void
Encoding	dependencies/include/v8.h	/^    enum Encoding { ONE_BYTE, TWO_BYTE, UTF8 };$/;"	g	class:v8::ScriptCompiler::StreamedSource
Encoding	dependencies/include/v8.h	/^  enum Encoding {$/;"	g	class:v8::String
End	dependencies/include/SFML/Window/Keyboard.hpp	/^        End,          \/\/\/< The End key$/;"	e	enum:sf::Keyboard::Key
End	dependencies/include/v8-util.h	/^  static Iterator End(Impl* impl) { return impl->end(); }$/;"	f	class:v8::StdMapTraits	typeref:typename:Iterator
Endianness	vendor/spdlog/tests/catch.hpp	/^        struct Endianness {$/;"	s	namespace:Catch::Detail::__anon368216750c10
EndsWith	vendor/spdlog/tests/catch.hpp	/^                EndsWith( NSString* substr ) : StringHolder( substr ){}$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::EndsWith
EndsWith	vendor/spdlog/tests/catch.hpp	/^            EndsWith( EndsWith const& other ) : m_substr( other.m_substr ){}$/;"	f	struct:Catch::Matchers::Impl::StdString::EndsWith
EndsWith	vendor/spdlog/tests/catch.hpp	/^            EndsWith( NSString* substr ){ return Impl::NSStringMatchers::EndsWith( substr ); }$/;"	f	namespace:Catch::Matchers	typeref:typename:Impl::NSStringMatchers::EndsWith
EndsWith	vendor/spdlog/tests/catch.hpp	/^            EndsWith( std::string const& substr ) : m_substr( substr ){}$/;"	f	struct:Catch::Matchers::Impl::StdString::EndsWith
EndsWith	vendor/spdlog/tests/catch.hpp	/^            struct EndsWith : StringHolder<EndsWith> {$/;"	s	namespace:Catch::Matchers::Impl::NSStringMatchers
EndsWith	vendor/spdlog/tests/catch.hpp	/^        struct EndsWith : MatcherImpl<EndsWith, std::string> {$/;"	s	namespace:Catch::Matchers::Impl::StdString
EndsWith	vendor/spdlog/tests/catch.hpp	/^    inline Impl::StdString::EndsWith    EndsWith( const char* substr ) {$/;"	f	namespace:Catch::Matchers	typeref:typename:Impl::StdString::EndsWith
EndsWith	vendor/spdlog/tests/catch.hpp	/^    inline Impl::StdString::EndsWith    EndsWith( std::string const& substr ) {$/;"	f	namespace:Catch::Matchers	typeref:typename:Impl::StdString::EndsWith
Enter	dependencies/include/SFML/Window/Keyboard.hpp	/^        Enter,        \/\/\/< The Enter\/Return keys$/;"	e	enum:sf::Keyboard::Key
EnteringPassiveMode	dependencies/include/SFML/Network/Ftp.hpp	/^            EnteringPassiveMode   = 227, \/\/\/< Entering passive mode$/;"	e	enum:sf::Ftp::Response::Status
EnumStringMaker	vendor/spdlog/tests/catch.hpp	/^    struct EnumStringMaker$/;"	s	namespace:Catch::Detail
EnumStringMaker	vendor/spdlog/tests/catch.hpp	/^    struct EnumStringMaker<T,true>$/;"	s	namespace:Catch::Detail
Equal	dependencies/include/SFML/Window/Keyboard.hpp	/^        Equal,        \/\/\/< The = key$/;"	e	enum:sf::Keyboard::Key
Equals	vendor/spdlog/tests/catch.hpp	/^                Equals( NSString* substr ) : StringHolder( substr ){}$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::Equals
Equals	vendor/spdlog/tests/catch.hpp	/^            Equals( Equals const& other ) : m_str( other.m_str ){}$/;"	f	struct:Catch::Matchers::Impl::StdString::Equals
Equals	vendor/spdlog/tests/catch.hpp	/^            Equals( NSString* substr ){ return Impl::NSStringMatchers::Equals( substr ); }$/;"	f	namespace:Catch::Matchers	typeref:typename:Impl::NSStringMatchers::Equals
Equals	vendor/spdlog/tests/catch.hpp	/^            Equals( std::string const& str ) : m_str( str ){}$/;"	f	struct:Catch::Matchers::Impl::StdString::Equals
Equals	vendor/spdlog/tests/catch.hpp	/^            struct Equals : StringHolder<Equals> {$/;"	s	namespace:Catch::Matchers::Impl::NSStringMatchers
Equals	vendor/spdlog/tests/catch.hpp	/^        struct Equals : MatcherImpl<Equals, std::string> {$/;"	s	namespace:Catch::Matchers::Impl::StdString
Equals	vendor/spdlog/tests/catch.hpp	/^    inline Impl::StdString::Equals      Equals( const char* str ) {$/;"	f	namespace:Catch::Matchers	typeref:typename:Impl::StdString::Equals
Equals	vendor/spdlog/tests/catch.hpp	/^    inline Impl::StdString::Equals      Equals( std::string const& str ) {$/;"	f	namespace:Catch::Matchers	typeref:typename:Impl::StdString::Equals
Equation	dependencies/include/SFML/Graphics/BlendMode.hpp	/^    enum Equation$/;"	g	struct:sf::BlendMode
Error	dependencies/include/SFML/Network/Socket.hpp	/^        Error         \/\/\/< An unexpected error happened$/;"	e	enum:sf::Socket::Status
Error	vendor/spdlog/tests/catch.hpp	/^            Error = BrightRed,$/;"	e	enum:Catch::Colour::Code
EscapableHandleScope	dependencies/include/v8.h	/^class V8_EXPORT EscapableHandleScope : public HandleScope {$/;"	c	namespace:v8
Escape	dependencies/include/SFML/Window/Keyboard.hpp	/^        Escape,       \/\/\/< The Escape key$/;"	e	enum:sf::Keyboard::Key
Escape	dependencies/include/v8.h	/^  V8_INLINE Local<T> Escape(Local<T> value) {$/;"	f	class:v8::EscapableHandleScope	typeref:typename:V8_INLINE Local<T>
EscapeMaybe	dependencies/include/v8.h	/^  V8_INLINE MaybeLocal<T> EscapeMaybe(MaybeLocal<T> value) {$/;"	f	class:v8::EscapableHandleScope	typeref:typename:V8_INLINE MaybeLocal<T>
Eternal	dependencies/include/v8.h	/^  V8_INLINE Eternal() : val_(nullptr) {}$/;"	f	class:v8::Eternal	typeref:typename:V8_INLINE
Eternal	dependencies/include/v8.h	/^  V8_INLINE Eternal(Isolate* isolate, Local<S> handle) : val_(nullptr) {$/;"	f	class:v8::Eternal	typeref:typename:V8_INLINE
Eternal	dependencies/include/v8.h	/^template <class T> class Eternal {$/;"	c	namespace:v8
Evaluator	vendor/spdlog/tests/catch.hpp	/^    class Evaluator{};$/;"	c	namespace:Catch::Internal
Evaluator	vendor/spdlog/tests/catch.hpp	/^    struct Evaluator<T1, T2, IsEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	vendor/spdlog/tests/catch.hpp	/^    struct Evaluator<T1, T2, IsGreaterThan> {$/;"	s	namespace:Catch::Internal
Evaluator	vendor/spdlog/tests/catch.hpp	/^    struct Evaluator<T1, T2, IsGreaterThanOrEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	vendor/spdlog/tests/catch.hpp	/^    struct Evaluator<T1, T2, IsLessThan> {$/;"	s	namespace:Catch::Internal
Evaluator	vendor/spdlog/tests/catch.hpp	/^    struct Evaluator<T1, T2, IsLessThanOrEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	vendor/spdlog/tests/catch.hpp	/^    struct Evaluator<T1, T2, IsNotEqualTo> {$/;"	s	namespace:Catch::Internal
Event	dependencies/include/SFML/Window/Event.hpp	/^class Event$/;"	c	namespace:sf
EventType	dependencies/include/SFML/Window/Event.hpp	/^    enum EventType$/;"	g	class:sf::Event
Exception	vendor/spdlog/tests/catch.hpp	/^        Exception = 0x100 | FailureBit,$/;"	e	enum:Catch::ResultWas::OfType
ExceptionTranslator	vendor/spdlog/tests/catch.hpp	/^            ExceptionTranslator( std::string(*translateFunction)( T& ) )$/;"	f	class:Catch::ExceptionTranslatorRegistrar::ExceptionTranslator
ExceptionTranslator	vendor/spdlog/tests/catch.hpp	/^        class ExceptionTranslator : public IExceptionTranslator {$/;"	c	class:Catch::ExceptionTranslatorRegistrar
ExceptionTranslatorRegistrar	vendor/spdlog/tests/catch.hpp	/^        ExceptionTranslatorRegistrar( std::string(*translateFunction)( T& ) ) {$/;"	f	class:Catch::ExceptionTranslatorRegistrar
ExceptionTranslatorRegistrar	vendor/spdlog/tests/catch.hpp	/^    class ExceptionTranslatorRegistrar {$/;"	c	namespace:Catch
ExceptionTranslatorRegistry	vendor/spdlog/tests/catch.hpp	/^    class ExceptionTranslatorRegistry : public IExceptionTranslatorRegistry {$/;"	c	namespace:Catch
ExcludedPattern	vendor/spdlog/tests/catch.hpp	/^            ExcludedPattern( Ptr<Pattern> const& underlyingPattern ) : m_underlyingPattern( unde/;"	f	class:Catch::TestSpec::ExcludedPattern
ExcludedPattern	vendor/spdlog/tests/catch.hpp	/^        class ExcludedPattern : public Pattern {$/;"	c	class:Catch::TestSpec
Executing	vendor/spdlog/tests/catch.hpp	/^            Executing,$/;"	e	enum:Catch::SectionTracking::TrackedSection::RunState
ExecutingChildren	vendor/spdlog/tests/catch.hpp	/^            ExecutingChildren,$/;"	e	enum:Catch::SectionTracking::TrackedSection::RunState
ExplicitFailure	vendor/spdlog/tests/catch.hpp	/^        ExplicitFailure = FailureBit | 2,$/;"	e	enum:Catch::ResultWas::OfType
ExprComponents	vendor/spdlog/tests/catch.hpp	/^            ExprComponents() : testFalse( false ) {}$/;"	f	struct:Catch::ResultBuilder::ExprComponents
ExprComponents	vendor/spdlog/tests/catch.hpp	/^        struct ExprComponents {$/;"	s	class:Catch::ResultBuilder
ExpressionFailed	vendor/spdlog/tests/catch.hpp	/^        ExpressionFailed = FailureBit | 1,$/;"	e	enum:Catch::ResultWas::OfType
ExpressionLhs	vendor/spdlog/tests/catch.hpp	/^    ExpressionLhs( ResultBuilder& rb, T lhs ) : m_rb( rb ), m_lhs( lhs ) {}$/;"	f	class:Catch::ExpressionLhs
ExpressionLhs	vendor/spdlog/tests/catch.hpp	/^class ExpressionLhs {$/;"	c	namespace:Catch
ExpressionType	vendor/spdlog/tests/catch.hpp	/^        typedef ExpressionT ExpressionType;$/;"	t	struct:Catch::Matchers::Impl::Matcher	typeref:typename:ExpressionT
External	dependencies/include/v8.h	/^class V8_EXPORT External : public Value {$/;"	c	namespace:v8
ExternalOneByteStringResource	dependencies/include/v8.h	/^  class V8_EXPORT ExternalOneByteStringResource$/;"	c	class:v8::String
ExternalSourceStream	dependencies/include/v8.h	/^  class V8_EXPORT ExternalSourceStream {$/;"	c	class:v8::ScriptCompiler
ExternalStringResource	dependencies/include/v8.h	/^  class V8_EXPORT ExternalStringResource$/;"	c	class:v8::String
ExternalStringResourceBase	dependencies/include/v8.h	/^  class V8_EXPORT ExternalStringResourceBase {  \/\/ NOLINT$/;"	c	class:v8::String
F	dependencies/include/SFML/Window/Keyboard.hpp	/^        F,            \/\/\/< The F key$/;"	e	enum:sf::Keyboard::Key
F1	dependencies/include/SFML/Window/Keyboard.hpp	/^        F1,           \/\/\/< The F1 key$/;"	e	enum:sf::Keyboard::Key
F10	dependencies/include/SFML/Window/Keyboard.hpp	/^        F10,          \/\/\/< The F10 key$/;"	e	enum:sf::Keyboard::Key
F11	dependencies/include/SFML/Window/Keyboard.hpp	/^        F11,          \/\/\/< The F11 key$/;"	e	enum:sf::Keyboard::Key
F12	dependencies/include/SFML/Window/Keyboard.hpp	/^        F12,          \/\/\/< The F12 key$/;"	e	enum:sf::Keyboard::Key
F13	dependencies/include/SFML/Window/Keyboard.hpp	/^        F13,          \/\/\/< The F13 key$/;"	e	enum:sf::Keyboard::Key
F14	dependencies/include/SFML/Window/Keyboard.hpp	/^        F14,          \/\/\/< The F14 key$/;"	e	enum:sf::Keyboard::Key
F15	dependencies/include/SFML/Window/Keyboard.hpp	/^        F15,          \/\/\/< The F15 key$/;"	e	enum:sf::Keyboard::Key
F2	dependencies/include/SFML/Window/Keyboard.hpp	/^        F2,           \/\/\/< The F2 key$/;"	e	enum:sf::Keyboard::Key
F3	dependencies/include/SFML/Window/Keyboard.hpp	/^        F3,           \/\/\/< The F3 key$/;"	e	enum:sf::Keyboard::Key
F4	dependencies/include/SFML/Window/Keyboard.hpp	/^        F4,           \/\/\/< The F4 key$/;"	e	enum:sf::Keyboard::Key
F5	dependencies/include/SFML/Window/Keyboard.hpp	/^        F5,           \/\/\/< The F5 key$/;"	e	enum:sf::Keyboard::Key
F6	dependencies/include/SFML/Window/Keyboard.hpp	/^        F6,           \/\/\/< The F6 key$/;"	e	enum:sf::Keyboard::Key
F7	dependencies/include/SFML/Window/Keyboard.hpp	/^        F7,           \/\/\/< The F7 key$/;"	e	enum:sf::Keyboard::Key
F8	dependencies/include/SFML/Window/Keyboard.hpp	/^        F8,           \/\/\/< The F8 key$/;"	e	enum:sf::Keyboard::Key
F9	dependencies/include/SFML/Window/Keyboard.hpp	/^        F9,           \/\/\/< The F9 key$/;"	e	enum:sf::Keyboard::Key
FAIL	vendor/spdlog/tests/catch.hpp	/^    #define FAIL(/;"	d
FMT_ALWAYS_INLINE	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^# define FMT_ALWAYS_INLINE /;"	d
FMT_ALWAYS_INLINE	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^# define FMT_ALWAYS_INLINE$/;"	d
FMT_API	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^#  define FMT_API /;"	d
FMT_API	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_API$/;"	d
FMT_ASSERT	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_ASSERT(/;"	d
FMT_BEGIN_NAMESPACE	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_BEGIN_NAMESPACE /;"	d
FMT_BUILTIN_CLZ	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^#  define FMT_BUILTIN_CLZ(/;"	d
FMT_BUILTIN_CLZ	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^# define FMT_BUILTIN_CLZ(/;"	d
FMT_BUILTIN_CLZLL	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^#  define FMT_BUILTIN_CLZLL(/;"	d
FMT_BUILTIN_CLZLL	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^# define FMT_BUILTIN_CLZLL(/;"	d
FMT_CATCH	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^# define FMT_CATCH(/;"	d
FMT_CLANG_VERSION	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^# define FMT_CLANG_VERSION /;"	d
FMT_COLORS_H_	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^#define FMT_COLORS_H_$/;"	d
FMT_CONSTEXPR	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_CONSTEXPR /;"	d
FMT_CONSTEXPR11	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_CONSTEXPR11 /;"	d
FMT_CONSTEXPR11	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_CONSTEXPR11$/;"	d
FMT_CONSTEXPR_DECL	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_CONSTEXPR_DECL /;"	d
FMT_CONSTEXPR_DECL	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_CONSTEXPR_DECL$/;"	d
FMT_CORE_H_	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^#define FMT_CORE_H_$/;"	d
FMT_CUDA_VERSION	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^# define FMT_CUDA_VERSION /;"	d
FMT_DETECTED_NOEXCEPT	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_DETECTED_NOEXCEPT /;"	d
FMT_DTOR_NOEXCEPT	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_DTOR_NOEXCEPT /;"	d
FMT_END_NAMESPACE	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^#  define FMT_END_NAMESPACE /;"	d
FMT_EXCEPTIONS	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_EXCEPTIONS /;"	d
FMT_EXPLICIT	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_EXPLICIT /;"	d
FMT_EXPLICIT	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_EXPLICIT$/;"	d
FMT_FALLTHROUGH	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^# define FMT_FALLTHROUGH /;"	d
FMT_FALLTHROUGH	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^# define FMT_FALLTHROUGH$/;"	d
FMT_FORMAT_H_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^#define FMT_FORMAT_H_$/;"	d
FMT_FORMAT_INL_H_	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^#define FMT_FORMAT_INL_H_$/;"	d
FMT_FUNC	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^# define FMT_FUNC /;"	d
FMT_GCC_VERSION	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_GCC_VERSION /;"	d
FMT_GNUC_LIBSTD_VERSION	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^# define FMT_GNUC_LIBSTD_VERSION /;"	d
FMT_HAS_BUILTIN	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^# define FMT_HAS_BUILTIN(/;"	d
FMT_HAS_CPP_ATTRIBUTE	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_HAS_CPP_ATTRIBUTE(/;"	d
FMT_HAS_CXX11_NOEXCEPT	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_HAS_CXX11_NOEXCEPT /;"	d
FMT_HAS_FEATURE	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_HAS_FEATURE(/;"	d
FMT_HAS_GXX_CXX11	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_HAS_GXX_CXX11 /;"	d
FMT_HAS_INCLUDE	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_HAS_INCLUDE(/;"	d
FMT_HEADER_ONLY	vendor/spdlog/include/spdlog/fmt/fmt.h	/^#define FMT_HEADER_ONLY$/;"	d
FMT_HEADER_ONLY	vendor/spdlog/include/spdlog/fmt/ostr.h	/^#define FMT_HEADER_ONLY$/;"	d
FMT_ICC_VERSION	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^# define FMT_ICC_VERSION /;"	d
FMT_INLINE_NAMESPACE	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^#  define FMT_INLINE_NAMESPACE /;"	d
FMT_LOCALE	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^# define FMT_LOCALE$/;"	d
FMT_MAKE_VALUE	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^#define FMT_MAKE_VALUE(/;"	d
FMT_MAKE_VALUE_SAME	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^#define FMT_MAKE_VALUE_SAME(/;"	d
FMT_MSC_VER	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_MSC_VER /;"	d
FMT_NOEXCEPT	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^#  define FMT_NOEXCEPT /;"	d
FMT_NOEXCEPT	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^#  define FMT_NOEXCEPT$/;"	d
FMT_NOMACRO	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^#define FMT_NOMACRO$/;"	d
FMT_NOMACRO	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^inline null<> localtime_r FMT_NOMACRO(...) { return null<>(); }$/;"	f	namespace:internal	typeref:typename:null<> localtime_r
FMT_NORETURN	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_NORETURN /;"	d
FMT_NORETURN	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_NORETURN$/;"	d
FMT_NULL	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^#  define FMT_NULL /;"	d
FMT_OSTREAM_H_	vendor/spdlog/include/spdlog/fmt/bundled/ostream.h	/^#define FMT_OSTREAM_H_$/;"	d
FMT_OVERRIDE	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^#  define FMT_OVERRIDE /;"	d
FMT_OVERRIDE	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^#  define FMT_OVERRIDE$/;"	d
FMT_POSIX	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^#  define FMT_POSIX(/;"	d
FMT_POSIX_CALL	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^#  define FMT_POSIX_CALL(/;"	d
FMT_POSIX_CALL	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^# define FMT_POSIX_CALL(/;"	d
FMT_POSIX_H_	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^#define FMT_POSIX_H_$/;"	d
FMT_POWERS_OF_10	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^#define FMT_POWERS_OF_10(/;"	d
FMT_PRINTF_H_	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^#define FMT_PRINTF_H_$/;"	d
FMT_RANGES_H_	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^#define FMT_RANGES_H_$/;"	d
FMT_RANGE_OUTPUT_LENGTH_LIMIT	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^# define FMT_RANGE_OUTPUT_LENGTH_LIMIT /;"	d
FMT_RETRY	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^#define FMT_RETRY(/;"	d
FMT_RETRY_VAL	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^# define FMT_RETRY_VAL(/;"	d
FMT_SECURE_SCL	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^# define FMT_SECURE_SCL /;"	d
FMT_SNPRINTF	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^# define FMT_SNPRINTF /;"	d
FMT_STRING	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^#define FMT_STRING(/;"	d
FMT_SWPRINTF	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^# define FMT_SWPRINTF /;"	d
FMT_SYSTEM	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^# define FMT_SYSTEM(/;"	d
FMT_THROW	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^#   define FMT_THROW(/;"	d
FMT_TIME_H_	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^#define FMT_TIME_H_$/;"	d
FMT_TRY	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^# define FMT_TRY /;"	d
FMT_UDL_TEMPLATE	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^# define FMT_UDL_TEMPLATE /;"	d
FMT_UNION	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^# define FMT_UNION /;"	d
FMT_USE_CONSTEXPR	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_USE_CONSTEXPR /;"	d
FMT_USE_CONSTEXPR11	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_USE_CONSTEXPR11 /;"	d
FMT_USE_EXPERIMENTAL_STRING_VIEW	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_USE_EXPERIMENTAL_STRING_VIEW$/;"	d
FMT_USE_EXTERN_TEMPLATES	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^#  define FMT_USE_EXTERN_TEMPLATES /;"	d
FMT_USE_GRISU	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^# define FMT_USE_GRISU /;"	d
FMT_USE_NOEXCEPT	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_USE_NOEXCEPT /;"	d
FMT_USE_NULLPTR	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^#  define FMT_USE_NULLPTR /;"	d
FMT_USE_NULLPTR	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_USE_NULLPTR /;"	d
FMT_USE_STD_STRING_VIEW	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^# define FMT_USE_STD_STRING_VIEW$/;"	d
FMT_USE_TRAILING_RETURN	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^# define FMT_USE_TRAILING_RETURN /;"	d
FMT_USE_USER_DEFINED_LITERALS	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^#  define FMT_USE_USER_DEFINED_LITERALS /;"	d
FMT_USE_WINDOWS_H	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^# define FMT_USE_WINDOWS_H /;"	d
FMT_USE_WINDOWS_H	vendor/spdlog/include/spdlog/fmt/fmt.h	/^#define FMT_USE_WINDOWS_H /;"	d
FMT_VERSION	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^#define FMT_VERSION /;"	d
F_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit F_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::F_formatter
F_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class F_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
Factor	dependencies/include/SFML/Graphics/BlendMode.hpp	/^    enum Factor$/;"	g	struct:sf::BlendMode
FactoryMap	vendor/spdlog/tests/catch.hpp	/^        typedef std::map<std::string, IReporterFactory*> FactoryMap;$/;"	t	struct:Catch::IReporterRegistry	typeref:typename:std::map<std::string,IReporterFactory * >
Fail	vendor/spdlog/tests/catch.hpp	/^        struct OnUnusedOptions { enum DoWhat { Ignore, Fail }; };$/;"	e	enum:Catch::Session::OnUnusedOptions::DoWhat
FailureBit	vendor/spdlog/tests/catch.hpp	/^        FailureBit = 0x10,$/;"	e	enum:Catch::ResultWas::OfType
FalseTest	vendor/spdlog/tests/catch.hpp	/^        FalseTest = 0x02,           \/\/ Prefix expression with !$/;"	e	enum:Catch::ResultDisposition::Flags
FalseType	vendor/spdlog/tests/catch.hpp	/^    struct FalseType {$/;"	s	namespace:Catch
FatalConditionHandler	vendor/spdlog/tests/catch.hpp	/^        FatalConditionHandler() : m_isSet( true ) {$/;"	f	struct:Catch::FatalConditionHandler
FatalConditionHandler	vendor/spdlog/tests/catch.hpp	/^    struct FatalConditionHandler {$/;"	s	namespace:Catch
FatalErrorCondition	vendor/spdlog/tests/catch.hpp	/^        FatalErrorCondition = 0x200 | FailureBit$/;"	e	enum:Catch::ResultWas::OfType
Features	vendor/spdlog/README.md	/^## Features$/;"	s
FieldTable	dependencies/include/SFML/Network/Http.hpp	/^        typedef std::map<std::string, std::string> FieldTable;$/;"	t	class:sf::Http::Request	typeref:typename:std::map<std::string,std::string>
FieldTable	dependencies/include/SFML/Network/Http.hpp	/^        typedef std::map<std::string, std::string> FieldTable;$/;"	t	class:sf::Http::Response	typeref:typename:std::map<std::string,std::string>
FileActionAborted	dependencies/include/SFML/Network/Ftp.hpp	/^            FileActionAborted         = 450, \/\/\/< Requested file action not taken$/;"	e	enum:sf::Ftp::Response::Status
FileActionOk	dependencies/include/SFML/Network/Ftp.hpp	/^            FileActionOk          = 250, \/\/\/< Requested file action ok$/;"	e	enum:sf::Ftp::Response::Status
FileInputStream	dependencies/include/SFML/System/FileInputStream.hpp	/^class SFML_SYSTEM_API FileInputStream : public InputStream, NonCopyable$/;"	c	namespace:sf
FileName	vendor/spdlog/tests/catch.hpp	/^            FileName = LightGrey,$/;"	e	enum:Catch::Colour::Code
FileStatus	dependencies/include/SFML/Network/Ftp.hpp	/^            FileStatus            = 213, \/\/\/< File status$/;"	e	enum:sf::Ftp::Response::Status
FileUnavailable	dependencies/include/SFML/Network/Ftp.hpp	/^            FileUnavailable         = 550, \/\/\/< Requested action not taken, file unavailable$/;"	e	enum:sf::Ftp::Response::Status
FilenameNotAllowed	dependencies/include/SFML/Network/Ftp.hpp	/^            FilenameNotAllowed      = 553, \/\/\/< Requested action not taken, file name not all/;"	e	enum:sf::Ftp::Response::Status
Filter	vendor/spdlog/tests/catch.hpp	/^        struct Filter {$/;"	s	class:Catch::TestSpec
Flags	dependencies/include/v8.h	/^  enum Flags {$/;"	g	class:v8::RegExp
Flags	dependencies/include/v8.h	/^  int Flags() const { return flags_; }$/;"	f	class:v8::ScriptOriginOptions	typeref:typename:int
Flags	vendor/spdlog/tests/catch.hpp	/^    struct ResultDisposition { enum Flags {$/;"	g	struct:Catch::ResultDisposition
Float32Array	dependencies/include/v8.h	/^class V8_EXPORT Float32Array : public TypedArray {$/;"	c	namespace:v8
Float64Array	dependencies/include/v8.h	/^class V8_EXPORT Float64Array : public TypedArray {$/;"	c	namespace:v8
FloatRect	dependencies/include/SFML/Graphics/Rect.hpp	/^typedef Rect<float> FloatRect;$/;"	t	namespace:sf	typeref:typename:Rect<float>
Font	dependencies/include/SFML/Graphics/Font.hpp	/^class SFML_GRAPHICS_API Font$/;"	c	namespace:sf
Forbidden	dependencies/include/SFML/Network/Http.hpp	/^            Forbidden           = 403, \/\/\/< The requested page cannot be accessed at all, eve/;"	e	enum:sf::Http::Response::Status
FormatFunc	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^typedef void (*FormatFunc)(internal::buffer &, int, string_view);$/;"	t	namespace:__anon3d87c0370110	typeref:typename:void (*)(internal::buffer &,int,string_view)
Fragment	dependencies/include/SFML/Graphics/Shader.hpp	/^        Fragment  \/\/\/< Fragment (pixel) shader$/;"	e	enum:sf::Shader::Type
FreeFunctionTestCase	vendor/spdlog/tests/catch.hpp	/^        FreeFunctionTestCase( TestFunction fun ) : m_fun( fun ) {}$/;"	f	class:Catch::FreeFunctionTestCase
FreeFunctionTestCase	vendor/spdlog/tests/catch.hpp	/^    class FreeFunctionTestCase : public SharedImpl<ITestCase> {$/;"	c	namespace:Catch
FromMaybe	dependencies/include/v8.h	/^  V8_INLINE Local<S> FromMaybe(Local<S> default_value) const {$/;"	f	class:v8::MaybeLocal	typeref:typename:V8_INLINE Local<S>
FromVal	dependencies/include/v8-util.h	/^  static V* FromVal(PersistentContainerValue v) {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:V *
FromVal	dependencies/include/v8-util.h	/^  static V* FromVal(PersistentContainerValue v) {$/;"	f	class:v8::PersistentValueVector	typeref:typename:V *
Ftp	dependencies/include/SFML/Network/Ftp.hpp	/^class SFML_NETWORK_API Ftp : NonCopyable$/;"	c	namespace:sf
Fullscreen	dependencies/include/SFML/Window/WindowStyle.hpp	/^        Fullscreen = 1 << 3, \/\/\/< Fullscreen mode (this flag and all others are mutually excl/;"	e	enum:sf::Style::__anonc2dbfd350103
Function	dependencies/include/v8.h	/^class V8_EXPORT Function : public Object {$/;"	c	namespace:v8
FunctionCallback	dependencies/include/v8.h	/^typedef void (*FunctionCallback)(const FunctionCallbackInfo<Value>& info);$/;"	t	namespace:v8	typeref:typename:void (*)(const FunctionCallbackInfo<Value> & info)
FunctionCallbackInfo	dependencies/include/v8.h	/^class FunctionCallbackInfo {$/;"	c	namespace:v8
FunctionTemplate	dependencies/include/v8.h	/^class V8_EXPORT FunctionTemplate : public Template {$/;"	c	namespace:v8
G	dependencies/include/SFML/Window/Keyboard.hpp	/^        G,            \/\/\/< The G key$/;"	e	enum:sf::Keyboard::Key
GC	dependencies/include/v8.h	/^  GC,$/;"	e	enum:v8::StateTag
GENERATE	vendor/spdlog/tests/catch.hpp	/^#define GENERATE(/;"	d
GIVEN	vendor/spdlog/tests/catch.hpp	/^#define GIVEN(/;"	d
GREEN	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    const WORD GREEN = FOREGROUND_GREEN;$/;"	m	class:spdlog::sinks::wincolor_sink	typeref:typename:const WORD
GainedFocus	dependencies/include/SFML/Window/Event.hpp	/^        GainedFocus,            \/\/\/< The window gained the focus (no data)$/;"	e	enum:sf::Event::EventType
Game	src/Game.cpp	/^Game::Game(){$/;"	f	class:Game
Game	src/Game.hpp	/^class Game {$/;"	c
Game_hpp	src/Game.hpp	/^#define Game_hpp$/;"	d
GatewayTimeout	dependencies/include/SFML/Network/Http.hpp	/^            GatewayTimeout      = 504, \/\/\/< The gateway server couldn't receive a response fr/;"	e	enum:sf::Http::Response::Status
GeneratorInfo	vendor/spdlog/tests/catch.hpp	/^        GeneratorInfo( std::size_t size )$/;"	f	struct:Catch::GeneratorInfo
GeneratorInfo	vendor/spdlog/tests/catch.hpp	/^    struct GeneratorInfo : IGeneratorInfo {$/;"	s	namespace:Catch
Generators	vendor/spdlog/tests/catch.hpp	/^namespace Generators$/;"	n	namespace:Catch
GeneratorsForTest	vendor/spdlog/tests/catch.hpp	/^    class GeneratorsForTest : public IGeneratorsForTest {$/;"	c	namespace:Catch
Generic	vendor/spdlog/tests/catch.hpp	/^    namespace Generic {$/;"	n	namespace:Catch::Matchers::Impl
GenericNamedPropertyDefinerCallback	dependencies/include/v8.h	/^typedef void (*GenericNamedPropertyDefinerCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(Local<Name> property,const PropertyDescriptor & desc,const PropertyCallbackInfo<Value> & info)
GenericNamedPropertyDeleterCallback	dependencies/include/v8.h	/^typedef void (*GenericNamedPropertyDeleterCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(Local<Name> property,const PropertyCallbackInfo<Boolean> & info)
GenericNamedPropertyDescriptorCallback	dependencies/include/v8.h	/^typedef void (*GenericNamedPropertyDescriptorCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(Local<Name> property,const PropertyCallbackInfo<Value> & info)
GenericNamedPropertyEnumeratorCallback	dependencies/include/v8.h	/^typedef void (*GenericNamedPropertyEnumeratorCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(const PropertyCallbackInfo<Array> & info)
GenericNamedPropertyGetterCallback	dependencies/include/v8.h	/^typedef void (*GenericNamedPropertyGetterCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(Local<Name> property,const PropertyCallbackInfo<Value> & info)
GenericNamedPropertyQueryCallback	dependencies/include/v8.h	/^typedef void (*GenericNamedPropertyQueryCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(Local<Name> property,const PropertyCallbackInfo<Integer> & info)
GenericNamedPropertySetterCallback	dependencies/include/v8.h	/^typedef void (*GenericNamedPropertySetterCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(Local<Name> property,Local<Value> value,const PropertyCallbackInfo<Value> & info)
Geometry	dependencies/include/SFML/Graphics/Shader.hpp	/^        Geometry, \/\/\/< Geometry shader$/;"	e	enum:sf::Shader::Type
Get	dependencies/include/SFML/Network/Http.hpp	/^            Get,   \/\/\/< Request in get mode, standard method to retrieve a page$/;"	e	enum:sf::Http::Request::Method
Get	dependencies/include/v8-util.h	/^  Local<V> Get(const K& key) {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:Local<V>
Get	dependencies/include/v8-util.h	/^  Local<V> Get(size_t index) const {$/;"	f	class:v8::PersistentValueVector	typeref:typename:Local<V>
Get	dependencies/include/v8-util.h	/^  static PersistentContainerValue Get(Impl* impl, K key) {$/;"	f	class:v8::StdMapTraits	typeref:typename:PersistentContainerValue
Get	dependencies/include/v8-util.h	/^  static PersistentContainerValue Get(const Impl* impl, size_t i) {$/;"	f	class:v8::DefaultPersistentValueVectorTraits	typeref:typename:PersistentContainerValue
Get	dependencies/include/v8.h	/^  V8_INLINE Local<T> Get(Isolate* isolate) const {$/;"	f	class:v8::PersistentBase	typeref:typename:V8_INLINE Local<T>
GetAlignedPointerFromInternalField	dependencies/include/v8.h	/^  V8_INLINE static void* GetAlignedPointerFromInternalField($/;"	f	class:v8::Object	typeref:typename:V8_INLINE void *
GetCategoryGroupEnabled	dependencies/include/v8-platform.h	/^  virtual const uint8_t* GetCategoryGroupEnabled(const char* name) {$/;"	f	class:v8::TracingController	typeref:typename:const uint8_t *
GetChunkSize	dependencies/include/v8-profiler.h	/^  virtual int GetChunkSize() { return 1024; }$/;"	f	class:v8::OutputStream	typeref:typename:int
GetColumnNumber	dependencies/include/v8.h	/^  int GetColumnNumber() { return column_number_; }$/;"	f	class:v8::Location	typeref:typename:int
GetElementCount	dependencies/include/v8-profiler.h	/^  virtual intptr_t GetElementCount() { return -1; }$/;"	f	class:v8::RetainedObjectInfo	typeref:typename:intptr_t
GetEmbedderData	dependencies/include/v8-internal.h	/^  V8_INLINE static void* GetEmbedderData(const v8::Isolate* isolate,$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE void *
GetEventAt	dependencies/include/libplatform/v8-tracing.h	/^  TraceObject* GetEventAt(size_t index) { return &chunk_[index]; }$/;"	f	class:v8::platform::tracing::TraceBufferChunk	typeref:typename:TraceObject *
GetGroupLabel	dependencies/include/v8-profiler.h	/^  virtual const char* GetGroupLabel() { return GetLabel(); }$/;"	f	class:v8::RetainedObjectInfo	typeref:typename:const char *
GetInstanceType	dependencies/include/v8-internal.h	/^  V8_INLINE static int GetInstanceType(const internal::Address obj) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE int
GetIsolate	dependencies/include/v8-util.h	/^  Isolate* GetIsolate() { return isolate_; }$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:Isolate *
GetIsolate	dependencies/include/v8.h	/^  V8_INLINE Isolate* GetIsolate() const { return isolate_; }$/;"	f	class:v8::WeakCallbackInfo	typeref:typename:V8_INLINE Isolate *
GetIsolate	dependencies/include/v8.h	/^  V8_INLINE Isolate* GetIsolate() const {$/;"	f	class:v8::HandleScope	typeref:typename:V8_INLINE Isolate *
GetLineNumber	dependencies/include/v8.h	/^  int GetLineNumber() { return line_number_; }$/;"	f	class:v8::Location	typeref:typename:int
GetNodeFlag	dependencies/include/v8-internal.h	/^  V8_INLINE static uint8_t GetNodeFlag(internal::Address* obj, int shift) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE uint8_t
GetNodeState	dependencies/include/v8-internal.h	/^  V8_INLINE static uint8_t GetNodeState(internal::Address* obj) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE uint8_t
GetOddballKind	dependencies/include/v8-internal.h	/^  V8_INLINE static int GetOddballKind(const internal::Address obj) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE int
GetPageAllocator	dependencies/include/v8-platform.h	/^  virtual PageAllocator* GetPageAllocator() {$/;"	f	class:v8::Platform	typeref:typename:PageAllocator *
GetParameter	dependencies/include/v8.h	/^  V8_INLINE T* GetParameter() const { return parameter_; }$/;"	f	class:v8::WeakCallbackInfo	typeref:typename:V8_INLINE T *
GetReference	dependencies/include/v8-util.h	/^  PersistentValueReference GetReference(const K& key) {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:PersistentValueReference
GetRetainerInfosCallback	dependencies/include/v8-profiler.h	/^  typedef RetainerInfos (*GetRetainerInfosCallback)(v8::Isolate* isolate);$/;"	t	class:v8::HeapProfiler	typeref:typename:RetainerInfos (*)(v8::Isolate * isolate)
GetRoot	dependencies/include/v8-internal.h	/^  V8_INLINE static internal::Address* GetRoot(v8::Isolate* isolate, int index) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE internal::Address *
GetRootFromOnHeapAddress	dependencies/include/v8-internal.h	/^  V8_INLINE static internal::Address GetRootFromOnHeapAddress($/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE internal::Address
GetSizeInBytes	dependencies/include/v8-profiler.h	/^  virtual intptr_t GetSizeInBytes() { return -1; }$/;"	f	class:v8::RetainedObjectInfo	typeref:typename:intptr_t
GetStackTracePrinter	dependencies/include/v8-platform.h	/^  virtual StackTracePrinter GetStackTracePrinter() { return nullptr; }$/;"	f	class:v8::Platform	typeref:typename:StackTracePrinter
GetTraceRecordMode	dependencies/include/libplatform/v8-tracing.h	/^  TraceRecordMode GetTraceRecordMode() const { return record_mode_; }$/;"	f	class:v8::platform::tracing::TraceConfig	typeref:typename:TraceRecordMode
GlFunctionPointer	dependencies/include/SFML/Window/Context.hpp	/^typedef void (*GlFunctionPointer)();$/;"	t	namespace:sf	typeref:typename:void (*)()
GlResource	dependencies/include/SFML/Window/GlResource.hpp	/^class SFML_WINDOW_API GlResource$/;"	c	namespace:sf
Global	dependencies/include/v8.h	/^  V8_INLINE Global() : PersistentBase<T>(nullptr) {}$/;"	f	class:v8::Global	typeref:typename:V8_INLINE
Global	dependencies/include/v8.h	/^  V8_INLINE Global(Global&& other) : PersistentBase<T>(other.val_) {$/;"	f	class:v8::Global	typeref:typename:V8_INLINE
Global	dependencies/include/v8.h	/^  V8_INLINE Global(Isolate* isolate, Local<S> that)$/;"	f	class:v8::Global	typeref:typename:V8_INLINE
Global	dependencies/include/v8.h	/^  V8_INLINE Global(Isolate* isolate, const PersistentBase<S>& that)$/;"	f	class:v8::Global	typeref:typename:V8_INLINE
Global	dependencies/include/v8.h	/^class Global : public PersistentBase<T> {$/;"	c	namespace:v8
GlobalValueMap	dependencies/include/v8-util.h	/^  GlobalValueMap(Isolate* isolate, const char* label)$/;"	f	class:v8::GlobalValueMap
GlobalValueMap	dependencies/include/v8-util.h	/^  explicit GlobalValueMap(Isolate* isolate)$/;"	f	class:v8::GlobalValueMap
GlobalValueMap	dependencies/include/v8-util.h	/^class GlobalValueMap : public PersistentValueMapBase<K, V, Traits> {$/;"	c	namespace:v8
Glsl	dependencies/include/SFML/Graphics/Glsl.hpp	/^namespace Glsl$/;"	n	namespace:sf
Glyph	dependencies/include/SFML/Graphics/Glyph.hpp	/^    Glyph() : advance(0) {}$/;"	f	class:sf::Glyph
Glyph	dependencies/include/SFML/Graphics/Glyph.hpp	/^class SFML_GRAPHICS_API Glyph$/;"	c	namespace:sf
GlyphTable	dependencies/include/SFML/Graphics/Font.hpp	/^    typedef std::map<Uint64, Glyph> GlyphTable; \/\/\/< Table mapping a codepoint to its glyph$/;"	t	class:sf::Font	typeref:typename:std::map<Uint64,Glyph>
Gravity	dependencies/include/SFML/Window/Sensor.hpp	/^        Gravity,          \/\/\/< Measures the direction and intensity of gravity, independent o/;"	e	enum:sf::Sensor::Type
Green	dependencies/include/SFML/Graphics/Color.hpp	/^    static const Color Green;       \/\/\/< Green predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
Green	vendor/spdlog/tests/catch.hpp	/^            Green,$/;"	e	enum:Catch::Colour::Code
Grey	vendor/spdlog/tests/catch.hpp	/^            Grey,$/;"	e	enum:Catch::Colour::Code
GroupInfo	vendor/spdlog/tests/catch.hpp	/^        GroupInfo(  std::string const& _name,$/;"	f	struct:Catch::GroupInfo
GroupInfo	vendor/spdlog/tests/catch.hpp	/^    struct GroupInfo {$/;"	s	namespace:Catch
Guard	vendor/spdlog/tests/catch.hpp	/^            Guard( TestCaseTracker& tracker ) : m_tracker( tracker ) {$/;"	f	class:Catch::SectionTracking::TestCaseTracker::Guard
Guard	vendor/spdlog/tests/catch.hpp	/^        class Guard {$/;"	c	class:Catch::SectionTracking::TestCaseTracker
Gyroscope	dependencies/include/SFML/Window/Sensor.hpp	/^        Gyroscope,        \/\/\/< Measures the raw rotation rates (degrees\/s)$/;"	e	enum:sf::Sensor::Type
H	dependencies/include/SFML/Window/Keyboard.hpp	/^        H,            \/\/\/< The H key$/;"	e	enum:sf::Keyboard::Key
HASH_FLAG	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^enum {SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8};$/;"	e	enum:__anondc8451670203
HEADER_BASE	vendor/spdlog/CMakeLists.txt	/^set(HEADER_BASE "${CMAKE_CURRENT_SOURCE_DIR}\/include")$/;"	v
HEX	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#define HEX(/;"	d	file:
HEX	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:
HINT_MANY_WRITES_EXPECTED	dependencies/include/v8.h	/^    HINT_MANY_WRITES_EXPECTED = 1,$/;"	e	enum:v8::String::WriteOptions
H_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit H_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::H_formatter
H_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class H_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
Hand	dependencies/include/SFML/Window/Cursor.hpp	/^        Hand,                   \/\/\/< Pointing hand cursor$/;"	e	enum:sf::Cursor::Type
Handle	dependencies/include/v8.h	/^using Handle = Local<T>;$/;"	t	namespace:v8	typeref:typename:Local<T>
HandleScope	dependencies/include/v8.h	/^class V8_EXPORT HandleScope {$/;"	c	namespace:v8
HasHeapObjectTag	dependencies/include/v8-internal.h	/^  V8_INLINE static bool HasHeapObjectTag(const internal::Address value) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE bool
Head	dependencies/include/SFML/Network/Http.hpp	/^            Head,  \/\/\/< Request a page's header only$/;"	e	enum:sf::Http::Request::Method
Headers	vendor/spdlog/tests/catch.hpp	/^            Headers = White$/;"	e	enum:Catch::Colour::Code
HeapGraphEdge	dependencies/include/v8-profiler.h	/^class V8_EXPORT HeapGraphEdge {$/;"	c	namespace:v8
HeapGraphNode	dependencies/include/v8-profiler.h	/^class V8_EXPORT HeapGraphNode {$/;"	c	namespace:v8
HeapProfiler	dependencies/include/v8-profiler.h	/^class V8_EXPORT HeapProfiler {$/;"	c	namespace:v8
HeapSnapshot	dependencies/include/v8-profiler.h	/^class V8_EXPORT HeapSnapshot {$/;"	c	namespace:v8
HeapStatsUpdate	dependencies/include/v8-profiler.h	/^  HeapStatsUpdate(uint32_t index, uint32_t count, uint32_t size)$/;"	f	struct:v8::HeapStatsUpdate
HeapStatsUpdate	dependencies/include/v8-profiler.h	/^struct HeapStatsUpdate {$/;"	s	namespace:v8
HelloWorld	CMakeLists.txt	/^project(HelloWorld)$/;"	p
Help	dependencies/include/SFML/Window/Cursor.hpp	/^        Help,                   \/\/\/< Help cursor$/;"	e	enum:sf::Cursor::Type
HelpMessage	dependencies/include/SFML/Network/Ftp.hpp	/^            HelpMessage           = 214, \/\/\/< Help message$/;"	e	enum:sf::Ftp::Response::Status
Home	dependencies/include/SFML/Window/Keyboard.hpp	/^        Home,         \/\/\/< The Home key$/;"	e	enum:sf::Keyboard::Key
HorizontalWheel	dependencies/include/SFML/Window/Mouse.hpp	/^        HorizontalWheel \/\/\/< The horizontal mouse wheel$/;"	e	enum:sf::Mouse::Wheel
Http	dependencies/include/SFML/Network/Http.hpp	/^class SFML_NETWORK_API Http : NonCopyable$/;"	c	namespace:sf
Hyphen	dependencies/include/SFML/Window/Keyboard.hpp	/^        Hyphen,       \/\/\/< The - key (hyphen)$/;"	e	enum:sf::Keyboard::Key
I	dependencies/include/SFML/Window/Keyboard.hpp	/^        I,            \/\/\/< The I key$/;"	e	enum:sf::Keyboard::Key
I	dependencies/include/v8-internal.h	/^    typedef internal::Internals I;$/;"	t	function:v8::internal::Internals::ReadEmbedderData	typeref:typename:internal::Internals
IArgFunction	vendor/spdlog/tests/catch.hpp	/^        struct IArgFunction {$/;"	s	namespace:Clara::Detail
IColourImpl	vendor/spdlog/tests/catch.hpp	/^        struct IColourImpl {$/;"	s	namespace:Catch::__anon368216750810
IConfig	vendor/spdlog/tests/catch.hpp	/^    struct IConfig : IShared {$/;"	s	namespace:Catch
IContext	vendor/spdlog/tests/catch.hpp	/^    struct IContext$/;"	s	namespace:Catch
IDLE	dependencies/include/v8.h	/^  IDLE$/;"	e	enum:v8::StateTag
ID_VOID_MAIN	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	file:
IExceptionTranslator	vendor/spdlog/tests/catch.hpp	/^    struct IExceptionTranslator {$/;"	s	namespace:Catch
IExceptionTranslatorRegistry	vendor/spdlog/tests/catch.hpp	/^    struct IExceptionTranslatorRegistry {$/;"	s	namespace:Catch
IGenerator	vendor/spdlog/tests/catch.hpp	/^struct IGenerator {$/;"	s	namespace:Catch
IGeneratorInfo	vendor/spdlog/tests/catch.hpp	/^    struct IGeneratorInfo {$/;"	s	namespace:Catch
IGeneratorsForTest	vendor/spdlog/tests/catch.hpp	/^    struct IGeneratorsForTest {$/;"	s	namespace:Catch
IMutableContext	vendor/spdlog/tests/catch.hpp	/^    struct IMutableContext : IContext$/;"	s	namespace:Catch
IMutableRegistryHub	vendor/spdlog/tests/catch.hpp	/^    struct IMutableRegistryHub {$/;"	s	namespace:Catch
INCLUDE_V8_H_	dependencies/include/v8.h	/^#define INCLUDE_V8_H_$/;"	d
INCLUDE_V8_INTERNAL_H_	dependencies/include/v8-internal.h	/^#define INCLUDE_V8_INTERNAL_H_$/;"	d
INCLUDE_V8_VALUE_SERIALIZER_VERSION_H_	dependencies/include/v8-value-serializer-version.h	/^#define INCLUDE_V8_VALUE_SERIALIZER_VERSION_H_$/;"	d
INDEX	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  enum Kind { NONE, INDEX, NAME };$/;"	e	enum:internal::arg_ref::Kind
INFO	vendor/spdlog/tests/catch.hpp	/^#define INFO(/;"	d
INF_SIZE	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  enum {INF_SIZE = 3}; \/\/ This is an enum to workaround a bug in MSVC.$/;"	e	enum:basic_writer::__anondc8451670603
INTERNAL_CATCH_ELSE	vendor/spdlog/tests/catch.hpp	/^#define INTERNAL_CATCH_ELSE(/;"	d
INTERNAL_CATCH_GENERATE	vendor/spdlog/tests/catch.hpp	/^#define INTERNAL_CATCH_GENERATE(/;"	d
INTERNAL_CATCH_IF	vendor/spdlog/tests/catch.hpp	/^#define INTERNAL_CATCH_IF(/;"	d
INTERNAL_CATCH_INFO	vendor/spdlog/tests/catch.hpp	/^#define INTERNAL_CATCH_INFO(/;"	d
INTERNAL_CATCH_LINESTR	vendor/spdlog/tests/catch.hpp	/^#define INTERNAL_CATCH_LINESTR(/;"	d
INTERNAL_CATCH_LINESTR2	vendor/spdlog/tests/catch.hpp	/^#define INTERNAL_CATCH_LINESTR2(/;"	d
INTERNAL_CATCH_METHOD_AS_TEST_CASE	vendor/spdlog/tests/catch.hpp	/^    #define INTERNAL_CATCH_METHOD_AS_TEST_CASE(/;"	d
INTERNAL_CATCH_MSG	vendor/spdlog/tests/catch.hpp	/^    #define INTERNAL_CATCH_MSG(/;"	d
INTERNAL_CATCH_NO_THROW	vendor/spdlog/tests/catch.hpp	/^#define INTERNAL_CATCH_NO_THROW(/;"	d
INTERNAL_CATCH_REACT	vendor/spdlog/tests/catch.hpp	/^#define INTERNAL_CATCH_REACT(/;"	d
INTERNAL_CATCH_REGISTER_LEGACY_REPORTER	vendor/spdlog/tests/catch.hpp	/^#define INTERNAL_CATCH_REGISTER_LEGACY_REPORTER(/;"	d
INTERNAL_CATCH_REGISTER_REPORTER	vendor/spdlog/tests/catch.hpp	/^#define INTERNAL_CATCH_REGISTER_REPORTER(/;"	d
INTERNAL_CATCH_SECTION	vendor/spdlog/tests/catch.hpp	/^    #define INTERNAL_CATCH_SECTION(/;"	d
INTERNAL_CATCH_STRINGIFY	vendor/spdlog/tests/catch.hpp	/^#define INTERNAL_CATCH_STRINGIFY(/;"	d
INTERNAL_CATCH_STRINGIFY2	vendor/spdlog/tests/catch.hpp	/^#define INTERNAL_CATCH_STRINGIFY2(/;"	d
INTERNAL_CATCH_TEST	vendor/spdlog/tests/catch.hpp	/^#define INTERNAL_CATCH_TEST(/;"	d
INTERNAL_CATCH_TESTCASE	vendor/spdlog/tests/catch.hpp	/^    #define INTERNAL_CATCH_TESTCASE(/;"	d
INTERNAL_CATCH_TEST_CASE_METHOD	vendor/spdlog/tests/catch.hpp	/^    #define INTERNAL_CATCH_TEST_CASE_METHOD(/;"	d
INTERNAL_CATCH_THROWS	vendor/spdlog/tests/catch.hpp	/^#define INTERNAL_CATCH_THROWS(/;"	d
INTERNAL_CATCH_THROWS_AS	vendor/spdlog/tests/catch.hpp	/^#define INTERNAL_CATCH_THROWS_AS(/;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION	vendor/spdlog/tests/catch.hpp	/^#define INTERNAL_CATCH_TRANSLATE_EXCEPTION(/;"	d
INTERNAL_CATCH_UNIQUE_NAME	vendor/spdlog/tests/catch.hpp	/^#define INTERNAL_CATCH_UNIQUE_NAME(/;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE	vendor/spdlog/tests/catch.hpp	/^#define INTERNAL_CATCH_UNIQUE_NAME_LINE(/;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE2	vendor/spdlog/tests/catch.hpp	/^#define INTERNAL_CATCH_UNIQUE_NAME_LINE2(/;"	d
INTERNAL_CHECK_THAT	vendor/spdlog/tests/catch.hpp	/^#define INTERNAL_CHECK_THAT(/;"	d
IRegistryHub	vendor/spdlog/tests/catch.hpp	/^    struct IRegistryHub {$/;"	s	namespace:Catch
IReporter	vendor/spdlog/tests/catch.hpp	/^    struct IReporter : IShared {$/;"	s	namespace:Catch
IReporterFactory	vendor/spdlog/tests/catch.hpp	/^    struct IReporterFactory {$/;"	s	namespace:Catch
IReporterRegistry	vendor/spdlog/tests/catch.hpp	/^    struct IReporterRegistry {$/;"	s	namespace:Catch
IResultCapture	vendor/spdlog/tests/catch.hpp	/^    struct IResultCapture {$/;"	s	namespace:Catch
IRunner	vendor/spdlog/tests/catch.hpp	/^    struct IRunner {$/;"	s	namespace:Catch
IS_PACKED	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  static const bool IS_PACKED = NUM_ARGS < internal::max_packed_args;$/;"	m	class:format_arg_store	typeref:typename:const bool
IShared	vendor/spdlog/tests/catch.hpp	/^    struct IShared : NonCopyable {$/;"	s	namespace:Catch
IStreamingReporter	vendor/spdlog/tests/catch.hpp	/^    struct IStreamingReporter : IShared {$/;"	s	namespace:Catch
ITagAliasRegistry	vendor/spdlog/tests/catch.hpp	/^    struct ITagAliasRegistry {$/;"	s	namespace:Catch
ITestCase	vendor/spdlog/tests/catch.hpp	/^    struct ITestCase : IShared {$/;"	s	namespace:Catch
ITestCaseRegistry	vendor/spdlog/tests/catch.hpp	/^    struct ITestCaseRegistry {$/;"	s	namespace:Catch
I_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit I_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::I_formatter
I_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class I_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
Identification	dependencies/include/SFML/Window/Joystick.hpp	/^    struct SFML_WINDOW_API Identification$/;"	s	class:sf::Joystick
Identity	dependencies/include/SFML/Graphics/Transform.hpp	/^    static const Transform Identity; \/\/\/< The identity transform (does nothing)$/;"	m	class:sf::Transform	typeref:typename:const Transform
IdleTask	dependencies/include/v8-platform.h	/^class IdleTask {$/;"	c	namespace:v8
IdleTaskSupport	dependencies/include/libplatform/libplatform.h	/^enum class IdleTaskSupport { kDisabled, kEnabled };$/;"	g	namespace:v8::platform
IdleTasksEnabled	dependencies/include/v8-platform.h	/^  virtual bool IdleTasksEnabled(Isolate* isolate) {$/;"	f	class:v8::Platform	typeref:typename:bool
If	vendor/spdlog/tests/catch.hpp	/^    template<> struct If<false> : FalseType {};$/;"	s	namespace:Catch
If	vendor/spdlog/tests/catch.hpp	/^    template<> struct If<true> : TrueType {};$/;"	s	namespace:Catch
If	vendor/spdlog/tests/catch.hpp	/^    template<bool c> struct If : NotABooleanExpression<c> {};$/;"	s	namespace:Catch
Ignore	vendor/spdlog/tests/catch.hpp	/^        struct OnUnusedOptions { enum DoWhat { Ignore, Fail }; };$/;"	e	enum:Catch::Session::OnUnusedOptions::DoWhat
Image	dependencies/include/SFML/Graphics/Image.hpp	/^class SFML_GRAPHICS_API Image$/;"	c	namespace:sf
Impl	dependencies/include/v8-util.h	/^  typedef std::map<K, PersistentContainerValue> Impl;$/;"	t	class:v8::StdMapTraits	typeref:typename:std::map<K,PersistentContainerValue>
Impl	dependencies/include/v8-util.h	/^  typedef std::vector<PersistentContainerValue> Impl;$/;"	t	class:v8::DefaultPersistentValueVectorTraits	typeref:typename:std::vector<PersistentContainerValue>
Impl	vendor/spdlog/tests/catch.hpp	/^        namespace Impl {$/;"	n	namespace:Catch::Matchers
Impl	vendor/spdlog/tests/catch.hpp	/^    namespace Impl {$/;"	n	namespace:Catch::Matchers
InDeclarationOrder	vendor/spdlog/tests/catch.hpp	/^        InDeclarationOrder,$/;"	e	enum:Catch::RunTests::InWhatOrder
InLexicographicalOrder	vendor/spdlog/tests/catch.hpp	/^        InLexicographicalOrder,$/;"	e	enum:Catch::RunTests::InWhatOrder
InProcessStackDumping	dependencies/include/libplatform/libplatform.h	/^enum class InProcessStackDumping { kDisabled, kEnabled };$/;"	g	namespace:v8::platform
InRandomOrder	vendor/spdlog/tests/catch.hpp	/^        InRandomOrder$/;"	e	enum:Catch::RunTests::InWhatOrder
InWhatOrder	vendor/spdlog/tests/catch.hpp	/^    struct RunTests { enum InWhatOrder {$/;"	g	struct:Catch::RunTests
IndexFilter	dependencies/include/v8.h	/^enum class IndexFilter { kIncludeIndices, kSkipIndices };$/;"	g	namespace:v8
IndexedPropertyDefinerCallback	dependencies/include/v8.h	/^typedef void (*IndexedPropertyDefinerCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(uint32_t index,const PropertyDescriptor & desc,const PropertyCallbackInfo<Value> & info)
IndexedPropertyDeleterCallback	dependencies/include/v8.h	/^typedef void (*IndexedPropertyDeleterCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(uint32_t index,const PropertyCallbackInfo<Boolean> & info)
IndexedPropertyDescriptorCallback	dependencies/include/v8.h	/^typedef void (*IndexedPropertyDescriptorCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(uint32_t index,const PropertyCallbackInfo<Value> & info)
IndexedPropertyEnumeratorCallback	dependencies/include/v8.h	/^typedef void (*IndexedPropertyEnumeratorCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(const PropertyCallbackInfo<Array> & info)
IndexedPropertyGetterCallback	dependencies/include/v8.h	/^typedef void (*IndexedPropertyGetterCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(uint32_t index,const PropertyCallbackInfo<Value> & info)
IndexedPropertyHandlerConfiguration	dependencies/include/v8.h	/^  IndexedPropertyHandlerConfiguration($/;"	f	struct:v8::IndexedPropertyHandlerConfiguration
IndexedPropertyHandlerConfiguration	dependencies/include/v8.h	/^struct IndexedPropertyHandlerConfiguration {$/;"	s	namespace:v8
IndexedPropertyQueryCallback	dependencies/include/v8.h	/^typedef void (*IndexedPropertyQueryCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(uint32_t index,const PropertyCallbackInfo<Integer> & info)
IndexedPropertySetterCallback	dependencies/include/v8.h	/^typedef void (*IndexedPropertySetterCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(uint32_t index,Local<Value> value,const PropertyCallbackInfo<Value> & info)
Info	dependencies/include/SFML/Audio/SoundFileReader.hpp	/^    struct Info$/;"	s	class:sf::SoundFileReader
Info	dependencies/include/SFML/Graphics/Font.hpp	/^    struct Info$/;"	s	class:sf::Font
Info	vendor/spdlog/tests/catch.hpp	/^        Info = 1,$/;"	e	enum:Catch::ResultWas::OfType
InputSoundFile	dependencies/include/SFML/Audio/InputSoundFile.hpp	/^class SFML_AUDIO_API InputSoundFile : NonCopyable$/;"	c	namespace:sf
InputStream	dependencies/include/SFML/System/InputStream.hpp	/^class SFML_SYSTEM_API InputStream$/;"	c	namespace:sf
Insert	dependencies/include/SFML/Window/Keyboard.hpp	/^        Insert,       \/\/\/< The Insert key$/;"	e	enum:sf::Keyboard::Key
Inspectable	dependencies/include/v8-inspector.h	/^  class V8_EXPORT Inspectable {$/;"	c	class:v8_inspector::V8InspectorSession
Install	vendor/spdlog/README.md	/^## Install$/;"	s
InsufficientStorageSpace	dependencies/include/SFML/Network/Ftp.hpp	/^            InsufficientStorageSpace  = 452, \/\/\/< Requested action not taken; insufficient st/;"	e	enum:sf::Ftp::Response::Status
Int16	dependencies/include/SFML/Config.hpp	/^    typedef signed   short Int16;$/;"	t	namespace:sf	typeref:typename:signed short
Int16Array	dependencies/include/v8.h	/^class V8_EXPORT Int16Array : public TypedArray {$/;"	c	namespace:v8
Int32	dependencies/include/SFML/Config.hpp	/^    typedef signed   int Int32;$/;"	t	namespace:sf	typeref:typename:signed int
Int32	dependencies/include/v8.h	/^class V8_EXPORT Int32 : public Integer {$/;"	c	namespace:v8
Int32Array	dependencies/include/v8.h	/^class V8_EXPORT Int32Array : public TypedArray {$/;"	c	namespace:v8
Int64	dependencies/include/SFML/Config.hpp	/^        typedef signed   __int64 Int64;$/;"	t	namespace:sf	typeref:typename:signed __int64
Int64	dependencies/include/SFML/Config.hpp	/^        typedef signed   long long Int64;$/;"	t	namespace:sf	typeref:typename:signed long long
Int8	dependencies/include/SFML/Config.hpp	/^    typedef signed   char Int8;$/;"	t	namespace:sf	typeref:typename:signed char
Int8Array	dependencies/include/v8.h	/^class V8_EXPORT Int8Array : public TypedArray {$/;"	c	namespace:v8
IntRect	dependencies/include/SFML/Graphics/Rect.hpp	/^typedef Rect<int>   IntRect;$/;"	t	namespace:sf	typeref:typename:Rect<int>
IntToSmi	dependencies/include/v8-internal.h	/^  V8_INLINE static constexpr internal::Address IntToSmi(int value) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE internal::Address
IntToSmi	dependencies/include/v8-internal.h	/^V8_INLINE static constexpr internal::Address IntToSmi(int value) {$/;"	f	namespace:v8::internal	typeref:typename:V8_INLINE internal::Address
Integer	dependencies/include/v8.h	/^class V8_EXPORT Integer : public Number {$/;"	c	namespace:v8
IntegrityLevel	dependencies/include/v8.h	/^enum class IntegrityLevel { kFrozen, kSealed };$/;"	g	namespace:v8
Internal	vendor/spdlog/tests/catch.hpp	/^namespace Internal {$/;"	n	namespace:Catch
InternalFieldCount	dependencies/include/v8.h	/^  V8_INLINE static int InternalFieldCount($/;"	f	class:v8::Object	typeref:typename:V8_INLINE int
InternalServerError	dependencies/include/SFML/Network/Http.hpp	/^            InternalServerError = 500, \/\/\/< The server encountered an unexpected error$/;"	e	enum:sf::Http::Response::Status
Internals	dependencies/include/v8-internal.h	/^class Internals {$/;"	c	namespace:v8::internal
Intrinsic	dependencies/include/v8.h	/^enum Intrinsic {$/;"	g	namespace:v8
InvalidFile	dependencies/include/SFML/Network/Ftp.hpp	/^            InvalidFile      = 1003  \/\/\/< Not part of the FTP standard, generated by SFML whe/;"	e	enum:sf::Ftp::Response::Status
InvalidPos	dependencies/include/SFML/System/String.hpp	/^    static const std::size_t InvalidPos; \/\/\/< Represents an invalid position in the string$/;"	m	class:sf::String	typeref:typename:const std::size_t
InvalidResponse	dependencies/include/SFML/Network/Ftp.hpp	/^            InvalidResponse  = 1000, \/\/\/< Not part of the FTP standard, generated by SFML whe/;"	e	enum:sf::Ftp::Response::Status
InvalidResponse	dependencies/include/SFML/Network/Http.hpp	/^            InvalidResponse  = 1000, \/\/\/< Response is not a valid HTTP one$/;"	e	enum:sf::Http::Response::Status
IpAddress	dependencies/include/SFML/Network/IpAddress.hpp	/^class SFML_NETWORK_API IpAddress$/;"	c	namespace:sf
IsArgumentFilterEnabled	dependencies/include/libplatform/v8-tracing.h	/^  bool IsArgumentFilterEnabled() const { return enable_argument_filter_; }$/;"	f	class:v8::platform::tracing::TraceConfig	typeref:typename:bool
IsBool	vendor/spdlog/tests/catch.hpp	/^        template<>              struct IsBool<bool> { static const bool value = true; };$/;"	s	namespace:Clara::Detail
IsBool	vendor/spdlog/tests/catch.hpp	/^        template<typename T>    struct IsBool       { static const bool value = false; };$/;"	s	namespace:Clara::Detail
IsCacheable	dependencies/include/v8.h	/^    virtual bool IsCacheable() const { return true; }$/;"	f	class:v8::String::ExternalStringResourceBase	typeref:typename:bool
IsCompressible	dependencies/include/v8.h	/^    V8_DEPRECATED("Use IsCacheable().", virtual bool IsCompressible() const) {$/;"	f	class:v8::String::ExternalStringResourceBase	typeref:typename:V8_DEPRECATED ("",virtual bool const)
IsEmbedderNode	dependencies/include/v8-profiler.h	/^    virtual bool IsEmbedderNode() { return true; }$/;"	f	class:v8::EmbedderGraph::Node	typeref:typename:bool
IsEmpty	dependencies/include/v8-util.h	/^    bool IsEmpty() const {$/;"	f	class:v8::PersistentValueMapBase::PersistentValueReference	typeref:typename:bool
IsEmpty	dependencies/include/v8-util.h	/^  bool IsEmpty() const {$/;"	f	class:v8::PersistentValueVector	typeref:typename:bool
IsEmpty	dependencies/include/v8-util.h	/^  static bool IsEmpty(const Impl* impl) {$/;"	f	class:v8::DefaultPersistentValueVectorTraits	typeref:typename:bool
IsEmpty	dependencies/include/v8.h	/^  V8_INLINE bool IsEmpty() const { return val_ == nullptr; }$/;"	f	class:v8::Eternal	typeref:typename:V8_INLINE bool
IsEmpty	dependencies/include/v8.h	/^  V8_INLINE bool IsEmpty() const { return val_ == nullptr; }$/;"	f	class:v8::Local	typeref:typename:V8_INLINE bool
IsEmpty	dependencies/include/v8.h	/^  V8_INLINE bool IsEmpty() const { return val_ == nullptr; }$/;"	f	class:v8::MaybeLocal	typeref:typename:V8_INLINE bool
IsEmpty	dependencies/include/v8.h	/^  V8_INLINE bool IsEmpty() const { return val_ == nullptr; }$/;"	f	class:v8::PersistentBase	typeref:typename:V8_INLINE bool
IsEqualTo	vendor/spdlog/tests/catch.hpp	/^        IsEqualTo,$/;"	e	enum:Catch::Internal::Operator
IsExternalTwoByteString	dependencies/include/v8-internal.h	/^  V8_INLINE static bool IsExternalTwoByteString(int instance_type) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE bool
IsFull	dependencies/include/libplatform/v8-tracing.h	/^  bool IsFull() const { return next_free_ == kChunkSize; }$/;"	f	class:v8::platform::tracing::TraceBufferChunk	typeref:typename:bool
IsGreaterThan	vendor/spdlog/tests/catch.hpp	/^        IsGreaterThan,$/;"	e	enum:Catch::Internal::Operator
IsGreaterThanOrEqualTo	vendor/spdlog/tests/catch.hpp	/^        IsGreaterThanOrEqualTo$/;"	e	enum:Catch::Internal::Operator
IsHidden	vendor/spdlog/tests/catch.hpp	/^            IsHidden = 1 << 1,$/;"	e	enum:Catch::TestCaseInfo::SpecialProperties
IsLessThan	vendor/spdlog/tests/catch.hpp	/^        IsLessThan,$/;"	e	enum:Catch::Internal::Operator
IsLessThanOrEqualTo	vendor/spdlog/tests/catch.hpp	/^        IsLessThanOrEqualTo,$/;"	e	enum:Catch::Internal::Operator
IsModule	dependencies/include/v8.h	/^  bool IsModule() const { return (flags_ & kIsModule) != 0; }$/;"	f	class:v8::ScriptOriginOptions	typeref:typename:bool
IsNeuterable	dependencies/include/v8.h	/^                    inline bool IsNeuterable() const) {$/;"	f	class:v8::ArrayBuffer	typeref:typename:V8_DEPRECATE_SOON ("",inline bool const)
IsNotEqualTo	vendor/spdlog/tests/catch.hpp	/^        IsNotEqualTo,$/;"	e	enum:Catch::Internal::Operator
IsOpaque	dependencies/include/v8.h	/^  bool IsOpaque() const { return (flags_ & kIsOpaque) != 0; }$/;"	f	class:v8::ScriptOriginOptions	typeref:typename:bool
IsRootNode	dependencies/include/v8-profiler.h	/^    virtual bool IsRootNode() { return false; }$/;"	f	class:v8::EmbedderGraph::Node	typeref:typename:bool
IsSharedCrossOrigin	dependencies/include/v8.h	/^  bool IsSharedCrossOrigin() const {$/;"	f	class:v8::ScriptOriginOptions	typeref:typename:bool
IsStreamInsertable	vendor/spdlog/tests/catch.hpp	/^    struct IsStreamInsertable : IsStreamInsertableHelper<T>::type {};$/;"	s	namespace:Catch::Detail
IsStreamInsertable	vendor/spdlog/tests/catch.hpp	/^    struct IsStreamInsertable {$/;"	s	namespace:Catch::Detail
IsStreamInsertableHelper	vendor/spdlog/tests/catch.hpp	/^    class IsStreamInsertableHelper {$/;"	c	namespace:Catch::Detail
IsSystraceEnabled	dependencies/include/libplatform/v8-tracing.h	/^  bool IsSystraceEnabled() const { return enable_systrace_; }$/;"	f	class:v8::platform::tracing::TraceConfig	typeref:typename:bool
IsValidSmi	dependencies/include/v8-internal.h	/^  V8_INLINE static constexpr bool IsValidSmi(intptr_t value) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE bool
IsValidSmi	dependencies/include/v8-internal.h	/^  V8_INLINE static constexpr bool IsValidSmi(intptr_t value) {$/;"	f	struct:v8::internal::SmiTagging	typeref:typename:V8_INLINE bool
IsWasm	dependencies/include/v8.h	/^  bool IsWasm() const { return (flags_ & kIsWasm) != 0; }$/;"	f	class:v8::ScriptOriginOptions	typeref:typename:bool
IsWeak	dependencies/include/v8-util.h	/^  bool IsWeak() { return Traits::kCallbackType != kNotWeak; }$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:bool
It	dependencies/include/v8-util.h	/^    typedef typename Traits::Iterator It;$/;"	t	function:v8::PersistentValueMapBase::Clear	typeref:typename:Traits::Iterator
It	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef internal::truncating_iterator<OutputIt> It;$/;"	t	function:format_to_n	typeref:typename:internal::truncating_iterator<OutputIt>
It	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef internal::truncating_iterator<OutputIt> It;$/;"	t	function:vformat_to_n	typeref:typename:internal::truncating_iterator<OutputIt>
Italic	dependencies/include/SFML/Graphics/Text.hpp	/^        Italic        = 1 << 1, \/\/\/< Italic characters$/;"	e	enum:sf::Text::Style
Iter	vendor/spdlog/include/spdlog/fmt/bin_to_hex.h	/^    using Iter = typename Container::const_iterator;$/;"	t	function:spdlog::to_hex	typeref:typename:Container::const_iterator
Iterator	dependencies/include/SFML/System/String.hpp	/^    typedef std::basic_string<Uint32>::iterator       Iterator;      \/\/\/< Iterator type$/;"	t	class:sf::String	typeref:typename:std::basic_string<Uint32>::iterator
Iterator	dependencies/include/v8-util.h	/^  typedef typename Impl::iterator Iterator;$/;"	t	class:v8::StdMapTraits	typeref:typename:Impl::iterator
Ivec2	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef Vector2<int> Ivec2;$/;"	t	namespace:sf::Glsl	typeref:typename:Vector2<int>
Ivec3	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef Vector3<int> Ivec3;$/;"	t	namespace:sf::Glsl	typeref:typename:Vector3<int>
Ivec4	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef implementation-defined Ivec4;$/;"	t	namespace:sf::Glsl	typeref:typename:implementation-defined
Ivec4	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef priv::Vector4<int> Ivec4;$/;"	t	namespace:sf::Glsl	typeref:typename:priv::Vector4<int>
J	dependencies/include/SFML/Window/Keyboard.hpp	/^        J,            \/\/\/< The J key$/;"	e	enum:sf::Keyboard::Key
JS	dependencies/include/v8.h	/^  JS,$/;"	e	enum:v8::StateTag
JSEntryStub	dependencies/include/v8.h	/^struct JSEntryStub {$/;"	s	namespace:v8
JSON	dependencies/include/v8.h	/^class V8_EXPORT JSON {$/;"	c	namespace:v8
JSON_CATCH	dependencies/include/nlohmann/json.hpp	/^    #define JSON_CATCH /;"	d
JSON_CATCH	dependencies/include/nlohmann/json.hpp	/^    #define JSON_CATCH(/;"	d
JSON_DEPRECATED	dependencies/include/nlohmann/json.hpp	/^    #define JSON_DEPRECATED /;"	d
JSON_DEPRECATED	dependencies/include/nlohmann/json.hpp	/^    #define JSON_DEPRECATED$/;"	d
JSON_HAS_CPP_14	dependencies/include/nlohmann/json.hpp	/^    #define JSON_HAS_CPP_14$/;"	d
JSON_HAS_CPP_17	dependencies/include/nlohmann/json.hpp	/^    #define JSON_HAS_CPP_17$/;"	d
JSON_INTERNAL_CATCH	dependencies/include/nlohmann/json.hpp	/^    #define JSON_INTERNAL_CATCH /;"	d
JSON_INTERNAL_CATCH	dependencies/include/nlohmann/json.hpp	/^    #define JSON_INTERNAL_CATCH(/;"	d
JSON_LIKELY	dependencies/include/nlohmann/json.hpp	/^    #define JSON_LIKELY(/;"	d
JSON_THROW	dependencies/include/nlohmann/json.hpp	/^    #define JSON_THROW /;"	d
JSON_THROW	dependencies/include/nlohmann/json.hpp	/^    #define JSON_THROW(/;"	d
JSON_TRY	dependencies/include/nlohmann/json.hpp	/^    #define JSON_TRY /;"	d
JSON_UNLIKELY	dependencies/include/nlohmann/json.hpp	/^    #define JSON_UNLIKELY(/;"	d
Joystick	dependencies/include/SFML/Window/Joystick.hpp	/^class SFML_WINDOW_API Joystick$/;"	c	namespace:sf
JoystickButtonEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct JoystickButtonEvent$/;"	s	class:sf::Event
JoystickButtonPressed	dependencies/include/SFML/Window/Event.hpp	/^        JoystickButtonPressed,  \/\/\/< A joystick button was pressed (data in event.joystickBut/;"	e	enum:sf::Event::EventType
JoystickButtonReleased	dependencies/include/SFML/Window/Event.hpp	/^        JoystickButtonReleased, \/\/\/< A joystick button was released (data in event.joystickBu/;"	e	enum:sf::Event::EventType
JoystickConnectEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct JoystickConnectEvent$/;"	s	class:sf::Event
JoystickConnected	dependencies/include/SFML/Window/Event.hpp	/^        JoystickConnected,      \/\/\/< A joystick was connected (data in event.joystickConnect)$/;"	e	enum:sf::Event::EventType
JoystickDisconnected	dependencies/include/SFML/Window/Event.hpp	/^        JoystickDisconnected,   \/\/\/< A joystick was disconnected (data in event.joystickConne/;"	e	enum:sf::Event::EventType
JoystickMoveEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct JoystickMoveEvent$/;"	s	class:sf::Event
JoystickMoved	dependencies/include/SFML/Window/Event.hpp	/^        JoystickMoved,          \/\/\/< The joystick moved along an axis (data in event.joystick/;"	e	enum:sf::Event::EventType
JunitReporter	vendor/spdlog/tests/catch.hpp	/^        JunitReporter( ReporterConfig const& _config )$/;"	f	class:Catch::JunitReporter
JunitReporter	vendor/spdlog/tests/catch.hpp	/^    class JunitReporter : public CumulativeReporterBase {$/;"	c	namespace:Catch
Just copy the headers:	vendor/spdlog/README.md	/^#### Just copy the headers:$/;"	t
K	dependencies/include/SFML/Window/Keyboard.hpp	/^        K,            \/\/\/< The K key$/;"	e	enum:sf::Keyboard::Key
Key	dependencies/include/SFML/Window/Keyboard.hpp	/^    enum Key$/;"	g	class:sf::Keyboard
Key	dependencies/include/v8-util.h	/^  static K Key(Iterator it) { return it->first; }$/;"	f	class:v8::StdMapTraits	typeref:typename:K
KeyCollectionMode	dependencies/include/v8.h	/^enum class KeyCollectionMode { kOwnOnly, kIncludePrototypes };$/;"	g	namespace:v8
KeyConversionMode	dependencies/include/v8.h	/^enum class KeyConversionMode { kConvertToString, kKeepNumbers };$/;"	g	namespace:v8
KeyCount	dependencies/include/SFML/Window/Keyboard.hpp	/^        KeyCount,     \/\/\/< Keep last -- the total number of keyboard keys$/;"	e	enum:sf::Keyboard::Key
KeyEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct KeyEvent$/;"	s	class:sf::Event
KeyFromWeakCallbackInfo	dependencies/include/v8-util.h	/^  static K KeyFromWeakCallbackInfo($/;"	f	class:v8::DefaultGlobalMapTraits	typeref:typename:K
KeyFromWeakCallbackInfo	dependencies/include/v8-util.h	/^  static K KeyFromWeakCallbackInfo($/;"	f	class:v8::DefaultPersistentValueMapTraits	typeref:typename:K
KeyPressed	dependencies/include/SFML/Window/Event.hpp	/^        KeyPressed,             \/\/\/< A key was pressed (data in event.key)$/;"	e	enum:sf::Event::EventType
KeyReleased	dependencies/include/SFML/Window/Event.hpp	/^        KeyReleased,            \/\/\/< A key was released (data in event.key)$/;"	e	enum:sf::Event::EventType
Keyboard	dependencies/include/SFML/Window/Keyboard.hpp	/^class SFML_WINDOW_API Keyboard$/;"	c	namespace:sf
Kind	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  enum Kind { NONE, INDEX, NAME };$/;"	g	struct:internal::arg_ref
L	dependencies/include/SFML/Window/Keyboard.hpp	/^        L,            \/\/\/< The L key$/;"	e	enum:sf::Keyboard::Key
LAlt	dependencies/include/SFML/Window/Keyboard.hpp	/^        LAlt,         \/\/\/< The left Alt key$/;"	e	enum:sf::Keyboard::Key
LBracket	dependencies/include/SFML/Window/Keyboard.hpp	/^        LBracket,     \/\/\/< The [ key$/;"	e	enum:sf::Keyboard::Key
LC_NUMERIC_MASK	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  enum { LC_NUMERIC_MASK = LC_NUMERIC };$/;"	e	enum:Locale::__anon08854cb10203
LControl	dependencies/include/SFML/Window/Keyboard.hpp	/^        LControl,     \/\/\/< The left Control key$/;"	e	enum:sf::Keyboard::Key
LDPFALGS	vendor/spdlog/tests/Makefile	/^LDPFALGS = -pthread$/;"	m
LOCAL_MODULE	vendor/spdlog/example/jni/Android.mk	/^LOCAL_MODULE := example$/;"	m
LOCAL_PATH	vendor/spdlog/example/jni/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_SRC_FILES	vendor/spdlog/example/jni/Android.mk	/^LOCAL_SRC_FILES := example.cpp$/;"	m
LShift	dependencies/include/SFML/Window/Keyboard.hpp	/^        LShift,       \/\/\/< The left Shift key$/;"	e	enum:sf::Keyboard::Key
LSystem	dependencies/include/SFML/Window/Keyboard.hpp	/^        LSystem,      \/\/\/< The left OS specific key: window (Windows and Linux), apple (MacOS/;"	e	enum:sf::Keyboard::Key
LazyStat	vendor/spdlog/tests/catch.hpp	/^        LazyStat() : used( false ) {}$/;"	f	struct:Catch::LazyStat
LazyStat	vendor/spdlog/tests/catch.hpp	/^    struct LazyStat : Option<T> {$/;"	s	namespace:Catch
Leak	dependencies/include/v8-util.h	/^  static PersistentContainerValue Leak(Global<V>* persistent) {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:PersistentContainerValue
Left	dependencies/include/SFML/Window/Keyboard.hpp	/^        Left,         \/\/\/< Left arrow$/;"	e	enum:sf::Keyboard::Key
Left	dependencies/include/SFML/Window/Mouse.hpp	/^        Left,       \/\/\/< The left mouse button$/;"	e	enum:sf::Mouse::Button
LegacyBuildEmbedderGraphCallback	dependencies/include/v8-profiler.h	/^  typedef void (*LegacyBuildEmbedderGraphCallback)(v8::Isolate* isolate,$/;"	t	class:v8::HeapProfiler	typeref:typename:void (*)(v8::Isolate * isolate,v8::EmbedderGraph * graph)
LegacyReporterAdapter	vendor/spdlog/tests/catch.hpp	/^    LegacyReporterAdapter::LegacyReporterAdapter( Ptr<IReporter> const& legacyReporter )$/;"	f	class:Catch::LegacyReporterAdapter
LegacyReporterAdapter	vendor/spdlog/tests/catch.hpp	/^    class LegacyReporterAdapter : public SharedImpl<IStreamingReporter>$/;"	c	namespace:Catch
LegacyReporterRegistrar	vendor/spdlog/tests/catch.hpp	/^        LegacyReporterRegistrar( std::string const& name ) {$/;"	f	class:Catch::LegacyReporterRegistrar
LegacyReporterRegistrar	vendor/spdlog/tests/catch.hpp	/^    class LegacyReporterRegistrar {$/;"	c	namespace:Catch
Level	vendor/spdlog/tests/catch.hpp	/^    struct Verbosity { enum Level {$/;"	g	struct:Catch::Verbosity
LexSort	vendor/spdlog/tests/catch.hpp	/^        struct LexSort {$/;"	s	class:Catch::TestRegistry
LightGrey	vendor/spdlog/tests/catch.hpp	/^            LightGrey = Bright | Grey,$/;"	e	enum:Catch::Colour::Code
LineStrip	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^    LineStrip,     \/\/\/< List of connected lines, a point uses the previous point to form a li/;"	e	enum:sf::PrimitiveType
LineTick	dependencies/include/v8-profiler.h	/^  struct LineTick {$/;"	s	class:v8::CpuProfileNode
Lines	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^    Lines,         \/\/\/< List of individual lines$/;"	e	enum:sf::PrimitiveType
LinesStrip	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^    LinesStrip     = LineStrip,     \/\/\/< \\deprecated Use LineStrip instead$/;"	e	enum:sf::PrimitiveType
Listener	dependencies/include/SFML/Audio/Listener.hpp	/^class SFML_AUDIO_API Listener$/;"	c	namespace:sf
ListingResponse	dependencies/include/SFML/Network/Ftp.hpp	/^    class SFML_NETWORK_API ListingResponse : public Response$/;"	c	class:sf::Ftp
Little	vendor/spdlog/tests/catch.hpp	/^            enum Arch { Big, Little };$/;"	e	enum:Catch::Detail::__anon368216750c10::Endianness::Arch
Local	dependencies/include/v8.h	/^  V8_INLINE Local() : val_(nullptr) {}$/;"	f	class:v8::Local	typeref:typename:V8_INLINE
Local	dependencies/include/v8.h	/^  V8_INLINE Local(Local<S> that)$/;"	f	class:v8::Local	typeref:typename:V8_INLINE
Local	dependencies/include/v8.h	/^  explicit V8_INLINE Local(T* that) : val_(that) {}$/;"	f	class:v8::Local	typeref:typename:V8_INLINE
Local	dependencies/include/v8.h	/^class Local {$/;"	c	namespace:v8
LocalError	dependencies/include/SFML/Network/Ftp.hpp	/^            LocalError                = 451, \/\/\/< Requested action aborted, local error in pr/;"	e	enum:sf::Ftp::Response::Status
LocalHost	dependencies/include/SFML/Network/IpAddress.hpp	/^    static const IpAddress LocalHost; \/\/\/< The "localhost" address (for connecting a computer/;"	m	class:sf::IpAddress	typeref:typename:const IpAddress
Locale	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  Locale() : locale_(newlocale(LC_NUMERIC_MASK, "C", FMT_NULL)) {$/;"	f	class:Locale
Locale	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^class Locale {$/;"	c
Location	dependencies/include/v8.h	/^  Location(int line_number, int column_number)$/;"	f	class:v8::Location
Location	dependencies/include/v8.h	/^class V8_EXPORT Location {$/;"	c	namespace:v8
Lock	dependencies/include/SFML/System/Lock.hpp	/^class SFML_SYSTEM_API Lock : NonCopyable$/;"	c	namespace:sf
Lock	dependencies/include/v8.h	/^    virtual void Lock() const {}$/;"	f	class:v8::String::ExternalStringResourceBase	typeref:typename:void
LoggedIn	dependencies/include/SFML/Network/Ftp.hpp	/^            LoggedIn              = 230, \/\/\/< User logged in, proceed. Logged out if appropri/;"	e	enum:sf::Ftp::Response::Status
Logger with multi sinks - each with different format and log level	vendor/spdlog/README.md	/^#### Logger with multi sinks - each with different format and log level$/;"	t
LongOpt	vendor/spdlog/tests/catch.hpp	/^            enum Type { Positional, ShortOpt, LongOpt };$/;"	e	enum:Clara::Parser::Token::Type
LostFocus	dependencies/include/SFML/Window/Event.hpp	/^        LostFocus,              \/\/\/< The window lost the focus (no data)$/;"	e	enum:sf::Event::EventType
M	dependencies/include/SFML/Window/Keyboard.hpp	/^        M,            \/\/\/< The M key$/;"	e	enum:sf::Keyboard::Key
MAX_FORMAT_SIZE	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  enum { MAX_FORMAT_SIZE = 10}; \/\/ longest format: %#-*.*Lg$/;"	e	enum:basic_writer::write_double_sprintf::__anondc8451670703
METHOD_AS_TEST_CASE	vendor/spdlog/tests/catch.hpp	/^    #define METHOD_AS_TEST_CASE(/;"	d
MINGW	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^  set(MINGW 1)$/;"	v
MINGW	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^  set(MINGW 1)$/;"	v
MINUS_FLAG	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^enum {SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8};$/;"	e	enum:__anondc8451670203
M_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit M_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::M_formatter
M_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class M_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
Magenta	dependencies/include/SFML/Graphics/Color.hpp	/^    static const Color Magenta;     \/\/\/< Magenta predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
Magnetometer	dependencies/include/SFML/Window/Sensor.hpp	/^        Magnetometer,     \/\/\/< Measures the ambient magnetic field (micro-teslas)$/;"	e	enum:sf::Sensor::Type
Map	dependencies/include/v8.h	/^class V8_EXPORT Map : public Object {$/;"	c	namespace:v8
MapFromWeakCallbackInfo	dependencies/include/v8-util.h	/^  static MapType* MapFromWeakCallbackInfo($/;"	f	class:v8::DefaultGlobalMapTraits	typeref:typename:MapType *
MapFromWeakCallbackInfo	dependencies/include/v8-util.h	/^  static MapType* MapFromWeakCallbackInfo($/;"	f	class:v8::DefaultPersistentValueMapTraits	typeref:typename:MapType *
MapType	dependencies/include/v8-util.h	/^      MapType;$/;"	t	class:v8::DefaultPersistentValueMapTraits	typeref:typename:PersistentValueMap<K,V,DefaultPersistentValueMapTraits<K,V>>
MapType	dependencies/include/v8-util.h	/^  typedef GlobalValueMap<K, V, DefaultGlobalMapTraits<K, V> > MapType;$/;"	t	class:v8::DefaultGlobalMapTraits	typeref:typename:GlobalValueMap<K,V,DefaultGlobalMapTraits<K,V>>
Mat3	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef implementation-defined Mat3;$/;"	t	namespace:sf::Glsl	typeref:typename:implementation-defined
Mat3	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef priv::Matrix<3, 3> Mat3;$/;"	t	namespace:sf::Glsl	typeref:typename:priv::Matrix<3,3>
Mat4	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef implementation-defined Mat4;$/;"	t	namespace:sf::Glsl	typeref:typename:implementation-defined
Mat4	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef priv::Matrix<4, 4> Mat4;$/;"	t	namespace:sf::Glsl	typeref:typename:priv::Matrix<4,4>
Matcher	vendor/spdlog/tests/catch.hpp	/^    struct Matcher : SharedImpl<IShared>$/;"	s	namespace:Catch::Matchers::Impl
MatcherImpl	vendor/spdlog/tests/catch.hpp	/^    struct MatcherImpl : Matcher<ExpressionT> {$/;"	s	namespace:Catch::Matchers::Impl
Matchers	vendor/spdlog/tests/catch.hpp	/^    namespace Matchers {$/;"	n	namespace:Catch
Matchers	vendor/spdlog/tests/catch.hpp	/^namespace Matchers {$/;"	n	namespace:Catch
Matrix	dependencies/include/SFML/Graphics/Glsl.inl	/^    Matrix(const Transform& transform)$/;"	f	struct:Matrix	file:
Matrix	dependencies/include/SFML/Graphics/Glsl.inl	/^    explicit Matrix(const float* pointer)$/;"	f	struct:Matrix	file:
Matrix	dependencies/include/SFML/Graphics/Glsl.inl	/^struct Matrix$/;"	s	file:
MaxDatagramSize	dependencies/include/SFML/Network/UdpSocket.hpp	/^        MaxDatagramSize = 65507 \/\/\/< The maximum number of bytes that can be sent in a single/;"	e	enum:sf::UdpSocket::__anond7159df00103
MayFail	vendor/spdlog/tests/catch.hpp	/^            MayFail = 1 << 3,$/;"	e	enum:Catch::TestCaseInfo::SpecialProperties
MaybeLocal	dependencies/include/v8.h	/^  V8_INLINE MaybeLocal() : val_(nullptr) {}$/;"	f	class:v8::MaybeLocal	typeref:typename:V8_INLINE
MaybeLocal	dependencies/include/v8.h	/^  V8_INLINE MaybeLocal(Local<S> that)$/;"	f	class:v8::MaybeLocal	typeref:typename:V8_INLINE
MaybeLocal	dependencies/include/v8.h	/^class MaybeLocal {$/;"	c	namespace:v8
MemoryInputStream	dependencies/include/SFML/System/MemoryInputStream.hpp	/^class SFML_SYSTEM_API MemoryInputStream : public InputStream$/;"	c	namespace:sf
MemoryRange	dependencies/include/v8.h	/^struct MemoryRange {$/;"	s	namespace:v8
MemorySpan	dependencies/include/v8.h	/^  constexpr MemorySpan(T* data, size_t size) : data_(data), size_(size) {}$/;"	f	class:v8::MemorySpan
MemorySpan	dependencies/include/v8.h	/^class V8_EXPORT MemorySpan {$/;"	c	namespace:v8
Menu	dependencies/include/SFML/Window/Keyboard.hpp	/^        Menu,         \/\/\/< The Menu key$/;"	e	enum:sf::Keyboard::Key
Message	dependencies/include/v8.h	/^class V8_EXPORT Message {$/;"	c	namespace:v8
MessageBuilder	vendor/spdlog/tests/catch.hpp	/^        MessageBuilder( std::string const& macroName,$/;"	f	struct:Catch::MessageBuilder
MessageBuilder	vendor/spdlog/tests/catch.hpp	/^    struct MessageBuilder {$/;"	s	namespace:Catch
MessageInfo	vendor/spdlog/tests/catch.hpp	/^    MessageInfo::MessageInfo(   std::string const& _macroName,$/;"	f	class:Catch::MessageInfo
MessageInfo	vendor/spdlog/tests/catch.hpp	/^    struct MessageInfo {$/;"	s	namespace:Catch
MessageLoopBehavior	dependencies/include/libplatform/libplatform.h	/^enum class MessageLoopBehavior : bool {$/;"	g	namespace:v8::platform	typeref:typename:bool
Method	dependencies/include/SFML/Network/Http.hpp	/^        enum Method$/;"	g	class:sf::Http::Request
MethodTestCase	vendor/spdlog/tests/catch.hpp	/^    MethodTestCase( void (C::*method)() ) : m_method( method ) {}$/;"	f	class:Catch::MethodTestCase
MethodTestCase	vendor/spdlog/tests/catch.hpp	/^class MethodTestCase : public SharedImpl<ITestCase> {$/;"	c	namespace:Catch
Middle	dependencies/include/SFML/Window/Mouse.hpp	/^        Middle,     \/\/\/< The middle (wheel) mouse button$/;"	e	enum:sf::Mouse::Button
Mode	dependencies/include/libplatform/v8-tracing.h	/^  enum Mode { DISABLED = 0, RECORDING_MODE };$/;"	g	class:v8::platform::tracing::TracingController
Mode	vendor/spdlog/tests/catch.hpp	/^        enum Mode{ None, Name, QuotedName, Tag };$/;"	g	class:Catch::TestSpecParser
Module	dependencies/include/v8.h	/^class V8_EXPORT Module {$/;"	c	namespace:v8
Mouse	dependencies/include/SFML/Window/Mouse.hpp	/^class SFML_WINDOW_API Mouse$/;"	c	namespace:sf
MouseButtonEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct MouseButtonEvent$/;"	s	class:sf::Event
MouseButtonPressed	dependencies/include/SFML/Window/Event.hpp	/^        MouseButtonPressed,     \/\/\/< A mouse button was pressed (data in event.mouseButton)$/;"	e	enum:sf::Event::EventType
MouseButtonReleased	dependencies/include/SFML/Window/Event.hpp	/^        MouseButtonReleased,    \/\/\/< A mouse button was released (data in event.mouseButton)$/;"	e	enum:sf::Event::EventType
MouseEntered	dependencies/include/SFML/Window/Event.hpp	/^        MouseEntered,           \/\/\/< The mouse cursor entered the area of the window (no data/;"	e	enum:sf::Event::EventType
MouseLeft	dependencies/include/SFML/Window/Event.hpp	/^        MouseLeft,              \/\/\/< The mouse cursor left the area of the window (no data)$/;"	e	enum:sf::Event::EventType
MouseMoveEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct MouseMoveEvent$/;"	s	class:sf::Event
MouseMoved	dependencies/include/SFML/Window/Event.hpp	/^        MouseMoved,             \/\/\/< The mouse cursor moved (data in event.mouseMove)$/;"	e	enum:sf::Event::EventType
MouseWheelEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct MouseWheelEvent$/;"	s	class:sf::Event
MouseWheelMoved	dependencies/include/SFML/Window/Event.hpp	/^        MouseWheelMoved,        \/\/\/< The mouse wheel was scrolled (data in event.mouseWheel) /;"	e	enum:sf::Event::EventType
MouseWheelScrollEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct MouseWheelScrollEvent$/;"	s	class:sf::Event
MouseWheelScrolled	dependencies/include/SFML/Window/Event.hpp	/^        MouseWheelScrolled,     \/\/\/< The mouse wheel was scrolled (data in event.mouseWheelSc/;"	e	enum:sf::Event::EventType
MoveOnlyTypeForCPP03	dependencies/include/v8.h	/^  typedef void MoveOnlyTypeForCPP03;$/;"	t	class:v8::Global	typeref:typename:void
MovedPermanently	dependencies/include/SFML/Network/Http.hpp	/^            MovedPermanently = 301, \/\/\/< The requested page has permanently moved to a new lo/;"	e	enum:sf::Http::Response::Status
MovedTemporarily	dependencies/include/SFML/Network/Http.hpp	/^            MovedTemporarily = 302, \/\/\/< The requested page has temporarily moved to a new lo/;"	e	enum:sf::Http::Response::Status
MultipleChoices	dependencies/include/SFML/Network/Http.hpp	/^            MultipleChoices  = 300, \/\/\/< The requested page can be accessed from several loca/;"	e	enum:sf::Http::Response::Status
Multiply	dependencies/include/SFML/Window/Keyboard.hpp	/^        Multiply,     \/\/\/< The * key$/;"	e	enum:sf::Keyboard::Key
Music	dependencies/include/SFML/Audio/Music.hpp	/^class SFML_AUDIO_API Music : public SoundStream$/;"	c	namespace:sf
Mutex	dependencies/include/SFML/System/Mutex.hpp	/^class SFML_SYSTEM_API Mutex : NonCopyable$/;"	c	namespace:sf
N	dependencies/include/SFML/Window/Keyboard.hpp	/^        N,            \/\/\/< The N key$/;"	e	enum:sf::Keyboard::Key
NAME	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  enum Kind { NONE, INDEX, NAME };$/;"	e	enum:internal::arg_ref::Kind
NLOHMANN_BASIC_JSON_TPL	dependencies/include/nlohmann/json.hpp	/^#define NLOHMANN_BASIC_JSON_TPL /;"	d
NLOHMANN_BASIC_JSON_TPL_DECLARATION	dependencies/include/nlohmann/json.hpp	/^#define NLOHMANN_BASIC_JSON_TPL_DECLARATION /;"	d
NLOHMANN_JSON_FWD_HPP	dependencies/include/nlohmann/json.hpp	/^#define NLOHMANN_JSON_FWD_HPP$/;"	d
NLOHMANN_JSON_HPP	dependencies/include/nlohmann/json.hpp	/^#define NLOHMANN_JSON_HPP$/;"	d
NLOHMANN_JSON_SERIALIZE_ENUM	dependencies/include/nlohmann/json.hpp	/^#define NLOHMANN_JSON_SERIALIZE_ENUM(/;"	d
NLOHMANN_JSON_VERSION_MAJOR	dependencies/include/nlohmann/json.hpp	/^#define NLOHMANN_JSON_VERSION_MAJOR /;"	d
NLOHMANN_JSON_VERSION_MINOR	dependencies/include/nlohmann/json.hpp	/^#define NLOHMANN_JSON_VERSION_MINOR /;"	d
NLOHMANN_JSON_VERSION_PATCH	dependencies/include/nlohmann/json.hpp	/^#define NLOHMANN_JSON_VERSION_PATCH /;"	d
NOMINMAX	dependencies/include/SFML/Config.hpp	/^        #define NOMINMAX$/;"	d
NOMINMAX	vendor/spdlog/include/spdlog/details/console_globals.h	/^#define NOMINMAX /;"	d
NOMINMAX	vendor/spdlog/include/spdlog/details/os.h	/^#define NOMINMAX /;"	d
NOMINMAX	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^#  define NOMINMAX$/;"	d
NOMINMAX	vendor/spdlog/tests/catch.hpp	/^#define NOMINMAX$/;"	d
NONE	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  enum Kind { NONE, INDEX, NAME };$/;"	e	enum:internal::arg_ref::Kind
NO_NULL_TERMINATION	dependencies/include/v8.h	/^    NO_NULL_TERMINATION = 2,$/;"	e	enum:v8::String::WriteOptions
NO_OPTIONS	dependencies/include/v8.h	/^    NO_OPTIONS = 0,$/;"	e	enum:v8::String::WriteOptions
NSStringMatchers	vendor/spdlog/tests/catch.hpp	/^        namespace NSStringMatchers {$/;"	n	namespace:Catch::Matchers::Impl
NUM_ARGS	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  static const size_t NUM_ARGS = sizeof...(Args);$/;"	m	class:format_arg_store	typeref:typename:const size_t
NUM_ARGS	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  enum { NUM_ARGS = sizeof...(Args) };$/;"	e	enum:internal::format_string_checker::__anondc8451670403
Name	dependencies/include/v8.h	/^class V8_EXPORT Name : public Primitive {$/;"	c	namespace:v8
Name	vendor/spdlog/tests/catch.hpp	/^        enum Mode{ None, Name, QuotedName, Tag };$/;"	e	enum:Catch::TestSpecParser::Mode
NameAndDesc	vendor/spdlog/tests/catch.hpp	/^    NameAndDesc( const char* _name = "", const char* _description= "" )$/;"	f	struct:Catch::NameAndDesc
NameAndDesc	vendor/spdlog/tests/catch.hpp	/^struct NameAndDesc {$/;"	s	namespace:Catch
NamePattern	vendor/spdlog/tests/catch.hpp	/^            NamePattern( std::string const& name ) : m_name( toLower( name ) ), m_wildcard( NoWi/;"	f	class:Catch::TestSpec::NamePattern
NamePattern	vendor/spdlog/tests/catch.hpp	/^        class NamePattern : public Pattern {$/;"	c	class:Catch::TestSpec
NamePrefix	dependencies/include/v8-profiler.h	/^    virtual const char* NamePrefix() { return nullptr; }$/;"	f	class:v8::EmbedderGraph::Node	typeref:typename:const char *
NamedPropertyHandlerConfiguration	dependencies/include/v8.h	/^  NamedPropertyHandlerConfiguration($/;"	f	struct:v8::NamedPropertyHandlerConfiguration
NamedPropertyHandlerConfiguration	dependencies/include/v8.h	/^struct NamedPropertyHandlerConfiguration {$/;"	s	namespace:v8
NeedAccountToLogIn	dependencies/include/SFML/Network/Ftp.hpp	/^            NeedAccountToLogIn = 332, \/\/\/< Need account for login$/;"	e	enum:sf::Ftp::Response::Status
NeedAccountToStore	dependencies/include/SFML/Network/Ftp.hpp	/^            NeedAccountToStore      = 532, \/\/\/< Need account for storing files$/;"	e	enum:sf::Ftp::Response::Status
NeedInformation	dependencies/include/SFML/Network/Ftp.hpp	/^            NeedInformation    = 350, \/\/\/< Requested file action pending further information$/;"	e	enum:sf::Ftp::Response::Status
NeedPassword	dependencies/include/SFML/Network/Ftp.hpp	/^            NeedPassword       = 331, \/\/\/< User name ok, need password$/;"	e	enum:sf::Ftp::Response::Status
Neuter	dependencies/include/v8.h	/^  V8_DEPRECATE_SOON("Use Detach() instead.", inline void Neuter()) { Detach(); }$/;"	f	class:v8::ArrayBuffer	typeref:typename:V8_DEPRECATE_SOON ("",inline void)
Never	vendor/spdlog/tests/catch.hpp	/^        Never$/;"	e	enum:Catch::ShowDurations::OrNot
NewInstance	dependencies/include/v8.h	/^  V8_WARN_UNUSED_RESULT MaybeLocal<Object> NewInstance($/;"	f	class:v8::Function	typeref:typename:V8_WARN_UNUSED_RESULT MaybeLocal<Object>
NewLocal	dependencies/include/v8-util.h	/^    Local<V> NewLocal(Isolate* isolate) const {$/;"	f	class:v8::PersistentValueMapBase::PersistentValueReference	typeref:typename:Local<V>
NewStringType	dependencies/include/v8.h	/^  enum NewStringType {$/;"	g	class:v8::String
NewStringType	dependencies/include/v8.h	/^enum class NewStringType {$/;"	g	namespace:v8
NoAssertions	vendor/spdlog/tests/catch.hpp	/^        NoAssertions = 0x01$/;"	e	enum:Catch::WarnAbout::What
NoCacheReason	dependencies/include/v8.h	/^  enum NoCacheReason {$/;"	g	class:v8::ScriptCompiler
NoColourImpl	vendor/spdlog/tests/catch.hpp	/^        struct NoColourImpl : IColourImpl {$/;"	s	namespace:Catch::__anon368216750810
NoContent	dependencies/include/SFML/Network/Http.hpp	/^            NoContent      = 204, \/\/\/< The server didn't send any data in return$/;"	e	enum:sf::Http::Response::Status
NoLoop	dependencies/include/SFML/Audio/SoundStream.hpp	/^        NoLoop = -1 \/\/\/< "Invalid" endSeeks value, telling us to continue uninterrupted$/;"	e	enum:sf::SoundStream::__anon941a085b0103
NoOutput	vendor/spdlog/tests/catch.hpp	/^        NoOutput = 0,$/;"	e	enum:Catch::Verbosity::Level
NoWildcard	vendor/spdlog/tests/catch.hpp	/^                NoWildcard = 0,$/;"	e	enum:Catch::TestSpec::NamePattern::WildcardPosition
Node	dependencies/include/v8-profiler.h	/^  class Node {$/;"	c	class:v8::EmbedderGraph
Node	dependencies/include/v8-profiler.h	/^  struct Node {$/;"	s	class:v8::AllocationProfile
Node	vendor/spdlog/tests/catch.hpp	/^            explicit Node( T const& _value ) : value( _value ) {}$/;"	f	struct:Catch::CumulativeReporterBase::Node
Node	vendor/spdlog/tests/catch.hpp	/^        struct Node : SharedImpl<> {$/;"	s	struct:Catch::CumulativeReporterBase
NonCopyable	dependencies/include/SFML/System/NonCopyable.hpp	/^    NonCopyable() {}$/;"	f	class:sf::NonCopyable
NonCopyable	dependencies/include/SFML/System/NonCopyable.hpp	/^class SFML_SYSTEM_API NonCopyable$/;"	c	namespace:sf
NonCopyable	vendor/spdlog/tests/catch.hpp	/^        NonCopyable() {}$/;"	f	class:Catch::NonCopyable
NonCopyable	vendor/spdlog/tests/catch.hpp	/^    class NonCopyable {$/;"	c	namespace:Catch
NonCopyablePersistent	dependencies/include/v8.h	/^  typedef Persistent<T, NonCopyablePersistentTraits<T> > NonCopyablePersistent;$/;"	t	class:v8::NonCopyablePersistentTraits	typeref:typename:Persistent<T,NonCopyablePersistentTraits<T>>
NonCopyablePersistentTraits	dependencies/include/v8.h	/^class NonCopyablePersistentTraits {$/;"	c	namespace:v8
NonNestableTasksEnabled	dependencies/include/v8-platform.h	/^  virtual bool NonNestableTasksEnabled() const { return false; }$/;"	f	class:v8::TaskRunner	typeref:typename:bool
None	dependencies/include/SFML/Network/IpAddress.hpp	/^    static const IpAddress None;      \/\/\/< Value representing an empty\/invalid address$/;"	m	class:sf::IpAddress	typeref:typename:const IpAddress
None	dependencies/include/SFML/Window/WindowStyle.hpp	/^        None       = 0,      \/\/\/< No border \/ title bar (this flag and all others are mutual/;"	e	enum:sf::Style::__anonc2dbfd350103
None	dependencies/include/v8.h	/^  None = 0,$/;"	e	enum:v8::PropertyAttribute
None	vendor/spdlog/tests/catch.hpp	/^            None = 0,$/;"	e	enum:Catch::Colour::Code
None	vendor/spdlog/tests/catch.hpp	/^            None = 0,$/;"	e	enum:Catch::TestCaseInfo::SpecialProperties
None	vendor/spdlog/tests/catch.hpp	/^        enum Mode{ None, Name, QuotedName, Tag };$/;"	e	enum:Catch::TestSpecParser::Mode
Normal	vendor/spdlog/tests/catch.hpp	/^        Normal = 0x00,$/;"	e	enum:Catch::ResultDisposition::Flags
Normal	vendor/spdlog/tests/catch.hpp	/^        Normal$/;"	e	enum:Catch::Verbosity::Level
Normalized	dependencies/include/SFML/Graphics/Texture.hpp	/^        Normalized, \/\/\/< Texture coordinates in range [0 .. 1]$/;"	e	enum:sf::Texture::CoordinateType
NotAllowed	dependencies/include/SFML/Window/Cursor.hpp	/^        NotAllowed              \/\/\/< Action not allowed cursor$/;"	e	enum:sf::Cursor::Type
NotEnoughMemory	dependencies/include/SFML/Network/Ftp.hpp	/^            NotEnoughMemory         = 552, \/\/\/< Requested file action aborted, exceeded stora/;"	e	enum:sf::Ftp::Response::Status
NotFound	dependencies/include/SFML/Network/Http.hpp	/^            NotFound            = 404, \/\/\/< The requested page doesn't exist$/;"	e	enum:sf::Http::Response::Status
NotImplemented	dependencies/include/SFML/Network/Http.hpp	/^            NotImplemented      = 501, \/\/\/< The server doesn't implement a requested feature$/;"	e	enum:sf::Http::Response::Status
NotImplementedException	vendor/spdlog/tests/catch.hpp	/^        NotImplementedException( NotImplementedException const& ) {}$/;"	f	class:Catch::NotImplementedException
NotImplementedException	vendor/spdlog/tests/catch.hpp	/^    NotImplementedException::NotImplementedException( SourceLineInfo const& lineInfo )$/;"	f	class:Catch::NotImplementedException
NotImplementedException	vendor/spdlog/tests/catch.hpp	/^    class NotImplementedException : public std::exception$/;"	c	namespace:Catch
NotLoggedIn	dependencies/include/SFML/Network/Ftp.hpp	/^            NotLoggedIn             = 530, \/\/\/< Not logged in$/;"	e	enum:sf::Ftp::Response::Status
NotModified	dependencies/include/SFML/Network/Http.hpp	/^            NotModified      = 304, \/\/\/< For conditional requests, means the requested page h/;"	e	enum:sf::Http::Response::Status
NotNullLiteral	dependencies/include/v8-inspector.h	/^  enum NotNullTagEnum { NotNullLiteral };$/;"	e	enum:v8_inspector::V8ContextInfo::NotNullTagEnum
NotNullTagEnum	dependencies/include/v8-inspector.h	/^  enum NotNullTagEnum { NotNullLiteral };$/;"	g	class:v8_inspector::V8ContextInfo
NotReady	dependencies/include/SFML/Network/Socket.hpp	/^        NotReady,     \/\/\/< The socket is not ready to send \/ receive data yet$/;"	e	enum:sf::Socket::Status
NotStarted	vendor/spdlog/tests/catch.hpp	/^            NotStarted,$/;"	e	enum:Catch::SectionTracking::TrackedSection::RunState
Nothing	vendor/spdlog/tests/catch.hpp	/^        Nothing = 0x00,$/;"	e	enum:Catch::WarnAbout::What
NullBinder	vendor/spdlog/tests/catch.hpp	/^        struct NullBinder : IArgFunction<C>{$/;"	s	namespace:Clara::Detail
Num0	dependencies/include/SFML/Window/Keyboard.hpp	/^        Num0,         \/\/\/< The 0 key$/;"	e	enum:sf::Keyboard::Key
Num1	dependencies/include/SFML/Window/Keyboard.hpp	/^        Num1,         \/\/\/< The 1 key$/;"	e	enum:sf::Keyboard::Key
Num2	dependencies/include/SFML/Window/Keyboard.hpp	/^        Num2,         \/\/\/< The 2 key$/;"	e	enum:sf::Keyboard::Key
Num3	dependencies/include/SFML/Window/Keyboard.hpp	/^        Num3,         \/\/\/< The 3 key$/;"	e	enum:sf::Keyboard::Key
Num4	dependencies/include/SFML/Window/Keyboard.hpp	/^        Num4,         \/\/\/< The 4 key$/;"	e	enum:sf::Keyboard::Key
Num5	dependencies/include/SFML/Window/Keyboard.hpp	/^        Num5,         \/\/\/< The 5 key$/;"	e	enum:sf::Keyboard::Key
Num6	dependencies/include/SFML/Window/Keyboard.hpp	/^        Num6,         \/\/\/< The 6 key$/;"	e	enum:sf::Keyboard::Key
Num7	dependencies/include/SFML/Window/Keyboard.hpp	/^        Num7,         \/\/\/< The 7 key$/;"	e	enum:sf::Keyboard::Key
Num8	dependencies/include/SFML/Window/Keyboard.hpp	/^        Num8,         \/\/\/< The 8 key$/;"	e	enum:sf::Keyboard::Key
Num9	dependencies/include/SFML/Window/Keyboard.hpp	/^        Num9,         \/\/\/< The 9 key$/;"	e	enum:sf::Keyboard::Key
Number	dependencies/include/v8.h	/^class V8_EXPORT Number : public Primitive {$/;"	c	namespace:v8
NumberObject	dependencies/include/v8.h	/^class V8_EXPORT NumberObject : public Object {$/;"	c	namespace:v8
Numpad0	dependencies/include/SFML/Window/Keyboard.hpp	/^        Numpad0,      \/\/\/< The numpad 0 key$/;"	e	enum:sf::Keyboard::Key
Numpad1	dependencies/include/SFML/Window/Keyboard.hpp	/^        Numpad1,      \/\/\/< The numpad 1 key$/;"	e	enum:sf::Keyboard::Key
Numpad2	dependencies/include/SFML/Window/Keyboard.hpp	/^        Numpad2,      \/\/\/< The numpad 2 key$/;"	e	enum:sf::Keyboard::Key
Numpad3	dependencies/include/SFML/Window/Keyboard.hpp	/^        Numpad3,      \/\/\/< The numpad 3 key$/;"	e	enum:sf::Keyboard::Key
Numpad4	dependencies/include/SFML/Window/Keyboard.hpp	/^        Numpad4,      \/\/\/< The numpad 4 key$/;"	e	enum:sf::Keyboard::Key
Numpad5	dependencies/include/SFML/Window/Keyboard.hpp	/^        Numpad5,      \/\/\/< The numpad 5 key$/;"	e	enum:sf::Keyboard::Key
Numpad6	dependencies/include/SFML/Window/Keyboard.hpp	/^        Numpad6,      \/\/\/< The numpad 6 key$/;"	e	enum:sf::Keyboard::Key
Numpad7	dependencies/include/SFML/Window/Keyboard.hpp	/^        Numpad7,      \/\/\/< The numpad 7 key$/;"	e	enum:sf::Keyboard::Key
Numpad8	dependencies/include/SFML/Window/Keyboard.hpp	/^        Numpad8,      \/\/\/< The numpad 8 key$/;"	e	enum:sf::Keyboard::Key
Numpad9	dependencies/include/SFML/Window/Keyboard.hpp	/^        Numpad9,      \/\/\/< The numpad 9 key$/;"	e	enum:sf::Keyboard::Key
O	dependencies/include/SFML/Window/Keyboard.hpp	/^        O,            \/\/\/< The O key$/;"	e	enum:sf::Keyboard::Key
OBJ_FILES	vendor/spdlog/tests/Makefile	/^OBJ_FILES := $(addprefix .\/,$(notdir $(CPP_FILES:.cpp=.o)))$/;"	m
OC_TEST_CASE	vendor/spdlog/tests/catch.hpp	/^#define OC_TEST_CASE(/;"	d
ONE_BYTE	dependencies/include/v8.h	/^    enum Encoding { ONE_BYTE, TWO_BYTE, UTF8 };$/;"	e	enum:v8::ScriptCompiler::StreamedSource::Encoding
ONE_BYTE_ENCODING	dependencies/include/v8.h	/^    ONE_BYTE_ENCODING = 0x8$/;"	e	enum:v8::String::Encoding
ONLY_CONFIGURABLE	dependencies/include/v8.h	/^  ONLY_CONFIGURABLE = 4,$/;"	e	enum:v8::PropertyFilter
ONLY_ENUMERABLE	dependencies/include/v8.h	/^  ONLY_ENUMERABLE = 2,$/;"	e	enum:v8::PropertyFilter
ONLY_WRITABLE	dependencies/include/v8.h	/^  ONLY_WRITABLE = 1,$/;"	e	enum:v8::PropertyFilter
OTHER	dependencies/include/v8.h	/^  OTHER,$/;"	e	enum:v8::StateTag
Object	dependencies/include/v8.h	/^class V8_EXPORT Object : public Value {$/;"	c	namespace:v8
ObjectNameResolver	dependencies/include/v8-profiler.h	/^  class ObjectNameResolver {$/;"	c	class:v8::HeapProfiler
ObjectTemplate	dependencies/include/v8.h	/^class V8_EXPORT ObjectTemplate : public Template {$/;"	c	namespace:v8
OcMethod	vendor/spdlog/tests/catch.hpp	/^        OcMethod( Class cls, SEL sel ) : m_cls( cls ), m_sel( sel ) {}$/;"	f	class:Catch::OcMethod
OcMethod	vendor/spdlog/tests/catch.hpp	/^    class OcMethod : public SharedImpl<ITestCase> {$/;"	c	namespace:Catch
OfType	vendor/spdlog/tests/catch.hpp	/^    struct ResultWas { enum OfType {$/;"	g	struct:Catch::ResultWas
Ok	dependencies/include/SFML/Network/Ftp.hpp	/^            Ok                    = 200, \/\/\/< Command ok$/;"	e	enum:sf::Ftp::Response::Status
Ok	dependencies/include/SFML/Network/Http.hpp	/^            Ok             = 200, \/\/\/< Most common code returned when operation was successfu/;"	e	enum:sf::Http::Response::Status
Ok	vendor/spdlog/tests/catch.hpp	/^        Ok = 0,$/;"	e	enum:Catch::ResultWas::OfType
OnCriticalMemoryPressure	dependencies/include/v8-platform.h	/^  virtual bool OnCriticalMemoryPressure(size_t length) { return false; }$/;"	f	class:v8::Platform	typeref:typename:bool
OnCriticalMemoryPressure	dependencies/include/v8-platform.h	/^  virtual void OnCriticalMemoryPressure() {$/;"	f	class:v8::Platform	typeref:typename:void
OnUnusedOptions	vendor/spdlog/tests/catch.hpp	/^        struct OnUnusedOptions { enum DoWhat { Ignore, Fail }; };$/;"	s	class:Catch::Session
OnWeakCallback	dependencies/include/v8-util.h	/^  static void OnWeakCallback($/;"	f	class:v8::DefaultGlobalMapTraits	typeref:typename:void
OnWeakCallback	dependencies/include/v8-util.h	/^  static void OnWeakCallback($/;"	f	class:v8::GlobalValueMap	typeref:typename:void
One	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        One,              \/\/\/< (1, 1, 1, 1)$/;"	e	enum:sf::BlendMode::Factor
OneMinusDstAlpha	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        OneMinusDstAlpha  \/\/\/< (1, 1, 1, 1) - (dst.a, dst.a, dst.a, dst.a)$/;"	e	enum:sf::BlendMode::Factor
OneMinusDstColor	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        OneMinusDstColor, \/\/\/< (1, 1, 1, 1) - (dst.r, dst.g, dst.b, dst.a)$/;"	e	enum:sf::BlendMode::Factor
OneMinusSrcAlpha	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        OneMinusSrcAlpha, \/\/\/< (1, 1, 1, 1) - (src.a, src.a, src.a, src.a)$/;"	e	enum:sf::BlendMode::Factor
OneMinusSrcColor	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        OneMinusSrcColor, \/\/\/< (1, 1, 1, 1) - (src.r, src.g, src.b, src.a)$/;"	e	enum:sf::BlendMode::Factor
OpeningDataConnection	dependencies/include/SFML/Network/Ftp.hpp	/^            OpeningDataConnection       = 150, \/\/\/< File status ok, about to open data connec/;"	e	enum:sf::Ftp::Response::Status
Operator	vendor/spdlog/tests/catch.hpp	/^    enum Operator {$/;"	g	namespace:Catch::Internal
OperatorTraits	vendor/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsEqualTo>             { static const char* getName(){ retu/;"	s	namespace:Catch::Internal
OperatorTraits	vendor/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsGreaterThan>         { static const char* getName(){ retu/;"	s	namespace:Catch::Internal
OperatorTraits	vendor/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsGreaterThanOrEqualTo>{ static const char* getName(){ retu/;"	s	namespace:Catch::Internal
OperatorTraits	vendor/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsLessThan>            { static const char* getName(){ retu/;"	s	namespace:Catch::Internal
OperatorTraits	vendor/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsLessThanOrEqualTo>   { static const char* getName(){ retu/;"	s	namespace:Catch::Internal
OperatorTraits	vendor/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsNotEqualTo>          { static const char* getName(){ retu/;"	s	namespace:Catch::Internal
OperatorTraits	vendor/spdlog/tests/catch.hpp	/^    template<Operator Op> struct OperatorTraits             { static const char* getName(){ retu/;"	s	namespace:Catch::Internal
OptBuilder	vendor/spdlog/tests/catch.hpp	/^            OptBuilder( Arg* arg ) : ArgBuilder( arg ) {}$/;"	f	class:Clara::CommandLine::OptBuilder
OptBuilder	vendor/spdlog/tests/catch.hpp	/^            OptBuilder( OptBuilder& other ) : ArgBuilder( other ) {}$/;"	f	class:Clara::CommandLine::OptBuilder
OptBuilder	vendor/spdlog/tests/catch.hpp	/^        class OptBuilder : public ArgBuilder {$/;"	c	class:Clara::CommandLine
Option	vendor/spdlog/tests/catch.hpp	/^        Option( Option const& _other )$/;"	f	class:Catch::Option
Option	vendor/spdlog/tests/catch.hpp	/^        Option( T const& _value )$/;"	f	class:Catch::Option
Option	vendor/spdlog/tests/catch.hpp	/^        Option() : nullableValue( NULL ) {}$/;"	f	class:Catch::Option
Option	vendor/spdlog/tests/catch.hpp	/^    class Option {$/;"	c	namespace:Catch
OptionArgProperties	vendor/spdlog/tests/catch.hpp	/^    struct OptionArgProperties {$/;"	s	namespace:Clara
Options	dependencies/include/v8.h	/^  V8_INLINE ScriptOriginOptions Options() const { return options_; }$/;"	f	class:v8::ScriptOrigin	typeref:typename:V8_INLINE ScriptOriginOptions
Or use your favorite package manager:	vendor/spdlog/README.md	/^#### Or use your favorite package manager:$/;"	t
OrNot	vendor/spdlog/tests/catch.hpp	/^    struct ShowDurations { enum OrNot {$/;"	g	struct:Catch::ShowDurations
Orientation	dependencies/include/SFML/Window/Sensor.hpp	/^        Orientation,      \/\/\/< Measures the absolute 3D orientation (degrees)$/;"	e	enum:sf::Sensor::Type
OriginalExpression	vendor/spdlog/tests/catch.hpp	/^            OriginalExpression = Cyan,$/;"	e	enum:Catch::Colour::Code
OutputDebugWriter	vendor/spdlog/tests/catch.hpp	/^    struct OutputDebugWriter {$/;"	s	namespace:Catch
OutputSoundFile	dependencies/include/SFML/Audio/OutputSoundFile.hpp	/^class SFML_AUDIO_API OutputSoundFile : NonCopyable$/;"	c	namespace:sf
OutputStream	dependencies/include/v8-profiler.h	/^class V8_EXPORT OutputStream {  \/\/ NOLINT$/;"	c	namespace:v8
Overview	dependencies/include/APIDesign.md	/^# Overview$/;"	c
OwnedBuffer	dependencies/include/v8.h	/^  OwnedBuffer(std::unique_ptr<const uint8_t[]> buffer, size_t size)$/;"	f	struct:v8::OwnedBuffer
OwnedBuffer	dependencies/include/v8.h	/^struct OwnedBuffer {$/;"	s	namespace:v8
P	dependencies/include/SFML/Window/Keyboard.hpp	/^        P,            \/\/\/< The P key$/;"	e	enum:sf::Keyboard::Key
PARSER	dependencies/include/v8.h	/^  PARSER,$/;"	e	enum:v8::StateTag
PLATFORM_ID	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	file:
PLUS_FLAG	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^enum {SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8};$/;"	e	enum:__anondc8451670203
POW10_EXPONENTS	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^const int16_t basic_data<T>::POW10_EXPONENTS[] = {$/;"	m	class:internal::basic_data<T>	typeref:typename:const int16_t[]
POW10_EXPONENTS	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  static const int16_t POW10_EXPONENTS[];$/;"	m	struct:internal::basic_data	typeref:typename:const int16_t[]
POW10_SIGNIFICANDS	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^const uint64_t basic_data<T>::POW10_SIGNIFICANDS[] = {$/;"	m	class:internal::basic_data<T>	typeref:typename:const uint64_t[]
POW10_SIGNIFICANDS	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  static const uint64_t POW10_SIGNIFICANDS[];$/;"	m	struct:internal::basic_data	typeref:typename:const uint64_t[]
POWERS_OF_10_32	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^const uint32_t basic_data<T>::POWERS_OF_10_32[] = {$/;"	m	class:internal::basic_data<T>	typeref:typename:const uint32_t[]
POWERS_OF_10_32	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  static const uint32_t POWERS_OF_10_32[];$/;"	m	struct:internal::basic_data	typeref:typename:const uint32_t[]
PRESERVE_ONE_BYTE_NULL	dependencies/include/v8.h	/^    PRESERVE_ONE_BYTE_NULL = 4,$/;"	e	enum:v8::String::WriteOptions
PROHIBITS_OVERWRITING	dependencies/include/v8.h	/^  PROHIBITS_OVERWRITING = 1 << 2$/;"	e	enum:v8::AccessControl
Packet	dependencies/include/SFML/Network/Packet.hpp	/^class SFML_NETWORK_API Packet$/;"	c	namespace:sf
Page	dependencies/include/SFML/Graphics/Font.hpp	/^    struct Page$/;"	s	class:sf::Font
PageAllocator	dependencies/include/v8-platform.h	/^class PageAllocator {$/;"	c	namespace:v8
PageDown	dependencies/include/SFML/Window/Keyboard.hpp	/^        PageDown,     \/\/\/< The Page down key$/;"	e	enum:sf::Keyboard::Key
PageTable	dependencies/include/SFML/Graphics/Font.hpp	/^    typedef std::map<unsigned int, Page> PageTable; \/\/\/< Table mapping a character size to it/;"	t	class:sf::Font	typeref:typename:std::map<unsigned int,Page>
PageTypeUnknown	dependencies/include/SFML/Network/Ftp.hpp	/^            PageTypeUnknown         = 551, \/\/\/< Requested action aborted, page type unknown$/;"	e	enum:sf::Ftp::Response::Status
PageUp	dependencies/include/SFML/Window/Keyboard.hpp	/^        PageUp,       \/\/\/< The Page up key$/;"	e	enum:sf::Keyboard::Key
ParameterNotImplemented	dependencies/include/SFML/Network/Ftp.hpp	/^            ParameterNotImplemented = 504, \/\/\/< Command not implemented for that parameter$/;"	e	enum:sf::Ftp::Response::Status
ParametersUnknown	dependencies/include/SFML/Network/Ftp.hpp	/^            ParametersUnknown       = 501, \/\/\/< Syntax error in parameters or arguments$/;"	e	enum:sf::Ftp::Response::Status
Parser	vendor/spdlog/tests/catch.hpp	/^        Parser() : separators( " \\t=:" ) {}$/;"	f	struct:Clara::Parser
Parser	vendor/spdlog/tests/catch.hpp	/^    struct Parser {$/;"	s	namespace:Clara
Partial	dependencies/include/SFML/Network/Socket.hpp	/^        Partial,      \/\/\/< The socket sent a part of the data$/;"	e	enum:sf::Socket::Status
PartialContent	dependencies/include/SFML/Network/Http.hpp	/^            PartialContent = 206, \/\/\/< The server has sent a part of the resource, as a respo/;"	e	enum:sf::Http::Response::Status
Pass	dependencies/include/v8.h	/^  Global Pass() { return static_cast<Global&&>(*this); }  \/\/ NOLINT$/;"	f	class:v8::Global	typeref:typename:Global
Pattern	vendor/spdlog/tests/catch.hpp	/^        struct Pattern : SharedImpl<> {$/;"	s	class:Catch::TestSpec
Pause	dependencies/include/SFML/Window/Keyboard.hpp	/^        Pause,        \/\/\/< The Pause key$/;"	e	enum:sf::Keyboard::Key
Paused	dependencies/include/SFML/Audio/SoundSource.hpp	/^        Paused,  \/\/\/< Sound is paused$/;"	e	enum:sf::SoundSource::Status
PendingPacket	dependencies/include/SFML/Network/TcpSocket.hpp	/^    struct PendingPacket$/;"	s	class:sf::TcpSocket
Perform	dependencies/include/v8-internal.h	/^void CastCheck<false>::Perform(T* data) {}$/;"	f	class:v8::internal::CastCheck	typeref:typename:void
Perform	dependencies/include/v8-internal.h	/^void CastCheck<true>::Perform(T* data) {$/;"	f	class:v8::internal::CastCheck	typeref:typename:void
PerformCastCheck	dependencies/include/v8-internal.h	/^V8_INLINE void PerformCastCheck(T* data) {$/;"	f	namespace:v8::internal	typeref:typename:V8_INLINE void
Period	dependencies/include/SFML/Window/Keyboard.hpp	/^        Period,       \/\/\/< The . key$/;"	e	enum:sf::Keyboard::Key
Periodic flush	vendor/spdlog/README.md	/^#### Periodic flush$/;"	t
Permission	dependencies/include/v8-platform.h	/^  enum Permission {$/;"	g	class:v8::PageAllocator
Persistent	dependencies/include/v8.h	/^  V8_INLINE Persistent() : PersistentBase<T>(nullptr) {}$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE
Persistent	dependencies/include/v8.h	/^  V8_INLINE Persistent(Isolate* isolate, Local<S> that)$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE
Persistent	dependencies/include/v8.h	/^  V8_INLINE Persistent(Isolate* isolate, const Persistent<S, M2>& that)$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE
Persistent	dependencies/include/v8.h	/^  V8_INLINE Persistent(const Persistent& that) : PersistentBase<T>(nullptr) {$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE
Persistent	dependencies/include/v8.h	/^  V8_INLINE Persistent(const Persistent<S, M2>& that) : PersistentBase<T>(0) {$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE
Persistent	dependencies/include/v8.h	/^  explicit V8_INLINE Persistent(T* that) : PersistentBase<T>(that) {}$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE
Persistent	dependencies/include/v8.h	/^template <class T, class M> class Persistent : public PersistentBase<T> {$/;"	c	namespace:v8
PersistentBase	dependencies/include/v8.h	/^  explicit V8_INLINE PersistentBase(T* val) : val_(val) {}$/;"	f	class:v8::PersistentBase	typeref:typename:V8_INLINE
PersistentBase	dependencies/include/v8.h	/^template <class T> class PersistentBase {$/;"	c	namespace:v8
PersistentContainerCallbackType	dependencies/include/v8-util.h	/^enum PersistentContainerCallbackType {$/;"	g	namespace:v8
PersistentContainerValue	dependencies/include/v8-util.h	/^typedef uintptr_t PersistentContainerValue;$/;"	t	namespace:v8	typeref:typename:uintptr_t
PersistentValueMap	dependencies/include/v8-util.h	/^  PersistentValueMap(Isolate* isolate, const char* label)$/;"	f	class:v8::PersistentValueMap
PersistentValueMap	dependencies/include/v8-util.h	/^  explicit PersistentValueMap(Isolate* isolate)$/;"	f	class:v8::PersistentValueMap
PersistentValueMap	dependencies/include/v8-util.h	/^class PersistentValueMap : public PersistentValueMapBase<K, V, Traits> {$/;"	c	namespace:v8
PersistentValueMapBase	dependencies/include/v8-util.h	/^  PersistentValueMapBase(Isolate* isolate, const char* label)$/;"	f	class:v8::PersistentValueMapBase
PersistentValueMapBase	dependencies/include/v8-util.h	/^  explicit PersistentValueMapBase(Isolate* isolate)$/;"	f	class:v8::PersistentValueMapBase
PersistentValueMapBase	dependencies/include/v8-util.h	/^class PersistentValueMapBase {$/;"	c	namespace:v8
PersistentValueReference	dependencies/include/v8-util.h	/^          PersistentValueReference;$/;"	t	class:v8::GlobalValueMap	typeref:typename:PersistentValueMapBase<K,V,Traits>::PersistentValueReference
PersistentValueReference	dependencies/include/v8-util.h	/^          PersistentValueReference;$/;"	t	class:v8::PersistentValueMap	typeref:typename:PersistentValueMapBase<K,V,Traits>::PersistentValueReference
PersistentValueReference	dependencies/include/v8-util.h	/^    PersistentValueReference() : value_(kPersistentContainerNotFound) { }$/;"	f	class:v8::PersistentValueMapBase::PersistentValueReference
PersistentValueReference	dependencies/include/v8-util.h	/^    PersistentValueReference(const PersistentValueReference& other)$/;"	f	class:v8::PersistentValueMapBase::PersistentValueReference
PersistentValueReference	dependencies/include/v8-util.h	/^    explicit PersistentValueReference(PersistentContainerValue value)$/;"	f	class:v8::PersistentValueMapBase::PersistentValueReference
PersistentValueReference	dependencies/include/v8-util.h	/^  class PersistentValueReference {$/;"	c	class:v8::PersistentValueMapBase
PersistentValueVector	dependencies/include/v8-util.h	/^  explicit PersistentValueVector(Isolate* isolate) : isolate_(isolate) { }$/;"	f	class:v8::PersistentValueVector
PersistentValueVector	dependencies/include/v8-util.h	/^class PersistentValueVector {$/;"	c	namespace:v8
Pixels	dependencies/include/SFML/Graphics/Texture.hpp	/^        Pixels      \/\/\/< Texture coordinates in range [0 .. size]$/;"	e	enum:sf::Texture::CoordinateType
Platform	dependencies/include/v8-platform.h	/^class Platform {$/;"	c	namespace:v8
PlatformSmiTagging	dependencies/include/v8-internal.h	/^typedef SmiTagging<kApiIntSize> PlatformSmiTagging;$/;"	t	namespace:v8::internal	typeref:typename:SmiTagging<kApiIntSize>
PlatformSmiTagging	dependencies/include/v8-internal.h	/^typedef SmiTagging<kApiSystemPointerSize> PlatformSmiTagging;$/;"	t	namespace:v8::internal	typeref:typename:SmiTagging<kApiSystemPointerSize>
Platforms	vendor/spdlog/README.md	/^## Platforms$/;"	s
Playing	dependencies/include/SFML/Audio/SoundSource.hpp	/^        Playing  \/\/\/< Sound is playing$/;"	e	enum:sf::SoundSource::Status
PointlessCommand	dependencies/include/SFML/Network/Ftp.hpp	/^            PointlessCommand      = 202, \/\/\/< Command not implemented$/;"	e	enum:sf::Ftp::Response::Status
Points	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^    Points,        \/\/\/< List of individual points$/;"	e	enum:sf::PrimitiveType
Positional	vendor/spdlog/tests/catch.hpp	/^            enum Type { Positional, ShortOpt, LongOpt };$/;"	e	enum:Clara::Parser::Token::Type
PositionalArgProperties	vendor/spdlog/tests/catch.hpp	/^        PositionalArgProperties() : position( -1 ) {}$/;"	f	struct:Clara::PositionalArgProperties
PositionalArgProperties	vendor/spdlog/tests/catch.hpp	/^    struct PositionalArgProperties {$/;"	s	namespace:Clara
PosixColourImpl	vendor/spdlog/tests/catch.hpp	/^    class PosixColourImpl : public IColourImpl {$/;"	c	namespace:Catch::__anon368216750a10
Post	dependencies/include/SFML/Network/Http.hpp	/^            Post,  \/\/\/< Request in post mode, usually to send data to a page$/;"	e	enum:sf::Http::Request::Method
PostNonNestableTask	dependencies/include/v8-platform.h	/^  virtual void PostNonNestableTask(std::unique_ptr<Task> task) {}$/;"	f	class:v8::TaskRunner	typeref:typename:void
PovX	dependencies/include/SFML/Window/Joystick.hpp	/^        PovX, \/\/\/< The X axis of the point-of-view hat$/;"	e	enum:sf::Joystick::Axis
PovY	dependencies/include/SFML/Window/Joystick.hpp	/^        PovY  \/\/\/< The Y axis of the point-of-view hat$/;"	e	enum:sf::Joystick::Axis
Primitive	dependencies/include/v8.h	/^class V8_EXPORT Primitive : public Value { };$/;"	c	namespace:v8
PrimitiveArray	dependencies/include/v8.h	/^class V8_EXPORT PrimitiveArray {$/;"	c	namespace:v8
PrimitiveType	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^enum PrimitiveType$/;"	g	namespace:sf
Private	dependencies/include/v8.h	/^class V8_EXPORT Private : public Data {$/;"	c	namespace:v8
Promise	dependencies/include/v8.h	/^class V8_EXPORT Promise : public Object {$/;"	c	namespace:v8
PromiseState	dependencies/include/v8.h	/^  enum PromiseState { kPending, kFulfilled, kRejected };$/;"	g	class:v8::Promise
PropertyAttribute	dependencies/include/v8.h	/^enum PropertyAttribute {$/;"	g	namespace:v8
PropertyCallbackInfo	dependencies/include/v8.h	/^  V8_INLINE PropertyCallbackInfo(internal::Address* args) : args_(args) {}$/;"	f	class:v8::PropertyCallbackInfo	typeref:typename:V8_INLINE
PropertyCallbackInfo	dependencies/include/v8.h	/^class PropertyCallbackInfo {$/;"	c	namespace:v8
PropertyDescriptor	dependencies/include/v8.h	/^PropertyDescriptor::PropertyDescriptor(Local<Value> value)$/;"	f	class:v8::PropertyDescriptor
PropertyDescriptor	dependencies/include/v8.h	/^class V8_EXPORT PropertyDescriptor {$/;"	c	namespace:v8
PropertyFilter	dependencies/include/v8.h	/^enum PropertyFilter {$/;"	g	namespace:v8
PropertyHandlerFlags	dependencies/include/v8.h	/^enum class PropertyHandlerFlags {$/;"	g	namespace:v8
Proxy	dependencies/include/v8.h	/^class V8_EXPORT Proxy : public Object {$/;"	c	namespace:v8
Ptr	vendor/spdlog/tests/catch.hpp	/^        Ptr( Ptr const& other ) : m_p( other.m_p ){$/;"	f	class:Catch::Ptr
Ptr	vendor/spdlog/tests/catch.hpp	/^        Ptr( T* p ) : m_p( p ){$/;"	f	class:Catch::Ptr
Ptr	vendor/spdlog/tests/catch.hpp	/^        Ptr() : m_p( NULL ){}$/;"	f	class:Catch::Ptr
Ptr	vendor/spdlog/tests/catch.hpp	/^    class Ptr {$/;"	c	namespace:Catch
Put	dependencies/include/SFML/Network/Http.hpp	/^            Put,   \/\/\/< Request in put mode, useful for a REST API$/;"	e	enum:sf::Http::Request::Method
Q	dependencies/include/SFML/Window/Keyboard.hpp	/^        Q,            \/\/\/< The Q key$/;"	e	enum:sf::Keyboard::Key
Quads	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^    Quads,         \/\/\/< List of individual quads (deprecated, don't work with OpenGL ES)$/;"	e	enum:sf::PrimitiveType
Quiet	vendor/spdlog/tests/catch.hpp	/^        Quiet,$/;"	e	enum:Catch::Verbosity::Level
Quote	dependencies/include/SFML/Window/Keyboard.hpp	/^        Quote,        \/\/\/< The ' key$/;"	e	enum:sf::Keyboard::Key
QuotedName	vendor/spdlog/tests/catch.hpp	/^        enum Mode{ None, Name, QuotedName, Tag };$/;"	e	enum:Catch::TestSpecParser::Mode
R	dependencies/include/SFML/Window/Joystick.hpp	/^        R,    \/\/\/< The R axis$/;"	e	enum:sf::Joystick::Axis
R	dependencies/include/SFML/Window/Keyboard.hpp	/^        R,            \/\/\/< The R key$/;"	e	enum:sf::Keyboard::Key
RAlt	dependencies/include/SFML/Window/Keyboard.hpp	/^        RAlt,         \/\/\/< The right Alt key$/;"	e	enum:sf::Keyboard::Key
RBracket	dependencies/include/SFML/Window/Keyboard.hpp	/^        RBracket,     \/\/\/< The ] key$/;"	e	enum:sf::Keyboard::Key
RControl	dependencies/include/SFML/Window/Keyboard.hpp	/^        RControl,     \/\/\/< The right Control key$/;"	e	enum:sf::Keyboard::Key
RDONLY	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^    RDONLY = FMT_POSIX(O_RDONLY), \/\/ Open for reading only.$/;"	e	enum:file::__anon08854cb10103
RDWR	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^    RDWR   = FMT_POSIX(O_RDWR)    \/\/ Open for reading and writing.$/;"	e	enum:file::__anon08854cb10103
RECORDING_MODE	dependencies/include/libplatform/v8-tracing.h	/^  enum Mode { DISABLED = 0, RECORDING_MODE };$/;"	e	enum:v8::platform::tracing::TracingController::Mode
RECORD_AS_MUCH_AS_POSSIBLE	dependencies/include/libplatform/v8-tracing.h	/^  RECORD_AS_MUCH_AS_POSSIBLE,$/;"	e	enum:v8::platform::tracing::TraceRecordMode
RECORD_CONTINUOUSLY	dependencies/include/libplatform/v8-tracing.h	/^  RECORD_CONTINUOUSLY,$/;"	e	enum:v8::platform::tracing::TraceRecordMode
RECORD_UNTIL_FULL	dependencies/include/libplatform/v8-tracing.h	/^  RECORD_UNTIL_FULL,$/;"	e	enum:v8::platform::tracing::TraceRecordMode
RED	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    const WORD RED = FOREGROUND_RED;$/;"	m	class:spdlog::sinks::wincolor_sink	typeref:typename:const WORD
REGISTER_LEGACY_REPORTER	vendor/spdlog/tests/catch.hpp	/^#define REGISTER_LEGACY_REPORTER(/;"	d
REGISTER_REPORTER	vendor/spdlog/tests/catch.hpp	/^#define REGISTER_REPORTER(/;"	d
REPLACE_INVALID_UTF8	dependencies/include/v8.h	/^    REPLACE_INVALID_UTF8 = 8$/;"	e	enum:v8::String::WriteOptions
REQUIRE	vendor/spdlog/tests/catch.hpp	/^#define REQUIRE(/;"	d
REQUIRE_FALSE	vendor/spdlog/tests/catch.hpp	/^#define REQUIRE_FALSE(/;"	d
REQUIRE_NOTHROW	vendor/spdlog/tests/catch.hpp	/^#define REQUIRE_NOTHROW(/;"	d
REQUIRE_THAT	vendor/spdlog/tests/catch.hpp	/^#define REQUIRE_THAT(/;"	d
REQUIRE_THROWS	vendor/spdlog/tests/catch.hpp	/^#define REQUIRE_THROWS(/;"	d
REQUIRE_THROWS_AS	vendor/spdlog/tests/catch.hpp	/^#define REQUIRE_THROWS_AS(/;"	d
RESET_COLOR	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^template <typename T> const char basic_data<T>::RESET_COLOR[] = "\\x1b[0m";$/;"	m	class:internal::basic_data<T>	typeref:typename:const char[]
RESET_COLOR	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  static const char RESET_COLOR[];$/;"	m	struct:internal::basic_data	typeref:typename:const char[]
RShift	dependencies/include/SFML/Window/Keyboard.hpp	/^        RShift,       \/\/\/< The right Shift key$/;"	e	enum:sf::Keyboard::Key
RSystem	dependencies/include/SFML/Window/Keyboard.hpp	/^        RSystem,      \/\/\/< The right OS specific key: window (Windows and Linux), apple (MacO/;"	e	enum:sf::Keyboard::Key
R_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit R_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::R_formatter
R_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class R_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
RandomNumberGenerator	vendor/spdlog/tests/catch.hpp	/^        struct RandomNumberGenerator {$/;"	s	class:Catch::TestRegistry
RangeNotSatisfiable	dependencies/include/SFML/Network/Http.hpp	/^            RangeNotSatisfiable = 407, \/\/\/< The server can't satisfy the partial GET request /;"	e	enum:sf::Http::Response::Status
ReadEmbedderData	dependencies/include/v8-internal.h	/^  V8_INLINE static T ReadEmbedderData(const v8::Context* context, int index) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE T
ReadOnly	dependencies/include/v8.h	/^  ReadOnly = 1 << 0,$/;"	e	enum:v8::PropertyAttribute
ReadRawField	dependencies/include/v8-internal.h	/^  V8_INLINE static T ReadRawField(internal::Address heap_object_ptr,$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE T
ReadTaggedAnyField	dependencies/include/v8-internal.h	/^  V8_INLINE static internal::Address ReadTaggedAnyField($/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE internal::Address
ReadTaggedPointerField	dependencies/include/v8-internal.h	/^  V8_INLINE static internal::Address ReadTaggedPointerField($/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE internal::Address
ReadTaggedSignedField	dependencies/include/v8-internal.h	/^  V8_INLINE static internal::Address ReadTaggedSignedField($/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE internal::Address
ReaderFactory	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^    struct ReaderFactory$/;"	s	class:sf::SoundFileFactory
ReaderFactoryArray	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^    typedef std::vector<ReaderFactory> ReaderFactoryArray;$/;"	t	class:sf::SoundFileFactory	typeref:typename:std::vector<ReaderFactory>
ReconstructedExpression	vendor/spdlog/tests/catch.hpp	/^            ReconstructedExpression = Yellow,$/;"	e	enum:Catch::Colour::Code
RecordCEntryFrame	dependencies/include/v8-profiler.h	/^  enum RecordCEntryFrame { kIncludeCEntryFrame, kSkipCEntryFrame };$/;"	g	struct:v8::TickSample
Rect	dependencies/include/SFML/Graphics/Rect.hpp	/^class Rect$/;"	c	namespace:sf
Rect	dependencies/include/SFML/Graphics/Rect.inl	/^Rect<T>::Rect() :$/;"	f	class:Rect
Rect	dependencies/include/SFML/Graphics/Rect.inl	/^Rect<T>::Rect(T rectLeft, T rectTop, T rectWidth, T rectHeight) :$/;"	f	class:Rect
Rect	dependencies/include/SFML/Graphics/Rect.inl	/^Rect<T>::Rect(const Rect<U>& rectangle) :$/;"	f	class:Rect
Rect	dependencies/include/SFML/Graphics/Rect.inl	/^Rect<T>::Rect(const Vector2<T>& position, const Vector2<T>& size) :$/;"	f	class:Rect
RectangleShape	dependencies/include/SFML/Graphics/RectangleShape.hpp	/^class SFML_GRAPHICS_API RectangleShape : public Shape$/;"	c	namespace:sf
Red	dependencies/include/SFML/Graphics/Color.hpp	/^    static const Color Red;         \/\/\/< Red predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
Red	vendor/spdlog/tests/catch.hpp	/^            Red,$/;"	e	enum:Catch::Colour::Code
RegExp	dependencies/include/v8.h	/^class V8_EXPORT RegExp : public Object {$/;"	c	namespace:v8
RegisterExternallyReferencedObject	dependencies/include/v8-util.h	/^  void RegisterExternallyReferencedObject(K& key) {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:void
RegisterState	dependencies/include/v8.h	/^  RegisterState() : pc(nullptr), sp(nullptr), fp(nullptr) {}$/;"	f	struct:v8::RegisterState
RegisterState	dependencies/include/v8.h	/^struct RegisterState {$/;"	s	namespace:v8
RegistrarForTagAliases	vendor/spdlog/tests/catch.hpp	/^    RegistrarForTagAliases::RegistrarForTagAliases( char const* alias, char const* tag, SourceLi/;"	f	class:Catch::RegistrarForTagAliases
RegistrarForTagAliases	vendor/spdlog/tests/catch.hpp	/^    struct RegistrarForTagAliases {$/;"	s	namespace:Catch
RegistryHub	vendor/spdlog/tests/catch.hpp	/^            RegistryHub() {$/;"	f	class:Catch::__anon368216750610::RegistryHub
RegistryHub	vendor/spdlog/tests/catch.hpp	/^        class RegistryHub : public IRegistryHub, public IMutableRegistryHub {$/;"	c	namespace:Catch::__anon368216750610
Regular	dependencies/include/SFML/Graphics/Text.hpp	/^        Regular       = 0,      \/\/\/< Regular characters, no style$/;"	e	enum:sf::Text::Style
Release	dependencies/include/v8-util.h	/^  static Global<V> Release(PersistentContainerValue v) {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:Global<V>
Remove	dependencies/include/v8-util.h	/^  Global<V> Remove(const K& key) {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:Global<V>
Remove	dependencies/include/v8-util.h	/^  static PersistentContainerValue Remove(Impl* impl, K key) {$/;"	f	class:v8::StdMapTraits	typeref:typename:PersistentContainerValue
RemoveConstRef	vendor/spdlog/tests/catch.hpp	/^        template<typename T> struct RemoveConstRef<T const&>{ typedef T type; };$/;"	s	namespace:Clara::Detail
RemoveConstRef	vendor/spdlog/tests/catch.hpp	/^        template<typename T> struct RemoveConstRef<T const>{ typedef T type; };$/;"	s	namespace:Clara::Detail
RemoveConstRef	vendor/spdlog/tests/catch.hpp	/^        template<typename T> struct RemoveConstRef<T&>{ typedef T type; };$/;"	s	namespace:Clara::Detail
RemoveConstRef	vendor/spdlog/tests/catch.hpp	/^        template<typename T> struct RemoveConstRef{ typedef T type; };$/;"	s	namespace:Clara::Detail
RemovePointer	dependencies/include/v8-util.h	/^  struct RemovePointer<T*> {$/;"	s	class:v8::DefaultGlobalMapTraits
RemoveTraceStateObserver	dependencies/include/v8-platform.h	/^  virtual void RemoveTraceStateObserver(TraceStateObserver*) {}$/;"	f	class:v8::TracingController	typeref:typename:void
RemoveWeak	dependencies/include/v8-util.h	/^  void RemoveWeak(const K& key) {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:void
RenderStates	dependencies/include/SFML/Graphics/RenderStates.hpp	/^class SFML_GRAPHICS_API RenderStates$/;"	c	namespace:sf
RenderTarget	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^class SFML_GRAPHICS_API RenderTarget : NonCopyable$/;"	c	namespace:sf
RenderTexture	dependencies/include/SFML/Graphics/RenderTexture.hpp	/^class SFML_GRAPHICS_API RenderTexture : public RenderTarget$/;"	c	namespace:sf
RenderWindow	dependencies/include/SFML/Graphics/RenderWindow.hpp	/^class SFML_GRAPHICS_API RenderWindow : public Window, public RenderTarget$/;"	c	namespace:sf
ReporterConfig	vendor/spdlog/tests/catch.hpp	/^        ReporterConfig( Ptr<IConfig> const& _fullConfig, std::ostream& _stream )$/;"	f	struct:Catch::ReporterConfig
ReporterConfig	vendor/spdlog/tests/catch.hpp	/^        explicit ReporterConfig( Ptr<IConfig> const& _fullConfig )$/;"	f	struct:Catch::ReporterConfig
ReporterConfig	vendor/spdlog/tests/catch.hpp	/^    struct ReporterConfig {$/;"	s	namespace:Catch
ReporterFactory	vendor/spdlog/tests/catch.hpp	/^        class ReporterFactory : public IReporterFactory {$/;"	c	class:Catch::LegacyReporterRegistrar
ReporterFactory	vendor/spdlog/tests/catch.hpp	/^        class ReporterFactory : public IReporterFactory {$/;"	c	class:Catch::ReporterRegistrar
ReporterPreferences	vendor/spdlog/tests/catch.hpp	/^        ReporterPreferences()$/;"	f	struct:Catch::ReporterPreferences
ReporterPreferences	vendor/spdlog/tests/catch.hpp	/^    struct ReporterPreferences {$/;"	s	namespace:Catch
ReporterRegistrar	vendor/spdlog/tests/catch.hpp	/^        ReporterRegistrar( std::string const& name ) {$/;"	f	class:Catch::ReporterRegistrar
ReporterRegistrar	vendor/spdlog/tests/catch.hpp	/^    class ReporterRegistrar {$/;"	c	namespace:Catch
ReporterRegistry	vendor/spdlog/tests/catch.hpp	/^    class ReporterRegistry : public IReporterRegistry {$/;"	c	namespace:Catch
Request	dependencies/include/SFML/Network/Http.hpp	/^    class SFML_NETWORK_API Request$/;"	c	class:sf::Http
ReserveCapacity	dependencies/include/v8-util.h	/^  static void ReserveCapacity(Impl* impl, size_t capacity) {$/;"	f	class:v8::DefaultPersistentValueVectorTraits	typeref:typename:void
ReserveCapacity	dependencies/include/v8-util.h	/^  void ReserveCapacity(size_t capacity) {$/;"	f	class:v8::PersistentValueVector	typeref:typename:void
Reset	dependencies/include/v8-util.h	/^    void Reset() {$/;"	f	class:v8::PersistentValueMapBase::PersistentValueReference	typeref:typename:void
ResetContent	dependencies/include/SFML/Network/Http.hpp	/^            ResetContent   = 205, \/\/\/< The server informs the client that it should clear the/;"	e	enum:sf::Http::Response::Status
Resize	dependencies/include/SFML/Window/WindowStyle.hpp	/^        Resize     = 1 << 1, \/\/\/< Title bar + resizable border + maximize button$/;"	e	enum:sf::Style::__anonc2dbfd350103
Resized	dependencies/include/SFML/Window/Event.hpp	/^        Resized,                \/\/\/< The window was resized (data in event.size)$/;"	e	enum:sf::Event::EventType
ResolveCallback	dependencies/include/v8.h	/^  typedef MaybeLocal<Module> (*ResolveCallback)(Local<Context> context,$/;"	t	class:v8::Module	typeref:typename:MaybeLocal<Module> (*)(Local<Context> context,Local<String> specifier,Local<Module> referrer)
Resolver	dependencies/include/v8.h	/^  class V8_EXPORT Resolver : public Object {$/;"	c	class:v8::Promise
ResourceStream	dependencies/include/SFML/System/FileInputStream.hpp	/^class SFML_SYSTEM_API ResourceStream;$/;"	v	namespace:sf::priv	typeref:class:SFML_SYSTEM_API
Response	dependencies/include/SFML/Network/Ftp.hpp	/^    class SFML_NETWORK_API Response$/;"	c	class:sf::Ftp
Response	dependencies/include/SFML/Network/Http.hpp	/^    class SFML_NETWORK_API Response$/;"	c	class:sf::Http
RestartMarkerReply	dependencies/include/SFML/Network/Ftp.hpp	/^            RestartMarkerReply          = 110, \/\/\/< Restart marker reply$/;"	e	enum:sf::Ftp::Response::Status
ResultBuilder	vendor/spdlog/tests/catch.hpp	/^    ResultBuilder::ResultBuilder(   char const* macroName,$/;"	f	class:Catch::ResultBuilder
ResultBuilder	vendor/spdlog/tests/catch.hpp	/^    class ResultBuilder {$/;"	c	namespace:Catch
ResultDisposition	vendor/spdlog/tests/catch.hpp	/^    struct ResultDisposition { enum Flags {$/;"	s	namespace:Catch
ResultError	vendor/spdlog/tests/catch.hpp	/^            ResultError = BrightRed,$/;"	e	enum:Catch::Colour::Code
ResultExpectedFailure	vendor/spdlog/tests/catch.hpp	/^            ResultExpectedFailure = Warning,$/;"	e	enum:Catch::Colour::Code
ResultSuccess	vendor/spdlog/tests/catch.hpp	/^            ResultSuccess = BrightGreen,$/;"	e	enum:Catch::Colour::Code
ResultWas	vendor/spdlog/tests/catch.hpp	/^    struct ResultWas { enum OfType {$/;"	s	namespace:Catch
RetainedObjectInfo	dependencies/include/v8-profiler.h	/^class V8_EXPORT RetainedObjectInfo {  \/\/ NOLINT$/;"	c	namespace:v8
RetainerChildren	dependencies/include/v8-profiler.h	/^      RetainerChildren;$/;"	t	class:v8::HeapProfiler	typeref:typename:std::unordered_set<const v8::PersistentBase<v8::Value> * >
RetainerEdges	dependencies/include/v8-profiler.h	/^      RetainerEdges;$/;"	t	class:v8::HeapProfiler
RetainerGroups	dependencies/include/v8-profiler.h	/^      RetainerGroups;$/;"	t	class:v8::HeapProfiler	typeref:typename:std::vector<std::pair<v8::RetainedObjectInfo *,RetainerChildren>>
RetainerInfos	dependencies/include/v8-profiler.h	/^  struct RetainerInfos {$/;"	s	class:v8::HeapProfiler
Return	dependencies/include/SFML/Window/Keyboard.hpp	/^        Return    = Enter         \/\/\/< \\deprecated Use Enter instead$/;"	e	enum:sf::Keyboard::Key
ReturnValue	dependencies/include/v8.h	/^  template <class S> V8_INLINE ReturnValue(const ReturnValue<S>& that)$/;"	f	class:v8::ReturnValue	typeref:typename:V8_INLINE
ReturnValue	dependencies/include/v8.h	/^class ReturnValue {$/;"	c	namespace:v8
ReverseSubtract	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        ReverseSubtract \/\/\/< Pixel = Dst * DstFactor - Src * SrcFactor$/;"	e	enum:sf::BlendMode::Equation
Right	dependencies/include/SFML/Window/Keyboard.hpp	/^        Right,        \/\/\/< Right arrow$/;"	e	enum:sf::Keyboard::Key
Right	dependencies/include/SFML/Window/Mouse.hpp	/^        Right,      \/\/\/< The right mouse button$/;"	e	enum:sf::Mouse::Button
Rotating files	vendor/spdlog/README.md	/^#### Rotating files$/;"	t
Row	dependencies/include/SFML/Graphics/Font.hpp	/^        Row(unsigned int rowTop, unsigned int rowHeight) : width(0), top(rowTop), height(rowHeig/;"	f	struct:sf::Font::Row
Row	dependencies/include/SFML/Graphics/Font.hpp	/^    struct Row$/;"	s	class:sf::Font
RunContext	vendor/spdlog/tests/catch.hpp	/^        explicit RunContext( Ptr<IConfig const> const& config, Ptr<IStreamingReporter> const& re/;"	f	class:Catch::RunContext
RunContext	vendor/spdlog/tests/catch.hpp	/^    class RunContext : public IResultCapture, public IRunner {$/;"	c	namespace:Catch
RunState	vendor/spdlog/tests/catch.hpp	/^        enum RunState {$/;"	g	class:Catch::SectionTracking::TrackedSection
RunTests	vendor/spdlog/tests/catch.hpp	/^    struct RunTests { enum InWhatOrder {$/;"	s	namespace:Catch
Runner	vendor/spdlog/tests/catch.hpp	/^        Runner( Ptr<Config> const& config )$/;"	f	class:Catch::Runner
Runner	vendor/spdlog/tests/catch.hpp	/^    class Runner {$/;"	c	namespace:Catch
Runtime	dependencies/include/v8-inspector.h	/^namespace Runtime {$/;"	n	namespace:v8_inspector::protocol
S	dependencies/include/SFML/Window/Keyboard.hpp	/^        S,            \/\/\/< The S key$/;"	e	enum:sf::Keyboard::Key
SANITIZER_FLAGS	vendor/spdlog/cmake/sanitizers.cmake	/^    set(SANITIZER_FLAGS "-fsanitize=address,undefined")$/;"	v
SANITIZER_FLAGS	vendor/spdlog/cmake/sanitizers.cmake	/^    set(SANITIZER_FLAGS "-fsanitize=thread")$/;"	v
SCENARIO	vendor/spdlog/tests/catch.hpp	/^#define SCENARIO(/;"	d
SCENARIO_METHOD	vendor/spdlog/tests/catch.hpp	/^#define SCENARIO_METHOD(/;"	d
SCOPED_CAPTURE	vendor/spdlog/tests/catch.hpp	/^#define SCOPED_CAPTURE(/;"	d
SCOPED_INFO	vendor/spdlog/tests/catch.hpp	/^#define SCOPED_INFO(/;"	d
SECTION	vendor/spdlog/tests/catch.hpp	/^    #define SECTION(/;"	d
SEP_SIZE	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    enum { SEP_SIZE = 1 };$/;"	e	enum:basic_writer::int_writer::__anondc8451670503
SFML_ALRESOURCE_HPP	dependencies/include/SFML/Audio/AlResource.hpp	/^#define SFML_ALRESOURCE_HPP$/;"	d
SFML_API_EXPORT	dependencies/include/SFML/Config.hpp	/^            #define SFML_API_EXPORT /;"	d
SFML_API_EXPORT	dependencies/include/SFML/Config.hpp	/^            #define SFML_API_EXPORT$/;"	d
SFML_API_EXPORT	dependencies/include/SFML/Config.hpp	/^        #define SFML_API_EXPORT /;"	d
SFML_API_EXPORT	dependencies/include/SFML/Config.hpp	/^    #define SFML_API_EXPORT$/;"	d
SFML_API_IMPORT	dependencies/include/SFML/Config.hpp	/^            #define SFML_API_IMPORT /;"	d
SFML_API_IMPORT	dependencies/include/SFML/Config.hpp	/^            #define SFML_API_IMPORT$/;"	d
SFML_API_IMPORT	dependencies/include/SFML/Config.hpp	/^        #define SFML_API_IMPORT /;"	d
SFML_API_IMPORT	dependencies/include/SFML/Config.hpp	/^    #define SFML_API_IMPORT$/;"	d
SFML_AUDIO_API	dependencies/include/SFML/Audio/Export.hpp	/^    #define SFML_AUDIO_API /;"	d
SFML_AUDIO_EXPORT_HPP	dependencies/include/SFML/Audio/Export.hpp	/^#define SFML_AUDIO_EXPORT_HPP$/;"	d
SFML_AUDIO_HPP	dependencies/include/SFML/Audio.hpp	/^#define SFML_AUDIO_HPP$/;"	d
SFML_BLENDMODE_HPP	dependencies/include/SFML/Graphics/BlendMode.hpp	/^#define SFML_BLENDMODE_HPP$/;"	d
SFML_CIRCLESHAPE_HPP	dependencies/include/SFML/Graphics/CircleShape.hpp	/^#define SFML_CIRCLESHAPE_HPP$/;"	d
SFML_CLIPBOARD_HPP	dependencies/include/SFML/Window/Clipboard.hpp	/^#define SFML_CLIPBOARD_HPP$/;"	d
SFML_CLOCK_HPP	dependencies/include/SFML/System/Clock.hpp	/^#define SFML_CLOCK_HPP$/;"	d
SFML_COLOR_HPP	dependencies/include/SFML/Graphics/Color.hpp	/^#define SFML_COLOR_HPP$/;"	d
SFML_CONFIG_HPP	dependencies/include/SFML/Config.hpp	/^#define SFML_CONFIG_HPP$/;"	d
SFML_CONTEXTSETTINGS_HPP	dependencies/include/SFML/Window/ContextSettings.hpp	/^#define SFML_CONTEXTSETTINGS_HPP$/;"	d
SFML_CONTEXT_HPP	dependencies/include/SFML/Window/Context.hpp	/^#define SFML_CONTEXT_HPP$/;"	d
SFML_CONVEXSHAPE_HPP	dependencies/include/SFML/Graphics/ConvexShape.hpp	/^#define SFML_CONVEXSHAPE_HPP$/;"	d
SFML_CURSOR_HPP	dependencies/include/SFML/Window/Cursor.hpp	/^#define SFML_CURSOR_HPP$/;"	d
SFML_DEBUG	dependencies/include/SFML/Config.hpp	/^    #define SFML_DEBUG$/;"	d
SFML_DEFINE_DISCRETE_GPU_PREFERENCE	dependencies/include/SFML/GpuPreference.hpp	/^    #define SFML_DEFINE_DISCRETE_GPU_PREFERENCE /;"	d
SFML_DEFINE_DISCRETE_GPU_PREFERENCE	dependencies/include/SFML/GpuPreference.hpp	/^    #define SFML_DEFINE_DISCRETE_GPU_PREFERENCE$/;"	d
SFML_DEPRECATED	dependencies/include/SFML/Config.hpp	/^    #define SFML_DEPRECATED /;"	d
SFML_DEPRECATED	dependencies/include/SFML/Config.hpp	/^    #define SFML_DEPRECATED$/;"	d
SFML_DRAWABLE_HPP	dependencies/include/SFML/Graphics/Drawable.hpp	/^#define SFML_DRAWABLE_HPP$/;"	d
SFML_ERR_HPP	dependencies/include/SFML/System/Err.hpp	/^#define SFML_ERR_HPP$/;"	d
SFML_EVENT_HPP	dependencies/include/SFML/Window/Event.hpp	/^#define SFML_EVENT_HPP$/;"	d
SFML_FILEINPUTSTREAM_HPP	dependencies/include/SFML/System/FileInputStream.hpp	/^#define SFML_FILEINPUTSTREAM_HPP$/;"	d
SFML_FONT_HPP	dependencies/include/SFML/Graphics/Font.hpp	/^#define SFML_FONT_HPP$/;"	d
SFML_FTP_HPP	dependencies/include/SFML/Network/Ftp.hpp	/^#define SFML_FTP_HPP$/;"	d
SFML_GLRESOURCE_HPP	dependencies/include/SFML/Window/GlResource.hpp	/^#define SFML_GLRESOURCE_HPP$/;"	d
SFML_GLSL_HPP	dependencies/include/SFML/Graphics/Glsl.hpp	/^#define SFML_GLSL_HPP$/;"	d
SFML_GLYPH_HPP	dependencies/include/SFML/Graphics/Glyph.hpp	/^#define SFML_GLYPH_HPP$/;"	d
SFML_GPUPREFERENCE_HPP	dependencies/include/SFML/GpuPreference.hpp	/^#define SFML_GPUPREFERENCE_HPP$/;"	d
SFML_GRAPHICS_API	dependencies/include/SFML/Graphics/Export.hpp	/^    #define SFML_GRAPHICS_API /;"	d
SFML_GRAPHICS_EXPORT_HPP	dependencies/include/SFML/Graphics/Export.hpp	/^#define SFML_GRAPHICS_EXPORT_HPP$/;"	d
SFML_GRAPHICS_HPP	dependencies/include/SFML/Graphics.hpp	/^#define SFML_GRAPHICS_HPP$/;"	d
SFML_HTTP_HPP	dependencies/include/SFML/Network/Http.hpp	/^#define SFML_HTTP_HPP$/;"	d
SFML_IMAGE_HPP	dependencies/include/SFML/Graphics/Image.hpp	/^#define SFML_IMAGE_HPP$/;"	d
SFML_INPUTSOUNDFILE_HPP	dependencies/include/SFML/Audio/InputSoundFile.hpp	/^#define SFML_INPUTSOUNDFILE_HPP$/;"	d
SFML_INPUTSTREAM_HPP	dependencies/include/SFML/System/InputStream.hpp	/^#define SFML_INPUTSTREAM_HPP$/;"	d
SFML_IPADDRESS_HPP	dependencies/include/SFML/Network/IpAddress.hpp	/^#define SFML_IPADDRESS_HPP$/;"	d
SFML_JOYSTICK_HPP	dependencies/include/SFML/Window/Joystick.hpp	/^#define SFML_JOYSTICK_HPP$/;"	d
SFML_KEYBOARD_HPP	dependencies/include/SFML/Window/Keyboard.hpp	/^#define SFML_KEYBOARD_HPP$/;"	d
SFML_LISTENER_HPP	dependencies/include/SFML/Audio/Listener.hpp	/^#define SFML_LISTENER_HPP$/;"	d
SFML_LOCK_HPP	dependencies/include/SFML/System/Lock.hpp	/^#define SFML_LOCK_HPP$/;"	d
SFML_MAIN_HPP	dependencies/include/SFML/Main.hpp	/^#define SFML_MAIN_HPP$/;"	d
SFML_MEMORYINPUTSTREAM_HPP	dependencies/include/SFML/System/MemoryInputStream.hpp	/^#define SFML_MEMORYINPUTSTREAM_HPP$/;"	d
SFML_MOUSE_HPP	dependencies/include/SFML/Window/Mouse.hpp	/^#define SFML_MOUSE_HPP$/;"	d
SFML_MUSIC_HPP	dependencies/include/SFML/Audio/Music.hpp	/^#define SFML_MUSIC_HPP$/;"	d
SFML_MUTEX_HPP	dependencies/include/SFML/System/Mutex.hpp	/^#define SFML_MUTEX_HPP$/;"	d
SFML_NATIVEACTIVITY_HPP	dependencies/include/SFML/System/NativeActivity.hpp	/^#define SFML_NATIVEACTIVITY_HPP$/;"	d
SFML_NETWORK_API	dependencies/include/SFML/Network/Export.hpp	/^    #define SFML_NETWORK_API /;"	d
SFML_NETWORK_EXPORT_HPP	dependencies/include/SFML/Network/Export.hpp	/^#define SFML_NETWORK_EXPORT_HPP$/;"	d
SFML_NETWORK_HPP	dependencies/include/SFML/Network.hpp	/^#define SFML_NETWORK_HPP$/;"	d
SFML_NONCOPYABLE_HPP	dependencies/include/SFML/System/NonCopyable.hpp	/^#define SFML_NONCOPYABLE_HPP$/;"	d
SFML_OPENGL_HPP	dependencies/include/SFML/OpenGL.hpp	/^#define SFML_OPENGL_HPP$/;"	d
SFML_OUTPUTSOUNDFILE_HPP	dependencies/include/SFML/Audio/OutputSoundFile.hpp	/^#define SFML_OUTPUTSOUNDFILE_HPP$/;"	d
SFML_PACKET_HPP	dependencies/include/SFML/Network/Packet.hpp	/^#define SFML_PACKET_HPP$/;"	d
SFML_PRIMITIVETYPE_HPP	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^#define SFML_PRIMITIVETYPE_HPP$/;"	d
SFML_RECTANGLESHAPE_HPP	dependencies/include/SFML/Graphics/RectangleShape.hpp	/^#define SFML_RECTANGLESHAPE_HPP$/;"	d
SFML_RECT_HPP	dependencies/include/SFML/Graphics/Rect.hpp	/^#define SFML_RECT_HPP$/;"	d
SFML_RENDERSTATES_HPP	dependencies/include/SFML/Graphics/RenderStates.hpp	/^#define SFML_RENDERSTATES_HPP$/;"	d
SFML_RENDERTARGET_HPP	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^#define SFML_RENDERTARGET_HPP$/;"	d
SFML_RENDERTEXTURE_HPP	dependencies/include/SFML/Graphics/RenderTexture.hpp	/^#define SFML_RENDERTEXTURE_HPP$/;"	d
SFML_RENDERWINDOW_HPP	dependencies/include/SFML/Graphics/RenderWindow.hpp	/^#define SFML_RENDERWINDOW_HPP$/;"	d
SFML_SENSOR_HPP	dependencies/include/SFML/Window/Sensor.hpp	/^#define SFML_SENSOR_HPP$/;"	d
SFML_SFML_WINDOW_HPP	dependencies/include/SFML/Window.hpp	/^#define SFML_SFML_WINDOW_HPP$/;"	d
SFML_SHADER_HPP	dependencies/include/SFML/Graphics/Shader.hpp	/^#define SFML_SHADER_HPP$/;"	d
SFML_SHAPE_HPP	dependencies/include/SFML/Graphics/Shape.hpp	/^#define SFML_SHAPE_HPP$/;"	d
SFML_SLEEP_HPP	dependencies/include/SFML/System/Sleep.hpp	/^#define SFML_SLEEP_HPP$/;"	d
SFML_SOCKETHANDLE_HPP	dependencies/include/SFML/Network/SocketHandle.hpp	/^#define SFML_SOCKETHANDLE_HPP$/;"	d
SFML_SOCKETSELECTOR_HPP	dependencies/include/SFML/Network/SocketSelector.hpp	/^#define SFML_SOCKETSELECTOR_HPP$/;"	d
SFML_SOCKET_HPP	dependencies/include/SFML/Network/Socket.hpp	/^#define SFML_SOCKET_HPP$/;"	d
SFML_SOUNDBUFFERRECORDER_HPP	dependencies/include/SFML/Audio/SoundBufferRecorder.hpp	/^#define SFML_SOUNDBUFFERRECORDER_HPP$/;"	d
SFML_SOUNDBUFFER_HPP	dependencies/include/SFML/Audio/SoundBuffer.hpp	/^#define SFML_SOUNDBUFFER_HPP$/;"	d
SFML_SOUNDFILEFACTORY_HPP	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^#define SFML_SOUNDFILEFACTORY_HPP$/;"	d
SFML_SOUNDFILEREADER_HPP	dependencies/include/SFML/Audio/SoundFileReader.hpp	/^#define SFML_SOUNDFILEREADER_HPP$/;"	d
SFML_SOUNDFILEWRITER_HPP	dependencies/include/SFML/Audio/SoundFileWriter.hpp	/^#define SFML_SOUNDFILEWRITER_HPP$/;"	d
SFML_SOUNDRECORDER_HPP	dependencies/include/SFML/Audio/SoundRecorder.hpp	/^#define SFML_SOUNDRECORDER_HPP$/;"	d
SFML_SOUNDSOURCE_HPP	dependencies/include/SFML/Audio/SoundSource.hpp	/^#define SFML_SOUNDSOURCE_HPP$/;"	d
SFML_SOUNDSTREAM_HPP	dependencies/include/SFML/Audio/SoundStream.hpp	/^#define SFML_SOUNDSTREAM_HPP$/;"	d
SFML_SOUND_HPP	dependencies/include/SFML/Audio/Sound.hpp	/^#define SFML_SOUND_HPP$/;"	d
SFML_SPRITE_HPP	dependencies/include/SFML/Graphics/Sprite.hpp	/^#define SFML_SPRITE_HPP$/;"	d
SFML_STRING_HPP	dependencies/include/SFML/System/String.hpp	/^#define SFML_STRING_HPP$/;"	d
SFML_SYSTEM_ANDROID	dependencies/include/SFML/Config.hpp	/^        #define SFML_SYSTEM_ANDROID$/;"	d
SFML_SYSTEM_API	dependencies/include/SFML/System/Export.hpp	/^    #define SFML_SYSTEM_API /;"	d
SFML_SYSTEM_EXPORT_HPP	dependencies/include/SFML/System/Export.hpp	/^#define SFML_SYSTEM_EXPORT_HPP$/;"	d
SFML_SYSTEM_FREEBSD	dependencies/include/SFML/Config.hpp	/^        #define SFML_SYSTEM_FREEBSD$/;"	d
SFML_SYSTEM_HPP	dependencies/include/SFML/System.hpp	/^#define SFML_SYSTEM_HPP$/;"	d
SFML_SYSTEM_IOS	dependencies/include/SFML/Config.hpp	/^        #define SFML_SYSTEM_IOS$/;"	d
SFML_SYSTEM_LINUX	dependencies/include/SFML/Config.hpp	/^        #define SFML_SYSTEM_LINUX$/;"	d
SFML_SYSTEM_MACOS	dependencies/include/SFML/Config.hpp	/^        #define SFML_SYSTEM_MACOS$/;"	d
SFML_SYSTEM_OPENBSD	dependencies/include/SFML/Config.hpp	/^        #define SFML_SYSTEM_OPENBSD$/;"	d
SFML_SYSTEM_WINDOWS	dependencies/include/SFML/Config.hpp	/^    #define SFML_SYSTEM_WINDOWS$/;"	d
SFML_TCPLISTENER_HPP	dependencies/include/SFML/Network/TcpListener.hpp	/^#define SFML_TCPLISTENER_HPP$/;"	d
SFML_TCPSOCKET_HPP	dependencies/include/SFML/Network/TcpSocket.hpp	/^#define SFML_TCPSOCKET_HPP$/;"	d
SFML_TEXTURE_HPP	dependencies/include/SFML/Graphics/Texture.hpp	/^#define SFML_TEXTURE_HPP$/;"	d
SFML_TEXT_HPP	dependencies/include/SFML/Graphics/Text.hpp	/^#define SFML_TEXT_HPP$/;"	d
SFML_THREADLOCALPTR_HPP	dependencies/include/SFML/System/ThreadLocalPtr.hpp	/^#define SFML_THREADLOCALPTR_HPP$/;"	d
SFML_THREADLOCAL_HPP	dependencies/include/SFML/System/ThreadLocal.hpp	/^#define SFML_THREADLOCAL_HPP$/;"	d
SFML_THREAD_HPP	dependencies/include/SFML/System/Thread.hpp	/^#define SFML_THREAD_HPP$/;"	d
SFML_TIME_HPP	dependencies/include/SFML/System/Time.hpp	/^#define SFML_TIME_HPP$/;"	d
SFML_TOUCH_HPP	dependencies/include/SFML/Window/Touch.hpp	/^#define SFML_TOUCH_HPP$/;"	d
SFML_TRANSFORMABLE_HPP	dependencies/include/SFML/Graphics/Transformable.hpp	/^#define SFML_TRANSFORMABLE_HPP$/;"	d
SFML_TRANSFORM_HPP	dependencies/include/SFML/Graphics/Transform.hpp	/^#define SFML_TRANSFORM_HPP$/;"	d
SFML_UDPSOCKET_HPP	dependencies/include/SFML/Network/UdpSocket.hpp	/^#define SFML_UDPSOCKET_HPP$/;"	d
SFML_UTF_HPP	dependencies/include/SFML/System/Utf.hpp	/^#define SFML_UTF_HPP$/;"	d
SFML_VECTOR2_HPP	dependencies/include/SFML/System/Vector2.hpp	/^#define SFML_VECTOR2_HPP$/;"	d
SFML_VECTOR3_HPP	dependencies/include/SFML/System/Vector3.hpp	/^#define SFML_VECTOR3_HPP$/;"	d
SFML_VERSION_MAJOR	dependencies/include/SFML/Config.hpp	/^#define SFML_VERSION_MAJOR /;"	d
SFML_VERSION_MINOR	dependencies/include/SFML/Config.hpp	/^#define SFML_VERSION_MINOR /;"	d
SFML_VERSION_PATCH	dependencies/include/SFML/Config.hpp	/^#define SFML_VERSION_PATCH /;"	d
SFML_VERTEXARRAY_HPP	dependencies/include/SFML/Graphics/VertexArray.hpp	/^#define SFML_VERTEXARRAY_HPP$/;"	d
SFML_VERTEXBUFFER_HPP	dependencies/include/SFML/Graphics/VertexBuffer.hpp	/^#define SFML_VERTEXBUFFER_HPP$/;"	d
SFML_VERTEX_HPP	dependencies/include/SFML/Graphics/Vertex.hpp	/^#define SFML_VERTEX_HPP$/;"	d
SFML_VIDEOMODE_HPP	dependencies/include/SFML/Window/VideoMode.hpp	/^#define SFML_VIDEOMODE_HPP$/;"	d
SFML_VIEW_HPP	dependencies/include/SFML/Graphics/View.hpp	/^#define SFML_VIEW_HPP$/;"	d
SFML_WINDOWHANDLE_HPP	dependencies/include/SFML/Window/WindowHandle.hpp	/^#define SFML_WINDOWHANDLE_HPP$/;"	d
SFML_WINDOWSTYLE_HPP	dependencies/include/SFML/Window/WindowStyle.hpp	/^#define SFML_WINDOWSTYLE_HPP$/;"	d
SFML_WINDOW_API	dependencies/include/SFML/Window/Export.hpp	/^    #define SFML_WINDOW_API /;"	d
SFML_WINDOW_EXPORT_HPP	dependencies/include/SFML/Window/Export.hpp	/^#define SFML_WINDOW_EXPORT_HPP$/;"	d
SFML_WINDOW_HPP	dependencies/include/SFML/Window/Window.hpp	/^#define SFML_WINDOW_HPP$/;"	d
SIGN_FLAG	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^enum {SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8};$/;"	e	enum:__anondc8451670203
SIMULATE_ID	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_VERSION_MAJOR	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SKIP_STRINGS	dependencies/include/v8.h	/^  SKIP_STRINGS = 8,$/;"	e	enum:v8::PropertyFilter
SKIP_SYMBOLS	dependencies/include/v8.h	/^  SKIP_SYMBOLS = 16$/;"	e	enum:v8::PropertyFilter
SPDLOG_ACTIVE_LEVEL	vendor/spdlog/include/spdlog/common.h	/^#define SPDLOG_ACTIVE_LEVEL /;"	d
SPDLOG_ACTIVE_LEVEL	vendor/spdlog/tests/includes.h	/^#define SPDLOG_ACTIVE_LEVEL /;"	d
SPDLOG_ANDROID_RETRIES	vendor/spdlog/include/spdlog/sinks/android_sink.h	/^#define SPDLOG_ANDROID_RETRIES /;"	d
SPDLOG_BUILD_BENCH	vendor/spdlog/CMakeLists.txt	/^option(SPDLOG_BUILD_BENCH "Build benchmarks" ${SPDLOG_MASTER_PROJECT})$/;"	D
SPDLOG_BUILD_EXAMPLES	vendor/spdlog/CMakeLists.txt	/^option(SPDLOG_BUILD_EXAMPLES "Build examples" ${SPDLOG_MASTER_PROJECT})$/;"	D
SPDLOG_BUILD_TESTS	vendor/spdlog/CMakeLists.txt	/^option(SPDLOG_BUILD_TESTS "Build tests" ${SPDLOG_MASTER_PROJECT})$/;"	D
SPDLOG_CATCH_AND_HANDLE	vendor/spdlog/include/spdlog/details/logger_impl.h	/^#define SPDLOG_CATCH_AND_HANDLE /;"	d
SPDLOG_CONSTEXPR	vendor/spdlog/include/spdlog/common.h	/^#define SPDLOG_CONSTEXPR /;"	d
SPDLOG_CONSTEXPR	vendor/spdlog/include/spdlog/common.h	/^#define SPDLOG_CONSTEXPR$/;"	d
SPDLOG_CRITICAL	vendor/spdlog/include/spdlog/spdlog.h	/^#define SPDLOG_CRITICAL(/;"	d
SPDLOG_DEBUG	vendor/spdlog/include/spdlog/spdlog.h	/^#define SPDLOG_DEBUG(/;"	d
SPDLOG_DEBUG_ON	vendor/spdlog/example/jni/example.cpp	/^#define SPDLOG_DEBUG_ON$/;"	d	file:
SPDLOG_DEPRECATED	vendor/spdlog/include/spdlog/common.h	/^#define SPDLOG_DEPRECATED /;"	d
SPDLOG_DEPRECATED	vendor/spdlog/include/spdlog/common.h	/^#define SPDLOG_DEPRECATED$/;"	d
SPDLOG_ENABLE_MESSAGE_COUNTER	vendor/spdlog/tests/includes.h	/^#define SPDLOG_ENABLE_MESSAGE_COUNTER$/;"	d
SPDLOG_EOL	vendor/spdlog/include/spdlog/details/os.h	/^#define SPDLOG_EOL /;"	d
SPDLOG_ERROR	vendor/spdlog/include/spdlog/spdlog.h	/^#define SPDLOG_ERROR(/;"	d
SPDLOG_FILENAME_T	vendor/spdlog/include/spdlog/details/os.h	/^#define SPDLOG_FILENAME_T(/;"	d
SPDLOG_FILE_BASENAME	vendor/spdlog/include/spdlog/common.h	/^#define SPDLOG_FILE_BASENAME(/;"	d
SPDLOG_FMT_EXTERNAL	vendor/spdlog/CMakeLists.txt	/^option(SPDLOG_FMT_EXTERNAL "Use external fmt library instead of bundled" OFF)$/;"	D
SPDLOG_FMT_EXTERNAL	vendor/spdlog/cmake/Config.cmake.in	/^set(SPDLOG_FMT_EXTERNAL @SPDLOG_FMT_EXTERNAL@)$/;"	v
SPDLOG_H	vendor/spdlog/include/spdlog/spdlog.h	/^#define SPDLOG_H$/;"	d
SPDLOG_INFO	vendor/spdlog/include/spdlog/spdlog.h	/^#define SPDLOG_INFO(/;"	d
SPDLOG_LEVEL_CRITICAL	vendor/spdlog/include/spdlog/common.h	/^#define SPDLOG_LEVEL_CRITICAL /;"	d
SPDLOG_LEVEL_DEBUG	vendor/spdlog/include/spdlog/common.h	/^#define SPDLOG_LEVEL_DEBUG /;"	d
SPDLOG_LEVEL_ERROR	vendor/spdlog/include/spdlog/common.h	/^#define SPDLOG_LEVEL_ERROR /;"	d
SPDLOG_LEVEL_INFO	vendor/spdlog/include/spdlog/common.h	/^#define SPDLOG_LEVEL_INFO /;"	d
SPDLOG_LEVEL_NAMES	vendor/spdlog/include/spdlog/common.h	/^#define SPDLOG_LEVEL_NAMES /;"	d
SPDLOG_LEVEL_OFF	vendor/spdlog/include/spdlog/common.h	/^#define SPDLOG_LEVEL_OFF /;"	d
SPDLOG_LEVEL_TRACE	vendor/spdlog/include/spdlog/common.h	/^#define SPDLOG_LEVEL_TRACE /;"	d
SPDLOG_LEVEL_WARN	vendor/spdlog/include/spdlog/common.h	/^#define SPDLOG_LEVEL_WARN /;"	d
SPDLOG_LOGGER_CRITICAL	vendor/spdlog/include/spdlog/spdlog.h	/^#define SPDLOG_LOGGER_CRITICAL(/;"	d
SPDLOG_LOGGER_DEBUG	vendor/spdlog/include/spdlog/spdlog.h	/^#define SPDLOG_LOGGER_DEBUG(/;"	d
SPDLOG_LOGGER_ERROR	vendor/spdlog/include/spdlog/spdlog.h	/^#define SPDLOG_LOGGER_ERROR(/;"	d
SPDLOG_LOGGER_INFO	vendor/spdlog/include/spdlog/spdlog.h	/^#define SPDLOG_LOGGER_INFO(/;"	d
SPDLOG_LOGGER_TRACE	vendor/spdlog/include/spdlog/spdlog.h	/^#define SPDLOG_LOGGER_TRACE(/;"	d
SPDLOG_LOGGER_WARN	vendor/spdlog/include/spdlog/spdlog.h	/^#define SPDLOG_LOGGER_WARN(/;"	d
SPDLOG_MASTER_PROJECT	vendor/spdlog/CMakeLists.txt	/^  set(SPDLOG_MASTER_PROJECT ON)$/;"	v
SPDLOG_MASTER_PROJECT	vendor/spdlog/CMakeLists.txt	/^set(SPDLOG_MASTER_PROJECT OFF)$/;"	v
SPDLOG_NOEXCEPT	vendor/spdlog/include/spdlog/common.h	/^#define SPDLOG_NOEXCEPT /;"	d
SPDLOG_NO_TLS	vendor/spdlog/include/spdlog/common.h	/^#define SPDLOG_NO_TLS /;"	d
SPDLOG_STRRCHR	vendor/spdlog/include/spdlog/common.h	/^#define SPDLOG_STRRCHR(/;"	d
SPDLOG_TRACE	vendor/spdlog/include/spdlog/spdlog.h	/^#define SPDLOG_TRACE(/;"	d
SPDLOG_TRACE_ON	vendor/spdlog/example/jni/example.cpp	/^#define SPDLOG_TRACE_ON$/;"	d	file:
SPDLOG_UTESTS_SOURCES	vendor/spdlog/tests/CMakeLists.txt	/^set(SPDLOG_UTESTS_SOURCES$/;"	v
SPDLOG_VERSION	vendor/spdlog/include/spdlog/version.h	/^#define SPDLOG_VERSION /;"	d
SPDLOG_VER_MAJOR	vendor/spdlog/include/spdlog/version.h	/^#define SPDLOG_VER_MAJOR /;"	d
SPDLOG_VER_MINOR	vendor/spdlog/include/spdlog/version.h	/^#define SPDLOG_VER_MINOR /;"	d
SPDLOG_VER_PATCH	vendor/spdlog/include/spdlog/version.h	/^#define SPDLOG_VER_PATCH /;"	d
SPDLOG_WARN	vendor/spdlog/include/spdlog/spdlog.h	/^#define SPDLOG_WARN(/;"	d
STITCH_CLARA_CLOSE_NAMESPACE	vendor/spdlog/tests/catch.hpp	/^#define STITCH_CLARA_CLOSE_NAMESPACE /;"	d
STITCH_CLARA_CLOSE_NAMESPACE	vendor/spdlog/tests/catch.hpp	/^#define STITCH_CLARA_CLOSE_NAMESPACE$/;"	d
STITCH_CLARA_OPEN_NAMESPACE	vendor/spdlog/tests/catch.hpp	/^#define STITCH_CLARA_OPEN_NAMESPACE /;"	d
STITCH_CLARA_OPEN_NAMESPACE	vendor/spdlog/tests/catch.hpp	/^#define STITCH_CLARA_OPEN_NAMESPACE$/;"	d
STITCH_TBC_TEXT_FORMAT_OPEN_NAMESPACE	vendor/spdlog/tests/catch.hpp	/^#define STITCH_TBC_TEXT_FORMAT_OPEN_NAMESPACE /;"	d
STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE	vendor/spdlog/tests/catch.hpp	/^namespace STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE {$/;"	n
STRINGIFY	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY(/;"	d	file:
STRINGIFY	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(/;"	d	file:
STRINGIFY_HELPER	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:
SUCCEED	vendor/spdlog/tests/catch.hpp	/^    #define SUCCEED(/;"	d
S_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit S_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::S_formatter
S_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class S_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
SafeBool	vendor/spdlog/tests/catch.hpp	/^    class SafeBool {$/;"	c	namespace:Catch
Sample	dependencies/include/v8-profiler.h	/^  struct Sample {$/;"	s	class:v8::AllocationProfile
SampleInfo	dependencies/include/v8.h	/^struct SampleInfo {$/;"	s	namespace:v8
SamplingFlags	dependencies/include/v8-profiler.h	/^  enum SamplingFlags {$/;"	g	class:v8::HeapProfiler
Schema	dependencies/include/v8-inspector.h	/^namespace Schema {$/;"	n	namespace:v8_inspector::protocol
ScopedElement	vendor/spdlog/tests/catch.hpp	/^            ScopedElement( ScopedElement const& other )$/;"	f	class:Catch::XmlWriter::ScopedElement
ScopedElement	vendor/spdlog/tests/catch.hpp	/^            ScopedElement( XmlWriter* writer )$/;"	f	class:Catch::XmlWriter::ScopedElement
ScopedElement	vendor/spdlog/tests/catch.hpp	/^        class ScopedElement {$/;"	c	class:Catch::XmlWriter
ScopedMessage	vendor/spdlog/tests/catch.hpp	/^    ScopedMessage::ScopedMessage( MessageBuilder const& builder )$/;"	f	class:Catch::ScopedMessage
ScopedMessage	vendor/spdlog/tests/catch.hpp	/^    ScopedMessage::ScopedMessage( ScopedMessage const& other )$/;"	f	class:Catch::ScopedMessage
ScopedMessage	vendor/spdlog/tests/catch.hpp	/^    class ScopedMessage {$/;"	c	namespace:Catch
Script	dependencies/include/v8.h	/^class V8_EXPORT Script {$/;"	c	namespace:v8
ScriptCompiler	dependencies/include/v8.h	/^class V8_EXPORT ScriptCompiler {$/;"	c	namespace:v8
ScriptOrModule	dependencies/include/v8.h	/^class V8_EXPORT ScriptOrModule {$/;"	c	namespace:v8
ScriptOrigin	dependencies/include/v8.h	/^class ScriptOrigin {$/;"	c	namespace:v8
ScriptOriginOptions	dependencies/include/v8.h	/^  V8_INLINE ScriptOriginOptions(bool is_shared_cross_origin = false,$/;"	f	class:v8::ScriptOriginOptions	typeref:typename:V8_INLINE
ScriptOriginOptions	dependencies/include/v8.h	/^  V8_INLINE ScriptOriginOptions(int flags)$/;"	f	class:v8::ScriptOriginOptions	typeref:typename:V8_INLINE
ScriptOriginOptions	dependencies/include/v8.h	/^class ScriptOriginOptions {$/;"	c	namespace:v8
ScriptStreamingTask	dependencies/include/v8.h	/^    explicit ScriptStreamingTask(internal::ScriptStreamingData* data)$/;"	f	class:v8::ScriptCompiler::ScriptStreamingTask
ScriptStreamingTask	dependencies/include/v8.h	/^  class V8_EXPORT ScriptStreamingTask final {$/;"	c	class:v8::ScriptCompiler
SealHandleScope	dependencies/include/v8.h	/^class V8_EXPORT SealHandleScope {$/;"	c	namespace:v8
SecondWeakCallback	dependencies/include/v8-util.h	/^  static void SecondWeakCallback($/;"	f	class:v8::GlobalValueMap	typeref:typename:void
SecondaryText	vendor/spdlog/tests/catch.hpp	/^            SecondaryText = LightGrey,$/;"	e	enum:Catch::Colour::Code
Section	vendor/spdlog/tests/catch.hpp	/^    Section::Section( SectionInfo const& info )$/;"	f	class:Catch::Section
Section	vendor/spdlog/tests/catch.hpp	/^    class Section : NonCopyable {$/;"	c	namespace:Catch
SectionInfo	vendor/spdlog/tests/catch.hpp	/^    SectionInfo::SectionInfo$/;"	f	class:Catch::SectionInfo
SectionInfo	vendor/spdlog/tests/catch.hpp	/^    struct SectionInfo {$/;"	s	namespace:Catch
SectionNode	vendor/spdlog/tests/catch.hpp	/^            explicit SectionNode( SectionStats const& _stats ) : stats( _stats ) {}$/;"	f	struct:Catch::CumulativeReporterBase::SectionNode
SectionNode	vendor/spdlog/tests/catch.hpp	/^        struct SectionNode : SharedImpl<> {$/;"	s	struct:Catch::CumulativeReporterBase
SectionStats	vendor/spdlog/tests/catch.hpp	/^        SectionStats(   SectionInfo const& _sectionInfo,$/;"	f	struct:Catch::SectionStats
SectionStats	vendor/spdlog/tests/catch.hpp	/^    struct SectionStats {$/;"	s	namespace:Catch
SectionTracking	vendor/spdlog/tests/catch.hpp	/^namespace SectionTracking {$/;"	n	namespace:Catch
SemiColon	dependencies/include/SFML/Window/Keyboard.hpp	/^        SemiColon = Semicolon,    \/\/\/< \\deprecated Use Semicolon instead$/;"	e	enum:sf::Keyboard::Key
Semicolon	dependencies/include/SFML/Window/Keyboard.hpp	/^        Semicolon,    \/\/\/< The ; key$/;"	e	enum:sf::Keyboard::Key
Sensor	dependencies/include/SFML/Window/Sensor.hpp	/^class SFML_WINDOW_API Sensor$/;"	c	namespace:sf
SensorChanged	dependencies/include/SFML/Window/Event.hpp	/^        SensorChanged,          \/\/\/< A sensor value changed (data in event.sensor)$/;"	e	enum:sf::Event::EventType
SensorEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct SensorEvent$/;"	s	class:sf::Event
SerializationFormat	dependencies/include/v8-profiler.h	/^  enum SerializationFormat {$/;"	g	class:v8::HeapSnapshot
ServiceNotAvailable	dependencies/include/SFML/Network/Http.hpp	/^            ServiceNotAvailable = 503, \/\/\/< The server is temporarily unavailable (overloaded/;"	e	enum:sf::Http::Response::Status
ServiceReady	dependencies/include/SFML/Network/Ftp.hpp	/^            ServiceReady          = 220, \/\/\/< Service ready for new user$/;"	e	enum:sf::Ftp::Response::Status
ServiceReadySoon	dependencies/include/SFML/Network/Ftp.hpp	/^            ServiceReadySoon            = 120, \/\/\/< Service ready in N minutes$/;"	e	enum:sf::Ftp::Response::Status
ServiceUnavailable	dependencies/include/SFML/Network/Ftp.hpp	/^            ServiceUnavailable        = 421, \/\/\/< Service not available, closing control conn/;"	e	enum:sf::Ftp::Response::Status
Session	vendor/spdlog/tests/catch.hpp	/^        Session()$/;"	f	class:Catch::Session
Session	vendor/spdlog/tests/catch.hpp	/^    class Session : NonCopyable {$/;"	c	namespace:Catch
Set	dependencies/include/v8-util.h	/^  Global<V> Set(const K& key, Global<V> value) {$/;"	f	class:v8::GlobalValueMap	typeref:typename:Global<V>
Set	dependencies/include/v8-util.h	/^  Global<V> Set(const K& key, Global<V> value) {$/;"	f	class:v8::PersistentValueMap	typeref:typename:Global<V>
Set	dependencies/include/v8-util.h	/^  Global<V> Set(const K& key, Global<V> value,$/;"	f	class:v8::GlobalValueMap	typeref:typename:Global<V>
Set	dependencies/include/v8-util.h	/^  Global<V> Set(const K& key, Global<V> value,$/;"	f	class:v8::PersistentValueMap	typeref:typename:Global<V>
Set	dependencies/include/v8-util.h	/^  Global<V> Set(const K& key, Local<V> value) {$/;"	f	class:v8::GlobalValueMap	typeref:typename:Global<V>
Set	dependencies/include/v8-util.h	/^  Global<V> Set(const K& key, Local<V> value) {$/;"	f	class:v8::PersistentValueMap	typeref:typename:Global<V>
Set	dependencies/include/v8-util.h	/^  static PersistentContainerValue Set(Impl* impl, K key,$/;"	f	class:v8::StdMapTraits	typeref:typename:PersistentContainerValue
Set	dependencies/include/v8.h	/^class V8_EXPORT Set : public Object {$/;"	c	namespace:v8
SetEmbedderData	dependencies/include/v8-internal.h	/^  V8_INLINE static void SetEmbedderData(v8::Isolate* isolate, uint32_t slot,$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE void
SetIndexedPropertyHandler	dependencies/include/v8.h	/^  void SetIndexedPropertyHandler($/;"	f	class:v8::ObjectTemplate	typeref:typename:void
SetInternal	dependencies/include/v8.h	/^  V8_INLINE void SetInternal(internal::Address value) { *value_ = value; }$/;"	f	class:v8::ReturnValue	typeref:typename:V8_INLINE void
SetReturnValue	dependencies/include/v8-util.h	/^    bool SetReturnValue(ReturnValue<T> returnValue) {$/;"	f	class:v8::PersistentValueMapBase::PersistentValueReference	typeref:typename:bool
SetReturnValue	dependencies/include/v8-util.h	/^  bool SetReturnValue(const K& key,$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:bool
SetReturnValueFromVal	dependencies/include/v8-util.h	/^  static bool SetReturnValueFromVal(ReturnValue<Value>* returnValue,$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:bool
SetSecondPassCallback	dependencies/include/v8.h	/^  void SetSecondPassCallback(Callback callback) const { *callback_ = callback; }$/;"	f	class:v8::WeakCallbackInfo	typeref:typename:void
SetTraceRecordMode	dependencies/include/libplatform/v8-tracing.h	/^  void SetTraceRecordMode(TraceRecordMode mode) { record_mode_ = mode; }$/;"	f	class:v8::platform::tracing::TraceConfig	typeref:typename:void
SetUnique	dependencies/include/v8-util.h	/^  Global<V> SetUnique(const K& key, Global<V>* persistent) {$/;"	f	class:v8::GlobalValueMap	typeref:typename:Global<V>
SetUnique	dependencies/include/v8-util.h	/^  Global<V> SetUnique(const K& key, Global<V>* persistent) {$/;"	f	class:v8::PersistentValueMap	typeref:typename:Global<V>
Shader	dependencies/include/SFML/Graphics/Shader.hpp	/^class SFML_GRAPHICS_API Shader : GlResource, NonCopyable$/;"	c	namespace:sf
Shape	dependencies/include/SFML/Graphics/Shape.hpp	/^class SFML_GRAPHICS_API Shape : public Drawable, public Transformable$/;"	c	namespace:sf
SharedArrayBuffer	dependencies/include/v8.h	/^class V8_EXPORT SharedArrayBuffer : public Object {$/;"	c	namespace:v8
SharedImpl	vendor/spdlog/tests/catch.hpp	/^        SharedImpl() : m_rc( 0 ){}$/;"	f	struct:Catch::SharedImpl
SharedImpl	vendor/spdlog/tests/catch.hpp	/^    struct SharedImpl : T {$/;"	s	namespace:Catch
SharedModule	dependencies/include/v8.h	/^    typedef std::shared_ptr<internal::wasm::NativeModule> SharedModule;$/;"	t	class:v8::WasmModuleObject::TransferrableModule	typeref:typename:std::shared_ptr<internal::wasm::NativeModule>
ShortOpt	vendor/spdlog/tests/catch.hpp	/^            enum Type { Positional, ShortOpt, LongOpt };$/;"	e	enum:Clara::Parser::Token::Type
ShouldFail	vendor/spdlog/tests/catch.hpp	/^            ShouldFail = 1 << 2,$/;"	e	enum:Catch::TestCaseInfo::SpecialProperties
ShowDurations	vendor/spdlog/tests/catch.hpp	/^    struct ShowDurations { enum OrNot {$/;"	s	namespace:Catch
SideEffectType	dependencies/include/v8.h	/^enum class SideEffectType {$/;"	g	namespace:v8
SignalDefs	vendor/spdlog/tests/catch.hpp	/^    struct SignalDefs { int id; const char* name; };$/;"	s	namespace:Catch
Signature	dependencies/include/v8.h	/^class V8_EXPORT Signature : public Data {$/;"	c	namespace:v8
Size	dependencies/include/SFML/Network/TcpSocket.hpp	/^        Uint32            Size;         \/\/\/< Data of packet size$/;"	m	struct:sf::TcpSocket::PendingPacket	typeref:typename:Uint32
Size	dependencies/include/v8-util.h	/^  size_t Size() const {$/;"	f	class:v8::PersistentValueVector	typeref:typename:size_t
Size	dependencies/include/v8-util.h	/^  size_t Size() { return Traits::Size(&impl_); }$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:size_t
Size	dependencies/include/v8-util.h	/^  static size_t Size(Impl* impl) { return impl->size(); }$/;"	f	class:v8::StdMapTraits	typeref:typename:size_t
Size	dependencies/include/v8-util.h	/^  static size_t Size(const Impl* impl) {$/;"	f	class:v8::DefaultPersistentValueVectorTraits	typeref:typename:size_t
SizeAll	dependencies/include/SFML/Window/Cursor.hpp	/^        SizeAll,                \/\/\/< Combination of SizeHorizontal and SizeVertical$/;"	e	enum:sf::Cursor::Type
SizeBottomLeftTopRight	dependencies/include/SFML/Window/Cursor.hpp	/^        SizeBottomLeftTopRight, \/\/\/< Double arrow cursor going from bottom-left to top-right$/;"	e	enum:sf::Cursor::Type
SizeEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct SizeEvent$/;"	s	class:sf::Event
SizeHorizontal	dependencies/include/SFML/Window/Cursor.hpp	/^        SizeHorizontal,         \/\/\/< Horizontal double arrow cursor$/;"	e	enum:sf::Cursor::Type
SizeReceived	dependencies/include/SFML/Network/TcpSocket.hpp	/^        std::size_t       SizeReceived; \/\/\/< Number of size bytes received so far$/;"	m	struct:sf::TcpSocket::PendingPacket	typeref:typename:std::size_t
SizeTopLeftBottomRight	dependencies/include/SFML/Window/Cursor.hpp	/^        SizeTopLeftBottomRight, \/\/\/< Double arrow cursor going from top-left to bottom-right$/;"	e	enum:sf::Cursor::Type
SizeVertical	dependencies/include/SFML/Window/Cursor.hpp	/^        SizeVertical,           \/\/\/< Vertical double arrow cursor$/;"	e	enum:sf::Cursor::Type
SizedIf	vendor/spdlog/tests/catch.hpp	/^    template<> struct SizedIf<sizeof(FalseType)> : FalseType {};$/;"	s	namespace:Catch
SizedIf	vendor/spdlog/tests/catch.hpp	/^    template<> struct SizedIf<sizeof(TrueType)> : TrueType {};$/;"	s	namespace:Catch
Slash	dependencies/include/SFML/Window/Keyboard.hpp	/^        Slash,        \/\/\/< The \/ key$/;"	e	enum:sf::Keyboard::Key
SmiTagging	dependencies/include/v8-internal.h	/^struct SmiTagging<4> {$/;"	s	namespace:v8::internal
SmiTagging	dependencies/include/v8-internal.h	/^struct SmiTagging<8> {$/;"	s	namespace:v8::internal
SmiToInt	dependencies/include/v8-internal.h	/^  V8_INLINE static int SmiToInt(const internal::Address value) {$/;"	f	struct:v8::internal::SmiTagging	typeref:typename:V8_INLINE int
SmiValue	dependencies/include/v8-internal.h	/^  V8_INLINE static int SmiValue(const internal::Address value) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE int
SmiValuesAre31Bits	dependencies/include/v8-internal.h	/^constexpr bool SmiValuesAre31Bits() { return kSmiValueSize == 31; }$/;"	f	namespace:v8::internal	typeref:typename:bool
SmiValuesAre32Bits	dependencies/include/v8-internal.h	/^constexpr bool SmiValuesAre32Bits() { return kSmiValueSize == 32; }$/;"	f	namespace:v8::internal	typeref:typename:bool
SnapshotObjectId	dependencies/include/v8-profiler.h	/^typedef uint32_t SnapshotObjectId;$/;"	t	namespace:v8	typeref:typename:uint32_t
Socket	dependencies/include/SFML/Network/Socket.hpp	/^class SFML_NETWORK_API Socket : NonCopyable$/;"	c	namespace:sf
SocketHandle	dependencies/include/SFML/Network/SocketHandle.hpp	/^    typedef UINT_PTR SocketHandle;$/;"	t	namespace:sf	typeref:typename:UINT_PTR
SocketSelector	dependencies/include/SFML/Network/SocketSelector.hpp	/^class SFML_NETWORK_API SocketSelector$/;"	c	namespace:sf
Sound	dependencies/include/SFML/Audio/Sound.hpp	/^class SFML_AUDIO_API Sound : public SoundSource$/;"	c	namespace:sf
SoundBuffer	dependencies/include/SFML/Audio/SoundBuffer.hpp	/^class SFML_AUDIO_API SoundBuffer : AlResource$/;"	c	namespace:sf
SoundBufferRecorder	dependencies/include/SFML/Audio/SoundBufferRecorder.hpp	/^class SFML_AUDIO_API SoundBufferRecorder : public SoundRecorder$/;"	c	namespace:sf
SoundFileFactory	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^class SFML_AUDIO_API SoundFileFactory$/;"	c	namespace:sf
SoundFileReader	dependencies/include/SFML/Audio/SoundFileReader.hpp	/^class SFML_AUDIO_API SoundFileReader$/;"	c	namespace:sf
SoundFileWriter	dependencies/include/SFML/Audio/SoundFileWriter.hpp	/^class SFML_AUDIO_API SoundFileWriter$/;"	c	namespace:sf
SoundList	dependencies/include/SFML/Audio/SoundBuffer.hpp	/^    typedef std::set<Sound*> SoundList; \/\/\/< Set of unique sound instances$/;"	t	class:sf::SoundBuffer	typeref:typename:std::set<Sound * >
SoundRecorder	dependencies/include/SFML/Audio/SoundRecorder.hpp	/^class SFML_AUDIO_API SoundRecorder : AlResource$/;"	c	namespace:sf
SoundSource	dependencies/include/SFML/Audio/SoundSource.hpp	/^class SFML_AUDIO_API SoundSource : AlResource$/;"	c	namespace:sf
SoundStream	dependencies/include/SFML/Audio/SoundStream.hpp	/^class SFML_AUDIO_API SoundStream : public SoundSource$/;"	c	namespace:sf
Source	dependencies/include/v8.h	/^  class Source {$/;"	c	class:v8::ScriptCompiler
SourceLineInfo	vendor/spdlog/tests/catch.hpp	/^    SourceLineInfo::SourceLineInfo( SourceLineInfo const& other )$/;"	f	class:Catch::SourceLineInfo
SourceLineInfo	vendor/spdlog/tests/catch.hpp	/^    SourceLineInfo::SourceLineInfo( char const* _file, std::size_t _line )$/;"	f	class:Catch::SourceLineInfo
SourceLineInfo	vendor/spdlog/tests/catch.hpp	/^    SourceLineInfo::SourceLineInfo() : line( 0 ){}$/;"	f	class:Catch::SourceLineInfo
SourceLineInfo	vendor/spdlog/tests/catch.hpp	/^    struct SourceLineInfo {$/;"	s	namespace:Catch
Space	dependencies/include/SFML/Window/Keyboard.hpp	/^        Space,        \/\/\/< The Space key$/;"	e	enum:sf::Keyboard::Key
Span	dependencies/include/SFML/Audio/Music.hpp	/^        Span()$/;"	f	struct:sf::Music::Span
Span	dependencies/include/SFML/Audio/Music.hpp	/^        Span(T off, T len):$/;"	f	struct:sf::Music::Span
Span	dependencies/include/SFML/Audio/Music.hpp	/^    struct Span$/;"	s	class:sf::Music
SpdlogBench	vendor/spdlog/bench/CMakeLists.txt	/^project(SpdlogBench CXX)$/;"	p
SpdlogExamples	vendor/spdlog/example/CMakeLists.txt	/^project(SpdlogExamples CXX)$/;"	p
SpecialProperties	vendor/spdlog/tests/catch.hpp	/^        enum SpecialProperties{$/;"	g	struct:Catch::TestCaseInfo
Sprite	dependencies/include/SFML/Graphics/Sprite.hpp	/^class SFML_GRAPHICS_API Sprite : public Drawable, public Transformable$/;"	c	namespace:sf
SrcAlpha	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        SrcAlpha,         \/\/\/< (src.a, src.a, src.a, src.a)$/;"	e	enum:sf::BlendMode::Factor
SrcColor	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        SrcColor,         \/\/\/< (src.r, src.g, src.b, src.a)$/;"	e	enum:sf::BlendMode::Factor
StackFrame	dependencies/include/v8.h	/^class V8_EXPORT StackFrame {$/;"	c	namespace:v8
StackTrace	dependencies/include/v8.h	/^class V8_EXPORT StackTrace {$/;"	c	namespace:v8
StackTraceOptions	dependencies/include/v8.h	/^  enum StackTraceOptions {$/;"	g	class:v8::StackTrace
StackTracePrinter	dependencies/include/v8-platform.h	/^  typedef void (*StackTracePrinter)();$/;"	t	class:v8::Platform	typeref:typename:void (*)()
StartsWith	vendor/spdlog/tests/catch.hpp	/^                StartsWith( NSString* substr ) : StringHolder( substr ){}$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::StartsWith
StartsWith	vendor/spdlog/tests/catch.hpp	/^            StartsWith( NSString* substr ){ return Impl::NSStringMatchers::StartsWith( substr );/;"	f	namespace:Catch::Matchers	typeref:typename:Impl::NSStringMatchers::StartsWith
StartsWith	vendor/spdlog/tests/catch.hpp	/^            StartsWith( StartsWith const& other ) : m_substr( other.m_substr ){}$/;"	f	struct:Catch::Matchers::Impl::StdString::StartsWith
StartsWith	vendor/spdlog/tests/catch.hpp	/^            StartsWith( std::string const& substr ) : m_substr( substr ){}$/;"	f	struct:Catch::Matchers::Impl::StdString::StartsWith
StartsWith	vendor/spdlog/tests/catch.hpp	/^            struct StartsWith : StringHolder<StartsWith> {$/;"	s	namespace:Catch::Matchers::Impl::NSStringMatchers
StartsWith	vendor/spdlog/tests/catch.hpp	/^        struct StartsWith : MatcherImpl<StartsWith, std::string> {$/;"	s	namespace:Catch::Matchers::Impl::StdString
StartsWith	vendor/spdlog/tests/catch.hpp	/^    inline Impl::StdString::StartsWith  StartsWith( const char* substr ) {$/;"	f	namespace:Catch::Matchers	typeref:typename:Impl::StdString::StartsWith
StartsWith	vendor/spdlog/tests/catch.hpp	/^    inline Impl::StdString::StartsWith  StartsWith( std::string const& substr ) {$/;"	f	namespace:Catch::Matchers	typeref:typename:Impl::StdString::StartsWith
StateTag	dependencies/include/v8.h	/^enum StateTag {$/;"	g	namespace:v8
StatesCache	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^    struct StatesCache$/;"	s	class:sf::RenderTarget
Static	dependencies/include/SFML/Graphics/VertexBuffer.hpp	/^        Static   \/\/\/< Rarely changing data$/;"	e	enum:sf::VertexBuffer::Usage
Status	dependencies/include/SFML/Audio/SoundSource.hpp	/^    enum Status$/;"	g	class:sf::SoundSource
Status	dependencies/include/SFML/Network/Ftp.hpp	/^        enum Status$/;"	g	class:sf::Ftp::Response
Status	dependencies/include/SFML/Network/Http.hpp	/^        enum Status$/;"	g	class:sf::Http::Response
Status	dependencies/include/SFML/Network/Socket.hpp	/^    enum Status$/;"	g	class:sf::Socket
Status	dependencies/include/v8.h	/^  enum Status {$/;"	g	class:v8::Module
StdGlobalValueMap	dependencies/include/v8-util.h	/^  explicit StdGlobalValueMap(Isolate* isolate)$/;"	f	class:v8::StdGlobalValueMap
StdGlobalValueMap	dependencies/include/v8-util.h	/^class StdGlobalValueMap : public GlobalValueMap<K, V, Traits> {$/;"	c	namespace:v8
StdMapTraits	dependencies/include/v8-util.h	/^class StdMapTraits {$/;"	c	namespace:v8
StdPersistentValueMap	dependencies/include/v8-util.h	/^  explicit StdPersistentValueMap(Isolate* isolate)$/;"	f	class:v8::StdPersistentValueMap
StdPersistentValueMap	dependencies/include/v8-util.h	/^class StdPersistentValueMap : public PersistentValueMap<K, V, Traits> {$/;"	c	namespace:v8
StdString	vendor/spdlog/tests/catch.hpp	/^    namespace StdString {$/;"	n	namespace:Catch::Matchers::Impl
Stopped	dependencies/include/SFML/Audio/SoundSource.hpp	/^        Stopped, \/\/\/< Sound is not playing$/;"	e	enum:sf::SoundSource::Status
Stream	dependencies/include/SFML/Graphics/VertexBuffer.hpp	/^        Stream,  \/\/\/< Constantly changing data$/;"	e	enum:sf::VertexBuffer::Usage
Stream	vendor/spdlog/tests/catch.hpp	/^    Stream::Stream( std::streambuf* _streamBuf, bool _isOwned )$/;"	f	class:Catch::Stream
Stream	vendor/spdlog/tests/catch.hpp	/^    Stream::Stream()$/;"	f	class:Catch::Stream
Stream	vendor/spdlog/tests/catch.hpp	/^    class Stream {$/;"	c	namespace:Catch
StreamBufBase	vendor/spdlog/tests/catch.hpp	/^    class StreamBufBase : public std::streambuf {$/;"	c	namespace:Catch
StreamBufImpl	vendor/spdlog/tests/catch.hpp	/^        StreamBufImpl() {$/;"	f	class:Catch::StreamBufImpl
StreamBufImpl	vendor/spdlog/tests/catch.hpp	/^    class StreamBufImpl : public StreamBufBase {$/;"	c	namespace:Catch
StreamEndStop	vendor/spdlog/tests/catch.hpp	/^    struct StreamEndStop {$/;"	s	namespace:Catch
StreamRedirect	vendor/spdlog/tests/catch.hpp	/^        StreamRedirect( std::ostream& stream, std::string& targetString )$/;"	f	class:Catch::StreamRedirect
StreamRedirect	vendor/spdlog/tests/catch.hpp	/^    class StreamRedirect {$/;"	c	namespace:Catch
StreamedSource	dependencies/include/v8.h	/^  class V8_EXPORT StreamedSource {$/;"	c	class:v8::ScriptCompiler
StreamingReporterBase	vendor/spdlog/tests/catch.hpp	/^        StreamingReporterBase( ReporterConfig const& _config )$/;"	f	struct:Catch::StreamingReporterBase
StreamingReporterBase	vendor/spdlog/tests/catch.hpp	/^    struct StreamingReporterBase : SharedImpl<IStreamingReporter> {$/;"	s	namespace:Catch
StressType	dependencies/include/v8-testing.h	/^  enum StressType {$/;"	g	class:v8::Testing
StrikeThrough	dependencies/include/SFML/Graphics/Text.hpp	/^        StrikeThrough = 1 << 3  \/\/\/< Strike through characters$/;"	e	enum:sf::Text::Style
String	dependencies/include/SFML/System/String.hpp	/^class SFML_SYSTEM_API String$/;"	c	namespace:sf
String	dependencies/include/v8.h	/^class V8_EXPORT String : public Name {$/;"	c	namespace:v8
StringBuffer	dependencies/include/v8-inspector.h	/^class V8_EXPORT StringBuffer {$/;"	c	namespace:v8_inspector
StringHolder	vendor/spdlog/tests/catch.hpp	/^                StringHolder( NSString* substr ) : m_substr( [substr copy] ){}$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::StringHolder
StringHolder	vendor/spdlog/tests/catch.hpp	/^                StringHolder( StringHolder const& other ) : m_substr( [other.m_substr copy] ){}$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::StringHolder
StringHolder	vendor/spdlog/tests/catch.hpp	/^                StringHolder() {$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::StringHolder
StringHolder	vendor/spdlog/tests/catch.hpp	/^            struct StringHolder : MatcherImpl<MatcherT, NSString*>{$/;"	s	namespace:Catch::Matchers::Impl::NSStringMatchers
StringList	dependencies/include/libplatform/v8-tracing.h	/^  typedef std::vector<std::string> StringList;$/;"	t	class:v8::platform::tracing::TraceConfig	typeref:typename:std::vector<std::string>
StringMaker	vendor/spdlog/tests/catch.hpp	/^struct StringMaker :$/;"	s	namespace:Catch
StringMaker	vendor/spdlog/tests/catch.hpp	/^struct StringMaker<R C::*> {$/;"	s	namespace:Catch
StringMaker	vendor/spdlog/tests/catch.hpp	/^struct StringMaker<T*> {$/;"	s	namespace:Catch
StringMakerBase	vendor/spdlog/tests/catch.hpp	/^    struct StringMakerBase {$/;"	s	namespace:Catch::Detail
StringMakerBase	vendor/spdlog/tests/catch.hpp	/^    struct StringMakerBase<true> {$/;"	s	namespace:Catch::Detail
StringObject	dependencies/include/v8.h	/^class V8_EXPORT StringObject : public Object {$/;"	c	namespace:v8
StringView	dependencies/include/v8-inspector.h	/^  StringView() : m_is8Bit(true), m_length(0), m_characters8(nullptr) {}$/;"	f	class:v8_inspector::StringView
StringView	dependencies/include/v8-inspector.h	/^  StringView(const uint16_t* characters, size_t length)$/;"	f	class:v8_inspector::StringView
StringView	dependencies/include/v8-inspector.h	/^  StringView(const uint8_t* characters, size_t length)$/;"	f	class:v8_inspector::StringView
StringView	dependencies/include/v8-inspector.h	/^class V8_EXPORT StringView {$/;"	c	namespace:v8_inspector
Style	dependencies/include/SFML/Graphics/Text.hpp	/^    enum Style$/;"	g	class:sf::Text
Style	dependencies/include/SFML/Window/WindowStyle.hpp	/^namespace Style$/;"	n	namespace:sf
Subtract	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        Subtract,       \/\/\/< Pixel = Src * SrcFactor - Dst * DstFactor$/;"	e	enum:sf::BlendMode::Equation
Subtract	dependencies/include/SFML/Window/Keyboard.hpp	/^        Subtract,     \/\/\/< The - key (minus, usually from numpad)$/;"	e	enum:sf::Keyboard::Key
Success	vendor/spdlog/tests/catch.hpp	/^            Success = Green,$/;"	e	enum:Catch::Colour::Code
SummaryColumn	vendor/spdlog/tests/catch.hpp	/^            SummaryColumn( std::string const& _label, Colour::Code _colour )$/;"	f	struct:Catch::ConsoleReporter::SummaryColumn
SummaryColumn	vendor/spdlog/tests/catch.hpp	/^        struct SummaryColumn {$/;"	s	struct:Catch::ConsoleReporter
SuppressFail	vendor/spdlog/tests/catch.hpp	/^        SuppressFail = 0x04         \/\/ Failures are reported but do not fail the test$/;"	e	enum:Catch::ResultDisposition::Flags
Swap	dependencies/include/v8-util.h	/^  static void Swap(Impl& a, Impl& b) { std::swap(a, b); }  \/\/ NOLINT$/;"	f	class:v8::StdMapTraits	typeref:typename:void
Symbol	dependencies/include/v8.h	/^class V8_EXPORT Symbol : public Name {$/;"	c	namespace:v8
SymbolObject	dependencies/include/v8.h	/^class V8_EXPORT SymbolObject : public Object {$/;"	c	namespace:v8
Synchronous mode	vendor/spdlog/README.md	/^#### Synchronous mode$/;"	t
SystemStatus	dependencies/include/SFML/Network/Ftp.hpp	/^            SystemStatus          = 211, \/\/\/< System status, or system help reply$/;"	e	enum:sf::Ftp::Response::Status
SystemType	dependencies/include/SFML/Network/Ftp.hpp	/^            SystemType            = 215, \/\/\/< NAME system type, where NAME is an official sys/;"	e	enum:sf::Ftp::Response::Status
T	dependencies/include/SFML/Window/Keyboard.hpp	/^        T,            \/\/\/< The T key$/;"	e	enum:sf::Keyboard::Key
TBC_TEXT_FORMAT_CONSOLE_WIDTH	vendor/spdlog/tests/catch.hpp	/^#define TBC_TEXT_FORMAT_CONSOLE_WIDTH /;"	d
TBC_TEXT_FORMAT_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TBC_TEXT_FORMAT_H_INCLUDED$/;"	d
TEST_CASE	vendor/spdlog/tests/catch.hpp	/^    #define TEST_CASE(/;"	d
TEST_CASE_METHOD	vendor/spdlog/tests/catch.hpp	/^    #define TEST_CASE_METHOD(/;"	d
THEN	vendor/spdlog/tests/catch.hpp	/^#define THEN(/;"	d
THREADS_PREFER_PTHREAD_FLAG	CMakeLists.txt	/^set(THREADS_PREFER_PTHREAD_FLAG ON)$/;"	v
TWOBLUECUBES_CATCH_APPROX_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_APPROX_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_ASSERTIONRESULT_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_ASSERTIONRESULT_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_ASSERTIONRESULT_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_ASSERTIONRESULT_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_CAPTURE_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_CAPTURE_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_CLARA_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_CLARA_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_COMMANDLINE_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_COMMANDLINE_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_COMMON_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_COMMON_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_COMMON_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_COMMON_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_COMPILER_CAPABILITIES_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_COMPILER_CAPABILITIES_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_CONFIG_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_CONFIG_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_CONSOLE_COLOUR_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_CONSOLE_COLOUR_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_CONSOLE_COLOUR_IMPL_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_CONSOLE_COLOUR_IMPL_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_CONTEXT_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_CONTEXT_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_CONTEXT_IMPL_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_CONTEXT_IMPL_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_DEBUGGER_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_DEBUGGER_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_DEBUGGER_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_DEBUGGER_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_DEFAULT_MAIN_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_DEFAULT_MAIN_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_EVALUATE_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_EVALUATE_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_EXCEPTION_TRANSLATOR_REGISTRY_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_EXCEPTION_TRANSLATOR_REGISTRY_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_EXPRESSION_LHS_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_EXPRESSION_LHS_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_FATAL_CONDITION_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_FATAL_CONDITION_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_GENERATORS_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_GENERATORS_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_GENERATORS_IMPL_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_GENERATORS_IMPL_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_IMPL_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_IMPL_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_INTERFACES_CAPTURE_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_INTERFACES_CAPTURE_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_INTERFACES_CONFIG_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_INTERFACES_CONFIG_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_INTERFACES_EXCEPTION_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_INTERFACES_EXCEPTION_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_INTERFACES_GENERATORS_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_INTERFACES_GENERATORS_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_INTERFACES_REGISTRY_HUB_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_INTERFACES_REGISTRY_HUB_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_INTERFACES_REPORTER_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_INTERFACES_REPORTER_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_INTERFACES_RUNNER_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_INTERFACES_RUNNER_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_INTERFACES_TAG_ALIAS_REGISTRY_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_INTERFACES_TAG_ALIAS_REGISTRY_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_INTERFACES_TESTCASE_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_INTERFACES_TESTCASE_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_LEGACY_REPORTER_ADAPTER_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_LEGACY_REPORTER_ADAPTER_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_LEGACY_REPORTER_ADAPTER_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_LEGACY_REPORTER_ADAPTER_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_LIST_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_LIST_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_MATCHERS_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_MATCHERS_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_MESSAGE_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_MESSAGE_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_MESSAGE_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_MESSAGE_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_NOTIMPLEMENTED_EXCEPTION_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_NOTIMPLEMENTED_EXCEPTION_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_NOTIMPLEMENTED_EXCEPTION_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_NOTIMPLEMENTED_EXCEPTION_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_OBJC_ARC_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_OBJC_ARC_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_OBJC_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_OBJC_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_OPTION_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_OPTION_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_PLATFORM_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_PLATFORM_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_PTR_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_PTR_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_REENABLE_WARNINGS_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_REENABLE_WARNINGS_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_REGISTRY_HUB_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_REGISTRY_HUB_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_REPORTER_BASES_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_REPORTER_BASES_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_REPORTER_COMPACT_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_REPORTER_COMPACT_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_REPORTER_CONSOLE_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_REPORTER_CONSOLE_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_REPORTER_JUNIT_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_REPORTER_JUNIT_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_REPORTER_REGISTRARS_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_REPORTER_REGISTRARS_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_REPORTER_REGISTRY_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_REPORTER_REGISTRY_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_REPORTER_XML_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_REPORTER_XML_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_RESULT_BUILDER_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_RESULT_BUILDER_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_RESULT_BUILDER_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_RESULT_BUILDER_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_RESULT_TYPE_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_RESULT_TYPE_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_RUNNER_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_RUNNER_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_RUNNER_IMPL_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_RUNNER_IMPL_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_SECTION_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_SECTION_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_SECTION_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_SECTION_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_SECTION_INFO_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_SECTION_INFO_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_SFINAE_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_SFINAE_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_STREAMBUF_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_STREAMBUF_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_STREAM_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_STREAM_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_STREAM_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_STREAM_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_SUPPRESS_WARNINGS_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_SUPPRESS_WARNINGS_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_TAG_ALIAS_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_TAG_ALIAS_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_TAG_ALIAS_REGISTRY_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_TAG_ALIAS_REGISTRY_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_TAG_ALIAS_REGISTRY_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_TAG_ALIAS_REGISTRY_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_TEST_CASE_INFO_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_TEST_CASE_INFO_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_TEST_CASE_INFO_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_TEST_CASE_INFO_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_TEST_CASE_REGISTRY_IMPL_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_TEST_CASE_REGISTRY_IMPL_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_TEST_CASE_TRACKER_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_TEST_CASE_TRACKER_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_TEST_REGISTRY_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_TEST_REGISTRY_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_TEST_SPEC_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_TEST_SPEC_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_TEST_SPEC_PARSER_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_TEST_SPEC_PARSER_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_TEXT_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_TEXT_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_TIMER_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_TIMER_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_TOSTRING_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_TOSTRING_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_TOSTRING_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_TOSTRING_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_TOTALS_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_TOTALS_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_VERSION_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_VERSION_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_VERSION_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_VERSION_H_INCLUDED$/;"	d
TWOBLUECUBES_CATCH_XMLWRITER_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CATCH_XMLWRITER_HPP_INCLUDED$/;"	d
TWOBLUECUBES_CLARA_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_CLARA_H_INCLUDED$/;"	d
TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#define TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED$/;"	d
TWOBLUECUBES_TEXT_FORMAT_H_ALREADY_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#   define TWOBLUECUBES_TEXT_FORMAT_H_ALREADY_INCLUDED$/;"	d
TWOBLUECUBES_TEXT_FORMAT_H_INCLUDED	vendor/spdlog/tests/catch.hpp	/^#  define TWOBLUECUBES_TEXT_FORMAT_H_INCLUDED$/;"	d
TWO_BYTE	dependencies/include/v8.h	/^    enum Encoding { ONE_BYTE, TWO_BYTE, UTF8 };$/;"	e	enum:v8::ScriptCompiler::StreamedSource::Encoding
TWO_BYTE_ENCODING	dependencies/include/v8.h	/^    TWO_BYTE_ENCODING = 0x0,$/;"	e	enum:v8::String::Encoding
TYPES	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  static FMT_CONSTEXPR11 long long TYPES = get_types();$/;"	m	class:format_arg_store	typeref:typename:FMT_CONSTEXPR11 long long
TYPES	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^const long long format_arg_store<Context, Args...>::TYPES = get_types();$/;"	m	class:format_arg_store<Context, Args...>	typeref:typename:const long long
TYPE_CHECK	dependencies/include/v8.h	/^#define TYPE_CHECK(/;"	d
T_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit T_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::T_formatter
T_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class T_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
Tab	dependencies/include/SFML/Window/Keyboard.hpp	/^        Tab,          \/\/\/< The Tabulation key$/;"	e	enum:sf::Keyboard::Key
Tag	vendor/spdlog/tests/catch.hpp	/^        enum Mode{ None, Name, QuotedName, Tag };$/;"	e	enum:Catch::TestSpecParser::Mode
TagAlias	vendor/spdlog/tests/catch.hpp	/^        TagAlias( std::string _tag, SourceLineInfo _lineInfo ) : tag( _tag ), lineInfo( _lineInf/;"	f	struct:Catch::TagAlias
TagAlias	vendor/spdlog/tests/catch.hpp	/^    struct TagAlias {$/;"	s	namespace:Catch
TagAliasRegistry	vendor/spdlog/tests/catch.hpp	/^    class TagAliasRegistry : public ITagAliasRegistry {$/;"	c	namespace:Catch
TagInfo	vendor/spdlog/tests/catch.hpp	/^        TagInfo() : count ( 0 ) {}$/;"	f	struct:Catch::TagInfo
TagInfo	vendor/spdlog/tests/catch.hpp	/^    struct TagInfo {$/;"	s	namespace:Catch
TagPattern	vendor/spdlog/tests/catch.hpp	/^            TagPattern( std::string const& tag ) : m_tag( toLower( tag ) ) {}$/;"	f	class:Catch::TestSpec::TagPattern
TagPattern	vendor/spdlog/tests/catch.hpp	/^        class TagPattern : public Pattern {$/;"	c	class:Catch::TestSpec
TargetType	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^        std::is_same<T, void>::value, U, T>::type TargetType;$/;"	t	function:internal::arg_converter::operator ()	typeref:typename:std::conditional<std::is_same<T,void>::value,U,T>::type
Task	dependencies/include/v8-platform.h	/^class Task {$/;"	c	namespace:v8
TaskRunner	dependencies/include/v8-platform.h	/^class TaskRunner {$/;"	c	namespace:v8
Tbc	vendor/spdlog/tests/catch.hpp	/^namespace Tbc {$/;"	n	namespace:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE
Tbc	vendor/spdlog/tests/catch.hpp	/^namespace Tbc {$/;"	n	namespace:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE
Tcp	dependencies/include/SFML/Network/Socket.hpp	/^        Tcp, \/\/\/< TCP protocol$/;"	e	enum:sf::Socket::Type
TcpListener	dependencies/include/SFML/Network/TcpListener.hpp	/^class SFML_NETWORK_API TcpListener : public Socket$/;"	c	namespace:sf
TcpSocket	dependencies/include/SFML/Network/TcpSocket.hpp	/^class SFML_NETWORK_API TcpSocket : public Socket$/;"	c	namespace:sf
Template	dependencies/include/v8.h	/^class V8_EXPORT Template : public Data {$/;"	c	namespace:v8
TestCase	vendor/spdlog/tests/catch.hpp	/^    TestCase::TestCase( ITestCase* testCase, TestCaseInfo const& info ) : TestCaseInfo( info ), /;"	f	class:Catch::TestCase
TestCase	vendor/spdlog/tests/catch.hpp	/^    TestCase::TestCase( TestCase const& other )$/;"	f	class:Catch::TestCase
TestCase	vendor/spdlog/tests/catch.hpp	/^    class TestCase : public TestCaseInfo {$/;"	c	namespace:Catch
TestCaseInfo	vendor/spdlog/tests/catch.hpp	/^    TestCaseInfo::TestCaseInfo( TestCaseInfo const& other )$/;"	f	class:Catch::TestCaseInfo
TestCaseInfo	vendor/spdlog/tests/catch.hpp	/^    TestCaseInfo::TestCaseInfo( std::string const& _name,$/;"	f	class:Catch::TestCaseInfo
TestCaseInfo	vendor/spdlog/tests/catch.hpp	/^    struct TestCaseInfo {$/;"	s	namespace:Catch
TestCaseNode	vendor/spdlog/tests/catch.hpp	/^        typedef Node<TestCaseStats, SectionNode> TestCaseNode;$/;"	t	struct:Catch::CumulativeReporterBase	typeref:typename:Node<TestCaseStats,SectionNode>
TestCaseStats	vendor/spdlog/tests/catch.hpp	/^        TestCaseStats(  TestCaseInfo const& _testInfo,$/;"	f	struct:Catch::TestCaseStats
TestCaseStats	vendor/spdlog/tests/catch.hpp	/^    struct TestCaseStats {$/;"	s	namespace:Catch
TestCaseTracker	vendor/spdlog/tests/catch.hpp	/^        TestCaseTracker( std::string const& testCaseName )$/;"	f	class:Catch::SectionTracking::TestCaseTracker
TestCaseTracker	vendor/spdlog/tests/catch.hpp	/^    class TestCaseTracker {$/;"	c	namespace:Catch::SectionTracking
TestFailureException	vendor/spdlog/tests/catch.hpp	/^    struct TestFailureException{};$/;"	s	namespace:Catch
TestFunction	vendor/spdlog/tests/catch.hpp	/^typedef void(*TestFunction)();$/;"	t	namespace:Catch	typeref:typename:void (*)()
TestGroupNode	vendor/spdlog/tests/catch.hpp	/^        typedef Node<TestGroupStats, TestCaseNode> TestGroupNode;$/;"	t	struct:Catch::CumulativeReporterBase	typeref:typename:Node<TestGroupStats,TestCaseNode>
TestGroupStats	vendor/spdlog/tests/catch.hpp	/^        TestGroupStats( GroupInfo const& _groupInfo )$/;"	f	struct:Catch::TestGroupStats
TestGroupStats	vendor/spdlog/tests/catch.hpp	/^        TestGroupStats( GroupInfo const& _groupInfo,$/;"	f	struct:Catch::TestGroupStats
TestGroupStats	vendor/spdlog/tests/catch.hpp	/^    struct TestGroupStats {$/;"	s	namespace:Catch
TestRegistry	vendor/spdlog/tests/catch.hpp	/^        TestRegistry() : m_unnamedCount( 0 ) {}$/;"	f	class:Catch::TestRegistry
TestRegistry	vendor/spdlog/tests/catch.hpp	/^    class TestRegistry : public ITestCaseRegistry {$/;"	c	namespace:Catch
TestRunInfo	vendor/spdlog/tests/catch.hpp	/^        TestRunInfo( std::string const& _name ) : name( _name ) {}$/;"	f	struct:Catch::TestRunInfo
TestRunInfo	vendor/spdlog/tests/catch.hpp	/^    struct TestRunInfo {$/;"	s	namespace:Catch
TestRunNode	vendor/spdlog/tests/catch.hpp	/^        typedef Node<TestRunStats, TestGroupNode> TestRunNode;$/;"	t	struct:Catch::CumulativeReporterBase	typeref:typename:Node<TestRunStats,TestGroupNode>
TestRunStats	vendor/spdlog/tests/catch.hpp	/^        TestRunStats(   TestRunInfo const& _runInfo,$/;"	f	struct:Catch::TestRunStats
TestRunStats	vendor/spdlog/tests/catch.hpp	/^        TestRunStats( TestRunStats const& _other )$/;"	f	struct:Catch::TestRunStats
TestRunStats	vendor/spdlog/tests/catch.hpp	/^    struct TestRunStats {$/;"	s	namespace:Catch
TestSpec	vendor/spdlog/tests/catch.hpp	/^    class TestSpec {$/;"	c	namespace:Catch
TestSpecParser	vendor/spdlog/tests/catch.hpp	/^        TestSpecParser( ITagAliasRegistry const& tagAliases ) : m_tagAliases( &tagAliases ) {}$/;"	f	class:Catch::TestSpecParser
TestSpecParser	vendor/spdlog/tests/catch.hpp	/^    class TestSpecParser {$/;"	c	namespace:Catch
Testing	dependencies/include/v8-testing.h	/^class V8_EXPORT Testing {$/;"	c	namespace:v8
Text	dependencies/include/SFML/Graphics/Text.hpp	/^class SFML_GRAPHICS_API Text : public Drawable, public Transformable$/;"	c	namespace:sf
Text	dependencies/include/SFML/Window/Cursor.hpp	/^        Text,                   \/\/\/< I-beam, cursor when hovering over a field allowing text /;"	e	enum:sf::Cursor::Type
Text	vendor/spdlog/tests/catch.hpp	/^        Text( std::string const& _str, TextAttributes const& _attr = TextAttributes() )$/;"	f	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
Text	vendor/spdlog/tests/catch.hpp	/^        Text( std::string const& _str, TextAttributes const& _attr = TextAttributes() )$/;"	f	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
Text	vendor/spdlog/tests/catch.hpp	/^    class Text {$/;"	c	namespace:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc
Text	vendor/spdlog/tests/catch.hpp	/^    class Text {$/;"	c	namespace:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc
TextAttributes	vendor/spdlog/tests/catch.hpp	/^        TextAttributes()$/;"	f	struct:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes
TextAttributes	vendor/spdlog/tests/catch.hpp	/^        TextAttributes()$/;"	f	struct:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes
TextAttributes	vendor/spdlog/tests/catch.hpp	/^    struct TextAttributes {$/;"	s	namespace:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc
TextAttributes	vendor/spdlog/tests/catch.hpp	/^    struct TextAttributes {$/;"	s	namespace:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc
TextEntered	dependencies/include/SFML/Window/Event.hpp	/^        TextEntered,            \/\/\/< A character was entered (data in event.text)$/;"	e	enum:sf::Event::EventType
TextEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct TextEvent$/;"	s	class:sf::Event
Texture	dependencies/include/SFML/Graphics/Texture.hpp	/^class SFML_GRAPHICS_API Texture : GlResource$/;"	c	namespace:sf
TextureTable	dependencies/include/SFML/Graphics/Shader.hpp	/^    typedef std::map<int, const Texture*> TextureTable;$/;"	t	class:sf::Shader	typeref:typename:std::map<int,const Texture * >
The V8 inspector	dependencies/include/APIDesign.md	/^# The V8 inspector$/;"	c
The V8 public C++ API	dependencies/include/APIDesign.md	/^# The V8 public C++ API$/;"	c
Thread	dependencies/include/SFML/System/Thread.hpp	/^class SFML_SYSTEM_API Thread : NonCopyable$/;"	c	namespace:sf
Thread	dependencies/include/SFML/System/Thread.inl	/^Thread::Thread(F function, A argument) :$/;"	f	class:Thread
Thread	dependencies/include/SFML/System/Thread.inl	/^Thread::Thread(F functor) :$/;"	f	class:Thread
Thread	dependencies/include/SFML/System/Thread.inl	/^Thread::Thread(void(C::*function)(), C* object) :$/;"	f	class:Thread
ThreadFunc	dependencies/include/SFML/System/Thread.inl	/^struct ThreadFunc$/;"	s	namespace:priv	file:
ThreadFunctor	dependencies/include/SFML/System/Thread.inl	/^    ThreadFunctor(T functor) : m_functor(functor) {}$/;"	f	struct:priv::ThreadFunctor	file:
ThreadFunctor	dependencies/include/SFML/System/Thread.inl	/^struct ThreadFunctor : ThreadFunc$/;"	s	namespace:priv	file:
ThreadFunctorWithArg	dependencies/include/SFML/System/Thread.inl	/^    ThreadFunctorWithArg(F function, A arg) : m_function(function), m_arg(arg) {}$/;"	f	struct:priv::ThreadFunctorWithArg	file:
ThreadFunctorWithArg	dependencies/include/SFML/System/Thread.inl	/^struct ThreadFunctorWithArg : ThreadFunc$/;"	s	namespace:priv	file:
ThreadLocal	dependencies/include/SFML/System/ThreadLocal.hpp	/^class SFML_SYSTEM_API ThreadLocal : NonCopyable$/;"	c	namespace:sf
ThreadLocalPtr	dependencies/include/SFML/System/ThreadLocalPtr.hpp	/^class ThreadLocalPtr : private ThreadLocal$/;"	c	namespace:sf
ThreadLocalPtr	dependencies/include/SFML/System/ThreadLocalPtr.inl	/^ThreadLocalPtr<T>::ThreadLocalPtr(T* value) :$/;"	f	class:sf::ThreadLocalPtr
ThreadMemberFunc	dependencies/include/SFML/System/Thread.inl	/^    ThreadMemberFunc(void(C::*function)(), C* object) : m_function(function), m_object(object) {/;"	f	struct:priv::ThreadMemberFunc	file:
ThreadMemberFunc	dependencies/include/SFML/System/Thread.inl	/^struct ThreadMemberFunc : ThreadFunc$/;"	s	namespace:priv	file:
ThrewException	vendor/spdlog/tests/catch.hpp	/^        ThrewException = Exception | 1,$/;"	e	enum:Catch::ResultWas::OfType
Throws	vendor/spdlog/tests/catch.hpp	/^            Throws = 1 << 4$/;"	e	enum:Catch::TestCaseInfo::SpecialProperties
TickSample	dependencies/include/v8-profiler.h	/^  TickSample()$/;"	f	struct:v8::TickSample
TickSample	dependencies/include/v8-profiler.h	/^struct TickSample {$/;"	s	namespace:v8
Tilde	dependencies/include/SFML/Window/Keyboard.hpp	/^        Tilde,        \/\/\/< The ~ key$/;"	e	enum:sf::Keyboard::Key
Time	dependencies/include/SFML/System/Time.hpp	/^class SFML_SYSTEM_API Time$/;"	c	namespace:sf
TimeSpan	dependencies/include/SFML/Audio/Music.hpp	/^    typedef Span<Time> TimeSpan;$/;"	t	class:sf::Music	typeref:typename:Span<Time>
Timer	vendor/spdlog/tests/catch.hpp	/^        Timer() : m_ticks( 0 ) {}$/;"	f	class:Catch::Timer
Timer	vendor/spdlog/tests/catch.hpp	/^    class Timer {$/;"	c	namespace:Catch
TimerCallback	dependencies/include/v8-inspector.h	/^  typedef void (*TimerCallback)(void*);$/;"	t	class:v8_inspector::V8InspectorClient	typeref:typename:void (*)(void *)
Titlebar	dependencies/include/SFML/Window/WindowStyle.hpp	/^        Titlebar   = 1 << 0, \/\/\/< Title bar + fixed border$/;"	e	enum:sf::Style::__anonc2dbfd350103
ToLocal	dependencies/include/v8.h	/^  V8_WARN_UNUSED_RESULT V8_INLINE bool ToLocal(Local<S>* out) const {$/;"	f	class:v8::MaybeLocal	typeref:typename:V8_WARN_UNUSED_RESULT V8_INLINE bool
Token	vendor/spdlog/tests/catch.hpp	/^            Token( Type _type, std::string const& _data ) : type( _type ), data( _data ) {}$/;"	f	struct:Clara::Parser::Token
Token	vendor/spdlog/tests/catch.hpp	/^        struct Token {$/;"	s	struct:Clara::Parser
Totals	vendor/spdlog/tests/catch.hpp	/^    struct Totals {$/;"	s	namespace:Catch
Touch	dependencies/include/SFML/Window/Touch.hpp	/^class SFML_WINDOW_API Touch$/;"	c	namespace:sf
TouchBegan	dependencies/include/SFML/Window/Event.hpp	/^        TouchBegan,             \/\/\/< A touch event began (data in event.touch)$/;"	e	enum:sf::Event::EventType
TouchEnded	dependencies/include/SFML/Window/Event.hpp	/^        TouchEnded,             \/\/\/< A touch event ended (data in event.touch)$/;"	e	enum:sf::Event::EventType
TouchEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct TouchEvent$/;"	s	class:sf::Event
TouchMoved	dependencies/include/SFML/Window/Event.hpp	/^        TouchMoved,             \/\/\/< A touch moved (data in event.touch)$/;"	e	enum:sf::Event::EventType
TraceBuffer	dependencies/include/libplatform/v8-tracing.h	/^class V8_PLATFORM_EXPORT TraceBuffer {$/;"	c	namespace:v8::platform::tracing
TraceBufferChunk	dependencies/include/libplatform/v8-tracing.h	/^class V8_PLATFORM_EXPORT TraceBufferChunk {$/;"	c	namespace:v8::platform::tracing
TraceConfig	dependencies/include/libplatform/v8-tracing.h	/^  TraceConfig() : enable_systrace_(false), enable_argument_filter_(false) {}$/;"	f	class:v8::platform::tracing::TraceConfig
TraceConfig	dependencies/include/libplatform/v8-tracing.h	/^class V8_PLATFORM_EXPORT TraceConfig {$/;"	c	namespace:v8::platform::tracing
TraceObject	dependencies/include/libplatform/v8-tracing.h	/^class V8_PLATFORM_EXPORT TraceObject {$/;"	c	namespace:v8::platform::tracing
TraceRecordMode	dependencies/include/libplatform/v8-tracing.h	/^enum TraceRecordMode {$/;"	g	namespace:v8::platform::tracing
TraceStateObserver	dependencies/include/v8-platform.h	/^  class TraceStateObserver {$/;"	c	class:v8::TracingController
TraceWriter	dependencies/include/libplatform/v8-tracing.h	/^class V8_PLATFORM_EXPORT TraceWriter {$/;"	c	namespace:v8::platform::tracing
TracingController	dependencies/include/libplatform/v8-tracing.h	/^class V8_PLATFORM_EXPORT TracingController$/;"	c	namespace:v8::platform::tracing
TracingController	dependencies/include/v8-platform.h	/^class TracingController {$/;"	c	namespace:v8
TrackedSection	vendor/spdlog/tests/catch.hpp	/^        TrackedSection( std::string const& name, TrackedSection* parent )$/;"	f	class:Catch::SectionTracking::TrackedSection
TrackedSection	vendor/spdlog/tests/catch.hpp	/^    class TrackedSection {$/;"	c	namespace:Catch::SectionTracking
TrackedSections	vendor/spdlog/tests/catch.hpp	/^        typedef std::map<std::string, TrackedSection> TrackedSections;$/;"	t	class:Catch::SectionTracking::TrackedSection	typeref:typename:std::map<std::string,TrackedSection>
TransferAborted	dependencies/include/SFML/Network/Ftp.hpp	/^            TransferAborted           = 426, \/\/\/< Connection closed, transfer aborted$/;"	e	enum:sf::Ftp::Response::Status
TransferMode	dependencies/include/SFML/Network/Ftp.hpp	/^    enum TransferMode$/;"	g	class:sf::Ftp
TransferrableModule	dependencies/include/v8.h	/^    TransferrableModule(OwnedBuffer serialized, OwnedBuffer bytes)$/;"	f	class:v8::WasmModuleObject::TransferrableModule
TransferrableModule	dependencies/include/v8.h	/^    explicit TransferrableModule(SharedModule shared_module)$/;"	f	class:v8::WasmModuleObject::TransferrableModule
TransferrableModule	dependencies/include/v8.h	/^  class TransferrableModule final {$/;"	c	class:v8::WasmModuleObject
Transform	dependencies/include/SFML/Graphics/Transform.hpp	/^class SFML_GRAPHICS_API Transform$/;"	c	namespace:sf
Transformable	dependencies/include/SFML/Graphics/Transformable.hpp	/^class SFML_GRAPHICS_API Transformable$/;"	c	namespace:sf
TransientContextLock	dependencies/include/SFML/Window/GlResource.hpp	/^    class SFML_WINDOW_API TransientContextLock : NonCopyable$/;"	c	class:sf::GlResource
Transparent	dependencies/include/SFML/Graphics/Color.hpp	/^    static const Color Transparent; \/\/\/< Transparent (black) predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
TriangleFan	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^    TriangleFan,   \/\/\/< List of connected triangles, a point uses the common center and the p/;"	e	enum:sf::PrimitiveType
TriangleStrip	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^    TriangleStrip, \/\/\/< List of connected triangles, a point uses the two previous points to /;"	e	enum:sf::PrimitiveType
Triangles	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^    Triangles,     \/\/\/< List of individual triangles$/;"	e	enum:sf::PrimitiveType
TrianglesFan	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^    TrianglesFan   = TriangleFan    \/\/\/< \\deprecated Use TriangleFan instead$/;"	e	enum:sf::PrimitiveType
TrianglesStrip	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^    TrianglesStrip = TriangleStrip, \/\/\/< \\deprecated Use TriangleStrip instead$/;"	e	enum:sf::PrimitiveType
TrueIfSizeable	vendor/spdlog/tests/catch.hpp	/^        template<int N> struct TrueIfSizeable : TrueType {};$/;"	s	class:Catch::Detail::IsStreamInsertableHelper
TrueType	vendor/spdlog/tests/catch.hpp	/^    struct TrueType {$/;"	s	namespace:Catch
TupleDetail	vendor/spdlog/tests/catch.hpp	/^namespace TupleDetail {$/;"	n	namespace:Catch
Type	dependencies/include/SFML/Graphics/Shader.hpp	/^    enum Type$/;"	g	class:sf::Shader
Type	dependencies/include/SFML/Network/Socket.hpp	/^    enum Type$/;"	g	class:sf::Socket
Type	dependencies/include/SFML/Window/Cursor.hpp	/^    enum Type$/;"	g	class:sf::Cursor
Type	dependencies/include/SFML/Window/Sensor.hpp	/^    enum Type$/;"	g	class:sf::Sensor
Type	dependencies/include/v8-profiler.h	/^  enum Type {$/;"	g	class:v8::HeapGraphEdge
Type	dependencies/include/v8-profiler.h	/^  enum Type {$/;"	g	class:v8::HeapGraphNode
Type	dependencies/include/v8-util.h	/^    typedef T Type;$/;"	t	struct:v8::DefaultGlobalMapTraits::RemovePointer	typeref:typename:T
Type	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  typedef locale_t Type;$/;"	t	class:Locale	typeref:typename:locale_t
Type	vendor/spdlog/tests/catch.hpp	/^            enum Type { Positional, ShortOpt, LongOpt };$/;"	g	struct:Clara::Parser::Token
TypedArray	dependencies/include/v8.h	/^class V8_EXPORT TypedArray : public ArrayBufferView {$/;"	c	namespace:v8
U	dependencies/include/SFML/Window/Joystick.hpp	/^        U,    \/\/\/< The U axis$/;"	e	enum:sf::Joystick::Axis
U	dependencies/include/SFML/Window/Keyboard.hpp	/^        U,            \/\/\/< The U key$/;"	e	enum:sf::Keyboard::Key
UNIX	build/default/CMakeFiles/3.13.1/CMakeCCompiler.cmake	/^  set(UNIX 1)$/;"	v
UNIX	build/default/CMakeFiles/3.13.1/CMakeCXXCompiler.cmake	/^  set(UNIX 1)$/;"	v
UNKNOWN_ENCODING	dependencies/include/v8.h	/^    UNKNOWN_ENCODING = 0x1,$/;"	e	enum:v8::String::Encoding
UTF8	dependencies/include/v8.h	/^    enum Encoding { ONE_BYTE, TWO_BYTE, UTF8 };$/;"	e	enum:v8::ScriptCompiler::StreamedSource::Encoding
Udp	dependencies/include/SFML/Network/Socket.hpp	/^        Udp  \/\/\/< UDP protocol$/;"	e	enum:sf::Socket::Type
UdpSocket	dependencies/include/SFML/Network/UdpSocket.hpp	/^class SFML_NETWORK_API UdpSocket : public Socket$/;"	c	namespace:sf
Uint16	dependencies/include/SFML/Config.hpp	/^    typedef unsigned short Uint16;$/;"	t	namespace:sf	typeref:typename:unsigned short
Uint16Array	dependencies/include/v8.h	/^class V8_EXPORT Uint16Array : public TypedArray {$/;"	c	namespace:v8
Uint32	dependencies/include/SFML/Config.hpp	/^    typedef unsigned int Uint32;$/;"	t	namespace:sf	typeref:typename:unsigned int
Uint32	dependencies/include/v8.h	/^class V8_EXPORT Uint32 : public Integer {$/;"	c	namespace:v8
Uint32Array	dependencies/include/v8.h	/^class V8_EXPORT Uint32Array : public TypedArray {$/;"	c	namespace:v8
Uint64	dependencies/include/SFML/Config.hpp	/^        typedef unsigned __int64 Uint64;$/;"	t	namespace:sf	typeref:typename:unsigned __int64
Uint64	dependencies/include/SFML/Config.hpp	/^        typedef unsigned long long Uint64;$/;"	t	namespace:sf	typeref:typename:unsigned long long
Uint8	dependencies/include/SFML/Config.hpp	/^    typedef unsigned char Uint8;$/;"	t	namespace:sf	typeref:typename:unsigned char
Uint8Array	dependencies/include/v8.h	/^class V8_EXPORT Uint8Array : public TypedArray {$/;"	c	namespace:v8
Uint8ClampedArray	dependencies/include/v8.h	/^class V8_EXPORT Uint8ClampedArray : public TypedArray {$/;"	c	namespace:v8
Unauthorized	dependencies/include/SFML/Network/Http.hpp	/^            Unauthorized        = 401, \/\/\/< The requested page needs an authentication to be /;"	e	enum:sf::Http::Response::Status
UnboundModuleScript	dependencies/include/v8.h	/^class V8_EXPORT UnboundModuleScript {$/;"	c	namespace:v8
UnboundScript	dependencies/include/v8.h	/^class V8_EXPORT UnboundScript {$/;"	c	namespace:v8
Uncompilable	dependencies/include/v8.h	/^  template<class O> V8_INLINE static void Uncompilable() {$/;"	f	class:v8::NonCopyablePersistentTraits	typeref:typename:V8_INLINE void
Underlined	dependencies/include/SFML/Graphics/Text.hpp	/^        Underlined    = 1 << 2, \/\/\/< Underlined characters$/;"	e	enum:sf::Text::Style
UnfinishedSections	vendor/spdlog/tests/catch.hpp	/^            UnfinishedSections( SectionInfo const& _info, Counts const& _prevAssertions, double /;"	f	struct:Catch::RunContext::UnfinishedSections
UnfinishedSections	vendor/spdlog/tests/catch.hpp	/^        struct UnfinishedSections {$/;"	s	class:Catch::RunContext
UniformTable	dependencies/include/SFML/Graphics/Shader.hpp	/^    typedef std::map<std::string, int> UniformTable;$/;"	t	class:sf::Shader	typeref:typename:std::map<std::string,int>
UniquePersistent	dependencies/include/v8.h	/^using UniquePersistent = Global<T>;$/;"	t	namespace:v8	typeref:typename:Global<T>
Unknown	dependencies/include/SFML/Window/Keyboard.hpp	/^        Unknown = -1, \/\/\/< Unhandled key$/;"	e	enum:sf::Keyboard::Key
Unknown	vendor/spdlog/tests/catch.hpp	/^        Unknown = -1,$/;"	e	enum:Catch::ResultWas::OfType
Unlock	dependencies/include/v8.h	/^    virtual void Unlock() const {}$/;"	f	class:v8::String::ExternalStringResourceBase	typeref:typename:void
UnpositionalTag	vendor/spdlog/tests/catch.hpp	/^    struct UnpositionalTag {};$/;"	s	namespace:Clara
Unsigned	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^        typedef typename make_unsigned_or_bool<TargetType>::type Unsigned;$/;"	t	function:internal::arg_converter::operator ()	typeref:typename:make_unsigned_or_bool<TargetType>::type
UnsignedStreamSize	vendor/spdlog/include/spdlog/fmt/bundled/ostream.h	/^  typedef std::make_unsigned<std::streamsize>::type UnsignedStreamSize;$/;"	t	function:internal::write	typeref:typename:std::make_unsigned<std::streamsize>::type
UnsignedType	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^    typedef typename internal::int_traits<T>::main_type UnsignedType;$/;"	t	function:internal::printf_width_handler::operator ()	typeref:typename:internal::int_traits<T>::main_type
UnwindState	dependencies/include/v8.h	/^struct UnwindState {$/;"	s	namespace:v8
Up	dependencies/include/SFML/Window/Keyboard.hpp	/^        Up,           \/\/\/< Up arrow$/;"	e	enum:sf::Keyboard::Key
UpdateNodeFlag	dependencies/include/v8-internal.h	/^  V8_INLINE static void UpdateNodeFlag(internal::Address* obj, bool value,$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE void
UpdateNodeState	dependencies/include/v8-internal.h	/^  V8_INLINE static void UpdateNodeState(internal::Address* obj, uint8_t value) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE void
UpdateTraceEventDuration	dependencies/include/v8-platform.h	/^  virtual void UpdateTraceEventDuration(const uint8_t* category_enabled_flag,$/;"	f	class:v8::TracingController	typeref:typename:void
Usage	dependencies/include/SFML/Graphics/VertexBuffer.hpp	/^    enum Usage$/;"	g	class:sf::VertexBuffer
Usage samples	vendor/spdlog/README.md	/^## Usage samples$/;"	s
User defined types	vendor/spdlog/README.md	/^#### User defined types$/;"	t
UserAcceleration	dependencies/include/SFML/Window/Sensor.hpp	/^        UserAcceleration, \/\/\/< Measures the direction and intensity of device acceleration, i/;"	e	enum:sf::Sensor::Type
Utf	dependencies/include/SFML/System/Utf.hpp	/^class Utf<16>$/;"	c	namespace:sf
Utf	dependencies/include/SFML/System/Utf.hpp	/^class Utf<32>$/;"	c	namespace:sf
Utf	dependencies/include/SFML/System/Utf.hpp	/^class Utf<8>$/;"	c	namespace:sf
Utf16	dependencies/include/SFML/System/Utf.hpp	/^typedef Utf<16> Utf16;$/;"	t	namespace:sf	typeref:typename:Utf<16>
Utf32	dependencies/include/SFML/System/Utf.hpp	/^typedef Utf<32> Utf32;$/;"	t	namespace:sf	typeref:typename:Utf<32>
Utf8	dependencies/include/SFML/System/Utf.hpp	/^typedef Utf<8>  Utf8;$/;"	t	namespace:sf	typeref:typename:Utf<8>
Utf8Value	dependencies/include/v8.h	/^  class V8_EXPORT Utf8Value {$/;"	c	class:v8::String
V	dependencies/include/SFML/Window/Joystick.hpp	/^        V,    \/\/\/< The V axis$/;"	e	enum:sf::Joystick::Axis
V	dependencies/include/SFML/Window/Keyboard.hpp	/^        V,            \/\/\/< The V key$/;"	e	enum:sf::Keyboard::Key
V	dependencies/include/v8-profiler.h	/^#define V(/;"	d
V8CONFIG_H_	dependencies/include/v8config.h	/^#define V8CONFIG_H_$/;"	d
V8ContextInfo	dependencies/include/v8-inspector.h	/^  V8ContextInfo(v8::Local<v8::Context> context, int contextGroupId,$/;"	f	class:v8_inspector::V8ContextInfo
V8ContextInfo	dependencies/include/v8-inspector.h	/^class V8_EXPORT V8ContextInfo {$/;"	c	namespace:v8_inspector
V8Inspector	dependencies/include/v8-inspector.h	/^class V8_EXPORT V8Inspector {$/;"	c	namespace:v8_inspector
V8InspectorClient	dependencies/include/v8-inspector.h	/^class V8_EXPORT V8InspectorClient {$/;"	c	namespace:v8_inspector
V8InspectorSession	dependencies/include/v8-inspector.h	/^class V8_EXPORT V8InspectorSession {$/;"	c	namespace:v8_inspector
V8StackTrace	dependencies/include/v8-inspector.h	/^class V8_EXPORT V8StackTrace {$/;"	c	namespace:v8_inspector
V8StackTraceId	dependencies/include/v8-inspector.h	/^struct V8_EXPORT V8StackTraceId {$/;"	s	namespace:v8_inspector
V8_ARRAY_BUFFER_INTERNAL_FIELD_COUNT	dependencies/include/v8.h	/^#define V8_ARRAY_BUFFER_INTERNAL_FIELD_COUNT /;"	d
V8_ARRAY_BUFFER_VIEW_INTERNAL_FIELD_COUNT	dependencies/include/v8.h	/^#define V8_ARRAY_BUFFER_VIEW_INTERNAL_FIELD_COUNT /;"	d
V8_BUILD_NUMBER	dependencies/include/v8-version.h	/^#define V8_BUILD_NUMBER /;"	d
V8_CANDIDATE_STRING	dependencies/include/v8-version-string.h	/^#define V8_CANDIDATE_STRING /;"	d
V8_CAN_HAVE_DCHECK_IN_CONSTEXPR	dependencies/include/v8config.h	/^#  define V8_CAN_HAVE_DCHECK_IN_CONSTEXPR /;"	d
V8_CC_GNU	dependencies/include/v8config.h	/^# define V8_CC_GNU /;"	d
V8_CC_INTEL	dependencies/include/v8config.h	/^#  define V8_CC_INTEL /;"	d
V8_CC_MINGW	dependencies/include/v8config.h	/^# define V8_CC_MINGW /;"	d
V8_CC_MINGW32	dependencies/include/v8config.h	/^#  define V8_CC_MINGW32 /;"	d
V8_CC_MINGW64	dependencies/include/v8config.h	/^#  define V8_CC_MINGW64 /;"	d
V8_CC_MSVC	dependencies/include/v8config.h	/^# define V8_CC_MSVC /;"	d
V8_DECL_INTRINSIC	dependencies/include/v8.h	/^#define V8_DECL_INTRINSIC(/;"	d
V8_DEPRECATED	dependencies/include/v8config.h	/^#define V8_DEPRECATED(/;"	d
V8_DEPRECATE_SOON	dependencies/include/libplatform/libplatform.h	/^V8_PLATFORM_EXPORT V8_DEPRECATE_SOON($/;"	v	namespace:v8::platform	typeref:typename:V8_PLATFORM_EXPORT
V8_DEPRECATE_SOON	dependencies/include/v8config.h	/^#define V8_DEPRECATE_SOON(/;"	d
V8_EMBEDDER_STRING	dependencies/include/v8-version-string.h	/^#define V8_EMBEDDER_STRING /;"	d
V8_EXPORT	dependencies/include/v8config.h	/^#  define V8_EXPORT /;"	d
V8_EXPORT	dependencies/include/v8config.h	/^#  define V8_EXPORT$/;"	d
V8_EXPORT	dependencies/include/v8config.h	/^# define V8_EXPORT /;"	d
V8_EXPORT	dependencies/include/v8config.h	/^# define V8_EXPORT$/;"	d
V8_GLIBC_PREREQ	dependencies/include/v8config.h	/^# define V8_GLIBC_PREREQ(/;"	d
V8_GNUC_PREREQ	dependencies/include/v8config.h	/^# define V8_GNUC_PREREQ(/;"	d
V8_HAS_ATTRIBUTE_ALWAYS_INLINE	dependencies/include/v8config.h	/^# define V8_HAS_ATTRIBUTE_ALWAYS_INLINE /;"	d
V8_HAS_ATTRIBUTE_DEPRECATED	dependencies/include/v8config.h	/^# define V8_HAS_ATTRIBUTE_DEPRECATED /;"	d
V8_HAS_ATTRIBUTE_DEPRECATED_MESSAGE	dependencies/include/v8config.h	/^# define V8_HAS_ATTRIBUTE_DEPRECATED_MESSAGE /;"	d
V8_HAS_ATTRIBUTE_NOINLINE	dependencies/include/v8config.h	/^# define V8_HAS_ATTRIBUTE_NOINLINE /;"	d
V8_HAS_ATTRIBUTE_UNUSED	dependencies/include/v8config.h	/^# define V8_HAS_ATTRIBUTE_UNUSED /;"	d
V8_HAS_ATTRIBUTE_VISIBILITY	dependencies/include/v8config.h	/^# define V8_HAS_ATTRIBUTE_VISIBILITY /;"	d
V8_HAS_ATTRIBUTE_WARN_UNUSED_RESULT	dependencies/include/v8config.h	/^# define V8_HAS_ATTRIBUTE_WARN_UNUSED_RESULT /;"	d
V8_HAS_BUILTIN_BSWAP16	dependencies/include/v8config.h	/^# define V8_HAS_BUILTIN_BSWAP16 /;"	d
V8_HAS_BUILTIN_BSWAP32	dependencies/include/v8config.h	/^# define V8_HAS_BUILTIN_BSWAP32 /;"	d
V8_HAS_BUILTIN_BSWAP64	dependencies/include/v8config.h	/^# define V8_HAS_BUILTIN_BSWAP64 /;"	d
V8_HAS_BUILTIN_CLZ	dependencies/include/v8config.h	/^# define V8_HAS_BUILTIN_CLZ /;"	d
V8_HAS_BUILTIN_CTZ	dependencies/include/v8config.h	/^# define V8_HAS_BUILTIN_CTZ /;"	d
V8_HAS_BUILTIN_EXPECT	dependencies/include/v8config.h	/^# define V8_HAS_BUILTIN_EXPECT /;"	d
V8_HAS_BUILTIN_FRAME_ADDRESS	dependencies/include/v8config.h	/^# define V8_HAS_BUILTIN_FRAME_ADDRESS /;"	d
V8_HAS_BUILTIN_POPCOUNT	dependencies/include/v8config.h	/^# define V8_HAS_BUILTIN_POPCOUNT /;"	d
V8_HAS_BUILTIN_SADD_OVERFLOW	dependencies/include/v8config.h	/^# define V8_HAS_BUILTIN_SADD_OVERFLOW /;"	d
V8_HAS_BUILTIN_SSUB_OVERFLOW	dependencies/include/v8config.h	/^# define V8_HAS_BUILTIN_SSUB_OVERFLOW /;"	d
V8_HAS_BUILTIN_UADD_OVERFLOW	dependencies/include/v8config.h	/^# define V8_HAS_BUILTIN_UADD_OVERFLOW /;"	d
V8_HAS_DECLSPEC_DEPRECATED	dependencies/include/v8config.h	/^# define V8_HAS_DECLSPEC_DEPRECATED /;"	d
V8_HAS_DECLSPEC_NOINLINE	dependencies/include/v8config.h	/^# define V8_HAS_DECLSPEC_NOINLINE /;"	d
V8_HAS_DECLSPEC_NORETURN	dependencies/include/v8config.h	/^# define V8_HAS_DECLSPEC_NORETURN /;"	d
V8_HAS_DECLSPEC_SELECTANY	dependencies/include/v8config.h	/^# define V8_HAS_DECLSPEC_SELECTANY /;"	d
V8_HAS___FORCEINLINE	dependencies/include/v8config.h	/^# define V8_HAS___FORCEINLINE /;"	d
V8_INCLUDE_VERSION_H_	dependencies/include/v8-version.h	/^#define V8_INCLUDE_VERSION_H_$/;"	d
V8_INLINE	dependencies/include/v8config.h	/^# define V8_INLINE /;"	d
V8_INTRINSICS_LIST	dependencies/include/v8.h	/^  V8_INTRINSICS_LIST(V8_DECL_INTRINSIC)$/;"	e	enum:v8::Intrinsic
V8_INTRINSICS_LIST	dependencies/include/v8.h	/^#define V8_INTRINSICS_LIST(/;"	d
V8_IS_CANDIDATE_VERSION	dependencies/include/v8-version.h	/^#define V8_IS_CANDIDATE_VERSION /;"	d
V8_LIBC_BIONIC	dependencies/include/v8config.h	/^# define V8_LIBC_BIONIC /;"	d
V8_LIBC_BSD	dependencies/include/v8config.h	/^# define V8_LIBC_BSD /;"	d
V8_LIBC_GLIBC	dependencies/include/v8config.h	/^# define V8_LIBC_GLIBC /;"	d
V8_LIBC_MSVCRT	dependencies/include/v8config.h	/^# define V8_LIBC_MSVCRT /;"	d
V8_LIBC_UCLIBC	dependencies/include/v8config.h	/^# define V8_LIBC_UCLIBC /;"	d
V8_LIBPLATFORM_LIBPLATFORM_EXPORT_H_	dependencies/include/libplatform/libplatform-export.h	/^#define V8_LIBPLATFORM_LIBPLATFORM_EXPORT_H_$/;"	d
V8_LIBPLATFORM_LIBPLATFORM_H_	dependencies/include/libplatform/libplatform.h	/^#define V8_LIBPLATFORM_LIBPLATFORM_H_$/;"	d
V8_LIBPLATFORM_V8_TRACING_H_	dependencies/include/libplatform/v8-tracing.h	/^#define V8_LIBPLATFORM_V8_TRACING_H_$/;"	d
V8_LIKELY	dependencies/include/v8config.h	/^# define V8_LIKELY(/;"	d
V8_MAJOR_VERSION	dependencies/include/v8-version.h	/^#define V8_MAJOR_VERSION /;"	d
V8_MINOR_VERSION	dependencies/include/v8-version.h	/^#define V8_MINOR_VERSION /;"	d
V8_NOINLINE	dependencies/include/v8config.h	/^# define V8_NOINLINE /;"	d
V8_OS_AIX	dependencies/include/v8config.h	/^#define V8_OS_AIX /;"	d
V8_OS_ANDROID	dependencies/include/v8config.h	/^# define V8_OS_ANDROID /;"	d
V8_OS_BSD	dependencies/include/v8config.h	/^# define V8_OS_BSD /;"	d
V8_OS_CYGWIN	dependencies/include/v8config.h	/^# define V8_OS_CYGWIN /;"	d
V8_OS_DRAGONFLYBSD	dependencies/include/v8config.h	/^# define V8_OS_DRAGONFLYBSD /;"	d
V8_OS_FREEBSD	dependencies/include/v8config.h	/^# define V8_OS_FREEBSD /;"	d
V8_OS_FUCHSIA	dependencies/include/v8config.h	/^# define V8_OS_FUCHSIA /;"	d
V8_OS_LINUX	dependencies/include/v8config.h	/^# define V8_OS_LINUX /;"	d
V8_OS_MACOSX	dependencies/include/v8config.h	/^# define V8_OS_MACOSX /;"	d
V8_OS_NETBSD	dependencies/include/v8config.h	/^# define V8_OS_NETBSD /;"	d
V8_OS_OPENBSD	dependencies/include/v8config.h	/^# define V8_OS_OPENBSD /;"	d
V8_OS_POSIX	dependencies/include/v8config.h	/^# define V8_OS_POSIX /;"	d
V8_OS_POSIX	dependencies/include/v8config.h	/^#define V8_OS_POSIX /;"	d
V8_OS_QNX	dependencies/include/v8config.h	/^# define V8_OS_QNX /;"	d
V8_OS_SOLARIS	dependencies/include/v8config.h	/^# define V8_OS_SOLARIS /;"	d
V8_OS_WIN	dependencies/include/v8config.h	/^# define V8_OS_WIN /;"	d
V8_PATCH_LEVEL	dependencies/include/v8-version.h	/^#define V8_PATCH_LEVEL /;"	d
V8_PLATFORM_EXPORT	dependencies/include/libplatform/libplatform-export.h	/^#define V8_PLATFORM_EXPORT /;"	d
V8_PLATFORM_EXPORT	dependencies/include/libplatform/libplatform-export.h	/^#define V8_PLATFORM_EXPORT$/;"	d
V8_PLATFORM_NON_EXPORTED_BASE	dependencies/include/libplatform/v8-tracing.h	/^#define V8_PLATFORM_NON_EXPORTED_BASE(/;"	d
V8_PROMISE_INTERNAL_FIELD_COUNT	dependencies/include/v8.h	/^#define V8_PROMISE_INTERNAL_FIELD_COUNT /;"	d
V8_S	dependencies/include/v8-version-string.h	/^#define V8_S(/;"	d
V8_SX	dependencies/include/v8-version-string.h	/^#define V8_SX(/;"	d
V8_UNLIKELY	dependencies/include/v8config.h	/^# define V8_UNLIKELY(/;"	d
V8_UTIL_H_	dependencies/include/v8-util.h	/^#define V8_UTIL_H_$/;"	d
V8_V8_INSPECTOR_H_	dependencies/include/v8-inspector.h	/^#define V8_V8_INSPECTOR_H_$/;"	d
V8_V8_INSPECTOR_PROTOCOL_H_	dependencies/include/v8-inspector-protocol.h	/^#define V8_V8_INSPECTOR_PROTOCOL_H_$/;"	d
V8_V8_PLATFORM_H_	dependencies/include/v8-platform.h	/^#define V8_V8_PLATFORM_H_$/;"	d
V8_V8_PROFILER_H_	dependencies/include/v8-profiler.h	/^#define V8_V8_PROFILER_H_$/;"	d
V8_V8_TEST_H_	dependencies/include/v8-testing.h	/^#define V8_V8_TEST_H_$/;"	d
V8_VERSION_STRING	dependencies/include/v8-version-string.h	/^#define V8_VERSION_STRING /;"	d
V8_VERSION_STRING_H_	dependencies/include/v8-version-string.h	/^#define V8_VERSION_STRING_H_$/;"	d
V8_WARN_UNUSED_RESULT	dependencies/include/v8config.h	/^#define V8_WARN_UNUSED_RESULT /;"	d
V8_WASM_TRAP_HANDLER_POSIX_H_	dependencies/include/v8-wasm-trap-handler-posix.h	/^#define V8_WASM_TRAP_HANDLER_POSIX_H_$/;"	d
V8_WASM_TRAP_HANDLER_WIN_H_	dependencies/include/v8-wasm-trap-handler-win.h	/^#define V8_WASM_TRAP_HANDLER_WIN_H_$/;"	d
Value	dependencies/include/v8-util.h	/^  static PersistentContainerValue Value(Iterator it) { return it->second; }$/;"	f	class:v8::StdMapTraits	typeref:typename:PersistentContainerValue
Value	dependencies/include/v8.h	/^  class V8_EXPORT Value {$/;"	c	class:v8::String
Value	dependencies/include/v8.h	/^class V8_EXPORT Value : public Data {$/;"	c	namespace:v8
ValueDeserializer	dependencies/include/v8.h	/^class V8_EXPORT ValueDeserializer {$/;"	c	namespace:v8
ValueSerializer	dependencies/include/v8.h	/^class V8_EXPORT ValueSerializer {$/;"	c	namespace:v8
ValuesGenerator	vendor/spdlog/tests/catch.hpp	/^    ValuesGenerator(){}$/;"	f	class:Catch::ValuesGenerator
ValuesGenerator	vendor/spdlog/tests/catch.hpp	/^class ValuesGenerator : public IGenerator<T> {$/;"	c	namespace:Catch
Vec2	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef Vector2<float> Vec2;$/;"	t	namespace:sf::Glsl	typeref:typename:Vector2<float>
Vec3	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef Vector3<float> Vec3;$/;"	t	namespace:sf::Glsl	typeref:typename:Vector3<float>
Vec4	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef implementation-defined Vec4;$/;"	t	namespace:sf::Glsl	typeref:typename:implementation-defined
Vec4	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef priv::Vector4<float> Vec4;$/;"	t	namespace:sf::Glsl	typeref:typename:priv::Vector4<float>
Vector2	dependencies/include/SFML/System/Vector2.hpp	/^class Vector2$/;"	c	namespace:sf
Vector2	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T>::Vector2() :$/;"	f	class:Vector2
Vector2	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T>::Vector2(T X, T Y) :$/;"	f	class:Vector2
Vector2	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T>::Vector2(const Vector2<U>& vector) :$/;"	f	class:Vector2
Vector2f	dependencies/include/SFML/System/Vector2.hpp	/^typedef Vector2<float>        Vector2f;$/;"	t	namespace:sf	typeref:typename:Vector2<float>
Vector2i	dependencies/include/SFML/System/Vector2.hpp	/^typedef Vector2<int>          Vector2i;$/;"	t	namespace:sf	typeref:typename:Vector2<int>
Vector2u	dependencies/include/SFML/System/Vector2.hpp	/^typedef Vector2<unsigned int> Vector2u;$/;"	t	namespace:sf	typeref:typename:Vector2<unsigned int>
Vector3	dependencies/include/SFML/System/Vector3.hpp	/^class Vector3$/;"	c	namespace:sf
Vector3	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T>::Vector3() :$/;"	f	class:Vector3
Vector3	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T>::Vector3(T X, T Y, T Z) :$/;"	f	class:Vector3
Vector3	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T>::Vector3(const Vector3<U>& vector) :$/;"	f	class:Vector3
Vector3f	dependencies/include/SFML/System/Vector3.hpp	/^typedef Vector3<float> Vector3f;$/;"	t	namespace:sf	typeref:typename:Vector3<float>
Vector3i	dependencies/include/SFML/System/Vector3.hpp	/^typedef Vector3<int>   Vector3i;$/;"	t	namespace:sf	typeref:typename:Vector3<int>
Vector4	dependencies/include/SFML/Graphics/Glsl.inl	/^    Vector4() :$/;"	f	struct:Vector4	file:
Vector4	dependencies/include/SFML/Graphics/Glsl.inl	/^    Vector4(T X, T Y, T Z, T W) :$/;"	f	struct:Vector4	file:
Vector4	dependencies/include/SFML/Graphics/Glsl.inl	/^    Vector4(const Color& color)$/;"	f	struct:Vector4	file:
Vector4	dependencies/include/SFML/Graphics/Glsl.inl	/^    explicit Vector4(const Vector4<U>& other) :$/;"	f	struct:Vector4	file:
Vector4	dependencies/include/SFML/Graphics/Glsl.inl	/^struct Vector4$/;"	s	file:
Verbosity	vendor/spdlog/tests/catch.hpp	/^    struct Verbosity { enum Level {$/;"	s	namespace:Catch
Version	vendor/spdlog/tests/catch.hpp	/^        Version(    unsigned int _majorVersion,$/;"	f	struct:Catch::Version
Version	vendor/spdlog/tests/catch.hpp	/^    struct Version {$/;"	s	namespace:Catch
VersionNotSupported	dependencies/include/SFML/Network/Http.hpp	/^            VersionNotSupported = 505, \/\/\/< The server doesn't support the requested HTTP ver/;"	e	enum:sf::Http::Response::Status
Vertex	dependencies/include/SFML/Graphics/Shader.hpp	/^        Vertex,   \/\/\/< %Vertex shader$/;"	e	enum:sf::Shader::Type
Vertex	dependencies/include/SFML/Graphics/Vertex.hpp	/^class SFML_GRAPHICS_API Vertex$/;"	c	namespace:sf
VertexArray	dependencies/include/SFML/Graphics/VertexArray.hpp	/^class SFML_GRAPHICS_API VertexArray : public Drawable$/;"	c	namespace:sf
VertexBuffer	dependencies/include/SFML/Graphics/VertexBuffer.hpp	/^class SFML_GRAPHICS_API VertexBuffer : public Drawable, private GlResource$/;"	c	namespace:sf
VertexCacheSize	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^        enum {VertexCacheSize = 4};$/;"	e	enum:sf::RenderTarget::StatesCache::__anon47acc7ac0103
VerticalWheel	dependencies/include/SFML/Window/Mouse.hpp	/^        VerticalWheel,  \/\/\/< The vertical mouse wheel$/;"	e	enum:sf::Mouse::Wheel
VideoMode	dependencies/include/SFML/Window/VideoMode.hpp	/^class SFML_WINDOW_API VideoMode$/;"	c	namespace:sf
View	dependencies/include/SFML/Graphics/View.hpp	/^class SFML_GRAPHICS_API View$/;"	c	namespace:sf
W	dependencies/include/SFML/Window/Keyboard.hpp	/^        W,            \/\/\/< The W key$/;"	e	enum:sf::Keyboard::Key
WARN	vendor/spdlog/tests/catch.hpp	/^#define WARN(/;"	d
WHEN	vendor/spdlog/tests/catch.hpp	/^#define WHEN(/;"	d
WHITE	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    const WORD WHITE = FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE;$/;"	m	class:spdlog::sinks::wincolor_sink	typeref:typename:const WORD
WIN32_LEAN_AND_MEAN	vendor/spdlog/include/spdlog/details/console_globals.h	/^#define WIN32_LEAN_AND_MEAN$/;"	d
WIN32_LEAN_AND_MEAN	vendor/spdlog/include/spdlog/details/os.h	/^#define WIN32_LEAN_AND_MEAN$/;"	d
WIN32_LEAN_AND_MEAN	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^#  define WIN32_LEAN_AND_MEAN$/;"	d
WRESET_COLOR	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^template <typename T> const wchar_t basic_data<T>::WRESET_COLOR[] = L"\\x1b[0m";$/;"	m	class:internal::basic_data<T>	typeref:typename:const wchar_t[]
WRESET_COLOR	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  static const wchar_t WRESET_COLOR[];$/;"	m	struct:internal::basic_data	typeref:typename:const wchar_t[]
WRONLY	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^    WRONLY = FMT_POSIX(O_WRONLY), \/\/ Open for writing only.$/;"	e	enum:file::__anon08854cb10103
Wait	dependencies/include/SFML/Window/Cursor.hpp	/^        Wait,                   \/\/\/< Busy cursor$/;"	e	enum:sf::Cursor::Type
WarnAbout	vendor/spdlog/tests/catch.hpp	/^    struct WarnAbout { enum What {$/;"	s	namespace:Catch
Warning	vendor/spdlog/tests/catch.hpp	/^            Warning = Yellow,$/;"	e	enum:Catch::Colour::Code
Warning	vendor/spdlog/tests/catch.hpp	/^        Warning = 2,$/;"	e	enum:Catch::ResultWas::OfType
WasmModuleObject	dependencies/include/v8.h	/^class V8_EXPORT WasmModuleObject : public Object {$/;"	c	namespace:v8
WasmModuleObjectBuilderStreaming	dependencies/include/v8.h	/^class V8_EXPORT WasmModuleObjectBuilderStreaming final {$/;"	c	namespace:v8
WasmStreaming	dependencies/include/v8.h	/^class V8_EXPORT WasmStreaming final {$/;"	c	namespace:v8
WeakCallback	dependencies/include/v8-util.h	/^  static void WeakCallback($/;"	f	class:v8::PersistentValueMap	typeref:typename:void
WeakCallbackDataType	dependencies/include/v8-util.h	/^  typedef void WeakCallbackDataType;$/;"	t	class:v8::DefaultGlobalMapTraits	typeref:typename:void
WeakCallbackDataType	dependencies/include/v8-util.h	/^  typedef void WeakCallbackDataType;$/;"	t	class:v8::DefaultPersistentValueMapTraits	typeref:typename:void
WeakCallbackInfo	dependencies/include/v8.h	/^  WeakCallbackInfo(Isolate* isolate, T* parameter,$/;"	f	class:v8::WeakCallbackInfo
WeakCallbackInfo	dependencies/include/v8.h	/^class WeakCallbackInfo {$/;"	c	namespace:v8
WeakCallbackParameter	dependencies/include/v8-util.h	/^  static WeakCallbackDataType* WeakCallbackParameter($/;"	f	class:v8::DefaultPersistentValueMapTraits	typeref:typename:WeakCallbackDataType *
WeakCallbackParameter	dependencies/include/v8-util.h	/^  static WeakCallbackDataType* WeakCallbackParameter(MapType* map, const K& key,$/;"	f	class:v8::DefaultGlobalMapTraits	typeref:typename:WeakCallbackDataType *
WeakCallbackType	dependencies/include/v8.h	/^enum class WeakCallbackType { kParameter, kInternalFields, kFinalizer };$/;"	g	namespace:v8
What	vendor/spdlog/tests/catch.hpp	/^    struct WarnAbout { enum What {$/;"	g	struct:Catch::WarnAbout
Wheel	dependencies/include/SFML/Window/Mouse.hpp	/^    enum Wheel$/;"	g	class:sf::Mouse
White	dependencies/include/SFML/Graphics/Color.hpp	/^    static const Color White;       \/\/\/< White predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
White	vendor/spdlog/tests/catch.hpp	/^            White,$/;"	e	enum:Catch::Colour::Code
WildcardAtBothEnds	vendor/spdlog/tests/catch.hpp	/^                WildcardAtBothEnds = WildcardAtStart | WildcardAtEnd$/;"	e	enum:Catch::TestSpec::NamePattern::WildcardPosition
WildcardAtEnd	vendor/spdlog/tests/catch.hpp	/^                WildcardAtEnd = 2,$/;"	e	enum:Catch::TestSpec::NamePattern::WildcardPosition
WildcardAtStart	vendor/spdlog/tests/catch.hpp	/^                WildcardAtStart = 1,$/;"	e	enum:Catch::TestSpec::NamePattern::WildcardPosition
WildcardPosition	vendor/spdlog/tests/catch.hpp	/^            enum WildcardPosition {$/;"	g	class:Catch::TestSpec::NamePattern
Win32ColourImpl	vendor/spdlog/tests/catch.hpp	/^        Win32ColourImpl() : stdoutHandle( GetStdHandle(STD_OUTPUT_HANDLE) )$/;"	f	class:Catch::__anon368216750910::Win32ColourImpl
Win32ColourImpl	vendor/spdlog/tests/catch.hpp	/^    class Win32ColourImpl : public IColourImpl {$/;"	c	namespace:Catch::__anon368216750910
Window	dependencies/include/SFML/Window/Window.hpp	/^class SFML_WINDOW_API Window : GlResource, NonCopyable$/;"	c	namespace:sf
WindowHandle	dependencies/include/SFML/Window/WindowHandle.hpp	/^    typedef HWND__* WindowHandle;$/;"	t	namespace:sf	typeref:typename:HWND__ *
WrapperInfoCallback	dependencies/include/v8-profiler.h	/^  typedef RetainedObjectInfo* (*WrapperInfoCallback)(uint16_t class_id,$/;"	t	class:v8::HeapProfiler	typeref:typename:RetainedObjectInfo * (*)(uint16_t class_id,Local<Value> wrapper)
WrapperNode	dependencies/include/v8-profiler.h	/^    virtual Node* WrapperNode() { return nullptr; }$/;"	f	class:v8::EmbedderGraph::Node	typeref:typename:Node *
WriteHeapStatsChunk	dependencies/include/v8-profiler.h	/^  virtual WriteResult WriteHeapStatsChunk(HeapStatsUpdate* data, int count) {$/;"	f	class:v8::OutputStream	typeref:typename:WriteResult
WriteOptions	dependencies/include/v8.h	/^  enum WriteOptions {$/;"	g	class:v8::String
WriteResult	dependencies/include/v8-profiler.h	/^  enum WriteResult {$/;"	g	class:v8::OutputStream
WriterFactory	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^    struct WriterFactory$/;"	s	class:sf::SoundFileFactory
WriterFactoryArray	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^    typedef std::vector<WriterFactory> WriterFactoryArray;$/;"	t	class:sf::SoundFileFactory	typeref:typename:std::vector<WriterFactory>
X	dependencies/include/SFML/Window/Joystick.hpp	/^        X,    \/\/\/< The X axis$/;"	e	enum:sf::Joystick::Axis
X	dependencies/include/SFML/Window/Keyboard.hpp	/^        X,            \/\/\/< The X key$/;"	e	enum:sf::Keyboard::Key
XButton1	dependencies/include/SFML/Window/Mouse.hpp	/^        XButton1,   \/\/\/< The first extra mouse button$/;"	e	enum:sf::Mouse::Button
XButton2	dependencies/include/SFML/Window/Mouse.hpp	/^        XButton2,   \/\/\/< The second extra mouse button$/;"	e	enum:sf::Mouse::Button
XmlReporter	vendor/spdlog/tests/catch.hpp	/^        XmlReporter( ReporterConfig const& _config )$/;"	f	class:Catch::XmlReporter
XmlReporter	vendor/spdlog/tests/catch.hpp	/^    class XmlReporter : public StreamingReporterBase {$/;"	c	namespace:Catch
XmlWriter	vendor/spdlog/tests/catch.hpp	/^        XmlWriter( std::ostream& os )$/;"	f	class:Catch::XmlWriter
XmlWriter	vendor/spdlog/tests/catch.hpp	/^        XmlWriter()$/;"	f	class:Catch::XmlWriter
XmlWriter	vendor/spdlog/tests/catch.hpp	/^    class XmlWriter {$/;"	c	namespace:Catch
Y	dependencies/include/SFML/Window/Joystick.hpp	/^        Y,    \/\/\/< The Y axis$/;"	e	enum:sf::Joystick::Axis
Y	dependencies/include/SFML/Window/Keyboard.hpp	/^        Y,            \/\/\/< The Y key$/;"	e	enum:sf::Keyboard::Key
YELLOW	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    const WORD YELLOW = FOREGROUND_RED | FOREGROUND_GREEN;$/;"	m	class:spdlog::sinks::wincolor_sink	typeref:typename:const WORD
Y_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit Y_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::Y_formatter
Y_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class Y_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
Yellow	dependencies/include/SFML/Graphics/Color.hpp	/^    static const Color Yellow;      \/\/\/< Yellow predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
Yellow	vendor/spdlog/tests/catch.hpp	/^            Yellow,$/;"	e	enum:Catch::Colour::Code
Z	dependencies/include/SFML/Window/Joystick.hpp	/^        Z,    \/\/\/< The Z axis$/;"	e	enum:sf::Joystick::Axis
Z	dependencies/include/SFML/Window/Keyboard.hpp	/^        Z,            \/\/\/< The Z key$/;"	e	enum:sf::Keyboard::Key
ZERO_OR_POWERS_OF_10_32	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^const uint32_t basic_data<T>::ZERO_OR_POWERS_OF_10_32[] = {$/;"	m	class:internal::basic_data<T>	typeref:typename:const uint32_t[]
ZERO_OR_POWERS_OF_10_32	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  static const uint32_t ZERO_OR_POWERS_OF_10_32[];$/;"	m	struct:internal::basic_data	typeref:typename:const uint32_t[]
ZERO_OR_POWERS_OF_10_64	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^const uint64_t basic_data<T>::ZERO_OR_POWERS_OF_10_64[] = {$/;"	m	class:internal::basic_data<T>	typeref:typename:const uint64_t[]
ZERO_OR_POWERS_OF_10_64	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  static const uint64_t ZERO_OR_POWERS_OF_10_64[];$/;"	m	struct:internal::basic_data	typeref:typename:const uint64_t[]
Zero	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        Zero,             \/\/\/< (0, 0, 0, 0)$/;"	e	enum:sf::BlendMode::Factor
Zero	dependencies/include/SFML/System/Time.hpp	/^    static const Time Zero; \/\/\/< Predefined "zero" time value$/;"	m	class:sf::Time	typeref:typename:const Time
_	vendor/spdlog/tests/catch.hpp	/^                union _{$/;"	u	function:Catch::Detail::__anon368216750c10::Endianness::which
_	vendor/spdlog/tests/catch.hpp	/^    UnpositionalTag _;$/;"	v	namespace:Clara	typeref:typename:UnpositionalTag
_Unchecked_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef counting_iterator _Unchecked_type;  \/\/ Mark iterator as checked.$/;"	t	class:internal::counting_iterator	typeref:typename:counting_iterator
_Unchecked_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef truncating_iterator _Unchecked_type;  \/\/ Mark iterator as checked.$/;"	t	class:internal::truncating_iterator	typeref:typename:truncating_iterator
__anon08854cb10103	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  enum {$/;"	g	class:file
__anon08854cb10203	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  enum { LC_NUMERIC_MASK = LC_NUMERIC };$/;"	g	class:Locale
__anon1e23a3bc0103	dependencies/include/SFML/Window/Joystick.hpp	/^    {$/;"	g	class:sf::Joystick
__anon23b6b9820102	vendor/spdlog/example/jni/example.cpp	/^        spd::apply_all([&](std::shared_ptr<spdlog::logger> l) { l->info("End of example."); });$/;"	f	function:main	file:
__anon23b6b9820202	vendor/spdlog/example/jni/example.cpp	/^    spdlog::set_error_handler([](const std::string &msg) { std::cerr << "my err handler: " << ms/;"	f	function:err_handler_example	file:
__anon2c5ca4e50102	vendor/spdlog/tests/test_registry.cpp	/^    spdlog::apply_all([&counter](std::shared_ptr<spdlog::logger>) { counter++; });$/;"	f	file:
__anon2c5ca4e50202	vendor/spdlog/tests/test_registry.cpp	/^    spdlog::apply_all([&counter](std::shared_ptr<spdlog::logger> l) {$/;"	f	file:
__anon2dc9d442010a	dependencies/include/v8-profiler.h	/^  union {$/;"	u	struct:v8::TickSample
__anon368216750103	vendor/spdlog/tests/catch.hpp	/^        enum { value = sizeof( testStreamable(s << t) ) == sizeof( TrueType ) };$/;"	g	struct:Catch::Detail::IsStreamInsertable
__anon368216750202	vendor/spdlog/tests/catch.hpp	/^        std::string const& operator[]( std::size_t _index ) const { return lines[_index]; }$/;"	f	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	file:
__anon368216750302	vendor/spdlog/tests/catch.hpp	/^        std::string toString() const {$/;"	f	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	file:
__anon368216750402	vendor/spdlog/tests/catch.hpp	/^        std::string const& operator[]( std::size_t _index ) const { return lines[_index]; }$/;"	f	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	file:
__anon368216750502	vendor/spdlog/tests/catch.hpp	/^        std::string toString() const {$/;"	f	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	file:
__anon368216750610	vendor/spdlog/tests/catch.hpp	/^    namespace {$/;"	n	namespace:Catch
__anon368216750710	vendor/spdlog/tests/catch.hpp	/^    namespace {$/;"	n	namespace:Catch
__anon368216750810	vendor/spdlog/tests/catch.hpp	/^    namespace {$/;"	n	namespace:Catch
__anon368216750910	vendor/spdlog/tests/catch.hpp	/^namespace {$/;"	n	namespace:Catch
__anon368216750a10	vendor/spdlog/tests/catch.hpp	/^namespace {$/;"	n	namespace:Catch
__anon368216750b10	vendor/spdlog/tests/catch.hpp	/^    namespace {$/;"	n	namespace:Catch
__anon368216750c10	vendor/spdlog/tests/catch.hpp	/^    namespace {$/;"	n	namespace:Catch::Detail
__anon3d87c0370110	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^namespace {$/;"	n
__anon47acc7ac0103	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^        enum {VertexCacheSize = 4};$/;"	g	struct:sf::RenderTarget::StatesCache
__anon4db261690102	vendor/spdlog/tests/test_errors.cpp	/^    logger->set_error_handler([=](const std::string &) { throw custom_ex(); });$/;"	f	file:
__anon4db261690202	vendor/spdlog/tests/test_errors.cpp	/^    logger->set_error_handler([=](const std::string &) { throw custom_ex(); });$/;"	f	file:
__anon4db261690302	vendor/spdlog/tests/test_errors.cpp	/^    logger->set_error_handler([=](const std::string &) { throw custom_ex(); });$/;"	f	file:
__anon4db261690402	vendor/spdlog/tests/test_errors.cpp	/^        logger->set_error_handler([=](const std::string &) {$/;"	f	file:
__anon4db261690502	vendor/spdlog/tests/test_errors.cpp	/^        logger->set_error_handler([=](const std::string &) {$/;"	f	file:
__anon886bd1750102	vendor/spdlog/include/spdlog/details/mpmc_blocking_q.h	/^            pop_cv_.wait(lock, [this] { return !this->q_.full(); });$/;"	f	function:spdlog::details::mpmc_blocking_queue::enqueue	file:
__anon886bd1750202	vendor/spdlog/include/spdlog/details/mpmc_blocking_q.h	/^            if (!push_cv_.wait_for(lock, wait_duration, [this] { return !this->q_.empty(); }))$/;"	f	function:spdlog::details::mpmc_blocking_queue::dequeue_for	file:
__anon886bd1750302	vendor/spdlog/include/spdlog/details/mpmc_blocking_q.h	/^        pop_cv_.wait(lock, [this] { return !this->q_.full(); });$/;"	f	function:spdlog::details::mpmc_blocking_queue::enqueue	file:
__anon886bd1750402	vendor/spdlog/include/spdlog/details/mpmc_blocking_q.h	/^        if (!push_cv_.wait_for(lock, wait_duration, [this] { return !this->q_.empty(); }))$/;"	f	function:spdlog::details::mpmc_blocking_queue::dequeue_for	file:
__anon941a085b0103	dependencies/include/SFML/Audio/SoundStream.hpp	/^    {$/;"	g	class:sf::SoundStream
__anon941a085b0203	dependencies/include/SFML/Audio/SoundStream.hpp	/^    {$/;"	g	class:sf::SoundStream
__anon94c341520203	dependencies/include/v8.h	/^  enum {$/;"	g	class:v8::ScriptOriginOptions
__anon9e6e9dae010a	dependencies/include/SFML/Window/Event.hpp	/^    {$/;"	u	class:sf::Event
__anona22992da0102	vendor/spdlog/bench/bench.cpp	/^        threads.push_back(std::thread([&]() {$/;"	f	function:bench_mt	file:
__anona4fd579c0103	dependencies/include/v8-internal.h	/^  enum { kSmiShiftSize = 0, kSmiValueSize = 31 };$/;"	g	struct:v8::internal::SmiTagging
__anona4fd579c0203	dependencies/include/v8-internal.h	/^  enum { kSmiShiftSize = 31, kSmiValueSize = 32 };$/;"	g	struct:v8::internal::SmiTagging
__anonbb24b0470103	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  enum {$/;"	g	struct:convert_to_int
__anonbb24b0470202	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  const T &operator[](std::size_t index) const { return ptr_[index]; }$/;"	f	class:internal::basic_buffer	file:
__anonbb24b047030a	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  union {$/;"	u	class:internal::value
__anonbb24b0470403	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^enum { max_packed_args = 15 };$/;"	g	namespace:internal
__anonbb24b047050a	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  union {$/;"	u	class:basic_format_args
__anonbf9bd4ca0102	vendor/spdlog/tests/test_async.cpp	/^            threads.emplace_back([logger, messages] {$/;"	f	file:
__anonc2dbfd350103	dependencies/include/SFML/Window/WindowStyle.hpp	/^    {$/;"	g	namespace:sf::Style
__anonccec14c70103	dependencies/include/SFML/Network/Socket.hpp	/^    {$/;"	g	class:sf::Socket
__anond7159df00103	dependencies/include/SFML/Network/UdpSocket.hpp	/^    {$/;"	g	class:sf::UdpSocket
__anondc8451670103	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^enum { inline_buffer_size = 500 };$/;"	g
__anondc8451670203	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^enum {SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8};$/;"	g
__anondc8451670303	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  enum {$/;"	g	struct:internal::is_integer
__anondc8451670403	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  enum { NUM_ARGS = sizeof...(Args) };$/;"	g	class:internal::format_string_checker
__anondc8451670503	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    enum { SEP_SIZE = 1 };$/;"	g	struct:basic_writer::int_writer
__anondc8451670603	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  enum {INF_SIZE = 3}; \/\/ This is an enum to workaround a bug in MSVC.$/;"	g	class:basic_writer
__anondc8451670703	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  enum { MAX_FORMAT_SIZE = 10}; \/\/ longest format: %#-*.*Lg$/;"	g	function:basic_writer::write_double_sprintf
__anondc8451670803	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  enum {BUFFER_SIZE = std::numeric_limits<unsigned long long>::digits10 + 3};$/;"	g	class:format_int
__anone077723b0102	vendor/spdlog/include/spdlog/logger.h	/^    log_err_handler err_handler_{[this](const std::string &msg) { this->default_err_handler_(msg/;"	f	class:spdlog::logger	file:
__anonf5fcbbf6010a	dependencies/include/v8-inspector.h	/^  union {$/;"	u	class:v8_inspector::StringView
__anonfe7bb0f80102	vendor/spdlog/include/spdlog/details/periodic_worker.h	/^        worker_thread_ = std::thread([this, callback_fun, interval]() {$/;"	f	function:spdlog::details::periodic_worker::periodic_worker	file:
__anonfe7bb0f80202	vendor/spdlog/include/spdlog/details/periodic_worker.h	/^                if (this->cv_.wait_for(lock, interval, [this] { return !this->active_; }))$/;"	f	function:spdlog::details::periodic_worker::periodic_worker::__anonfe7bb0f80102	file:
__anonfeaee7320102	vendor/spdlog/example/example.cpp	/^        spdlog::apply_all([&](std::shared_ptr<spdlog::logger> l) { l->info("End of example."); }/;"	f	function:main	file:
__anonfeaee7320202	vendor/spdlog/example/example.cpp	/^    spdlog::set_error_handler([](const std::string &msg) { printf("*** Custom log error handler:/;"	f	function:err_handler_example	file:
__has_feature	vendor/spdlog/include/spdlog/details/os.h	/^#define __has_feature(/;"	d
_ecvt_s	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline dummy_int _ecvt_s(...) { return dummy_int(); }$/;"	f	namespace:internal	typeref:typename:dummy_int
_filename	vendor/spdlog/include/spdlog/details/file_helper.h	/^    filename_t _filename;$/;"	m	class:spdlog::details::file_helper	typeref:typename:filename_t
_finite	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline dummy_int _finite(...) { return dummy_int(); }$/;"	f	namespace:internal	typeref:typename:dummy_int
_isnan	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline dummy_int _isnan(...) { return dummy_int(); }$/;"	f	namespace:internal	typeref:typename:dummy_int
_thread_id	vendor/spdlog/include/spdlog/details/os.h	/^inline size_t _thread_id() SPDLOG_NOEXCEPT$/;"	f	namespace:spdlog::details::os	typeref:typename:size_t
```	vendor/spdlog/README.md	/^```$/;"	s
a	dependencies/include/SFML/Graphics/Color.hpp	/^    Uint8 a; \/\/\/< Alpha (opacity) component$/;"	m	class:sf::Color	typeref:typename:Uint8
a_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit a_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::a_formatter
a_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class a_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
abortAfter	vendor/spdlog/tests/catch.hpp	/^        int abortAfter() const { return m_data.abortAfter; }$/;"	f	class:Catch::Config	typeref:typename:int
abortAfter	vendor/spdlog/tests/catch.hpp	/^        int abortAfter;$/;"	m	struct:Catch::ConfigData	typeref:typename:int
abortAfterFirst	vendor/spdlog/tests/catch.hpp	/^    inline void abortAfterFirst( ConfigData& config ) { config.abortAfter = 1; }$/;"	f	namespace:Catch	typeref:typename:void
abortAfterX	vendor/spdlog/tests/catch.hpp	/^    inline void abortAfterX( ConfigData& config, int x ) {$/;"	f	namespace:Catch	typeref:typename:void
aborting	vendor/spdlog/tests/catch.hpp	/^        bool aborting() const {$/;"	f	class:Catch::RunContext	typeref:typename:bool
aborting	vendor/spdlog/tests/catch.hpp	/^        bool aborting;$/;"	m	struct:Catch::TestCaseStats	typeref:typename:bool
aborting	vendor/spdlog/tests/catch.hpp	/^        bool aborting;$/;"	m	struct:Catch::TestGroupStats	typeref:typename:bool
aborting	vendor/spdlog/tests/catch.hpp	/^        bool aborting;$/;"	m	struct:Catch::TestRunStats	typeref:typename:bool
abs_value	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^      unsigned_type abs_value;$/;"	m	struct:basic_writer::int_writer::bin_writer	typeref:typename:unsigned_type
abs_value	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^      unsigned_type abs_value;$/;"	m	struct:basic_writer::int_writer::dec_writer	typeref:typename:unsigned_type
abs_value	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^      unsigned_type abs_value;$/;"	m	struct:basic_writer::int_writer::num_writer	typeref:typename:unsigned_type
abs_value	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    unsigned_type abs_value;$/;"	m	struct:basic_writer::int_writer	typeref:typename:unsigned_type
accessor	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    accessor(bi_iterator iter) : bi_iterator(iter) {}$/;"	f	struct:internal::get_container::accessor
accessor	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  struct accessor: bi_iterator {$/;"	s	function:internal::get_container
acquireChild	vendor/spdlog/tests/catch.hpp	/^        TrackedSection* acquireChild( std::string const& childName ) {$/;"	f	class:Catch::SectionTracking::TrackedSection	typeref:typename:TrackedSection *
active_	vendor/spdlog/include/spdlog/details/periodic_worker.h	/^    bool active_;$/;"	m	class:spdlog::details::periodic_worker	typeref:typename:bool
add	vendor/spdlog/tests/catch.hpp	/^            AllOf& add( Matcher<ExpressionT> const& matcher ) {$/;"	f	class:Catch::Matchers::Impl::Generic::AllOf	typeref:typename:AllOf &
add	vendor/spdlog/tests/catch.hpp	/^            AnyOf& add( Matcher<ExpressionT> const& matcher ) {$/;"	f	class:Catch::Matchers::Impl::Generic::AnyOf	typeref:typename:AnyOf &
add	vendor/spdlog/tests/catch.hpp	/^        void add( std::string const& spelling ) {$/;"	f	struct:Catch::TagInfo	typeref:typename:void
add	vendor/spdlog/tests/catch.hpp	/^    void TagAliasRegistry::add( char const* alias, char const* tag, SourceLineInfo const& lineIn/;"	f	class:Catch::TagAliasRegistry	typeref:typename:void
add	vendor/spdlog/tests/catch.hpp	/^    void add( T value ) {$/;"	f	class:Catch::ValuesGenerator	typeref:typename:void
add	vendor/spdlog/tests/catch.hpp	/^    void add( const IGenerator<T>* generator ) {$/;"	f	class:Catch::CompositeGenerator	typeref:typename:void
addFilter	vendor/spdlog/tests/catch.hpp	/^        void addFilter() {$/;"	f	class:Catch::TestSpecParser	typeref:typename:void
addOptName	vendor/spdlog/tests/catch.hpp	/^        friend void addOptName( Arg& arg, std::string const& optName )$/;"	f	namespace:Clara	typeref:typename:void
addPattern	vendor/spdlog/tests/catch.hpp	/^        void addPattern() {$/;"	f	class:Catch::TestSpecParser	typeref:typename:void
addRef	vendor/spdlog/tests/catch.hpp	/^        virtual void addRef() const {$/;"	f	struct:Catch::SharedImpl	typeref:typename:void
addRow	vendor/spdlog/tests/catch.hpp	/^            SummaryColumn addRow( std::size_t count ) {$/;"	f	struct:Catch::ConsoleReporter::SummaryColumn	typeref:typename:SummaryColumn
addTestOrTags	vendor/spdlog/tests/catch.hpp	/^    inline void addTestOrTags( ConfigData& config, std::string const& _testSpec ) { config.tests/;"	f	namespace:Catch	typeref:typename:void
addWarning	vendor/spdlog/tests/catch.hpp	/^    inline void addWarning( ConfigData& config, std::string const& _warning ) {$/;"	f	namespace:Catch	typeref:typename:void
add_ch	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void add_ch(char ch)$/;"	f	class:spdlog::details::aggregate_formatter	typeref:typename:void
add_delimiter_spaces	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool add_delimiter_spaces = true;$/;"	m	struct:formatting_range	typeref:typename:FMT_CONSTEXPR_DECL const bool
add_delimiter_spaces	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool add_delimiter_spaces = true;$/;"	m	struct:formatting_tuple	typeref:typename:FMT_CONSTEXPR_DECL const bool
add_prepostfix_space	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool add_prepostfix_space = false;$/;"	m	struct:formatting_range	typeref:typename:FMT_CONSTEXPR_DECL const bool
add_prepostfix_space	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool add_prepostfix_space = false;$/;"	m	struct:formatting_tuple	typeref:typename:FMT_CONSTEXPR_DECL const bool
add_sink	vendor/spdlog/include/spdlog/sinks/dist_sink.h	/^    void add_sink(std::shared_ptr<sink> sink)$/;"	f	class:spdlog::sinks::dist_sink	typeref:typename:void
add_thousands_sep	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit add_thousands_sep(basic_string_view<Char> sep)$/;"	f	class:internal::add_thousands_sep
add_thousands_sep	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class add_thousands_sep {$/;"	c	namespace:internal
advance	dependencies/include/SFML/Graphics/Glyph.hpp	/^    float     advance;     \/\/\/< Offset to move horizontally to the next character$/;"	m	class:sf::Glyph	typeref:typename:float
advanceGeneratorsForCurrentTest	vendor/spdlog/tests/catch.hpp	/^        virtual bool advanceGeneratorsForCurrentTest() {$/;"	f	class:Catch::Context	typeref:typename:bool
advance_to	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void advance_to(iterator it) {$/;"	f	class:basic_parse_context	typeref:typename:FMT_CONSTEXPR void
advance_to	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  void advance_to(iterator it) { out_ = it; }$/;"	f	class:internal::context_base	typeref:typename:void
aggregate_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class aggregate_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
alice_blue	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    alice_blue = 0xF0F8FF,              \/\/ rgb(240,248,255)$/;"	e	enum:color
align	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR alignment align() const { return align_; }$/;"	f	struct:align_spec	typeref:typename:FMT_CONSTEXPR alignment
align_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  alignment align_;$/;"	m	struct:align_spec	typeref:typename:alignment
align_spec	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR align_spec($/;"	f	struct:align_spec	typeref:typename:FMT_CONSTEXPR
align_spec	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct align_spec : empty_spec {$/;"	s
align_tag	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^enum format_spec_tag {fill_tag, align_tag, width_tag, type_tag};$/;"	e	enum:format_spec_tag
alignment	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^enum alignment {$/;"	g
all	vendor/spdlog/bench/Makefile	/^all: $(binaries)$/;"	t
all	vendor/spdlog/example/Makefile	/^all:	example $/;"	t
all	vendor/spdlog/tests/catch.hpp	/^        std::string all() const {$/;"	f	struct:Catch::TagInfo	typeref:typename:std::string
allOk	vendor/spdlog/tests/catch.hpp	/^        bool allOk() const {$/;"	f	struct:Catch::Counts	typeref:typename:bool
allPassed	vendor/spdlog/tests/catch.hpp	/^        bool allPassed() const {$/;"	f	struct:Catch::Counts	typeref:typename:bool
allocate	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^typename Allocator::value_type *allocate(Allocator& alloc, std::size_t n) {$/;"	f	namespace:internal	typeref:typename:Allocator::value_type *
allocation_base_	dependencies/include/v8.h	/^    void* allocation_base_;$/;"	m	class:v8::ArrayBuffer::Contents	typeref:typename:void *
allocation_base_	dependencies/include/v8.h	/^    void* allocation_base_;$/;"	m	class:v8::SharedArrayBuffer::Contents	typeref:typename:void *
allocation_length_	dependencies/include/v8.h	/^    size_t allocation_length_;$/;"	m	class:v8::ArrayBuffer::Contents	typeref:typename:size_t
allocation_length_	dependencies/include/v8.h	/^    size_t allocation_length_;$/;"	m	class:v8::SharedArrayBuffer::Contents	typeref:typename:size_t
allocation_mode_	dependencies/include/v8.h	/^    Allocator::AllocationMode allocation_mode_;$/;"	m	class:v8::ArrayBuffer::Contents	typeref:typename:Allocator::AllocationMode
allocation_mode_	dependencies/include/v8.h	/^    Allocator::AllocationMode allocation_mode_;$/;"	m	class:v8::SharedArrayBuffer::Contents	typeref:typename:Allocator::AllocationMode
allocations	dependencies/include/v8-profiler.h	/^    std::vector<Allocation> allocations;$/;"	m	struct:v8::AllocationProfile::Node	typeref:typename:std::vector<Allocation>
allowThrows	vendor/spdlog/tests/catch.hpp	/^        virtual bool allowThrows() const        { return !m_data.noThrow; }$/;"	f	class:Catch::Config	typeref:typename:bool
allowThrows	vendor/spdlog/tests/catch.hpp	/^    bool ResultBuilder::allowThrows() const { return getCurrentContext().getConfig()->allowThrow/;"	f	class:Catch::ResultBuilder	typeref:typename:bool
alphaDstFactor	dependencies/include/SFML/Graphics/BlendMode.hpp	/^    Factor   alphaDstFactor; \/\/\/< Destination blending factor for the alpha channel$/;"	m	struct:sf::BlendMode	typeref:typename:Factor
alphaEquation	dependencies/include/SFML/Graphics/BlendMode.hpp	/^    Equation alphaEquation;  \/\/\/< Blending equation for the alpha channel$/;"	m	struct:sf::BlendMode	typeref:typename:Equation
alphaSrcFactor	dependencies/include/SFML/Graphics/BlendMode.hpp	/^    Factor   alphaSrcFactor; \/\/\/< Source blending factor for the alpha channel$/;"	m	struct:sf::BlendMode	typeref:typename:Factor
alreadyInstantiated	vendor/spdlog/tests/catch.hpp	/^        static bool alreadyInstantiated;$/;"	m	class:Catch::Session	typeref:typename:bool
alreadyInstantiated	vendor/spdlog/tests/catch.hpp	/^    bool Session::alreadyInstantiated = false;$/;"	m	class:Catch::Session	typeref:typename:bool
alt	dependencies/include/SFML/Window/Event.hpp	/^        bool          alt;     \/\/\/< Is the Alt key pressed?$/;"	m	struct:sf::Event::KeyEvent	typeref:typename:bool
alwaysFalse	vendor/spdlog/tests/catch.hpp	/^    inline bool alwaysFalse() { return false; }$/;"	f	namespace:Catch	typeref:typename:bool
alwaysTrue	vendor/spdlog/tests/catch.hpp	/^    inline bool alwaysTrue() { return true; }$/;"	f	namespace:Catch	typeref:typename:bool
ampm	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^static const char *ampm(const tm &t)$/;"	f	namespace:spdlog::details	typeref:typename:const char *
android_example	vendor/spdlog/example/example.cpp	/^void android_example()$/;"	f	typeref:typename:void
android_example	vendor/spdlog/example/jni/example.cpp	/^void android_example()$/;"	f	typeref:typename:void
android_logger_mt	vendor/spdlog/include/spdlog/sinks/android_sink.h	/^inline std::shared_ptr<logger> android_logger_mt(const std::string &logger_name, const std::stri/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
android_logger_st	vendor/spdlog/include/spdlog/sinks/android_sink.h	/^inline std::shared_ptr<logger> android_logger_st(const std::string &logger_name, const std::stri/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
android_sink	vendor/spdlog/include/spdlog/sinks/android_sink.h	/^    explicit android_sink(std::string tag = "spdlog", bool use_raw_msg = false)$/;"	f	class:spdlog::sinks::android_sink
android_sink	vendor/spdlog/include/spdlog/sinks/android_sink.h	/^class android_sink final : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
android_sink_mt	vendor/spdlog/include/spdlog/sinks/android_sink.h	/^using android_sink_mt = android_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:android_sink<std::mutex>
android_sink_st	vendor/spdlog/include/spdlog/sinks/android_sink.h	/^using android_sink_st = android_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:android_sink<details::null_mutex>
ansicolor_sink	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    ansicolor_sink()$/;"	f	class:spdlog::sinks::ansicolor_sink
ansicolor_sink	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^class ansicolor_sink final : public sink$/;"	c	namespace:spdlog::sinks
ansicolor_stderr_sink_mt	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^using ansicolor_stderr_sink_mt = ansicolor_sink<details::console_stderr, details::console_mutex>/;"	t	namespace:spdlog::sinks	typeref:typename:ansicolor_sink<details::console_stderr,details::console_mutex>
ansicolor_stderr_sink_st	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^using ansicolor_stderr_sink_st = ansicolor_sink<details::console_stderr, details::console_nullmu/;"	t	namespace:spdlog::sinks	typeref:typename:ansicolor_sink<details::console_stderr,details::console_nullmutex>
ansicolor_stdout_sink_mt	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^using ansicolor_stdout_sink_mt = ansicolor_sink<details::console_stdout, details::console_mutex>/;"	t	namespace:spdlog::sinks	typeref:typename:ansicolor_sink<details::console_stdout,details::console_mutex>
ansicolor_stdout_sink_st	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^using ansicolor_stdout_sink_st = ansicolor_sink<details::console_stdout, details::console_nullmu/;"	t	namespace:spdlog::sinks	typeref:typename:ansicolor_sink<details::console_stdout,details::console_nullmutex>
antialiasingLevel	dependencies/include/SFML/Window/ContextSettings.hpp	/^    unsigned int antialiasingLevel; \/\/\/< Level of antialiasing$/;"	m	struct:sf::ContextSettings	typeref:typename:unsigned int
antique_white	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    antique_white = 0xFAEBD7,           \/\/ rgb(250,235,215)$/;"	e	enum:color
append	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^void basic_buffer<T>::append(const U *begin, const U *end) {$/;"	f	class:internal::basic_buffer	typeref:typename:void
append_buf	vendor/spdlog/include/spdlog/details/fmt_helper.h	/^inline void append_buf(const fmt::basic_memory_buffer<char, Buffer_Size1> &buf, fmt::basic_memor/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:void
append_float_length	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void append_float_length(char_type *&, T) {}$/;"	f	class:basic_writer	typeref:typename:void
append_float_length	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void append_float_length(char_type *&format_ptr, long double) {$/;"	f	class:basic_writer	typeref:typename:void
append_int	vendor/spdlog/include/spdlog/details/fmt_helper.h	/^inline void append_int(T n, fmt::basic_memory_buffer<char, Buffer_Size> &dest)$/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:void
append_string_view	vendor/spdlog/include/spdlog/details/fmt_helper.h	/^inline void append_string_view(spdlog::string_view_t view, fmt::basic_memory_buffer<char, Buffer/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:void
applyCommandLine	vendor/spdlog/tests/catch.hpp	/^        int applyCommandLine( int argc, char* const argv[], OnUnusedOptions::DoWhat unusedOption/;"	f	class:Catch::Session	typeref:typename:int
applyEvaluator	vendor/spdlog/tests/catch.hpp	/^    bool applyEvaluator( T1 const& lhs, T2 const& rhs ) {$/;"	f	namespace:Catch::Internal	typeref:typename:bool
apply_all	vendor/spdlog/include/spdlog/details/registry.h	/^    void apply_all(const std::function<void(const std::shared_ptr<logger>)> &fun)$/;"	f	class:spdlog::details::registry	typeref:typename:void
apply_all	vendor/spdlog/include/spdlog/spdlog.h	/^inline void apply_all(const std::function<void(std::shared_ptr<logger>)> &fun)$/;"	f	namespace:spdlog	typeref:typename:void
aqua	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    aqua = 0x00FFFF,                    \/\/ rgb(0,255,255)$/;"	e	enum:color
aquamarine	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    aquamarine = 0x7FFFD4,              \/\/ rgb(127,255,212)$/;"	e	enum:color
arcSafeRelease	vendor/spdlog/tests/catch.hpp	/^inline void arcSafeRelease( NSObject* ){}$/;"	f	typeref:typename:void
arcSafeRelease	vendor/spdlog/tests/catch.hpp	/^inline void arcSafeRelease( NSObject* obj ) {$/;"	f	typeref:typename:void
arg	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    basic_format_arg<Context> arg;$/;"	m	struct:internal::arg_map::entry	typeref:typename:basic_format_arg<Context>
arg	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^inline internal::named_arg<T, char> arg(string_view name, const T &arg) {$/;"	f	typeref:typename:internal::named_arg<T,char>
arg	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^inline internal::named_arg<T, wchar_t> arg(wstring_view name, const T &arg) {$/;"	f	typeref:typename:internal::named_arg<T,wchar_t>
arg	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  basic_format_arg<Context> arg;$/;"	m	struct:format_handler	typeref:typename:basic_format_arg<Context>
argSynopsis	vendor/spdlog/tests/catch.hpp	/^        std::string argSynopsis() const {$/;"	f	class:Clara::CommandLine	typeref:typename:std::string
argSynopsis	vendor/spdlog/tests/catch.hpp	/^        void argSynopsis( std::ostream& os ) const {$/;"	f	class:Clara::CommandLine	typeref:typename:void
arg_	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  basic_format_arg<Context> &arg_;$/;"	m	class:internal::arg_converter	typeref:typename:basic_format_arg<Context> &
arg_	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  basic_format_arg<Context> &arg_;$/;"	m	class:internal::char_converter	typeref:typename:basic_format_arg<Context> &
arg_convertables	dependencies/include/libplatform/v8-tracing.h	/^  std::unique_ptr<v8::ConvertableToTraceFormat>* arg_convertables() {$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:std::unique_ptr<v8::ConvertableToTraceFormat> *
arg_convertables_	dependencies/include/libplatform/v8-tracing.h	/^      arg_convertables_[kTraceMaxNumArgs];$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:std::unique_ptr<v8::ConvertableToTraceFormat>[]
arg_converter	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  arg_converter(basic_format_arg<Context> &arg, Char type)$/;"	f	class:internal::arg_converter
arg_converter	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^class arg_converter: public function<void> {$/;"	c	namespace:internal
arg_formatter	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  arg_formatter(context_type &ctx, format_specs &spec)$/;"	f	class:arg_formatter
arg_formatter	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit arg_formatter(context_type &ctx, format_specs *spec = {})$/;"	f	class:arg_formatter
arg_formatter	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class arg_formatter:$/;"	c
arg_formatter_base	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  arg_formatter_base(Range r, format_specs *s): writer_(r), specs_(s) {}$/;"	f	class:internal::arg_formatter_base
arg_formatter_base	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class arg_formatter_base {$/;"	c	namespace:internal
arg_id_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  int arg_id_;$/;"	m	class:internal::format_string_checker	typeref:typename:int
arg_join	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  arg_join(It begin, It end, basic_string_view<Char> sep)$/;"	f	struct:arg_join
arg_join	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct arg_join {$/;"	s
arg_map	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  arg_map() : map_(FMT_NULL), size_(0) {}$/;"	f	class:internal::arg_map
arg_map	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^class arg_map {$/;"	c	namespace:internal
arg_names	dependencies/include/libplatform/v8-tracing.h	/^  const char** arg_names() { return arg_names_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:const char **
arg_names_	dependencies/include/libplatform/v8-tracing.h	/^  const char* arg_names_[kTraceMaxNumArgs];$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:const char * []
arg_ref	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR arg_ref() : kind(NONE), index(0) {}$/;"	f	struct:internal::arg_ref	typeref:typename:FMT_CONSTEXPR
arg_ref	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR explicit arg_ref(unsigned index) : kind(INDEX), index(index) {}$/;"	f	struct:internal::arg_ref	typeref:typename:FMT_CONSTEXPR
arg_ref	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit arg_ref(basic_string_view<Char> name) : kind(NAME), name(name) {}$/;"	f	struct:internal::arg_ref
arg_ref	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct arg_ref {$/;"	s	namespace:internal
arg_ref_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef arg_ref<char_type> arg_ref_type;$/;"	t	class:internal::dynamic_specs_handler	typeref:typename:arg_ref<char_type>
arg_type_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  internal::type arg_type_;$/;"	m	class:internal::specs_checker	typeref:typename:internal::type
arg_types	dependencies/include/libplatform/v8-tracing.h	/^  uint8_t* arg_types() { return arg_types_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:uint8_t *
arg_types_	dependencies/include/libplatform/v8-tracing.h	/^  uint8_t arg_types_[kTraceMaxNumArgs];$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:uint8_t[]
arg_values	dependencies/include/libplatform/v8-tracing.h	/^  ArgValue* arg_values() { return arg_values_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:ArgValue *
arg_values_	dependencies/include/libplatform/v8-tracing.h	/^  ArgValue arg_values_[kTraceMaxNumArgs];$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:ArgValue[]
args	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  basic_format_args<Context> args() const { return args_; }$/;"	f	class:internal::context_base	typeref:typename:basic_format_args<Context>
args_	dependencies/include/v8.h	/^  internal::Address* args_;$/;"	m	class:v8::PropertyCallbackInfo	typeref:typename:internal::Address *
args_	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    const format_arg *args_;$/;"	m	union:basic_format_args::__anonbb24b047050a	typeref:typename:const format_arg *
args_	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  basic_format_args<Context> args_;$/;"	m	class:internal::context_base	typeref:typename:basic_format_args<Context>
array	dependencies/include/SFML/Graphics/Glsl.inl	/^    float array[Columns * Rows]; \/\/\/< Array holding matrix data$/;"	m	struct:Matrix	typeref:typename:float[]	file:
asChar	vendor/spdlog/tests/catch.hpp	/^                    char asChar[sizeof (int)];$/;"	m	union:Catch::Detail::__anon368216750c10::Endianness::which::_	typeref:typename:char[]
asInt	vendor/spdlog/tests/catch.hpp	/^                    int asInt;$/;"	m	union:Catch::Detail::__anon368216750c10::Endianness::which::_	typeref:typename:int
as_bool	dependencies/include/libplatform/v8-tracing.h	/^    bool as_bool;$/;"	m	union:v8::platform::tracing::TraceObject::ArgValue	typeref:typename:bool
as_double	dependencies/include/libplatform/v8-tracing.h	/^    double as_double;$/;"	m	union:v8::platform::tracing::TraceObject::ArgValue	typeref:typename:double
as_int	dependencies/include/libplatform/v8-tracing.h	/^    int64_t as_int;$/;"	m	union:v8::platform::tracing::TraceObject::ArgValue	typeref:typename:int64_t
as_named_arg	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  const named_arg_base<char_type> &as_named_arg() {$/;"	f	class:internal::value	typeref:typename:const named_arg_base<char_type> &
as_pointer	dependencies/include/libplatform/v8-tracing.h	/^    const void* as_pointer;$/;"	m	union:v8::platform::tracing::TraceObject::ArgValue	typeref:typename:const void *
as_string	dependencies/include/libplatform/v8-tracing.h	/^    const char* as_string;$/;"	m	union:v8::platform::tracing::TraceObject::ArgValue	typeref:typename:const char *
as_uint	dependencies/include/libplatform/v8-tracing.h	/^    uint64_t as_uint;$/;"	m	union:v8::platform::tracing::TraceObject::ArgValue	typeref:typename:uint64_t
assertionEnded	vendor/spdlog/tests/catch.hpp	/^        virtual bool assertionEnded( AssertionStats const& _assertionStats ) {$/;"	f	struct:Catch::CompactReporter	typeref:typename:bool
assertionEnded	vendor/spdlog/tests/catch.hpp	/^        virtual bool assertionEnded( AssertionStats const& _assertionStats ) {$/;"	f	struct:Catch::ConsoleReporter	typeref:typename:bool
assertionEnded	vendor/spdlog/tests/catch.hpp	/^        virtual bool assertionEnded( AssertionStats const& assertionStats ) {$/;"	f	class:Catch::JunitReporter	typeref:typename:bool
assertionEnded	vendor/spdlog/tests/catch.hpp	/^        virtual bool assertionEnded( AssertionStats const& assertionStats ) {$/;"	f	class:Catch::XmlReporter	typeref:typename:bool
assertionEnded	vendor/spdlog/tests/catch.hpp	/^        virtual bool assertionEnded( AssertionStats const& assertionStats ) {$/;"	f	struct:Catch::CumulativeReporterBase	typeref:typename:bool
assertionEnded	vendor/spdlog/tests/catch.hpp	/^        virtual void assertionEnded( AssertionResult const& result ) {$/;"	f	class:Catch::RunContext	typeref:typename:void
assertionEnded	vendor/spdlog/tests/catch.hpp	/^    bool LegacyReporterAdapter::assertionEnded( AssertionStats const& assertionStats ) {$/;"	f	class:Catch::LegacyReporterAdapter	typeref:typename:bool
assertionResult	vendor/spdlog/tests/catch.hpp	/^        AssertionResult assertionResult;$/;"	m	struct:Catch::AssertionStats	typeref:typename:AssertionResult
assertionStarting	vendor/spdlog/tests/catch.hpp	/^        virtual void assertionStarting( AssertionInfo const& ) { }$/;"	f	class:Catch::XmlReporter	typeref:typename:void
assertionStarting	vendor/spdlog/tests/catch.hpp	/^        virtual void assertionStarting( AssertionInfo const& ) {$/;"	f	struct:Catch::CompactReporter	typeref:typename:void
assertionStarting	vendor/spdlog/tests/catch.hpp	/^        virtual void assertionStarting( AssertionInfo const& ) {$/;"	f	struct:Catch::ConsoleReporter	typeref:typename:void
assertionStarting	vendor/spdlog/tests/catch.hpp	/^        virtual void assertionStarting( AssertionInfo const& ) {}$/;"	f	struct:Catch::CumulativeReporterBase	typeref:typename:void
assertionStarting	vendor/spdlog/tests/catch.hpp	/^    void LegacyReporterAdapter::assertionStarting( AssertionInfo const& ) {$/;"	f	class:Catch::LegacyReporterAdapter	typeref:typename:void
assertions	vendor/spdlog/tests/catch.hpp	/^            Assertions assertions;$/;"	m	struct:Catch::CumulativeReporterBase::SectionNode	typeref:typename:Assertions
assertions	vendor/spdlog/tests/catch.hpp	/^        Counts assertions;$/;"	m	struct:Catch::SectionStats	typeref:typename:Counts
assertions	vendor/spdlog/tests/catch.hpp	/^        Counts assertions;$/;"	m	struct:Catch::Totals	typeref:typename:Counts
async_bench	vendor/spdlog/bench/CMakeLists.txt	/^add_executable(async_bench async_bench.cpp)$/;"	t
async_bench	vendor/spdlog/bench/Makefile	/^async_bench: async_bench.cpp$/;"	t
async_example	vendor/spdlog/example/example.cpp	/^void async_example()$/;"	f	typeref:typename:void
async_example	vendor/spdlog/example/jni/example.cpp	/^void async_example()$/;"	f	typeref:typename:void
async_factory	vendor/spdlog/include/spdlog/async.h	/^using async_factory = async_factory_impl<async_overflow_policy::block>;$/;"	t	namespace:spdlog	typeref:typename:async_factory_impl<async_overflow_policy::block>
async_factory_impl	vendor/spdlog/include/spdlog/async.h	/^struct async_factory_impl$/;"	s	namespace:spdlog
async_factory_nonblock	vendor/spdlog/include/spdlog/async.h	/^using async_factory_nonblock = async_factory_impl<async_overflow_policy::overrun_oldest>;$/;"	t	namespace:spdlog	typeref:typename:async_factory_impl<async_overflow_policy::overrun_oldest>
async_logger	vendor/spdlog/include/spdlog/async_logger.h	/^class async_logger final : public std::enable_shared_from_this<async_logger>, public logger$/;"	c	namespace:spdlog
async_logger	vendor/spdlog/include/spdlog/details/async_logger_impl.h	/^inline spdlog::async_logger::async_logger($/;"	f	class:spdlog::async_logger
async_logger_ptr	vendor/spdlog/include/spdlog/details/thread_pool.h	/^using async_logger_ptr = std::shared_ptr<spdlog::async_logger>;$/;"	t	namespace:spdlog::details	typeref:typename:std::shared_ptr<spdlog::async_logger>
async_msg	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    async_msg(async_logger_ptr &&worker, async_msg_type the_type)$/;"	f	struct:spdlog::details::async_msg
async_msg	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    async_msg(async_logger_ptr &&worker, async_msg_type the_type, details::log_msg &m)$/;"	f	struct:spdlog::details::async_msg
async_msg	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    async_msg(async_msg &&other) SPDLOG_NOEXCEPT : msg_type(other.msg_type),$/;"	f	struct:spdlog::details::async_msg
async_msg	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    explicit async_msg(async_msg_type the_type)$/;"	f	struct:spdlog::details::async_msg
async_msg	vendor/spdlog/include/spdlog/details/thread_pool.h	/^struct async_msg$/;"	s	namespace:spdlog::details
async_msg_type	vendor/spdlog/include/spdlog/details/thread_pool.h	/^enum class async_msg_type$/;"	g	namespace:spdlog::details
async_overflow_policy	vendor/spdlog/include/spdlog/async_logger.h	/^enum class async_overflow_policy$/;"	g	namespace:spdlog
attr	vendor/spdlog/tests/catch.hpp	/^        TextAttributes attr;$/;"	m	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	typeref:typename:TextAttributes
attr	vendor/spdlog/tests/catch.hpp	/^        TextAttributes attr;$/;"	m	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	typeref:typename:TextAttributes
attributeFlags	dependencies/include/SFML/Window/ContextSettings.hpp	/^    Uint32       attributeFlags;    \/\/\/< The attribute flags to create the context with$/;"	m	struct:sf::ContextSettings	typeref:typename:Uint32
auto_id	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct auto_id {};$/;"	s	namespace:internal
automatic_registration_	vendor/spdlog/include/spdlog/details/registry.h	/^    bool automatic_registration_ = true;$/;"	m	class:spdlog::details::registry	typeref:typename:bool
auxData	dependencies/include/v8-inspector.h	/^  StringView auxData;$/;"	m	class:v8_inspector::V8ContextInfo	typeref:typename:StringView
axis	dependencies/include/SFML/Window/Event.hpp	/^        Joystick::Axis axis;       \/\/\/< Axis on which the joystick moved$/;"	m	struct:sf::Event::JoystickMoveEvent	typeref:typename:Joystick::Axis
azure	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    azure = 0xF0FFFF,                   \/\/ rgb(240,255,255)$/;"	e	enum:color
b	dependencies/include/SFML/Graphics/Color.hpp	/^    Uint8 b; \/\/\/< Blue component$/;"	m	class:sf::Color	typeref:typename:Uint8
b	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    uint8_t b;$/;"	m	struct:rgb	typeref:typename:uint8_t
b_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit b_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::b_formatter
b_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class b_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
back_insert_range	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  back_insert_range(Container &c): base(std::back_inserter(c)) {}$/;"	f	class:back_insert_range
back_insert_range	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  back_insert_range(typename base::iterator it): base(it) {}$/;"	f	class:back_insert_range
back_insert_range	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class back_insert_range:$/;"	c
backend_flush_	vendor/spdlog/include/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::backend_flush_()$/;"	f	class:spdlog::async_logger	typeref:typename:void
backend_log_	vendor/spdlog/include/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::backend_log_(const details::log_msg &incoming_log_msg)$/;"	f	class:spdlog::async_logger	typeref:typename:void
base	dependencies/include/libplatform/v8-tracing.h	/^namespace base {$/;"	n	namespace:v8
base	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typedef internal::context_base<OutputIt, basic_format_context, Char> base;$/;"	t	class:basic_format_context	typeref:typename:internal::context_base<OutputIt,basic_format_context,Char>
base	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    typedef formatter<typename std::iterator_traits<It>::value_type, Char> base;$/;"	t	function:formatter::format	typeref:typename:formatter<typename std::iterator_traits<It>::value_type,Char>
base	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  OutputIt base() const { return out_; }$/;"	f	class:internal::truncating_iterator	typeref:typename:OutputIt
base	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef basic_string_view<char8_t> base;$/;"	t	class:u8string_view	typeref:typename:basic_string_view<char8_t>
base	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef internal::arg_formatter_base<Range> base;$/;"	t	class:arg_formatter	typeref:typename:internal::arg_formatter_base<Range>
base	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef output_range<std::back_insert_iterator<Container>> base;$/;"	t	class:back_insert_range	typeref:typename:output_range<std::back_insert_iterator<Container>>
base	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  typedef internal::arg_formatter_base<Range> base;$/;"	t	class:printf_arg_formatter	typeref:typename:internal::arg_formatter_base<Range>
base	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  typedef internal::context_base<OutputIt, basic_printf_context, Char> base;$/;"	t	class:basic_printf_context	typeref:typename:internal::context_base<OutputIt,basic_printf_context,Char>
base_filename_	vendor/spdlog/include/spdlog/sinks/daily_file_sink.h	/^    filename_t base_filename_;$/;"	m	class:spdlog::sinks::daily_file_sink	typeref:typename:filename_t
base_filename_	vendor/spdlog/include/spdlog/sinks/rotating_file_sink.h	/^    filename_t base_filename_;$/;"	m	class:spdlog::sinks::rotating_file_sink	typeref:typename:filename_t
base_sink	vendor/spdlog/include/spdlog/sinks/base_sink.h	/^class base_sink : public sink$/;"	c	namespace:spdlog::sinks
basename	vendor/spdlog/tests/test_file_logging.cpp	/^    std::string basename = "logs\/daily_dateonly";$/;"	v	typeref:typename:std::string
basename	vendor/spdlog/tests/test_file_logging.cpp	/^    std::string basename = "logs\/rotating_log";$/;"	v	typeref:typename:std::string
basic_buffer	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  basic_buffer(T *p = FMT_NULL, std::size_t sz = 0, std::size_t cap = 0)$/;"	f	class:internal::basic_buffer
basic_buffer	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  basic_buffer(std::size_t sz) FMT_NOEXCEPT: size_(sz), capacity_(sz) {}$/;"	f	class:internal::basic_buffer
basic_buffer	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^class basic_buffer {$/;"	c	namespace:internal
basic_cstring_view	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  basic_cstring_view(const Char *s) : data_(s) {}$/;"	f	class:basic_cstring_view
basic_cstring_view	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  basic_cstring_view(const std::basic_string<Char> &s) : data_(s.c_str()) {}$/;"	f	class:basic_cstring_view
basic_cstring_view	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^class basic_cstring_view {$/;"	c
basic_data	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct FMT_API basic_data {$/;"	s	namespace:internal
basic_example	vendor/spdlog/example/example.cpp	/^void basic_example()$/;"	f	typeref:typename:void
basic_file_sink	vendor/spdlog/include/spdlog/sinks/basic_file_sink.h	/^    explicit basic_file_sink(const filename_t &filename, bool truncate = false)$/;"	f	class:spdlog::sinks::basic_file_sink
basic_file_sink	vendor/spdlog/include/spdlog/sinks/basic_file_sink.h	/^class basic_file_sink final : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
basic_file_sink_mt	vendor/spdlog/include/spdlog/sinks/basic_file_sink.h	/^using basic_file_sink_mt = basic_file_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:basic_file_sink<std::mutex>
basic_file_sink_st	vendor/spdlog/include/spdlog/sinks/basic_file_sink.h	/^using basic_file_sink_st = basic_file_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:basic_file_sink<details::null_mutex>
basic_fixed_buffer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  basic_fixed_buffer(Char *array, std::size_t size) {$/;"	f	class:basic_fixed_buffer
basic_fixed_buffer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit basic_fixed_buffer(Char (&array)[SIZE]) {$/;"	f	class:basic_fixed_buffer
basic_fixed_buffer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class basic_fixed_buffer : public internal::basic_buffer<Char> {$/;"	c
basic_format_arg	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR basic_format_arg() : type_(internal::none_type) {}$/;"	f	class:basic_format_arg	typeref:typename:FMT_CONSTEXPR
basic_format_arg	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^class basic_format_arg {$/;"	c
basic_format_args	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  basic_format_args() : types_(0) {}$/;"	f	class:basic_format_args
basic_format_args	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  basic_format_args(const format_arg *args, size_type count)$/;"	f	class:basic_format_args
basic_format_args	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  basic_format_args(const format_arg_store<Context, Args...> &store)$/;"	f	class:basic_format_args
basic_format_args	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^class basic_format_args {$/;"	c
basic_format_context	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  basic_format_context(OutputIt out, basic_string_view<char_type> format_str,$/;"	f	class:basic_format_context
basic_format_context	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^class basic_format_context :$/;"	c
basic_format_specs	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR basic_format_specs($/;"	f	class:basic_format_specs	typeref:typename:FMT_CONSTEXPR
basic_format_specs	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class basic_format_specs : public align_spec {$/;"	c
basic_logger_mt	vendor/spdlog/include/spdlog/sinks/basic_file_sink.h	/^inline std::shared_ptr<logger> basic_logger_mt(const std::string &logger_name, const filename_t /;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
basic_logger_st	vendor/spdlog/include/spdlog/sinks/basic_file_sink.h	/^inline std::shared_ptr<logger> basic_logger_st(const std::string &logger_name, const filename_t /;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
basic_memory_buffer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  basic_memory_buffer(basic_memory_buffer &&other) {$/;"	f	class:basic_memory_buffer
basic_memory_buffer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit basic_memory_buffer(const Allocator &alloc = Allocator())$/;"	f	class:basic_memory_buffer
basic_memory_buffer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class basic_memory_buffer: private Allocator, public internal::basic_buffer<T> {$/;"	c
basic_parse_context	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  explicit FMT_CONSTEXPR basic_parse_context($/;"	f	class:basic_parse_context	typeref:typename:FMT_CONSTEXPR
basic_parse_context	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^class basic_parse_context : private ErrorHandler {$/;"	c
basic_printf_context	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  basic_printf_context(OutputIt out, basic_string_view<char_type> format_str,$/;"	f	class:basic_printf_context
basic_printf_context	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^class basic_printf_context :$/;"	c
basic_string_view	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR basic_string_view($/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR
basic_string_view	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR basic_string_view() FMT_NOEXCEPT : data_(FMT_NULL), size_(0) {}$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR
basic_string_view	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR basic_string_view(const Char *s)$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR
basic_string_view	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR basic_string_view(const Char *s, size_t count) FMT_NOEXCEPT$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR
basic_string_view	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR basic_string_view(type s) FMT_NOEXCEPT$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR
basic_string_view	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^class basic_string_view {$/;"	c
basic_writer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit basic_writer(Range out): out_(out.begin()) {}$/;"	f	class:basic_writer
basic_writer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class basic_writer {$/;"	c
begin	vendor/spdlog/include/spdlog/fmt/bin_to_hex.h	/^    It begin() const$/;"	f	class:spdlog::details::bytes_range	typeref:typename:It
begin	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR iterator begin() const FMT_NOEXCEPT {$/;"	f	class:basic_parse_context	typeref:typename:FMT_CONSTEXPR iterator
begin	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR iterator begin() const { return data_; }$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR iterator
begin	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  T *begin() FMT_NOEXCEPT { return ptr_; }$/;"	f	class:internal::basic_buffer	typeref:typename:T *
begin	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  iterator begin() { return out_; }  \/\/ deprecated$/;"	f	class:internal::context_base	typeref:typename:iterator
begin	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  It begin;$/;"	m	struct:arg_join	typeref:typename:It
begin	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  OutputIt begin() const { return it_; }$/;"	f	class:output_range	typeref:typename:OutputIt
begin	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR T *begin(T (&array)[N]) FMT_NOEXCEPT { return array; }$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR T *
begin	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto begin(const C &c) -> decltype(c.begin()) {$/;"	f	namespace:internal	typeref:typename:decltype (c.begin ())
begin	vendor/spdlog/tests/catch.hpp	/^        const_iterator begin() const { return lines.begin(); }$/;"	f	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	typeref:typename:const_iterator
begin	vendor/spdlog/tests/catch.hpp	/^        const_iterator begin() const { return lines.begin(); }$/;"	f	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	typeref:typename:const_iterator
beginEnsureAllContextsInGroup	dependencies/include/v8-inspector.h	/^  virtual void beginEnsureAllContextsInGroup(int contextGroupId) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
beginUserGesture	dependencies/include/v8-inspector.h	/^  virtual void beginUserGesture() {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
begin_	vendor/spdlog/include/spdlog/fmt/bin_to_hex.h	/^    It begin_, end_;$/;"	m	class:spdlog::details::bytes_range	typeref:typename:It
beige	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    beige = 0xF5F5DC,                   \/\/ rgb(245,245,220)$/;"	e	enum:color
bench	vendor/spdlog/bench/CMakeLists.txt	/^add_executable(bench bench.cpp)$/;"	t
bench	vendor/spdlog/bench/Makefile	/^bench: bench.cpp$/;"	t
bench	vendor/spdlog/bench/bench.cpp	/^void bench(int howmany, std::shared_ptr<spdlog::logger> log)$/;"	f	typeref:typename:void
bench_c_string	vendor/spdlog/bench/bench.cpp	/^void bench_c_string(int howmany, std::shared_ptr<spdlog::logger> log)$/;"	f	typeref:typename:void
bench_c_string	vendor/spdlog/bench/latency.cpp	/^void bench_c_string(benchmark::State &state, std::shared_ptr<spdlog::logger> logger)$/;"	f	typeref:typename:void
bench_default_api	vendor/spdlog/bench/bench.cpp	/^void bench_default_api(int howmany, std::shared_ptr<spdlog::logger> log)$/;"	f	typeref:typename:void
bench_disabled_macro	vendor/spdlog/bench/latency.cpp	/^void bench_disabled_macro(benchmark::State &state, std::shared_ptr<spdlog::logger> logger)$/;"	f	typeref:typename:void
bench_formatter	vendor/spdlog/bench/formatter-bench.cpp	/^void bench_formatter(benchmark::State &state, std::string pattern)$/;"	f	typeref:typename:void
bench_formatters	vendor/spdlog/bench/formatter-bench.cpp	/^void bench_formatters()$/;"	f	typeref:typename:void
bench_logger	vendor/spdlog/bench/latency.cpp	/^void bench_logger(benchmark::State &state, std::shared_ptr<spdlog::logger> logger)$/;"	f	typeref:typename:void
bench_mt	vendor/spdlog/bench/async_bench.cpp	/^void bench_mt(int howmany, std::shared_ptr<spdlog::logger> logger, int thread_count)$/;"	f	typeref:typename:void
bench_mt	vendor/spdlog/bench/bench.cpp	/^void bench_mt(int howmany, std::shared_ptr<spdlog::logger> log, int thread_count)$/;"	f	typeref:typename:void
bench_scoped_pad	vendor/spdlog/bench/formatter-bench.cpp	/^void bench_scoped_pad(benchmark::State &state, size_t wrapped_size, spdlog::details::padding_inf/;"	f	typeref:typename:void
between	vendor/spdlog/tests/catch.hpp	/^    CompositeGenerator<T> between( T from, T to ) {$/;"	f	namespace:Catch::Generators	typeref:typename:CompositeGenerator<T>
bi_iterator	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typedef std::back_insert_iterator<Container> bi_iterator;$/;"	t	function:internal::get_container	typeref:typename:std::back_insert_iterator<Container>
bin_writer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    struct bin_writer {$/;"	s	struct:basic_writer::int_writer
binaries	vendor/spdlog/bench/Makefile	/^binaries=bench async_bench latency formatter-bench$/;"	m
binary_example	vendor/spdlog/example/example.cpp	/^void binary_example()$/;"	f	typeref:typename:void
bind	vendor/spdlog/tests/catch.hpp	/^            void bind( M C::* field, std::string const& placeholder ) {$/;"	f	class:Clara::CommandLine::ArgBuilder	typeref:typename:void
bind	vendor/spdlog/tests/catch.hpp	/^            void bind( bool C::* field ) {$/;"	f	class:Clara::CommandLine::ArgBuilder	typeref:typename:void
bind	vendor/spdlog/tests/catch.hpp	/^            void bind( void (* binaryFunction)( C&, T ), std::string const& placeholder ) {$/;"	f	class:Clara::CommandLine::ArgBuilder	typeref:typename:void
bind	vendor/spdlog/tests/catch.hpp	/^            void bind( void (* unaryFunction)( C& ) ) {$/;"	f	class:Clara::CommandLine::ArgBuilder	typeref:typename:void
bind	vendor/spdlog/tests/catch.hpp	/^            void bind( void (C::* nullaryMethod)() ) {$/;"	f	class:Clara::CommandLine::ArgBuilder	typeref:typename:void
bind	vendor/spdlog/tests/catch.hpp	/^            void bind( void (C::* unaryMethod)( M ), std::string const& placeholder ) {$/;"	f	class:Clara::CommandLine::ArgBuilder	typeref:typename:void
bind	vendor/spdlog/tests/catch.hpp	/^            void bind( void (C::* unaryMethod)( bool ) ) {$/;"	f	class:Clara::CommandLine::ArgBuilder	typeref:typename:void
bindProcessName	vendor/spdlog/tests/catch.hpp	/^        void bindProcessName( M C::* field ) {$/;"	f	class:Clara::CommandLine	typeref:typename:void
bindProcessName	vendor/spdlog/tests/catch.hpp	/^        void bindProcessName( void (C::*_unaryMethod)( M ) ) {$/;"	f	class:Clara::CommandLine	typeref:typename:void
bind_id	dependencies/include/libplatform/v8-tracing.h	/^  uint64_t bind_id() const { return bind_id_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:uint64_t
bind_id_	dependencies/include/libplatform/v8-tracing.h	/^  uint64_t bind_id_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:uint64_t
bisque	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    bisque = 0xFFE4C4,                  \/\/ rgb(255,228,196)$/;"	e	enum:color
bit_cast	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline Dest bit_cast(const Source& source) {$/;"	f	namespace:internal	typeref:typename:Dest
bitsPerPixel	dependencies/include/SFML/Window/VideoMode.hpp	/^    unsigned int bitsPerPixel; \/\/\/< Video mode pixel depth, in bits per pixels$/;"	m	class:sf::VideoMode	typeref:typename:unsigned int
black	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    black = 0x000000,                   \/\/ rgb(0,0,0)$/;"	e	enum:color
black	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string black = "\\033[30m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
blackhole_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  mutable T blackhole_;$/;"	m	class:internal::counting_iterator	typeref:typename:T
blackhole_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  mutable typename traits::value_type blackhole_;$/;"	m	class:internal::truncating_iterator	typeref:typename:traits::value_type
blanched_almond	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    blanched_almond = 0xFFEBCD,         \/\/ rgb(255,235,205)$/;"	e	enum:color
blendMode	dependencies/include/SFML/Graphics/RenderStates.hpp	/^    BlendMode      blendMode; \/\/\/< Blending mode$/;"	m	class:sf::RenderStates	typeref:typename:BlendMode
blink	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string blink = "\\033[5m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
block	vendor/spdlog/include/spdlog/async_logger.h	/^    block,         \/\/ Block until message can be enqueued$/;"	e	enum:spdlog::async_overflow_policy
blue	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    blue = 0x0000FF,                    \/\/ rgb(0,0,255)$/;"	e	enum:color
blue	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string blue = "\\033[34m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
blue_violet	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    blue_violet = 0x8A2BE2,             \/\/ rgb(138,43,226)$/;"	e	enum:color
bold	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string bold = "\\033[1m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
bool_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  int_type, uint_type, long_long_type, ulong_long_type, bool_type, char_type,$/;"	e	enum:internal::type
bothOrAll	vendor/spdlog/tests/catch.hpp	/^        std::string bothOrAll( std::size_t count ) const {$/;"	f	struct:Catch::CompactReporter	typeref:typename:std::string
boundField	vendor/spdlog/tests/catch.hpp	/^        Detail::BoundArgFunction<ConfigT> boundField;$/;"	m	struct:Clara::CommonArgProperties	typeref:typename:Detail::BoundArgFunction<ConfigT>
bounds	dependencies/include/SFML/Graphics/Glyph.hpp	/^    FloatRect bounds;      \/\/\/< Bounding rectangle of the glyph, in coordinates relative to t/;"	m	class:sf::Glyph	typeref:typename:FloatRect
branchName	vendor/spdlog/tests/catch.hpp	/^        char const* const branchName;$/;"	m	struct:Catch::Version	typeref:typename:char const * const
brown	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    brown = 0xA52A2A,                   \/\/ rgb(165,42,42)$/;"	e	enum:color
buf	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    fmt::memory_buffer buf;$/;"	v	typeref:typename:fmt::memory_buffer
buffer	dependencies/include/v8.h	/^  std::unique_ptr<const uint8_t[]> buffer;$/;"	m	struct:v8::OwnedBuffer	typeref:typename:std::unique_ptr<const uint8_t[]>
buffer	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^typedef basic_buffer<char> buffer;$/;"	t	namespace:internal	typeref:typename:basic_buffer<char>
buffer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    basic_memory_buffer<char_type> &buffer;$/;"	m	struct:basic_writer::double_writer	typeref:typename:basic_memory_buffer<char_type> &
buffer_	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^    char *&buffer_;$/;"	m	class:__anon3d87c0370110::safe_strerror::dispatcher	typeref:typename:char * &
buffer_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  char *buffer_;$/;"	m	class:internal::decimal_formatter	typeref:typename:char *
buffer_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  memory_buffer buffer_;$/;"	m	class:internal::utf16_to_utf8	typeref:typename:memory_buffer
buffer_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  mutable char buffer_[BUFFER_SIZE];$/;"	m	class:format_int	typeref:typename:char[]
buffer_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  wmemory_buffer buffer_;$/;"	m	class:internal::utf8_to_utf16	typeref:typename:wmemory_buffer
buffer_	vendor/spdlog/include/spdlog/fmt/bundled/ostream.h	/^  basic_buffer<Char> &buffer_;$/;"	m	class:internal::formatbuf	typeref:typename:basic_buffer<Char> &
buffer_context	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct buffer_context {$/;"	s
buffer_policy	dependencies/include/v8.h	/^    BufferPolicy buffer_policy;$/;"	m	struct:v8::ScriptCompiler::CachedData	typeref:typename:BufferPolicy
buffer_size_	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^    std::size_t buffer_size_;$/;"	m	class:__anon3d87c0370110::safe_strerror::dispatcher	typeref:typename:std::size_t
buffered_file	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  buffered_file() FMT_NOEXCEPT : file_(FMT_NULL) {}$/;"	f	class:buffered_file
buffered_file	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  buffered_file(buffered_file &&other) FMT_NOEXCEPT : file_(other.file_) {$/;"	f	class:buffered_file
buffered_file	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  explicit buffered_file(FILE *f) : file_(f) {}$/;"	f	class:buffered_file
buffered_file	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^class buffered_file {$/;"	c
build	vendor/spdlog/tests/catch.hpp	/^    AssertionResult ResultBuilder::build() const$/;"	f	class:Catch::ResultBuilder	typeref:typename:AssertionResult
buildNumber	vendor/spdlog/tests/catch.hpp	/^        unsigned int const buildNumber;$/;"	m	struct:Catch::Version	typeref:typename:unsigned int const
burly_wood	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    burly_wood = 0xDEB887,              \/\/ rgb(222,184,135)$/;"	e	enum:color
button	dependencies/include/SFML/Window/Event.hpp	/^        Mouse::Button button; \/\/\/< Code of the button that has been pressed$/;"	m	struct:sf::Event::MouseButtonEvent	typeref:typename:Mouse::Button
button	dependencies/include/SFML/Window/Event.hpp	/^        unsigned int button;     \/\/\/< Index of the button that has been pressed (in range [0 /;"	m	struct:sf::Event::JoystickButtonEvent	typeref:typename:unsigned int
byte_length_	dependencies/include/v8.h	/^    size_t byte_length_;$/;"	m	class:v8::ArrayBuffer::Contents	typeref:typename:size_t
byte_length_	dependencies/include/v8.h	/^    size_t byte_length_;$/;"	m	class:v8::SharedArrayBuffer::Contents	typeref:typename:size_t
bytes_range	vendor/spdlog/include/spdlog/fmt/bin_to_hex.h	/^    bytes_range(It range_begin, It range_end)$/;"	f	class:spdlog::details::bytes_range
bytes_range	vendor/spdlog/include/spdlog/fmt/bin_to_hex.h	/^class bytes_range$/;"	c	namespace:spdlog::details
c_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit c_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::c_formatter
c_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class c_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
c_str	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  const char *c_str() const { return &buffer_[0]; }$/;"	f	class:internal::utf16_to_utf8	typeref:typename:const char *
c_str	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  const char *c_str() const {$/;"	f	class:format_int	typeref:typename:const char *
c_str	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  const wchar_t *c_str() const { return &buffer_[0]; }$/;"	f	class:internal::utf8_to_utf16	typeref:typename:const wchar_t *
c_str	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  const Char *c_str() const { return data_; }$/;"	f	class:basic_cstring_view	typeref:typename:const Char *
cache_refresh	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    const std::chrono::seconds cache_refresh = std::chrono::seconds(5);$/;"	m	class:spdlog::details::z_formatter	typeref:typename:const std::chrono::seconds
cache_timestamp_	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    std::chrono::seconds cache_timestamp_{0};$/;"	m	class:spdlog::details::full_formatter	typeref:typename:std::chrono::seconds
cached_data	dependencies/include/v8.h	/^    CachedData* cached_data;$/;"	m	class:v8::ScriptCompiler::Source	typeref:typename:CachedData *
cached_datetime_	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    fmt::basic_memory_buffer<char, 128> cached_datetime_;$/;"	m	class:spdlog::details::full_formatter	typeref:typename:fmt::basic_memory_buffer<char,128>
cached_tm_	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    std::tm cached_tm_;$/;"	m	class:spdlog::pattern_formatter	typeref:typename:std::tm
cadet_blue	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    cadet_blue = 0x5F9EA0,              \/\/ rgb(95,158,160)$/;"	e	enum:color
calc_filename	vendor/spdlog/include/spdlog/sinks/daily_file_sink.h	/^    static filename_t calc_filename(const filename_t &filename, const tm &now_tm)$/;"	f	struct:spdlog::sinks::daily_filename_calculator	typeref:typename:filename_t
calc_filename	vendor/spdlog/include/spdlog/sinks/rotating_file_sink.h	/^    static filename_t calc_filename(const filename_t &filename, std::size_t index)$/;"	f	class:spdlog::sinks::rotating_file_sink	typeref:typename:filename_t
calc_filename	vendor/spdlog/tests/test_file_logging.cpp	/^    static spdlog::filename_t calc_filename(const spdlog::filename_t &basename, const tm &now_tm/;"	f	struct:custom_daily_file_name_calculator	typeref:typename:spdlog::filename_t	file:
callback_	dependencies/include/v8.h	/^  Callback* callback_;$/;"	m	class:v8::WeakCallbackInfo	typeref:typename:Callback *
canExecuteScripts	dependencies/include/v8-inspector.h	/^  virtual bool canExecuteScripts(int contextGroupId) { return true; }$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:bool
cancelTimer	dependencies/include/v8-inspector.h	/^  virtual void cancelTimer(void* data) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
capacity	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  std::size_t capacity() const FMT_NOEXCEPT { return capacity_; }$/;"	f	class:internal::basic_buffer	typeref:typename:std::size_t
capacity_	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  std::size_t capacity_;$/;"	m	class:internal::basic_buffer	typeref:typename:std::size_t
captureExpression	vendor/spdlog/tests/catch.hpp	/^    ResultBuilder& captureExpression( RhsT const& rhs ) {$/;"	f	class:Catch::ExpressionLhs	typeref:typename:ResultBuilder &
captureExpression	vendor/spdlog/tests/catch.hpp	/^    void ResultBuilder::captureExpression() {$/;"	f	class:Catch::ResultBuilder	typeref:typename:void
captureResult	vendor/spdlog/tests/catch.hpp	/^    void ResultBuilder::captureResult( ResultWas::OfType resultType ) {$/;"	f	class:Catch::ResultBuilder	typeref:typename:void
capturedExpression	vendor/spdlog/tests/catch.hpp	/^        std::string capturedExpression;$/;"	m	struct:Catch::AssertionInfo	typeref:typename:std::string
category_enabled_flag	dependencies/include/libplatform/v8-tracing.h	/^  const uint8_t* category_enabled_flag() const {$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:const uint8_t *
category_enabled_flag_	dependencies/include/libplatform/v8-tracing.h	/^  const uint8_t* category_enabled_flag_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:const uint8_t *
center	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^        center$/;"	e	enum:spdlog::details::padding_info::pad_side
cerr	vendor/spdlog/tests/catch.hpp	/^    std::ostream& cerr() {$/;"	f	namespace:Catch	typeref:typename:std::ostream &
ch_	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    char ch_;$/;"	m	class:spdlog::details::ch_formatter	typeref:typename:char
ch_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit ch_formatter(char ch)$/;"	f	class:spdlog::details::ch_formatter
ch_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class ch_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
channelCount	dependencies/include/SFML/Audio/SoundFileReader.hpp	/^        unsigned int channelCount; \/\/\/< Number of channels of the sound$/;"	m	struct:sf::SoundFileReader::Info	typeref:typename:unsigned int
char8_t	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct char8_t {$/;"	s
char_converter	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  explicit char_converter(basic_format_arg<Context> &arg) : arg_(arg) {}$/;"	f	class:internal::char_converter
char_converter	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^class char_converter: public function<void> {$/;"	c	namespace:internal
char_size	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^  static FMT_CONSTEXPR_DECL const int char_size =$/;"	m	class:internal::fp	typeref:typename:FMT_CONSTEXPR_DECL const int
char_spec_handler	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    char_spec_handler(arg_formatter_base& f, char_type val)$/;"	f	struct:internal::arg_formatter_base::char_spec_handler
char_spec_handler	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  struct char_spec_handler : internal::error_handler {$/;"	s	class:internal::arg_formatter_base
char_specs_checker	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR char_specs_checker(CharType type, ErrorHandler eh)$/;"	f	class:internal::char_specs_checker	typeref:typename:FMT_CONSTEXPR
char_specs_checker	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class char_specs_checker : public ErrorHandler {$/;"	c	namespace:internal
char_t	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typedef typename internal::format_string_traits<String>::char_type char_t;$/;"	t	function:format	typeref:typename:internal::format_string_traits<String>::char_type
char_traits	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct char_traits<char> {$/;"	s	namespace:internal
char_traits	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct char_traits<wchar_t> {$/;"	s	namespace:internal
char_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  int_type, uint_type, long_long_type, ulong_long_type, bool_type, char_type,$/;"	e	enum:internal::type
char_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typedef Char char_type;$/;"	t	class:basic_format_context	typeref:typename:Char
char_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typedef Char char_type;$/;"	t	class:basic_parse_context	typeref:typename:Char
char_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typedef Char char_type;$/;"	t	class:basic_string_view	typeref:typename:Char
char_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typedef Char char_type;$/;"	t	class:internal::context_base	typeref:typename:Char
char_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typedef typename Context::char_type char_type;$/;"	t	class:basic_format_arg	typeref:typename:Context::char_type
char_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typedef typename Context::char_type char_type;$/;"	t	class:internal::arg_map	typeref:typename:Context::char_type
char_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typedef typename Context::char_type char_type;$/;"	t	class:internal::value	typeref:typename:Context::char_type
char_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typedef typename Context::char_type char_type;$/;"	t	function:visit	typeref:typename:Context::char_type
char_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct format_string_traits_base { typedef Char char_type; };$/;"	t	struct:internal::format_string_traits_base	typeref:typename:Char
char_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef Char char_type;$/;"	t	class:internal::add_thousands_sep	typeref:typename:Char
char_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef char char_type;$/;"	t	struct:internal::no_thousands_sep	typeref:typename:char
char_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef typename Context::char_type char_type;$/;"	t	class:internal::specs_handler	typeref:typename:Context::char_type
char_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef typename Context::char_type char_type;$/;"	t	function:internal::handle_dynamic_spec	typeref:typename:Context::char_type
char_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef typename ParseContext::char_type char_type;$/;"	t	class:internal::dynamic_specs_handler	typeref:typename:ParseContext::char_type
char_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef typename Range::value_type char_type;$/;"	t	class:arg_formatter	typeref:typename:Range::value_type
char_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef typename Range::value_type char_type;$/;"	t	class:basic_writer	typeref:typename:Range::value_type
char_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef typename Range::value_type char_type;$/;"	t	class:internal::arg_formatter_base	typeref:typename:Range::value_type
char_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef typename ThousandsSep::char_type char_type;$/;"	t	function:internal::format_decimal	typeref:typename:ThousandsSep::char_type
char_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef typename std::iterator_traits<Iterator>::value_type char_type;$/;"	t	function:internal::parse_arg_id	typeref:typename:std::iterator_traits<Iterator>::value_type
char_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef typename std::iterator_traits<Iterator>::value_type char_type;$/;"	t	function:internal::parse_format_specs	typeref:typename:std::iterator_traits<Iterator>::value_type
char_type	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  typedef Char char_type;$/;"	t	class:basic_printf_context	typeref:typename:Char
char_type	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  typedef typename Range::value_type char_type;$/;"	t	class:printf_arg_formatter	typeref:typename:Range::value_type
char_writer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  struct char_writer {$/;"	s	class:internal::arg_formatter_base
characters16	dependencies/include/v8-inspector.h	/^  const uint16_t* characters16() const { return m_characters16; }$/;"	f	class:v8_inspector::StringView	typeref:typename:const uint16_t *
characters8	dependencies/include/v8-inspector.h	/^  const uint8_t* characters8() const { return m_characters8; }$/;"	f	class:v8_inspector::StringView	typeref:typename:const uint8_t *
chartreuse	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    chartreuse = 0x7FFF00,              \/\/ rgb(127,255,0)$/;"	e	enum:color
check	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^        bool (*check)(InputStream&);$/;"	m	struct:sf::SoundFileFactory::ReaderFactory	typeref:typename:bool (*)(InputStream &)
check	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^        bool (*check)(const std::string&);$/;"	m	struct:sf::SoundFileFactory::WriterFactory	typeref:typename:bool (*)(const std::string &)
check_arg_id	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR bool check_arg_id(unsigned) {$/;"	f	class:basic_parse_context	typeref:typename:FMT_CONSTEXPR bool
check_arg_id	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  void check_arg_id(basic_string_view<Char>) {}$/;"	f	class:basic_parse_context	typeref:typename:void
check_arg_id	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void check_arg_id() {$/;"	f	class:internal::format_string_checker	typeref:typename:FMT_CONSTEXPR void
check_format_string	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    check_format_string(String format_str) {$/;"	f	namespace:internal	typeref:typename:std::enable_if<is_compile_string<String>::value>::type
check_format_string	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR bool check_format_string($/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR bool
check_pointer_type_spec	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void check_pointer_type_spec(Char spec, ErrorHandler &&eh) {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR void
check_sign	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void check_sign() {$/;"	f	class:internal::specs_checker	typeref:typename:FMT_CONSTEXPR void
check_string_type_spec	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void check_string_type_spec(Char spec, ErrorHandler &&eh) {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR void
checked	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct checked { typedef stdext::checked_array_iterator<T*> type; };$/;"	s	namespace:internal
childSections	vendor/spdlog/tests/catch.hpp	/^            ChildSections childSections;$/;"	m	struct:Catch::CumulativeReporterBase::SectionNode	typeref:typename:ChildSections
children	dependencies/include/v8-profiler.h	/^    std::vector<Node*> children;$/;"	m	struct:v8::AllocationProfile::Node	typeref:typename:std::vector<Node * >
children	vendor/spdlog/tests/catch.hpp	/^            ChildNodes children;$/;"	m	struct:Catch::CumulativeReporterBase::Node	typeref:typename:ChildNodes
chocolate	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    chocolate = 0xD2691E,               \/\/ rgb(210,105,30)$/;"	e	enum:color
chunk_	dependencies/include/libplatform/v8-tracing.h	/^  TraceObject chunk_[kChunkSize];$/;"	m	class:v8::platform::tracing::TraceBufferChunk	typeref:typename:TraceObject[]
circular_q	vendor/spdlog/include/spdlog/details/circular_q.h	/^    explicit circular_q(size_t max_items)$/;"	f	class:spdlog::details::circular_q
circular_q	vendor/spdlog/include/spdlog/details/circular_q.h	/^class circular_q$/;"	c	namespace:spdlog::details
clang35	vendor/spdlog/.travis.yml	/^addons: &clang35$/;"	a
clang6	vendor/spdlog/.travis.yml	/^addons: &clang6$/;"	a
className	vendor/spdlog/tests/catch.hpp	/^        std::string className;$/;"	m	struct:Catch::TestCaseInfo	typeref:typename:std::string
clean	src/Game.cpp	/^void Game::clean(){$/;"	f	class:Game	typeref:typename:void
clean	vendor/spdlog/bench/Makefile	/^clean:$/;"	t
clean	vendor/spdlog/example/Makefile	/^clean:$/;"	t
clean	vendor/spdlog/tests/Makefile	/^clean:$/;"	t
cleanUp	vendor/spdlog/tests/catch.hpp	/^    void cleanUp() {$/;"	f	namespace:Catch	typeref:typename:void
cleanUpContext	vendor/spdlog/tests/catch.hpp	/^    void cleanUpContext() {$/;"	f	namespace:Catch	typeref:typename:void
clear	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  void clear() { size_ = 0; }$/;"	f	class:internal::basic_buffer	typeref:typename:void
clear_line	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string clear_line = "\\033[K";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
cli	vendor/spdlog/tests/catch.hpp	/^        Clara::CommandLine<ConfigData> const& cli() const {$/;"	f	class:Catch::Session	typeref:typename:Clara::CommandLine<ConfigData> const &
clone	vendor/spdlog/include/spdlog/details/async_logger_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::async_logger::clone(std::string new_name)$/;"	f	class:spdlog::async_logger	typeref:typename:std::shared_ptr<spdlog::logger>
clone	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::logger::clone(std::string logger_name)$/;"	f	class:spdlog::logger	typeref:typename:std::shared_ptr<spdlog::logger>
clone	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    std::unique_ptr<formatter> clone() const override$/;"	f	class:spdlog::pattern_formatter	typeref:typename:std::unique_ptr<formatter>
clone	vendor/spdlog/tests/catch.hpp	/^            virtual IArgFunction<C>* clone() const { return new BoundBinaryFunction( *this ); }$/;"	f	struct:Clara::Detail::BoundBinaryFunction	typeref:typename:IArgFunction<C> *
clone	vendor/spdlog/tests/catch.hpp	/^            virtual IArgFunction<C>* clone() const { return new BoundDataMember( *this ); }$/;"	f	struct:Clara::Detail::BoundDataMember	typeref:typename:IArgFunction<C> *
clone	vendor/spdlog/tests/catch.hpp	/^            virtual IArgFunction<C>* clone() const { return new BoundNullaryMethod( *this ); }$/;"	f	struct:Clara::Detail::BoundNullaryMethod	typeref:typename:IArgFunction<C> *
clone	vendor/spdlog/tests/catch.hpp	/^            virtual IArgFunction<C>* clone() const { return new BoundUnaryFunction( *this ); }$/;"	f	struct:Clara::Detail::BoundUnaryFunction	typeref:typename:IArgFunction<C> *
clone	vendor/spdlog/tests/catch.hpp	/^            virtual IArgFunction<C>* clone() const { return new BoundUnaryMethod( *this ); }$/;"	f	struct:Clara::Detail::BoundUnaryMethod	typeref:typename:IArgFunction<C> *
clone	vendor/spdlog/tests/catch.hpp	/^            virtual IArgFunction<C>* clone() const { return new NullBinder( *this ); }$/;"	f	struct:Clara::Detail::NullBinder	typeref:typename:IArgFunction<C> *
clone	vendor/spdlog/tests/catch.hpp	/^        virtual Ptr<Matcher<ExpressionT> > clone() const {$/;"	f	struct:Catch::Matchers::Impl::MatcherImpl	typeref:typename:Ptr<Matcher<ExpressionT>>
clone_example	vendor/spdlog/example/example.cpp	/^void clone_example()$/;"	f	typeref:typename:void
cloned	vendor/spdlog/tests/test_misc.cpp	/^    auto cloned = logger->clone("clone");$/;"	v	typeref:typename:auto
close	vendor/spdlog/include/spdlog/details/file_helper.h	/^    void close()$/;"	f	class:spdlog::details::file_helper	typeref:typename:void
clz	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline uint32_t clz(uint32_t x) {$/;"	f	namespace:internal	typeref:typename:uint32_t
clzll	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline uint32_t clzll(uint64_t x) {$/;"	f	namespace:internal	typeref:typename:uint32_t
code	dependencies/include/SFML/Window/Event.hpp	/^        Keyboard::Key code;    \/\/\/< Code of the key that has been pressed$/;"	m	struct:sf::Event::KeyEvent	typeref:typename:Keyboard::Key
code	dependencies/include/v8.h	/^  MemoryRange code;$/;"	m	struct:v8::JSEntryStub	typeref:typename:MemoryRange
code_range	dependencies/include/v8.h	/^  MemoryRange code_range;$/;"	m	struct:v8::UnwindState	typeref:typename:MemoryRange
color	dependencies/include/SFML/Graphics/Vertex.hpp	/^    Color     color;     \/\/\/< Color of the vertex$/;"	m	class:sf::Vertex	typeref:typename:Color
color	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^enum class color : uint32_t$/;"	g	typeref:typename:uint32_t
colorDstFactor	dependencies/include/SFML/Graphics/BlendMode.hpp	/^    Factor   colorDstFactor; \/\/\/< Destination blending factor for the color channels$/;"	m	struct:sf::BlendMode	typeref:typename:Factor
colorEquation	dependencies/include/SFML/Graphics/BlendMode.hpp	/^    Equation colorEquation;  \/\/\/< Blending equation for the color channels$/;"	m	struct:sf::BlendMode	typeref:typename:Equation
colorSrcFactor	dependencies/include/SFML/Graphics/BlendMode.hpp	/^    Factor   colorSrcFactor; \/\/\/< Source blending factor for the color channels$/;"	m	struct:sf::BlendMode	typeref:typename:Factor
color_range_end	vendor/spdlog/include/spdlog/details/log_msg.h	/^    mutable size_t color_range_end{0};$/;"	m	struct:spdlog::details::log_msg	typeref:typename:size_t
color_range_start	vendor/spdlog/include/spdlog/details/log_msg.h	/^    mutable size_t color_range_start{0};$/;"	m	struct:spdlog::details::log_msg	typeref:typename:size_t
color_start_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit color_start_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::color_start_formatter
color_start_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class color_start_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
color_stop_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit color_stop_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::color_stop_formatter
color_stop_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class color_stop_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
colors_	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    std::unordered_map<level::level_enum, std::string, level::level_hasher> colors_;$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:std::unordered_map<level::level_enum,std::string,level::level_hasher>
colors_	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    std::unordered_map<level::level_enum, WORD, level::level_hasher> colors_;$/;"	m	class:spdlog::sinks::wincolor_sink	typeref:typename:std::unordered_map<level::level_enum,WORD,level::level_hasher>
colour	vendor/spdlog/tests/catch.hpp	/^            Colour::Code colour;$/;"	m	class:Catch::ConsoleReporter::AssertionPrinter	typeref:typename:Colour::Code
colour	vendor/spdlog/tests/catch.hpp	/^            Colour::Code colour;$/;"	m	struct:Catch::ConsoleReporter::SummaryColumn	typeref:typename:Colour::Code
column_number	dependencies/include/v8-profiler.h	/^    int column_number;$/;"	m	struct:v8::AllocationProfile::Node	typeref:typename:int
column_number_	dependencies/include/v8.h	/^  int column_number_;$/;"	m	class:v8::Location	typeref:typename:int
commands	vendor/spdlog/tests/catch.hpp	/^            std::string commands() const {$/;"	f	struct:Clara::CommandLine::Arg	typeref:typename:std::string
compare	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  int compare(basic_string_view other) const {$/;"	f	class:basic_string_view	typeref:typename:int
compare	vendor/spdlog/tests/catch.hpp	/^    bool compare( T1 const& lhs, T2 const& rhs ) {$/;"	f	namespace:Catch::Internal	typeref:typename:bool
compare	vendor/spdlog/tests/catch.hpp	/^    template<Operator Op, typename T> bool compare( T* lhs, int rhs ) {$/;"	f	namespace:Catch::Internal	typeref:typename:bool
compare	vendor/spdlog/tests/catch.hpp	/^    template<Operator Op, typename T> bool compare( T* lhs, long rhs ) {$/;"	f	namespace:Catch::Internal	typeref:typename:bool
compare	vendor/spdlog/tests/catch.hpp	/^    template<Operator Op, typename T> bool compare( T* lhs, std::nullptr_t ) {$/;"	f	namespace:Catch::Internal	typeref:typename:bool
compare	vendor/spdlog/tests/catch.hpp	/^    template<Operator Op, typename T> bool compare( int lhs, T* rhs ) {$/;"	f	namespace:Catch::Internal	typeref:typename:bool
compare	vendor/spdlog/tests/catch.hpp	/^    template<Operator Op, typename T> bool compare( long lhs, T* rhs ) {$/;"	f	namespace:Catch::Internal	typeref:typename:bool
compare	vendor/spdlog/tests/catch.hpp	/^    template<Operator Op, typename T> bool compare( std::nullptr_t, T* rhs ) {$/;"	f	namespace:Catch::Internal	typeref:typename:bool
compare	vendor/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( int lhs, unsigned char rhs ) {$/;"	f	namespace:Catch::Internal	typeref:typename:bool
compare	vendor/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( int lhs, unsigned int rhs ) {$/;"	f	namespace:Catch::Internal	typeref:typename:bool
compare	vendor/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( int lhs, unsigned long rhs ) {$/;"	f	namespace:Catch::Internal	typeref:typename:bool
compare	vendor/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( long lhs, unsigned char rhs ) {$/;"	f	namespace:Catch::Internal	typeref:typename:bool
compare	vendor/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( long lhs, unsigned int rhs ) {$/;"	f	namespace:Catch::Internal	typeref:typename:bool
compare	vendor/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( long lhs, unsigned long rhs ) {$/;"	f	namespace:Catch::Internal	typeref:typename:bool
compare	vendor/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( unsigned char lhs, int rhs ) {$/;"	f	namespace:Catch::Internal	typeref:typename:bool
compare	vendor/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( unsigned char lhs, long rhs ) {$/;"	f	namespace:Catch::Internal	typeref:typename:bool
compare	vendor/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( unsigned int lhs, int rhs ) {$/;"	f	namespace:Catch::Internal	typeref:typename:bool
compare	vendor/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( unsigned int lhs, long rhs ) {$/;"	f	namespace:Catch::Internal	typeref:typename:bool
compare	vendor/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( unsigned long lhs, int rhs ) {$/;"	f	namespace:Catch::Internal	typeref:typename:bool
compare	vendor/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( unsigned long lhs, long rhs ) {$/;"	f	namespace:Catch::Internal	typeref:typename:bool
compile_pattern_	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void compile_pattern_(const std::string &pattern)$/;"	f	class:spdlog::pattern_formatter	typeref:typename:void
compile_string	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct compile_string {};$/;"	s
compute_boundaries	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^  void compute_boundaries(fp &lower, fp &upper) const {$/;"	f	class:internal::fp	typeref:typename:void
concealed	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string concealed = "\\033[8m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
conditional_helper	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^struct conditional_helper {};$/;"	s	namespace:internal
config	vendor/spdlog/tests/catch.hpp	/^        Config& config() {$/;"	f	class:Catch::Session	typeref:typename:Config &
config	vendor/spdlog/tests/catch.hpp	/^        Ptr<IConfig const> config() const {$/;"	f	class:Catch::RunContext	typeref:typename:Ptr<IConfig const>
configData	vendor/spdlog/tests/catch.hpp	/^        ConfigData& configData() {$/;"	f	class:Catch::Session	typeref:typename:ConfigData &
config_install_dir	vendor/spdlog/CMakeLists.txt	/^set(config_install_dir "${CMAKE_INSTALL_LIBDIR}\/cmake\/${PROJECT_NAME}")$/;"	v
consoleAPIMessage	dependencies/include/v8-inspector.h	/^  virtual void consoleAPIMessage(int contextGroupId,$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
consoleClear	dependencies/include/v8-inspector.h	/^  virtual void consoleClear(int contextGroupId) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
consoleTime	dependencies/include/v8-inspector.h	/^  virtual void consoleTime(const StringView& title) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
consoleTimeEnd	dependencies/include/v8-inspector.h	/^  virtual void consoleTimeEnd(const StringView& title) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
consoleTimeStamp	dependencies/include/v8-inspector.h	/^  virtual void consoleTimeStamp(const StringView& title) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
consoleWidth	vendor/spdlog/tests/catch.hpp	/^    const unsigned int consoleWidth = CLARA_CONFIG_CONSOLE_WIDTH;$/;"	v	namespace:Clara::Detail	typeref:typename:const unsigned int
consoleWidth	vendor/spdlog/tests/catch.hpp	/^    const unsigned int consoleWidth = TBC_TEXT_FORMAT_CONSOLE_WIDTH;$/;"	v	namespace:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc	typeref:typename:const unsigned int
consoleWidth	vendor/spdlog/tests/catch.hpp	/^    const unsigned int consoleWidth = TBC_TEXT_FORMAT_CONSOLE_WIDTH;$/;"	v	namespace:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc	typeref:typename:const unsigned int
console_mutex	vendor/spdlog/include/spdlog/details/console_globals.h	/^struct console_mutex$/;"	s	namespace:spdlog::details
console_nullmutex	vendor/spdlog/include/spdlog/details/console_globals.h	/^struct console_nullmutex$/;"	s	namespace:spdlog::details
console_stderr	vendor/spdlog/include/spdlog/details/console_globals.h	/^struct console_stderr$/;"	s	namespace:spdlog::details
console_stdout	vendor/spdlog/include/spdlog/details/console_globals.h	/^struct console_stdout$/;"	s	namespace:spdlog::details
const	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^# define const$/;"	d	file:
const_check	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline T const_check(T value) { return value; }$/;"	f	namespace:internal	typeref:typename:T
const_iterator	vendor/spdlog/tests/catch.hpp	/^        typedef std::vector<std::string>::const_iterator const_iterator;$/;"	t	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	typeref:typename:std::vector<std::string>::const_iterator
const_iterator	vendor/spdlog/tests/catch.hpp	/^        typedef std::vector<std::string>::const_iterator const_iterator;$/;"	t	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	typeref:typename:std::vector<std::string>::const_iterator
const_reference	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typedef const T &const_reference;$/;"	t	class:internal::basic_buffer	typeref:typename:const T &
container_	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  Container &container_;$/;"	m	class:internal::container_buffer	typeref:typename:Container &
container_buffer	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  explicit container_buffer(Container &c)$/;"	f	class:internal::container_buffer
container_buffer	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^class container_buffer : public basic_buffer<typename Container::value_type> {$/;"	c	namespace:internal
contains	dependencies/include/SFML/Graphics/Rect.inl	/^bool Rect<T>::contains(T x, T y) const$/;"	f	class:Rect	typeref:typename:bool
contains	dependencies/include/SFML/Graphics/Rect.inl	/^bool Rect<T>::contains(const Vector2<T>& point) const$/;"	f	class:Rect	typeref:typename:bool
contains	vendor/spdlog/tests/catch.hpp	/^    bool contains( std::string const& s, std::string const& infix ) {$/;"	f	namespace:Catch	typeref:typename:bool
contents	vendor/spdlog/tests/test_async.cpp	/^    auto contents = file_contents(filename);$/;"	v	typeref:typename:auto
context	dependencies/include/v8-inspector.h	/^  v8::Local<v8::Context> context;$/;"	m	class:v8_inspector::V8ContextInfo	typeref:typename:v8::Local<v8::Context>
context	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  Context context;$/;"	m	struct:format_handler	typeref:typename:Context
contextGroupId	dependencies/include/v8-inspector.h	/^  int contextGroupId;$/;"	m	class:v8_inspector::V8ContextInfo	typeref:typename:int
context_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  Context &context_;$/;"	m	class:internal::specs_handler	typeref:typename:Context &
context_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  ParseContext &context_;$/;"	m	class:internal::dynamic_specs_handler	typeref:typename:ParseContext &
context_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  parse_context_type context_;$/;"	m	class:internal::format_string_checker	typeref:typename:parse_context_type
context_	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  context_type &context_;$/;"	m	class:printf_arg_formatter	typeref:typename:context_type &
context_base	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  context_base(OutputIt out, basic_string_view<char_type> format_str,$/;"	f	class:internal::context_base
context_base	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^class context_base {$/;"	c	namespace:internal
context_t	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typedef typename buffer_context<char_t>::type context_t;$/;"	t	function:format	typeref:typename:buffer_context<char_t>::type
context_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef basic_format_context<typename base::iterator, char_type> context_type;$/;"	t	class:arg_formatter	typeref:typename:basic_format_context<typename base::iterator,char_type>
context_type	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  typedef basic_printf_context<iterator, char_type> context_type;$/;"	t	class:printf_arg_formatter	typeref:typename:basic_printf_context<iterator,char_type>
control	dependencies/include/SFML/Window/Event.hpp	/^        bool          control; \/\/\/< Is the Control key pressed?$/;"	m	struct:sf::Event::KeyEvent	typeref:typename:bool
convert	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC int internal::utf16_to_utf8::convert(wstring_view s) {$/;"	f	class:internal::utf16_to_utf8	typeref:typename:FMT_FUNC int
convert	vendor/spdlog/tests/catch.hpp	/^        static std::string convert( T const& ) { return unprintableString; }$/;"	f	struct:Catch::Detail::EnumStringMaker	typeref:typename:std::string
convert	vendor/spdlog/tests/catch.hpp	/^        static std::string convert( T const& _value ) {$/;"	f	struct:Catch::Detail::StringMakerBase	typeref:typename:std::string
convert	vendor/spdlog/tests/catch.hpp	/^        static std::string convert( T const& v )$/;"	f	struct:Catch::Detail::EnumStringMaker	typeref:typename:std::string
convert	vendor/spdlog/tests/catch.hpp	/^        static std::string convert( T const& v )$/;"	f	struct:Catch::Detail::StringMakerBase	typeref:typename:std::string
convert	vendor/spdlog/tests/catch.hpp	/^    static std::string convert( R C::* p ) {$/;"	f	struct:Catch::StringMaker	typeref:typename:std::string
convert	vendor/spdlog/tests/catch.hpp	/^    static std::string convert( U* p ) {$/;"	f	struct:Catch::StringMaker	typeref:typename:std::string
convertInto	vendor/spdlog/tests/catch.hpp	/^        inline void convertInto( bool _source, bool& _dest ) {$/;"	f	namespace:Clara::Detail	typeref:typename:void
convertInto	vendor/spdlog/tests/catch.hpp	/^        inline void convertInto( bool, T& ) {$/;"	f	namespace:Clara::Detail	typeref:typename:void
convertInto	vendor/spdlog/tests/catch.hpp	/^        inline void convertInto( std::string const& _source, bool& _dest ) {$/;"	f	namespace:Clara::Detail	typeref:typename:void
convertInto	vendor/spdlog/tests/catch.hpp	/^        inline void convertInto( std::string const& _source, std::string& _dest ) {$/;"	f	namespace:Clara::Detail	typeref:typename:void
convertInto	vendor/spdlog/tests/catch.hpp	/^        void convertInto( std::string const& _source, T& _dest ) {$/;"	f	namespace:Clara::Detail	typeref:typename:void
convert_arg	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^void convert_arg(basic_format_arg<Context> &arg, Char type) {$/;"	f	namespace:internal	typeref:typename:void
convert_to_android_	vendor/spdlog/include/spdlog/sinks/android_sink.h	/^    static android_LogPriority convert_to_android_(spdlog::level::level_enum level)$/;"	f	class:spdlog::sinks::android_sink	typeref:typename:android_LogPriority
convert_to_int	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct convert_to_int {$/;"	s
convert_to_int	vendor/spdlog/include/spdlog/fmt/bundled/ostream.h	/^struct convert_to_int<T, Char, void> {$/;"	s
copy	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^void copy(char ch, OutputIterator out) {$/;"	f	namespace:internal	typeref:typename:void
copy	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^void copy(const RangeT &range, OutputIterator out) {$/;"	f	namespace:internal	typeref:typename:void
copy	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^void copy(const char *str, OutputIterator out) {$/;"	f	namespace:internal	typeref:typename:void
coral	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    coral = 0xFF7F50,                   \/\/ rgb(255,127,80)$/;"	e	enum:color
cornflower_blue	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    cornflower_blue = 0x6495ED,         \/\/ rgb(100,149,237)$/;"	e	enum:color
cornsilk	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    cornsilk = 0xFFF8DC,                \/\/ rgb(255,248,220)$/;"	e	enum:color
count	dependencies/include/SFML/System/Utf.inl	/^std::size_t Utf<16>::count(In begin, In end)$/;"	f	class:Utf	typeref:typename:std::size_t
count	dependencies/include/SFML/System/Utf.inl	/^std::size_t Utf<32>::count(In begin, In end)$/;"	f	class:Utf	typeref:typename:std::size_t
count	dependencies/include/SFML/System/Utf.inl	/^std::size_t Utf<8>::count(In begin, In end)$/;"	f	class:Utf	typeref:typename:std::size_t
count	dependencies/include/v8-profiler.h	/^    unsigned int count;$/;"	m	struct:v8::AllocationProfile::Allocation	typeref:typename:unsigned int
count	dependencies/include/v8-profiler.h	/^    unsigned int count;$/;"	m	struct:v8::AllocationProfile::Sample	typeref:typename:unsigned int
count	dependencies/include/v8-profiler.h	/^  uint32_t count;  \/\/ New value of count field for the interval with this index.$/;"	m	struct:v8::HeapStatsUpdate	typeref:typename:uint32_t
count	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  std::size_t count() const { return count_; }$/;"	f	class:internal::counting_iterator	typeref:typename:std::size_t
count	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  std::size_t count() const { return count_; }$/;"	f	class:internal::truncating_iterator	typeref:typename:std::size_t
count	vendor/spdlog/tests/catch.hpp	/^        std::size_t count;$/;"	m	struct:Catch::TagInfo	typeref:typename:std::size_t
count_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  std::size_t count_;$/;"	m	class:internal::counting_iterator	typeref:typename:std::size_t
count_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  std::size_t count_;$/;"	m	class:internal::truncating_iterator	typeref:typename:std::size_t
count_code_points	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC size_t internal::count_code_points(u8string_view s) {$/;"	f	class:internal	typeref:typename:FMT_FUNC size_t
count_digits	vendor/spdlog/include/spdlog/details/fmt_helper.h	/^inline unsigned count_digits(T n)$/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:unsigned
count_digits	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    unsigned count_digits() const {$/;"	f	struct:basic_writer::int_writer	typeref:typename:unsigned
count_digits	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline unsigned count_digits(uint32_t n) {$/;"	f	namespace:internal	typeref:typename:unsigned
count_digits	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline unsigned count_digits(uint64_t n) {$/;"	f	namespace:internal	typeref:typename:unsigned
count_lines	vendor/spdlog/bench/async_bench.cpp	/^int count_lines(const char *filename)$/;"	f	typeref:typename:int
count_lines	vendor/spdlog/tests/utils.cpp	/^std::size_t count_lines(const std::string &filename)$/;"	f	typeref:typename:std::size_t
count_type	vendor/spdlog/include/spdlog/details/fmt_helper.h	/^    using count_type = typename std::conditional<(sizeof(T) > sizeof(uint32_t)), uint64_t, uint3/;"	t	function:spdlog::details::fmt_helper::count_digits
counter	vendor/spdlog/tests/test_registry.cpp	/^    int counter = 0;$/;"	v	typeref:typename:int
counting_iterator	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  counting_iterator(): count_(0) {}$/;"	f	class:internal::counting_iterator
counting_iterator	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class counting_iterator {$/;"	c	namespace:internal
cout	vendor/spdlog/tests/catch.hpp	/^    std::ostream& cout() {$/;"	f	namespace:Catch	typeref:typename:std::ostream &
cpu_duration	dependencies/include/libplatform/v8-tracing.h	/^  uint64_t cpu_duration() { return cpu_duration_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:uint64_t
cpu_duration_	dependencies/include/libplatform/v8-tracing.h	/^  uint64_t cpu_duration_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:uint64_t
create	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^        SoundFileReader* (*create)();$/;"	m	struct:sf::SoundFileFactory::ReaderFactory	typeref:typename:SoundFileReader * (*)()
create	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^        SoundFileWriter* (*create)();$/;"	m	struct:sf::SoundFileFactory::WriterFactory	typeref:typename:SoundFileWriter * (*)()
create	vendor/spdlog/include/spdlog/async.h	/^    static std::shared_ptr<async_logger> create(std::string logger_name, SinkArgs &&... args)$/;"	f	struct:spdlog::async_factory_impl	typeref:typename:std::shared_ptr<async_logger>
create	vendor/spdlog/include/spdlog/spdlog.h	/^    static std::shared_ptr<spdlog::logger> create(std::string logger_name, SinkArgs &&... args)$/;"	f	struct:spdlog::synchronous_factory	typeref:typename:std::shared_ptr<spdlog::logger>
create	vendor/spdlog/include/spdlog/spdlog.h	/^inline std::shared_ptr<spdlog::logger> create(std::string logger_name, SinkArgs &&... sink_args)$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
create	vendor/spdlog/tests/catch.hpp	/^            virtual IStreamingReporter* create( ReporterConfig const& config ) const {$/;"	f	class:Catch::LegacyReporterRegistrar::ReporterFactory	typeref:typename:IStreamingReporter *
create	vendor/spdlog/tests/catch.hpp	/^            virtual IStreamingReporter* create( ReporterConfig const& config ) const {$/;"	f	class:Catch::ReporterRegistrar::ReporterFactory	typeref:typename:IStreamingReporter *
create	vendor/spdlog/tests/catch.hpp	/^        virtual IStreamingReporter* create( std::string const& name, Ptr<IConfig> const& config /;"	f	class:Catch::ReporterRegistry	typeref:typename:IStreamingReporter *
createGeneratorsForTest	vendor/spdlog/tests/catch.hpp	/^    IGeneratorsForTest* createGeneratorsForTest()$/;"	f	namespace:Catch	typeref:typename:IGeneratorsForTest *
createReader	dependencies/include/SFML/Audio/SoundFileFactory.inl	/^    template <typename T> SoundFileReader* createReader() {return new T;}$/;"	f	namespace:sf::priv	typeref:typename:SoundFileReader *
createStream	vendor/spdlog/tests/catch.hpp	/^    Stream createStream( std::string const& streamName ) {$/;"	f	namespace:Catch	typeref:typename:Stream
createWriter	dependencies/include/SFML/Audio/SoundFileFactory.inl	/^    template <typename T> SoundFileWriter* createWriter() {return new T;}$/;"	f	namespace:sf::priv	typeref:typename:SoundFileWriter *
create_async	vendor/spdlog/include/spdlog/async.h	/^inline std::shared_ptr<spdlog::logger> create_async(std::string logger_name, SinkArgs &&... sink/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
create_async_nb	vendor/spdlog/include/spdlog/async.h	/^inline std::shared_ptr<spdlog::logger> create_async_nb(std::string logger_name, SinkArgs &&... s/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
crimson	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    crimson = 0xDC143C,                 \/\/ rgb(220,20,60)$/;"	e	enum:color
critical	vendor/spdlog/include/spdlog/common.h	/^    critical = SPDLOG_LEVEL_CRITICAL,$/;"	e	enum:spdlog::level::level_enum
critical	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::critical(const T &msg)$/;"	f	class:spdlog::logger	typeref:typename:void
critical	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::critical(const char *fmt, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
critical	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::critical(const wchar_t *fmt, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
critical	vendor/spdlog/include/spdlog/spdlog.h	/^inline void critical(const T &msg)$/;"	f	namespace:spdlog	typeref:typename:void
critical	vendor/spdlog/include/spdlog/spdlog.h	/^inline void critical(const char *fmt, const Args &... args)$/;"	f	namespace:spdlog	typeref:typename:void
critical	vendor/spdlog/include/spdlog/spdlog.h	/^inline void critical(const wchar_t *fmt, const Args &... args)$/;"	f	namespace:spdlog	typeref:typename:void
cstring_spec_handler	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    cstring_spec_handler(arg_formatter_base &f, const char_type *val)$/;"	f	struct:internal::arg_formatter_base::cstring_spec_handler
cstring_spec_handler	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  struct cstring_spec_handler : internal::error_handler {$/;"	s	class:internal::arg_formatter_base
cstring_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  cstring_type, string_type, pointer_type, custom_type$/;"	e	enum:internal::type
cstring_type_checker	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR explicit cstring_type_checker(ErrorHandler eh)$/;"	f	class:internal::cstring_type_checker	typeref:typename:FMT_CONSTEXPR
cstring_type_checker	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class cstring_type_checker : public ErrorHandler {$/;"	c	namespace:internal
cstring_view	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^typedef basic_cstring_view<char> cstring_view;$/;"	t	typeref:typename:basic_cstring_view<char>
ctx_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  Context &ctx_;$/;"	m	class:internal::custom_formatter	typeref:typename:Context &
ctx_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  context_type &ctx_;$/;"	m	class:arg_formatter	typeref:typename:context_type &
currentContext	vendor/spdlog/tests/catch.hpp	/^        Context* currentContext = NULL;$/;"	v	namespace:Catch::__anon368216750710	typeref:typename:Context *
currentGroupInfo	vendor/spdlog/tests/catch.hpp	/^        LazyStat<GroupInfo> currentGroupInfo;$/;"	m	struct:Catch::StreamingReporterBase	typeref:typename:LazyStat<GroupInfo>
currentSectionHasChildren	vendor/spdlog/tests/catch.hpp	/^        bool currentSectionHasChildren() const {$/;"	f	class:Catch::SectionTracking::TestCaseTracker	typeref:typename:bool
currentTestCaseInfo	vendor/spdlog/tests/catch.hpp	/^        LazyStat<TestCaseInfo> currentTestCaseInfo;$/;"	m	struct:Catch::StreamingReporterBase	typeref:typename:LazyStat<TestCaseInfo>
currentTestRunInfo	vendor/spdlog/tests/catch.hpp	/^        LazyStat<TestRunInfo> currentTestRunInfo;$/;"	m	struct:Catch::StreamingReporterBase	typeref:typename:LazyStat<TestRunInfo>
currentTimeMS	dependencies/include/v8-inspector.h	/^  virtual double currentTimeMS() { return 0; }$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:double
current_size_	vendor/spdlog/include/spdlog/sinks/rotating_file_sink.h	/^    std::size_t current_size_;$/;"	m	class:spdlog::sinks::rotating_file_sink	typeref:typename:std::size_t
custom	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    custom_value<Context> custom;$/;"	m	union:internal::value::__anonbb24b047030a	typeref:typename:custom_value<Context>
custom	vendor/spdlog/tests/catch.hpp	/^        static Approx custom() {$/;"	f	class:Catch::Detail::Approx	typeref:typename:Approx
custom_	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    internal::custom_value<Context> custom_;$/;"	m	class:basic_format_arg::handle	typeref:typename:internal::custom_value<Context>
custom_daily_file_name_calculator	vendor/spdlog/tests/test_file_logging.cpp	/^struct custom_daily_file_name_calculator$/;"	s	file:
custom_ex	vendor/spdlog/tests/test_errors.cpp	/^struct custom_ex$/;"	s	file:
custom_formatter	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit custom_formatter(Context &ctx): ctx_(ctx) {}$/;"	f	class:internal::custom_formatter
custom_formatter	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class custom_formatter: public function<bool> {$/;"	c	namespace:internal
custom_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  cstring_type, string_type, pointer_type, custom_type$/;"	e	enum:internal::type
custom_value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct custom_value {$/;"	s	namespace:internal
cv_	vendor/spdlog/include/spdlog/details/periodic_worker.h	/^    std::condition_variable cv_;$/;"	m	class:spdlog::details::periodic_worker	typeref:typename:std::condition_variable
cyan	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    cyan = 0x00FFFF,                    \/\/ rgb(0,255,255)$/;"	e	enum:color
cyan	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string cyan = "\\033[36m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
d_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit d_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::d_formatter
d_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class d_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
daily_example	vendor/spdlog/example/example.cpp	/^void daily_example()$/;"	f	typeref:typename:void
daily_file_sink	vendor/spdlog/include/spdlog/sinks/daily_file_sink.h	/^    daily_file_sink(filename_t base_filename, int rotation_hour, int rotation_minute, bool trunc/;"	f	class:spdlog::sinks::daily_file_sink
daily_file_sink	vendor/spdlog/include/spdlog/sinks/daily_file_sink.h	/^class daily_file_sink final : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
daily_file_sink_mt	vendor/spdlog/include/spdlog/sinks/daily_file_sink.h	/^using daily_file_sink_mt = daily_file_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:daily_file_sink<std::mutex>
daily_file_sink_st	vendor/spdlog/include/spdlog/sinks/daily_file_sink.h	/^using daily_file_sink_st = daily_file_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:daily_file_sink<details::null_mutex>
daily_filename_calculator	vendor/spdlog/include/spdlog/sinks/daily_file_sink.h	/^struct daily_filename_calculator$/;"	s	namespace:spdlog::sinks
daily_logger_mt	vendor/spdlog/include/spdlog/sinks/daily_file_sink.h	/^inline std::shared_ptr<logger> daily_logger_mt($/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
daily_logger_st	vendor/spdlog/include/spdlog/sinks/daily_file_sink.h	/^inline std::shared_ptr<logger> daily_logger_st($/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
dark	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string dark = "\\033[2m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
dark_blue	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    dark_blue = 0x00008B,               \/\/ rgb(0,0,139)$/;"	e	enum:color
dark_cyan	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    dark_cyan = 0x008B8B,               \/\/ rgb(0,139,139)$/;"	e	enum:color
dark_golden_rod	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    dark_golden_rod = 0xB8860B,         \/\/ rgb(184,134,11)$/;"	e	enum:color
dark_gray	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    dark_gray = 0xA9A9A9,               \/\/ rgb(169,169,169)$/;"	e	enum:color
dark_green	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    dark_green = 0x006400,              \/\/ rgb(0,100,0)$/;"	e	enum:color
dark_khaki	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    dark_khaki = 0xBDB76B,              \/\/ rgb(189,183,107)$/;"	e	enum:color
dark_magenta	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    dark_magenta = 0x8B008B,            \/\/ rgb(139,0,139)$/;"	e	enum:color
dark_olive_green	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    dark_olive_green = 0x556B2F,        \/\/ rgb(85,107,47)$/;"	e	enum:color
dark_orange	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    dark_orange = 0xFF8C00,             \/\/ rgb(255,140,0)$/;"	e	enum:color
dark_orchid	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    dark_orchid = 0x9932CC,             \/\/ rgb(153,50,204)$/;"	e	enum:color
dark_red	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    dark_red = 0x8B0000,                \/\/ rgb(139,0,0)$/;"	e	enum:color
dark_salmon	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    dark_salmon = 0xE9967A,             \/\/ rgb(233,150,122)$/;"	e	enum:color
dark_sea_green	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    dark_sea_green = 0x8FBC8F,          \/\/ rgb(143,188,143)$/;"	e	enum:color
dark_slate_blue	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    dark_slate_blue = 0x483D8B,         \/\/ rgb(72,61,139)$/;"	e	enum:color
dark_slate_gray	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    dark_slate_gray = 0x2F4F4F,         \/\/ rgb(47,79,79)$/;"	e	enum:color
dark_turquoise	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    dark_turquoise = 0x00CED1,          \/\/ rgb(0,206,209)$/;"	e	enum:color
dark_violet	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    dark_violet = 0x9400D3,             \/\/ rgb(148,0,211)$/;"	e	enum:color
data	dependencies/include/v8.h	/^    const uint8_t* data;$/;"	m	struct:v8::ScriptCompiler::CachedData	typeref:typename:const uint8_t *
data	dependencies/include/v8.h	/^  Local<Value> data;$/;"	m	struct:v8::IndexedPropertyHandlerConfiguration	typeref:typename:Local<Value>
data	dependencies/include/v8.h	/^  Local<Value> data;$/;"	m	struct:v8::NamedPropertyHandlerConfiguration	typeref:typename:Local<Value>
data	dependencies/include/v8.h	/^  constexpr T* data() const { return data_; }$/;"	f	class:v8::MemorySpan	typeref:typename:T *
data	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    const char *data() const { return FMT_NULL; }$/;"	f	struct:basic_string_view::type	typeref:typename:const char *
data	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR const Char *data() const { return data_; }$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR const Char *
data	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  T *data() FMT_NOEXCEPT { return ptr_; }$/;"	f	class:internal::basic_buffer	typeref:typename:T *
data	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  const T *data() const FMT_NOEXCEPT { return ptr_; }$/;"	f	class:internal::basic_buffer	typeref:typename:const T *
data	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  mutable char data[sizeof(basic_format_arg<format_context>)];$/;"	m	struct:internal::named_arg_base	typeref:typename:char[]
data	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  const char *data() const { return str_; }$/;"	f	class:format_int	typeref:typename:const char *
data	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  int data[2];$/;"	m	struct:internal::dummy_int	typeref:typename:int[2]
data	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef basic_data<> data;$/;"	t	namespace:internal	typeref:typename:basic_data<>
data	vendor/spdlog/tests/catch.hpp	/^            std::string data;$/;"	m	struct:Clara::Parser::Token	typeref:typename:std::string
data	vendor/spdlog/tests/catch.hpp	/^        char data[bufferSize];$/;"	m	class:Catch::StreamBufImpl	typeref:typename:char[]
data_	dependencies/include/v8.h	/^    internal::ScriptStreamingData* data_;$/;"	m	class:v8::ScriptCompiler::ScriptStreamingTask	typeref:typename:internal::ScriptStreamingData *
data_	dependencies/include/v8.h	/^    void* data_;$/;"	m	class:v8::ArrayBuffer::Contents	typeref:typename:void *
data_	dependencies/include/v8.h	/^    void* data_;$/;"	m	class:v8::SharedArrayBuffer::Contents	typeref:typename:void *
data_	dependencies/include/v8.h	/^  T* data_ = nullptr;$/;"	m	class:v8::MemorySpan	typeref:typename:T *
data_	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  const Char *data_;$/;"	m	class:basic_string_view	typeref:typename:const Char *
data_	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  value_type data_[DATA_SIZE];$/;"	m	class:format_arg_store	typeref:typename:value_type[]
data_	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  const Char *data_;$/;"	m	class:basic_cstring_view	typeref:typename:const Char *
days	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^static const char *days[]{"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};$/;"	v	namespace:spdlog::details	typeref:typename:const char * []
dbgName	vendor/spdlog/tests/catch.hpp	/^            std::string dbgName() const {$/;"	f	struct:Clara::CommandLine::Arg	typeref:typename:std::string
deallocate	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void deallocate() {$/;"	f	class:basic_memory_buffer	typeref:typename:void
debug	dependencies/include/v8.h	/^namespace debug {$/;"	n	namespace:v8
debug	vendor/spdlog/example/Makefile	/^debug:	example-debug$/;"	t
debug	vendor/spdlog/include/spdlog/common.h	/^    debug = SPDLOG_LEVEL_DEBUG,$/;"	e	enum:spdlog::level::level_enum
debug	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::debug(const T &msg)$/;"	f	class:spdlog::logger	typeref:typename:void
debug	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::debug(const char *fmt, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
debug	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::debug(const wchar_t *fmt, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
debug	vendor/spdlog/include/spdlog/spdlog.h	/^inline void debug(const T &msg)$/;"	f	namespace:spdlog	typeref:typename:void
debug	vendor/spdlog/include/spdlog/spdlog.h	/^inline void debug(const char *fmt, const Args &... args)$/;"	f	namespace:spdlog	typeref:typename:void
debug	vendor/spdlog/include/spdlog/spdlog.h	/^inline void debug(const wchar_t *fmt, const Args &... args)$/;"	f	namespace:spdlog	typeref:typename:void
debugger_id	dependencies/include/v8-inspector.h	/^  std::pair<int64_t, int64_t> debugger_id;$/;"	m	struct:v8_inspector::V8StackTraceId	typeref:typename:std::pair<int64_t,int64_t>
dec_writer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    struct dec_writer {$/;"	s	struct:basic_writer::int_writer
decimal_formatter	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit decimal_formatter(char *buf) : buffer_(buf) {}$/;"	f	class:internal::decimal_formatter
decimal_formatter	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class decimal_formatter {$/;"	c	namespace:internal
decimal_formatter_null	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit decimal_formatter_null(char *buf) : decimal_formatter(buf) {}$/;"	f	class:internal::decimal_formatter_null
decimal_formatter_null	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class decimal_formatter_null : public decimal_formatter {$/;"	c	namespace:internal
decode	dependencies/include/SFML/System/Utf.inl	/^In Utf<16>::decode(In begin, In end, Uint32& output, Uint32 replacement)$/;"	f	class:Utf	typeref:typename:In
decode	dependencies/include/SFML/System/Utf.inl	/^In Utf<32>::decode(In begin, In \/*end*\/, Uint32& output, Uint32 \/*replacement*\/)$/;"	f	class:Utf	typeref:typename:In
decode	dependencies/include/SFML/System/Utf.inl	/^In Utf<8>::decode(In begin, In end, Uint32& output, Uint32 replacement)$/;"	f	class:Utf	typeref:typename:In
decodeAnsi	dependencies/include/SFML/System/Utf.inl	/^Uint32 Utf<32>::decodeAnsi(In input, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Uint32
decodeWide	dependencies/include/SFML/System/Utf.inl	/^Uint32 Utf<32>::decodeWide(In input)$/;"	f	class:Utf	typeref:typename:Uint32
deep_pink	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    deep_pink = 0xFF1493,               \/\/ rgb(255,20,147)$/;"	e	enum:color
deep_sky_blue	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    deep_sky_blue = 0x00BFFF,           \/\/ rgb(0,191,255)$/;"	e	enum:color
default_async_q_size	vendor/spdlog/include/spdlog/async.h	/^static const size_t default_async_q_size = 8192;$/;"	v	namespace:spdlog::details	typeref:typename:const size_t
default_eol	vendor/spdlog/include/spdlog/details/os.h	/^SPDLOG_CONSTEXPR static const char *default_eol = SPDLOG_EOL;$/;"	v	namespace:spdlog::details::os	typeref:typename:SPDLOG_CONSTEXPR const char *
default_err_handler_	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::default_err_handler_(const std::string &msg)$/;"	f	class:spdlog::logger	typeref:typename:void
default_factory	vendor/spdlog/include/spdlog/spdlog.h	/^using default_factory = synchronous_factory;$/;"	t	namespace:spdlog	typeref:typename:synchronous_factory
default_level	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline spdlog::level::level_enum spdlog::logger::default_level()$/;"	f	class:spdlog::logger	typeref:typename:spdlog::level::level_enum
default_logger	vendor/spdlog/include/spdlog/details/registry.h	/^    std::shared_ptr<logger> default_logger()$/;"	f	class:spdlog::details::registry	typeref:typename:std::shared_ptr<logger>
default_logger	vendor/spdlog/include/spdlog/spdlog.h	/^inline std::shared_ptr<spdlog::logger> default_logger()$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
default_logger_	vendor/spdlog/include/spdlog/details/registry.h	/^    std::shared_ptr<logger> default_logger_;$/;"	m	class:spdlog::details::registry	typeref:typename:std::shared_ptr<logger>
default_logger_raw	vendor/spdlog/include/spdlog/spdlog.h	/^inline spdlog::logger *default_logger_raw()$/;"	f	namespace:spdlog	typeref:typename:spdlog::logger *
definer	dependencies/include/v8.h	/^  GenericNamedPropertyDefinerCallback definer;$/;"	m	struct:v8::NamedPropertyHandlerConfiguration	typeref:typename:GenericNamedPropertyDefinerCallback
definer	dependencies/include/v8.h	/^  IndexedPropertyDefinerCallback definer;$/;"	m	struct:v8::IndexedPropertyHandlerConfiguration	typeref:typename:IndexedPropertyDefinerCallback
delay_	vendor/spdlog/tests/test_sink.h	/^    std::chrono::milliseconds delay_{std::chrono::milliseconds::zero()};$/;"	m	class:spdlog::sinks::test_sink	typeref:typename:std::chrono::milliseconds
deleteAll	vendor/spdlog/tests/catch.hpp	/^    inline void deleteAll( ContainerT& container ) {$/;"	f	namespace:Catch	typeref:typename:void
deleteAllValues	vendor/spdlog/tests/catch.hpp	/^    inline void deleteAllValues( AssociativeContainerT& container ) {$/;"	f	namespace:Catch	typeref:typename:void
deleter	dependencies/include/v8.h	/^  GenericNamedPropertyDeleterCallback deleter;$/;"	m	struct:v8::NamedPropertyHandlerConfiguration	typeref:typename:GenericNamedPropertyDeleterCallback
deleter	dependencies/include/v8.h	/^  IndexedPropertyDeleterCallback deleter;$/;"	m	struct:v8::IndexedPropertyHandlerConfiguration	typeref:typename:IndexedPropertyDeleterCallback
deleter_	dependencies/include/v8.h	/^    DeleterCallback deleter_;$/;"	m	class:v8::ArrayBuffer::Contents	typeref:typename:DeleterCallback
deleter_	dependencies/include/v8.h	/^    DeleterCallback deleter_;$/;"	m	class:v8::SharedArrayBuffer::Contents	typeref:typename:DeleterCallback
deleter_data_	dependencies/include/v8.h	/^    void* deleter_data_;$/;"	m	class:v8::ArrayBuffer::Contents	typeref:typename:void *
deleter_data_	dependencies/include/v8.h	/^    void* deleter_data_;$/;"	m	class:v8::SharedArrayBuffer::Contents	typeref:typename:void *
delimiter	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  Char delimiter;$/;"	m	struct:formatting_range	typeref:typename:Char
delimiter	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  Char delimiter;$/;"	m	struct:formatting_tuple	typeref:typename:Char
delta	dependencies/include/SFML/Window/Event.hpp	/^        float        delta; \/\/\/< Wheel offset (positive is up\/left, negative is down\/right)/;"	m	struct:sf::Event::MouseWheelScrollEvent	typeref:typename:float
delta	dependencies/include/SFML/Window/Event.hpp	/^        int delta; \/\/\/< Number of ticks the wheel has moved (positive is up, negative is down/;"	m	struct:sf::Event::MouseWheelEvent	typeref:typename:int
delta	vendor/spdlog/tests/catch.hpp	/^        Totals delta( Totals const& prevTotals ) const {$/;"	f	struct:Catch::Totals	typeref:typename:Totals
delta_ms	vendor/spdlog/tests/test_mpmc_q.cpp	/^    auto delta_ms = millis_from(start);$/;"	v	typeref:typename:auto
deopt_reason	dependencies/include/v8-profiler.h	/^  const char* deopt_reason;$/;"	m	struct:v8::CpuProfileDeoptInfo	typeref:typename:const char *
depthBits	dependencies/include/SFML/Window/ContextSettings.hpp	/^    unsigned int depthBits;         \/\/\/< Bits of the depth buffer$/;"	m	struct:sf::ContextSettings	typeref:typename:unsigned int
dequeue_for	vendor/spdlog/include/spdlog/details/mpmc_blocking_q.h	/^    bool dequeue_for(T &popped_item, std::chrono::milliseconds wait_duration)$/;"	f	class:spdlog::details::mpmc_blocking_queue	typeref:typename:bool
describe	vendor/spdlog/tests/catch.hpp	/^            ArgBuilder& describe( std::string const& description ) {$/;"	f	class:Clara::CommandLine::ArgBuilder	typeref:typename:ArgBuilder &
description	vendor/spdlog/tests/catch.hpp	/^        std::string description;$/;"	m	struct:Catch::SectionInfo	typeref:typename:std::string
description	vendor/spdlog/tests/catch.hpp	/^        std::string description;$/;"	m	struct:Catch::TestCaseInfo	typeref:typename:std::string
description	vendor/spdlog/tests/catch.hpp	/^        std::string description;$/;"	m	struct:Clara::CommonArgProperties	typeref:typename:std::string
description	vendor/spdlog/tests/catch.hpp	/^    const char* description;$/;"	m	struct:Catch::NameAndDesc	typeref:typename:const char *
descriptor	dependencies/include/v8.h	/^  GenericNamedPropertyDescriptorCallback descriptor;$/;"	m	struct:v8::NamedPropertyHandlerConfiguration	typeref:typename:GenericNamedPropertyDescriptorCallback
descriptor	dependencies/include/v8.h	/^  IndexedPropertyDescriptorCallback descriptor;$/;"	m	struct:v8::IndexedPropertyHandlerConfiguration	typeref:typename:IndexedPropertyDescriptorCallback
descriptor	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  int descriptor() const FMT_NOEXCEPT { return fd_; }$/;"	f	class:file	typeref:typename:int
deserialize	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  basic_format_arg<Context> deserialize() const {$/;"	f	struct:internal::named_arg_base	typeref:typename:basic_format_arg<Context>
dest_	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    fmt::memory_buffer &dest_;$/;"	m	class:spdlog::details::scoped_pad	typeref:typename:fmt::memory_buffer &
detail	dependencies/include/nlohmann/json.hpp	/^namespace detail$/;"	n	namespace:nlohmann
detail	vendor/spdlog/tests/catch.hpp	/^            ArgBuilder& detail( std::string const& detail ) {$/;"	f	class:Clara::CommandLine::ArgBuilder	typeref:typename:ArgBuilder &
detail	vendor/spdlog/tests/catch.hpp	/^        std::string detail;$/;"	m	struct:Clara::CommonArgProperties	typeref:typename:std::string
details	vendor/spdlog/include/spdlog/async.h	/^namespace details {$/;"	n	namespace:spdlog
details	vendor/spdlog/include/spdlog/async_logger.h	/^namespace details {$/;"	n	namespace:spdlog
details	vendor/spdlog/include/spdlog/common.h	/^namespace details {$/;"	n	namespace:spdlog
details	vendor/spdlog/include/spdlog/details/circular_q.h	/^namespace details {$/;"	n	namespace:spdlog
details	vendor/spdlog/include/spdlog/details/console_globals.h	/^namespace details {$/;"	n	namespace:spdlog
details	vendor/spdlog/include/spdlog/details/file_helper.h	/^namespace details {$/;"	n	namespace:spdlog
details	vendor/spdlog/include/spdlog/details/fmt_helper.h	/^namespace details {$/;"	n	namespace:spdlog
details	vendor/spdlog/include/spdlog/details/log_msg.h	/^namespace details {$/;"	n	namespace:spdlog
details	vendor/spdlog/include/spdlog/details/mpmc_blocking_q.h	/^namespace details {$/;"	n	namespace:spdlog
details	vendor/spdlog/include/spdlog/details/null_mutex.h	/^namespace details {$/;"	n	namespace:spdlog
details	vendor/spdlog/include/spdlog/details/os.h	/^namespace details {$/;"	n	namespace:spdlog
details	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^namespace details {$/;"	n	namespace:spdlog
details	vendor/spdlog/include/spdlog/details/periodic_worker.h	/^namespace details {$/;"	n	namespace:spdlog
details	vendor/spdlog/include/spdlog/details/registry.h	/^namespace details {$/;"	n	namespace:spdlog
details	vendor/spdlog/include/spdlog/details/thread_pool.h	/^namespace details {$/;"	n	namespace:spdlog
details	vendor/spdlog/include/spdlog/fmt/bin_to_hex.h	/^namespace details {$/;"	n	namespace:spdlog
detected_or	dependencies/include/nlohmann/json.hpp	/^using detected_or = detector<Default, void, Op, Args...>;$/;"	t	namespace:nlohmann	typeref:typename:detector<Default,void,Op,Args...>
detected_or_t	dependencies/include/nlohmann/json.hpp	/^using detected_or_t = typename detected_or<Default, Op, Args...>::type;$/;"	t	namespace:nlohmann	typeref:typename:detected_or<Default,Op,Args...>::type
detected_t	dependencies/include/nlohmann/json.hpp	/^using detected_t = typename detector<nonesuch, void, Op, Args...>::type;$/;"	t	namespace:nlohmann	typeref:typename:detector<nonesuch,void,Op,Args...>::type
detector	dependencies/include/nlohmann/json.hpp	/^struct detector$/;"	s	namespace:nlohmann::detail
difference_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef std::ptrdiff_t difference_type;$/;"	t	class:internal::counting_iterator	typeref:typename:std::ptrdiff_t
difference_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef std::ptrdiff_t difference_type;$/;"	t	class:internal::null_terminating_iterator	typeref:typename:std::ptrdiff_t
difference_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef typename traits::difference_type difference_type;$/;"	t	class:internal::truncating_iterator	typeref:typename:traits::difference_type
digit_index_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  unsigned digit_index_;$/;"	m	class:internal::add_thousands_sep	typeref:typename:unsigned
dimColour	vendor/spdlog/tests/catch.hpp	/^            static Colour::Code dimColour() { return Colour::FileName; }$/;"	f	class:Catch::CompactReporter::AssertionPrinter	typeref:typename:Colour::Code
dim_gray	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    dim_gray = 0x696969,                \/\/ rgb(105,105,105)$/;"	e	enum:color
dispatcher	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^    dispatcher(int err_code, char *&buf, std::size_t buf_size)$/;"	f	class:__anon3d87c0370110::safe_strerror::dispatcher
dispatcher	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^  class dispatcher {$/;"	c	function:__anon3d87c0370110::safe_strerror
dispatcher	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^    dispatcher(std::time_t t): time_(t) {}$/;"	f	struct:gmtime::dispatcher
dispatcher	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^    dispatcher(std::time_t t): time_(t) {}$/;"	f	struct:localtime::dispatcher
dispatcher	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^  struct dispatcher {$/;"	s	function:gmtime
dispatcher	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^  struct dispatcher {$/;"	s	function:localtime
dist_sink	vendor/spdlog/include/spdlog/sinks/dist_sink.h	/^class dist_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
dist_sink_mt	vendor/spdlog/include/spdlog/sinks/dist_sink.h	/^using dist_sink_mt = dist_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:dist_sink<std::mutex>
dist_sink_st	vendor/spdlog/include/spdlog/sinks/dist_sink.h	/^using dist_sink_st = dist_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:dist_sink<details::null_mutex>
do_get	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  format_arg do_get(size_type index) const {$/;"	f	class:basic_format_args	typeref:typename:format_arg
do_get_arg	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  format_arg do_get_arg(unsigned arg_id) {$/;"	f	class:internal::context_base	typeref:typename:format_arg
do_throw	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline void do_throw(const Exception &x) {$/;"	f	namespace:internal	typeref:typename:void
dodger_blue	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    dodger_blue = 0x1E90FF,             \/\/ rgb(30,144,255)$/;"	e	enum:color
double_significand_size	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^  static FMT_CONSTEXPR_DECL const int double_significand_size =$/;"	m	class:internal::fp	typeref:typename:FMT_CONSTEXPR_DECL const int
double_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  double_type, long_double_type, last_numeric_type = long_double_type,$/;"	e	enum:internal::type
double_value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    double double_value;$/;"	m	union:internal::value::__anonbb24b047030a	typeref:typename:double
double_writer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  struct double_writer {$/;"	s	class:basic_writer
drop	vendor/spdlog/include/spdlog/details/registry.h	/^    void drop(const std::string &logger_name)$/;"	f	class:spdlog::details::registry	typeref:typename:void
drop	vendor/spdlog/include/spdlog/spdlog.h	/^inline void drop(const std::string &name)$/;"	f	namespace:spdlog	typeref:typename:void
drop_all	vendor/spdlog/include/spdlog/details/registry.h	/^    void drop_all()$/;"	f	class:spdlog::details::registry	typeref:typename:void
drop_all	vendor/spdlog/include/spdlog/spdlog.h	/^inline void drop_all()$/;"	f	namespace:spdlog	typeref:typename:void
dummy	vendor/spdlog/tests/catch.hpp	/^    void Config::dummy() {}$/;"	f	class:Catch::Config	typeref:typename:void
dummy_int	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct dummy_int {$/;"	s	namespace:internal
duration	dependencies/include/libplatform/v8-tracing.h	/^  uint64_t duration() { return duration_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:uint64_t
durationInSeconds	vendor/spdlog/tests/catch.hpp	/^            double durationInSeconds;$/;"	m	struct:Catch::RunContext::UnfinishedSections	typeref:typename:double
durationInSeconds	vendor/spdlog/tests/catch.hpp	/^        double durationInSeconds;$/;"	m	struct:Catch::SectionStats	typeref:typename:double
duration_	dependencies/include/libplatform/v8-tracing.h	/^  uint64_t duration_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:uint64_t
dynamic_format_specs	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct dynamic_format_specs : basic_format_specs<Char> {$/;"	s	namespace:internal
dynamic_formatter	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class dynamic_formatter {$/;"	c
dynamic_specs_handler	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR dynamic_specs_handler($/;"	f	class:internal::dynamic_specs_handler	typeref:typename:FMT_CONSTEXPR
dynamic_specs_handler	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR dynamic_specs_handler(const dynamic_specs_handler &other)$/;"	f	class:internal::dynamic_specs_handler	typeref:typename:FMT_CONSTEXPR
dynamic_specs_handler	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class dynamic_specs_handler :$/;"	c	namespace:internal
e	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^  int e;$/;"	m	class:internal::fp	typeref:typename:int
e_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit e_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::e_formatter
e_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class e_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
edges	dependencies/include/v8-profiler.h	/^    RetainerEdges edges;$/;"	m	struct:v8::HeapProfiler::RetainerInfos	typeref:typename:RetainerEdges
embedded_code_range	dependencies/include/v8.h	/^  MemoryRange embedded_code_range;$/;"	m	struct:v8::UnwindState	typeref:typename:MemoryRange
embedder_fields_	dependencies/include/v8.h	/^  void* embedder_fields_[kEmbedderFieldsInWeakCallback];$/;"	m	class:v8::WeakCallbackInfo	typeref:typename:void * []
empty	vendor/spdlog/include/spdlog/common.h	/^    SPDLOG_CONSTEXPR bool empty() const SPDLOG_NOEXCEPT$/;"	f	struct:spdlog::source_loc	typeref:typename:SPDLOG_CONSTEXPR bool
empty	vendor/spdlog/include/spdlog/details/circular_q.h	/^    bool empty()$/;"	f	class:spdlog::details::circular_q	typeref:typename:bool
empty	vendor/spdlog/tests/catch.hpp	/^    bool SourceLineInfo::empty() const {$/;"	f	class:Catch::SourceLineInfo	typeref:typename:bool
empty_spec	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct empty_spec {};$/;"	s
enable	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^        bool      enable;         \/\/\/< Is the cache enabled?$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:bool
enable_argument_filter_	dependencies/include/libplatform/v8-tracing.h	/^  bool enable_argument_filter_ : 1;$/;"	m	class:v8::platform::tracing::TraceConfig	typeref:typename:bool:1
enable_if_t	dependencies/include/nlohmann/json.hpp	/^using enable_if_t = typename std::enable_if<B, T>::type;$/;"	t	namespace:nlohmann::detail	typeref:typename:std::enable_if<B,T>::type
enable_systrace_	dependencies/include/libplatform/v8-tracing.h	/^  bool enable_systrace_ : 1;$/;"	m	class:v8::platform::tracing::TraceConfig	typeref:typename:bool:1
enabled	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    bool enabled() const$/;"	f	struct:spdlog::details::padding_info	typeref:typename:bool
encode	dependencies/include/SFML/System/Utf.inl	/^Out Utf<16>::encode(Uint32 input, Out output, Uint16 replacement)$/;"	f	class:Utf	typeref:typename:Out
encode	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::encode(Uint32 input, Out output, Uint32 \/*replacement*\/)$/;"	f	class:Utf	typeref:typename:Out
encode	dependencies/include/SFML/System/Utf.inl	/^Out Utf<8>::encode(Uint32 input, Out output, Uint8 replacement)$/;"	f	class:Utf	typeref:typename:Out
encodeAnsi	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::encodeAnsi(Uint32 codepoint, Out output, char replacement, const std::locale& local/;"	f	class:Utf	typeref:typename:Out
encodeWide	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::encodeWide(Uint32 codepoint, Out output, wchar_t replacement)$/;"	f	class:Utf	typeref:typename:Out
end	vendor/spdlog/include/spdlog/fmt/bin_to_hex.h	/^    It end() const$/;"	f	class:spdlog::details::bytes_range	typeref:typename:It
end	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR iterator end() const FMT_NOEXCEPT { return format_str_.end(); }$/;"	f	class:basic_parse_context	typeref:typename:FMT_CONSTEXPR iterator
end	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR iterator end() const { return data_ + size_; }$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR iterator
end	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  T *end() FMT_NOEXCEPT { return ptr_ + size_; }$/;"	f	class:internal::basic_buffer	typeref:typename:T *
end	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  It end;$/;"	m	struct:arg_join	typeref:typename:It
end	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR T *end(T (&array)[N]) FMT_NOEXCEPT { return array + N; }$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR T *
end	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto end(const C &c) -> decltype(c.end()) { return c.end(); }$/;"	f	namespace:internal	typeref:typename:decltype (c.end ())
end	vendor/spdlog/tests/catch.hpp	/^        const_iterator end() const { return lines.end(); }$/;"	f	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	typeref:typename:const_iterator
end	vendor/spdlog/tests/catch.hpp	/^        const_iterator end() const { return lines.end(); }$/;"	f	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	typeref:typename:const_iterator
endElement	vendor/spdlog/tests/catch.hpp	/^        XmlWriter& endElement() {$/;"	f	class:Catch::XmlWriter	typeref:typename:XmlWriter &
endEnsureAllContextsInGroup	dependencies/include/v8-inspector.h	/^  virtual void endEnsureAllContextsInGroup(int contextGroupId) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
endExpression	vendor/spdlog/tests/catch.hpp	/^    void ResultBuilder::endExpression() {$/;"	f	class:Catch::ResultBuilder	typeref:typename:void
endExpression	vendor/spdlog/tests/catch.hpp	/^    void endExpression() {$/;"	f	class:Catch::ExpressionLhs	typeref:typename:void
endUserGesture	dependencies/include/v8-inspector.h	/^  virtual void endUserGesture() {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
end_	vendor/spdlog/include/spdlog/fmt/bin_to_hex.h	/^    It begin_, end_;$/;"	m	class:spdlog::details::bytes_range	typeref:typename:It
end_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  const Char *end_;$/;"	m	class:internal::null_terminating_iterator	typeref:typename:const Char *
end_precision	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void end_precision() {$/;"	f	class:internal::specs_checker	typeref:typename:FMT_CONSTEXPR void
end_precision	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void end_precision() {}$/;"	f	class:internal::specs_setter	typeref:typename:FMT_CONSTEXPR void
endsWith	vendor/spdlog/tests/catch.hpp	/^    bool endsWith( std::string const& s, std::string const& suffix ) {$/;"	f	namespace:Catch	typeref:typename:bool
ends_with	vendor/spdlog/tests/utils.cpp	/^bool ends_with(std::string const &value, std::string const &ending)$/;"	f	typeref:typename:bool
enforceNotReservedTag	vendor/spdlog/tests/catch.hpp	/^    inline void enforceNotReservedTag( std::string const& tag, SourceLineInfo const& _lineInfo )/;"	f	namespace:Catch	typeref:typename:void
enqueue	vendor/spdlog/include/spdlog/details/mpmc_blocking_q.h	/^    void enqueue(T &&item)$/;"	f	class:spdlog::details::mpmc_blocking_queue	typeref:typename:void
enqueue_nowait	vendor/spdlog/include/spdlog/details/mpmc_blocking_q.h	/^    void enqueue_nowait(T &&item)$/;"	f	class:spdlog::details::mpmc_blocking_queue	typeref:typename:void
ensureDefaultContextInGroup	dependencies/include/v8-inspector.h	/^  virtual v8::Local<v8::Context> ensureDefaultContextInGroup($/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:v8::Local<v8::Context>
ensureTagClosed	vendor/spdlog/tests/catch.hpp	/^        void ensureTagClosed() {$/;"	f	class:Catch::XmlWriter	typeref:typename:void
enter	vendor/spdlog/tests/catch.hpp	/^        void enter() {$/;"	f	class:Catch::SectionTracking::TrackedSection	typeref:typename:void
enterSection	vendor/spdlog/tests/catch.hpp	/^        bool enterSection( std::string const& name ) {$/;"	f	class:Catch::SectionTracking::TestCaseTracker	typeref:typename:bool
enterTestCase	vendor/spdlog/tests/catch.hpp	/^        void enterTestCase() {$/;"	f	class:Catch::SectionTracking::TestCaseTracker	typeref:typename:void
entry	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  struct entry {$/;"	s	class:internal::arg_map
enumerator	dependencies/include/v8.h	/^  GenericNamedPropertyEnumeratorCallback enumerator;$/;"	m	struct:v8::NamedPropertyHandlerConfiguration	typeref:typename:GenericNamedPropertyEnumeratorCallback
enumerator	dependencies/include/v8.h	/^  IndexedPropertyEnumeratorCallback enumerator;$/;"	m	struct:v8::IndexedPropertyHandlerConfiguration	typeref:typename:IndexedPropertyEnumeratorCallback
eol	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    std::string eol = ";)";$/;"	v	typeref:typename:std::string
eol_	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    std::string eol_;$/;"	m	class:spdlog::pattern_formatter	typeref:typename:std::string
epsilon	vendor/spdlog/tests/catch.hpp	/^        Approx& epsilon( double newEpsilon ) {$/;"	f	class:Catch::Detail::Approx	typeref:typename:Approx &
err	vendor/spdlog/include/spdlog/common.h	/^    err = SPDLOG_LEVEL_ERROR,$/;"	e	enum:spdlog::level::level_enum
err_handler_	vendor/spdlog/include/spdlog/details/registry.h	/^    log_err_handler err_handler_;$/;"	m	class:spdlog::details::registry	typeref:typename:log_err_handler
err_handler_	vendor/spdlog/include/spdlog/logger.h	/^    log_err_handler err_handler_{[this](const std::string &msg) { this->default_err_handler_(msg/;"	m	class:spdlog::logger	typeref:typename:log_err_handler
err_handler_example	vendor/spdlog/example/example.cpp	/^void err_handler_example()$/;"	f	typeref:typename:void
err_handler_example	vendor/spdlog/example/jni/example.cpp	/^void err_handler_example()$/;"	f	typeref:typename:void
err_msg	vendor/spdlog/tests/test_errors.cpp	/^    std::string err_msg("This is async handler error message");$/;"	v	typeref:typename:std::string
err_msg	vendor/spdlog/tests/test_errors.cpp	/^    std::string err_msg("log failed with some msg");$/;"	v	typeref:typename:std::string
error	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::error(const T &msg)$/;"	f	class:spdlog::logger	typeref:typename:void
error	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::error(const char *fmt, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
error	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::error(const wchar_t *fmt, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
error	vendor/spdlog/include/spdlog/spdlog.h	/^inline void error(const T &msg)$/;"	f	namespace:spdlog	typeref:typename:void
error	vendor/spdlog/include/spdlog/spdlog.h	/^inline void error(const char *fmt, const Args &... args)$/;"	f	namespace:spdlog	typeref:typename:void
error	vendor/spdlog/include/spdlog/spdlog.h	/^inline void error(const wchar_t *fmt, const Args &... args)$/;"	f	namespace:spdlog	typeref:typename:void
error_code	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  int error_code() const { return error_code_; }$/;"	f	class:system_error	typeref:typename:int
error_code	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  explicit error_code(int value = 0) FMT_NOEXCEPT : value_(value) {}$/;"	f	class:error_code
error_code	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^class error_code {$/;"	c
error_code_	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^    int error_code_;$/;"	m	class:__anon3d87c0370110::safe_strerror::dispatcher	typeref:typename:int
error_code_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  int error_code_;$/;"	m	class:system_error	typeref:typename:int
error_handler	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline spdlog::log_err_handler spdlog::logger::error_handler() const$/;"	f	class:spdlog::logger	typeref:typename:spdlog::log_err_handler
error_handler	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR ErrorHandler error_handler() const { return *this; }$/;"	f	class:basic_parse_context	typeref:typename:FMT_CONSTEXPR ErrorHandler
error_handler	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR error_handler() {}$/;"	f	struct:internal::error_handler	typeref:typename:FMT_CONSTEXPR
error_handler	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR error_handler(const error_handler &) {}$/;"	f	struct:internal::error_handler	typeref:typename:FMT_CONSTEXPR
error_handler	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  internal::error_handler error_handler() {$/;"	f	class:internal::context_base	typeref:typename:internal::error_handler
error_handler	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct error_handler {$/;"	s	namespace:internal
escape_slot_	dependencies/include/v8.h	/^  internal::Address* escape_slot_;$/;"	m	class:v8::EscapableHandleScope	typeref:typename:internal::Address *
evaluate	vendor/spdlog/tests/catch.hpp	/^        static bool evaluate( T1 const& lhs, T2 const& rhs ) {$/;"	f	struct:Catch::Internal::Evaluator	typeref:typename:bool
evaluate	vendor/spdlog/tests/catch.hpp	/^        static bool evaluate( T1 const& lhs, T2 const& rhs) {$/;"	f	struct:Catch::Internal::Evaluator	typeref:typename:bool
example	vendor/spdlog/example/CMakeLists.txt	/^add_executable(example example.cpp)$/;"	t
example	vendor/spdlog/example/Makefile	/^example: example.cpp$/;"	t
example-debug	vendor/spdlog/example/Makefile	/^example-debug: example.cpp$/;"	t
exceptionTranslateFunction	vendor/spdlog/tests/catch.hpp	/^    typedef std::string(*exceptionTranslateFunction)();$/;"	t	namespace:Catch	typeref:typename:std::string (*)()
expandAliases	vendor/spdlog/tests/catch.hpp	/^    std::string TagAliasRegistry::expandAliases( std::string const& unexpandedTestSpec ) const {$/;"	f	class:Catch::TagAliasRegistry	typeref:typename:std::string
expectedToFail	vendor/spdlog/tests/catch.hpp	/^    bool TestCaseInfo::expectedToFail() const {$/;"	f	class:Catch::TestCaseInfo	typeref:typename:bool
expected_size	vendor/spdlog/tests/test_file_helper.cpp	/^    size_t expected_size = 123;$/;"	v	typeref:typename:size_t
expected_size	vendor/spdlog/tests/test_file_helper.cpp	/^    size_t expected_size = 14;$/;"	v	typeref:typename:size_t
external_callback_entry	dependencies/include/v8-profiler.h	/^    void* external_callback_entry;$/;"	m	union:v8::TickSample::__anon2dc9d442010a	typeref:typename:void *
external_callback_entry	dependencies/include/v8.h	/^  void* external_callback_entry;  \/\/ External callback address if VM is$/;"	m	struct:v8::SampleInfo	typeref:typename:void *
extractClassName	vendor/spdlog/tests/catch.hpp	/^    inline std::string extractClassName( std::string const& classOrQualifiedMethodName ) {$/;"	f	namespace:Catch	typeref:typename:std::string
f	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^  significand_type f;$/;"	m	class:internal::fp	typeref:typename:significand_type
f	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    F f;$/;"	m	struct:basic_writer::padded_int_writer	typeref:typename:F
f_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit f_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::f_formatter
f_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class f_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
failed	vendor/spdlog/tests/catch.hpp	/^        std::size_t failed;$/;"	m	struct:Catch::Counts	typeref:typename:std::size_t
failedButOk	vendor/spdlog/tests/catch.hpp	/^        std::size_t failedButOk;$/;"	m	struct:Catch::Counts	typeref:typename:std::size_t
failedString	vendor/spdlog/tests/catch.hpp	/^            static const char* failedString() { return "FAILED"; }$/;"	f	class:Catch::CompactReporter::AssertionPrinter	typeref:typename:const char *
failedString	vendor/spdlog/tests/catch.hpp	/^            static const char* failedString() { return "failed"; }$/;"	f	class:Catch::CompactReporter::AssertionPrinter	typeref:typename:const char *
failing_sink	vendor/spdlog/tests/test_errors.cpp	/^class failing_sink : public spdlog::sinks::base_sink<std::mutex>$/;"	c	file:
fallback	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^    int fallback(int result) {$/;"	f	class:__anon3d87c0370110::safe_strerror::dispatcher	typeref:typename:int
fallback	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^    int fallback(internal::null<>) {$/;"	f	class:__anon3d87c0370110::safe_strerror::dispatcher	typeref:typename:int
fallback	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^    bool fallback(int res) { return res == 0; }$/;"	f	struct:gmtime::dispatcher	typeref:typename:bool
fallback	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^    bool fallback(int res) { return res == 0; }$/;"	f	struct:localtime::dispatcher	typeref:typename:bool
fallback	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^    bool fallback(internal::null<>) {$/;"	f	struct:gmtime::dispatcher	typeref:typename:bool
fallback	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^    bool fallback(internal::null<>) {$/;"	f	struct:localtime::dispatcher	typeref:typename:bool
family	dependencies/include/SFML/Graphics/Font.hpp	/^        std::string family; \/\/\/< The font family$/;"	m	struct:sf::Font::Info	typeref:typename:std::string
fatal	vendor/spdlog/tests/catch.hpp	/^    inline void fatal( std::string const& message, int exitCode ) {$/;"	f	namespace:Catch	typeref:typename:void
fd_	vendor/spdlog/include/spdlog/details/file_helper.h	/^    std::FILE *fd_{nullptr};$/;"	m	class:spdlog::details::file_helper	typeref:typename:std::FILE *
fd_	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  int fd_;  \/\/ File descriptor.$/;"	m	class:file	typeref:typename:int
features	build/default/CMakeFiles/feature_tests.c	/^  const char features[] = {"\\n"$/;"	v	typeref:typename:const char[]
features	build/default/CMakeFiles/feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v	typeref:typename:const char[]
file	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  explicit file(int fd) : fd_(fd) {}$/;"	f	class:file
file	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  file() FMT_NOEXCEPT : fd_(-1) {}$/;"	f	class:file
file	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  file(file &&other) FMT_NOEXCEPT : fd_(other.fd_) {$/;"	f	class:file
file	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^class file {$/;"	c
file	vendor/spdlog/tests/catch.hpp	/^        std::string file;$/;"	m	struct:Catch::SourceLineInfo	typeref:typename:std::string
file_	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  FILE *file_;$/;"	m	class:buffered_file	typeref:typename:FILE *
file_	vendor/spdlog/include/spdlog/sinks/stdout_sinks.h	/^    FILE *file_;$/;"	m	class:spdlog::sinks::stdout_sink	typeref:typename:FILE *
file_contents	vendor/spdlog/tests/utils.cpp	/^std::string file_contents(const std::string &filename)$/;"	f	typeref:typename:std::string
file_exists	vendor/spdlog/include/spdlog/details/file_helper.h	/^    static bool file_exists(const filename_t &fname)$/;"	f	class:spdlog::details::file_helper	typeref:typename:bool
file_exists	vendor/spdlog/include/spdlog/details/os.h	/^inline bool file_exists(const filename_t &filename) SPDLOG_NOEXCEPT$/;"	f	namespace:spdlog::details::os	typeref:typename:bool
file_helper	vendor/spdlog/include/spdlog/details/file_helper.h	/^class file_helper$/;"	c	namespace:spdlog::details
file_helper_	vendor/spdlog/include/spdlog/sinks/basic_file_sink.h	/^    details::file_helper file_helper_;$/;"	m	class:spdlog::sinks::basic_file_sink	typeref:typename:details::file_helper
file_helper_	vendor/spdlog/include/spdlog/sinks/daily_file_sink.h	/^    details::file_helper file_helper_;$/;"	m	class:spdlog::sinks::daily_file_sink	typeref:typename:details::file_helper
file_helper_	vendor/spdlog/include/spdlog/sinks/rotating_file_sink.h	/^    details::file_helper file_helper_;$/;"	m	class:spdlog::sinks::rotating_file_sink	typeref:typename:details::file_helper
file_sink	vendor/spdlog/tests/test_async.cpp	/^        auto file_sink = std::make_shared<spdlog::sinks::basic_file_sink_mt>(filename, true);$/;"	v	typeref:typename:auto
filename	vendor/spdlog/include/spdlog/common.h	/^    const char *filename;$/;"	m	struct:spdlog::source_loc	typeref:typename:const char *
filename	vendor/spdlog/include/spdlog/details/file_helper.h	/^    const filename_t &filename() const$/;"	f	class:spdlog::details::file_helper	typeref:typename:const filename_t &
filename	vendor/spdlog/tests/test_async.cpp	/^    std::string filename = "logs\/async_test.log";$/;"	v	typeref:typename:std::string
filename	vendor/spdlog/tests/test_errors.cpp	/^    std::string filename = "logs\/simple_async_log.txt";$/;"	v	typeref:typename:std::string
filename	vendor/spdlog/tests/test_errors.cpp	/^    std::string filename = "logs\/simple_log.txt";$/;"	v	typeref:typename:std::string
filename	vendor/spdlog/tests/test_file_logging.cpp	/^    auto filename = basename;$/;"	v	typeref:typename:auto
filename	vendor/spdlog/tests/test_file_logging.cpp	/^    auto filename = fmt::to_string(w);$/;"	v	typeref:typename:auto
filename	vendor/spdlog/tests/test_file_logging.cpp	/^    auto filename = spdlog::sinks::daily_filename_calculator::calc_filename("daily.txt", spdlog:/;"	v	typeref:typename:auto
filename	vendor/spdlog/tests/test_file_logging.cpp	/^    auto filename = spdlog::sinks::rotating_file_sink_st::calc_filename("rotated", 3);$/;"	v	typeref:typename:auto
filename	vendor/spdlog/tests/test_file_logging.cpp	/^    auto filename = spdlog::sinks::rotating_file_sink_st::calc_filename("rotated.txt", 0);$/;"	v	typeref:typename:auto
filename	vendor/spdlog/tests/test_file_logging.cpp	/^    auto filename = spdlog::sinks::rotating_file_sink_st::calc_filename("rotated.txt", 3);$/;"	v	typeref:typename:auto
filename	vendor/spdlog/tests/test_file_logging.cpp	/^    std::string filename = "logs\/simple_log";$/;"	v	typeref:typename:std::string
filename	vendor/spdlog/tests/test_macros.cpp	/^    std::string filename = "logs\/simple_log";$/;"	v	typeref:typename:std::string
filename1	vendor/spdlog/tests/test_file_logging.cpp	/^    auto filename1 = basename + ".1";$/;"	v	typeref:typename:auto
filename_t	vendor/spdlog/include/spdlog/common.h	/^using filename_t = std::string;$/;"	t	namespace:spdlog	typeref:typename:std::string
filename_t	vendor/spdlog/include/spdlog/common.h	/^using filename_t = std::wstring;$/;"	t	namespace:spdlog	typeref:typename:std::wstring
filename_to_str	vendor/spdlog/include/spdlog/details/os.h	/^inline std::string filename_to_str(const filename_t &filename)$/;"	f	namespace:spdlog::details::os	typeref:typename:std::string
fileno	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  FMT_API int (fileno)() const;$/;"	m	class:buffered_file	typeref:typename:FMT_API int ()()
filesize	vendor/spdlog/include/spdlog/details/os.h	/^inline size_t filesize(FILE *f)$/;"	f	namespace:spdlog::details::os	typeref:typename:size_t
fill	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    char_type fill;$/;"	m	struct:basic_writer::padded_int_writer	typeref:typename:char_type
fill	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR wchar_t fill() const { return fill_; }$/;"	f	struct:align_spec	typeref:typename:FMT_CONSTEXPR wchar_t
fill_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  wchar_t fill_;$/;"	m	struct:align_spec	typeref:typename:wchar_t
fill_spec	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit fill_spec(Char value) : format_spec<Char, fill_tag>(value) {}$/;"	f	class:fill_spec
fill_spec	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class fill_spec : public format_spec<Char, fill_tag> {$/;"	c
fill_tag	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^enum format_spec_tag {fill_tag, align_tag, width_tag, type_tag};$/;"	e	enum:format_spec_tag
find	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  basic_format_arg<Context> find(basic_string_view<char_type> name) const {$/;"	f	class:internal::arg_map	typeref:typename:basic_format_arg<Context>
find	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR bool find(Ptr first, Ptr last, T value, Ptr &out) {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR bool
find	vendor/spdlog/tests/catch.hpp	/^    Option<TagAlias> TagAliasRegistry::find( std::string const& alias ) const {$/;"	f	class:Catch::TagAliasRegistry	typeref:typename:Option<TagAlias>
findChild	vendor/spdlog/tests/catch.hpp	/^        TrackedSection* findChild( std::string const& childName ) {$/;"	f	class:Catch::SectionTracking::TrackedSection	typeref:typename:TrackedSection *
findGeneratorsForCurrentTest	vendor/spdlog/tests/catch.hpp	/^        IGeneratorsForTest* findGeneratorsForCurrentTest() {$/;"	f	class:Catch::Context	typeref:typename:IGeneratorsForTest *
findMax	vendor/spdlog/tests/catch.hpp	/^        static std::size_t& findMax( std::size_t& i, std::size_t& j, std::size_t& k ) {$/;"	f	struct:Catch::ConsoleReporter	typeref:typename:std::size_t &
finger	dependencies/include/SFML/Window/Event.hpp	/^        unsigned int finger; \/\/\/< Index of the finger in case of multi-touch events$/;"	m	struct:sf::Event::TouchEvent	typeref:typename:unsigned int
fire_brick	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    fire_brick = 0xB22222,              \/\/ rgb(178,34,34)$/;"	e	enum:color
fits_in_int	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  static bool fits_in_int(T value) {$/;"	f	struct:internal::int_checker	typeref:typename:bool
fits_in_int	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  static bool fits_in_int(bool) { return true; }$/;"	f	struct:internal::int_checker	typeref:typename:bool
fits_in_int	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  static bool fits_in_int(int) { return true; }$/;"	f	struct:internal::int_checker	typeref:typename:bool
flag	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR bool flag(unsigned f) const { return (flags_ & f) != 0; }$/;"	f	class:basic_format_specs	typeref:typename:FMT_CONSTEXPR bool
flag_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit flag_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::flag_formatter
flag_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class flag_formatter$/;"	c	namespace:spdlog::details
flags	dependencies/include/libplatform/v8-tracing.h	/^  unsigned int flags() const { return flags_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:unsigned int
flags	dependencies/include/v8.h	/^  PropertyHandlerFlags flags;$/;"	m	struct:v8::IndexedPropertyHandlerConfiguration	typeref:typename:PropertyHandlerFlags
flags	dependencies/include/v8.h	/^  PropertyHandlerFlags flags;$/;"	m	struct:v8::NamedPropertyHandlerConfiguration	typeref:typename:PropertyHandlerFlags
flags_	dependencies/include/libplatform/v8-tracing.h	/^  unsigned int flags_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:unsigned int
flags_	dependencies/include/v8.h	/^  const int flags_;$/;"	m	class:v8::ScriptOriginOptions	typeref:typename:const int
flags_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  unsigned flags_;$/;"	m	class:basic_format_specs	typeref:typename:unsigned
float_spec_handler	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit float_spec_handler(Char t) : type(t), upper(false) {}$/;"	f	struct:float_spec_handler
float_spec_handler	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct float_spec_handler {$/;"	s
float_type_checker	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR explicit float_type_checker(ErrorHandler eh)$/;"	f	class:internal::float_type_checker	typeref:typename:FMT_CONSTEXPR
float_type_checker	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class float_type_checker : private ErrorHandler {$/;"	c	namespace:internal
floral_white	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    floral_white = 0xFFFAF0,            \/\/ rgb(255,250,240)$/;"	e	enum:color
flush	vendor/spdlog/include/spdlog/details/file_helper.h	/^    void flush()$/;"	f	class:spdlog::details::file_helper	typeref:typename:void
flush	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::flush()$/;"	f	class:spdlog::logger	typeref:typename:void
flush	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    flush,$/;"	e	enum:spdlog::details::async_msg_type
flush	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    void flush() override$/;"	f	class:spdlog::sinks::ansicolor_sink	typeref:typename:void
flush	vendor/spdlog/include/spdlog/sinks/base_sink.h	/^    void flush() final$/;"	f	class:spdlog::sinks::base_sink	typeref:typename:void
flush	vendor/spdlog/include/spdlog/sinks/stdout_sinks.h	/^    void flush() override$/;"	f	class:spdlog::sinks::stdout_sink	typeref:typename:void
flush	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    void flush() final override$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:void
flush_	vendor/spdlog/include/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::flush_()$/;"	f	class:spdlog::async_logger	typeref:typename:void
flush_	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::flush_()$/;"	f	class:spdlog::logger	typeref:typename:void
flush_	vendor/spdlog/include/spdlog/sinks/android_sink.h	/^    void flush_() override {}$/;"	f	class:spdlog::sinks::android_sink	typeref:typename:void
flush_	vendor/spdlog/include/spdlog/sinks/basic_file_sink.h	/^    void flush_() override$/;"	f	class:spdlog::sinks::basic_file_sink	typeref:typename:void
flush_	vendor/spdlog/include/spdlog/sinks/daily_file_sink.h	/^    void flush_() override$/;"	f	class:spdlog::sinks::daily_file_sink	typeref:typename:void
flush_	vendor/spdlog/include/spdlog/sinks/dist_sink.h	/^    void flush_() override$/;"	f	class:spdlog::sinks::dist_sink	typeref:typename:void
flush_	vendor/spdlog/include/spdlog/sinks/msvc_sink.h	/^    void flush_() override {}$/;"	f	class:spdlog::sinks::msvc_sink	typeref:typename:void
flush_	vendor/spdlog/include/spdlog/sinks/null_sink.h	/^    void flush_() override {}$/;"	f	class:spdlog::sinks::null_sink	typeref:typename:void
flush_	vendor/spdlog/include/spdlog/sinks/ostream_sink.h	/^    void flush_() override$/;"	f	class:spdlog::sinks::ostream_sink	typeref:typename:void
flush_	vendor/spdlog/include/spdlog/sinks/rotating_file_sink.h	/^    void flush_() override$/;"	f	class:spdlog::sinks::rotating_file_sink	typeref:typename:void
flush_	vendor/spdlog/include/spdlog/sinks/syslog_sink.h	/^    void flush_() override {}$/;"	f	class:spdlog::sinks::syslog_sink	typeref:typename:void
flush_	vendor/spdlog/tests/test_errors.cpp	/^    void flush_() final$/;"	f	class:failing_sink	typeref:typename:void	file:
flush_	vendor/spdlog/tests/test_sink.h	/^    void flush_() override$/;"	f	class:spdlog::sinks::test_sink	typeref:typename:void
flush_all	vendor/spdlog/include/spdlog/details/registry.h	/^    void flush_all()$/;"	f	class:spdlog::details::registry	typeref:typename:void
flush_counter	vendor/spdlog/tests/test_sink.h	/^    size_t flush_counter()$/;"	f	class:spdlog::sinks::test_sink	typeref:typename:size_t
flush_counter_	vendor/spdlog/tests/test_sink.h	/^    size_t flush_counter_{0};$/;"	m	class:spdlog::sinks::test_sink	typeref:typename:size_t
flush_every	vendor/spdlog/include/spdlog/details/registry.h	/^    void flush_every(std::chrono::seconds interval)$/;"	f	class:spdlog::details::registry	typeref:typename:void
flush_every	vendor/spdlog/include/spdlog/spdlog.h	/^inline void flush_every(std::chrono::seconds interval)$/;"	f	namespace:spdlog	typeref:typename:void
flush_level	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline spdlog::level::level_enum spdlog::logger::flush_level() const$/;"	f	class:spdlog::logger	typeref:typename:spdlog::level::level_enum
flush_level_	vendor/spdlog/include/spdlog/details/registry.h	/^    level::level_enum flush_level_ = level::off;$/;"	m	class:spdlog::details::registry	typeref:typename:level::level_enum
flush_level_	vendor/spdlog/include/spdlog/logger.h	/^    spdlog::level_t flush_level_{level::off};$/;"	m	class:spdlog::logger	typeref:typename:spdlog::level_t
flush_on	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::flush_on(level::level_enum log_level)$/;"	f	class:spdlog::logger	typeref:typename:void
flush_on	vendor/spdlog/include/spdlog/details/registry.h	/^    void flush_on(level::level_enum log_level)$/;"	f	class:spdlog::details::registry	typeref:typename:void
flush_on	vendor/spdlog/include/spdlog/spdlog.h	/^inline void flush_on(level::level_enum log_level)$/;"	f	namespace:spdlog	typeref:typename:void
flusher_mutex_	vendor/spdlog/include/spdlog/details/registry.h	/^    std::mutex logger_map_mutex_, flusher_mutex_;$/;"	m	class:spdlog::details::registry	typeref:typename:std::mutex
fmt	vendor/spdlog/include/spdlog/fmt/bin_to_hex.h	/^namespace fmt {$/;"	n
fmt	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^# define fmt(/;"	d
fmt_helper	vendor/spdlog/include/spdlog/details/fmt_helper.h	/^namespace fmt_helper {$/;"	n	namespace:spdlog::details
folder_sep	vendor/spdlog/include/spdlog/details/os.h	/^SPDLOG_CONSTEXPR static const char folder_sep = '\/';$/;"	v	namespace:spdlog::details::os	typeref:typename:SPDLOG_CONSTEXPR const char
folder_sep	vendor/spdlog/include/spdlog/details/os.h	/^SPDLOG_CONSTEXPR static const char folder_sep = '\\\\';$/;"	v	namespace:spdlog::details::os	typeref:typename:SPDLOG_CONSTEXPR const char
fopen_s	vendor/spdlog/include/spdlog/details/os.h	/^inline bool fopen_s(FILE **fp, const filename_t &filename, const filename_t &mode)$/;"	f	namespace:spdlog::details::os	typeref:typename:bool
for_each	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^void for_each(Tuple &&tup, F &&f) {$/;"	f	namespace:internal	typeref:typename:void
for_each	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^void for_each(index_sequence<Is...>, Tuple &&tup, F &&f) FMT_NOEXCEPT {$/;"	f	namespace:internal	typeref:typename:void
forceColour	vendor/spdlog/tests/catch.hpp	/^        bool forceColour;$/;"	m	struct:Catch::ConfigData	typeref:typename:bool
forceColour	vendor/spdlog/tests/catch.hpp	/^        virtual bool forceColour() const { return m_data.forceColour; }$/;"	f	class:Catch::Config	typeref:typename:bool
force_flush_	vendor/spdlog/include/spdlog/sinks/ostream_sink.h	/^    bool force_flush_;$/;"	m	class:spdlog::sinks::ostream_sink	typeref:typename:bool
forest_green	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    forest_green = 0x228B22,            \/\/ rgb(34,139,34)$/;"	e	enum:color
format	vendor/spdlog/bench/utils.h	/^inline std::string format(const T &value)$/;"	f	namespace:utils	typeref:typename:std::string
format	vendor/spdlog/bench/utils.h	/^inline std::string format(const double &value)$/;"	f	namespace:utils	typeref:typename:std::string
format	vendor/spdlog/example/utils.h	/^inline std::string format(const T &value)$/;"	f	namespace:utils	typeref:typename:std::string
format	vendor/spdlog/example/utils.h	/^inline std::string format(const double &value)$/;"	f	namespace:utils	typeref:typename:std::string
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::details::aggregate_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::details::ch_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::details::pid_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &tm_time, fmt::memory_buffer &dest) over/;"	f	class:spdlog::details::A_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &tm_time, fmt::memory_buffer &dest) over/;"	f	class:spdlog::details::B_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &tm_time, fmt::memory_buffer &dest) over/;"	f	class:spdlog::details::C_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &tm_time, fmt::memory_buffer &dest) over/;"	f	class:spdlog::details::D_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &tm_time, fmt::memory_buffer &dest) over/;"	f	class:spdlog::details::H_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &tm_time, fmt::memory_buffer &dest) over/;"	f	class:spdlog::details::I_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &tm_time, fmt::memory_buffer &dest) over/;"	f	class:spdlog::details::M_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &tm_time, fmt::memory_buffer &dest) over/;"	f	class:spdlog::details::R_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &tm_time, fmt::memory_buffer &dest) over/;"	f	class:spdlog::details::S_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &tm_time, fmt::memory_buffer &dest) over/;"	f	class:spdlog::details::T_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &tm_time, fmt::memory_buffer &dest) over/;"	f	class:spdlog::details::Y_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &tm_time, fmt::memory_buffer &dest) over/;"	f	class:spdlog::details::a_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &tm_time, fmt::memory_buffer &dest) over/;"	f	class:spdlog::details::b_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &tm_time, fmt::memory_buffer &dest) over/;"	f	class:spdlog::details::c_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &tm_time, fmt::memory_buffer &dest) over/;"	f	class:spdlog::details::d_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &tm_time, fmt::memory_buffer &dest) over/;"	f	class:spdlog::details::m_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &tm_time, fmt::memory_buffer &dest) over/;"	f	class:spdlog::details::p_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &tm_time, fmt::memory_buffer &dest) over/;"	f	class:spdlog::details::r_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, const std::tm &, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::details::E_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, const std::tm &, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::details::F_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, const std::tm &, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::details::color_start_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, const std::tm &, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::details::color_stop_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, const std::tm &, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::details::e_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, const std::tm &, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::details::f_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, const std::tm &, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::details::i_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, const std::tm &, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::details::level_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, const std::tm &, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::details::name_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, const std::tm &, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::details::short_level_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, const std::tm &, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::details::source_filename_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, const std::tm &, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::details::source_linenum_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, const std::tm &, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::details::source_location_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, const std::tm &, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::details::t_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, const std::tm &, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::details::v_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, const std::tm &tm_time, fmt::memory_buffer &dest) o/;"	f	class:spdlog::details::full_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, const std::tm &tm_time, fmt::memory_buffer &dest) o/;"	f	class:spdlog::details::z_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::pattern_formatter	typeref:typename:void
format	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    format(const String &format_str, const Args & ... args) {$/;"	f	typeref:typename:std::basic_string<typename internal::format_string_traits<String>::char_type>
format	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    void format(Context &ctx) const { custom_.format(custom_.value, ctx); }$/;"	f	class:basic_format_arg::handle	typeref:typename:void
format	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  void (*format)(const void *arg, Context &ctx);$/;"	m	struct:internal::custom_value	typeref:typename:void (*)(const void * arg,Context & ctx)
format	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  auto format(const T &val, FormatContext &ctx) -> decltype(ctx.out()) {$/;"	f	class:dynamic_formatter	typeref:typename:decltype (ctx.out ())
format	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  auto format(const T &val, FormatContext &ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter	typeref:typename:decltype (ctx.out ())
format	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  auto format(const arg_join<It, Char> &value, FormatContext &ctx)$/;"	f	struct:formatter	typeref:typename:decltype (ctx.out ())
format	vendor/spdlog/include/spdlog/fmt/bundled/ostream.h	/^  auto format(const T &value, Context &ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter	typeref:typename:decltype (ctx.out ())
format	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  auto format(const T &value, FormatContext &ctx) -> decltype(ctx.out()) {$/;"	f	struct:printf_formatter	typeref:typename:decltype (ctx.out ())
format	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^void basic_printf_context<OutputIt, Char, AF>::format() {$/;"	f	class:basic_printf_context	typeref:typename:void
format	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  auto format(const TupleT &values, FormatContext &ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter	typeref:typename:decltype (ctx.out ())
format	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  typename FormatContext::iterator format($/;"	f	struct:formatter	typeref:typename:FormatContext::iterator
format	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^  auto format(const std::tm &tm, FormatContext &ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter	typeref:typename:decltype (ctx.out ())
formatAccessorsAsProperties	dependencies/include/v8-inspector.h	/^  virtual bool formatAccessorsAsProperties(v8::Local<v8::Value>) {$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:bool
format_arg	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typedef basic_format_arg<Context>  format_arg;$/;"	t	class:basic_format_args	typeref:typename:basic_format_arg<Context>
format_arg	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typedef basic_format_arg<Context> format_arg;$/;"	t	class:internal::context_base	typeref:typename:basic_format_arg<Context>
format_arg	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typedef typename base::format_arg format_arg;$/;"	t	class:basic_format_context	typeref:typename:base::format_arg
format_arg	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  typedef typename base::format_arg format_arg;$/;"	t	class:basic_printf_context	typeref:typename:base::format_arg
format_arg_store	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  format_arg_store(const Args &... args) {$/;"	f	class:format_arg_store
format_arg_store	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  format_arg_store(const Args &... args)$/;"	f	class:format_arg_store
format_arg_store	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^class format_arg_store {$/;"	c
format_args	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  format_args(Args && ... arg)$/;"	f	struct:format_args
format_args	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct format_args: basic_format_args<format_context> {$/;"	s
format_args_t	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct format_args_t {$/;"	s
format_context	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^typedef buffer_context<char>::type format_context;$/;"	t	typeref:typename:buffer_context<char>::type
format_context_t	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct format_context_t { typedef basic_format_context<OutputIt, Char> type; };$/;"	s
format_custom_arg	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  static void format_custom_arg(const void *arg, Context &ctx) {$/;"	f	class:internal::value	typeref:typename:void
format_decimal	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  char *format_decimal(unsigned long long value) {$/;"	f	class:format_int	typeref:typename:char *
format_decimal	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline Char *format_decimal(Char *buffer, UInt value, unsigned num_digits,$/;"	f	namespace:internal	typeref:typename:Char *
format_decimal	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline It format_decimal(It out, UInt value, unsigned num_digits) {$/;"	f	namespace:internal	typeref:typename:It
format_decimal	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline Iterator format_decimal($/;"	f	namespace:internal	typeref:typename:Iterator
format_decimal	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline void format_decimal(char *&buffer, T value) {$/;"	f	typeref:typename:void
format_each	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  struct format_each {$/;"	s	struct:formatter
format_error	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit format_error(const char *message)$/;"	f	class:format_error
format_error	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit format_error(const std::string &message)$/;"	f	class:format_error
format_error	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class format_error : public std::runtime_error {$/;"	c
format_error_code	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^void format_error_code(internal::buffer &out, int error_code,$/;"	f	namespace:__anon3d87c0370110	typeref:typename:void
format_exp_notation	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void format_exp_notation($/;"	f	namespace:internal	typeref:typename:FMT_FUNC void
format_float	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^int char_traits<char>::format_float($/;"	f	class:internal::char_traits	typeref:typename:int
format_float	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^int char_traits<wchar_t>::format_float($/;"	f	class:internal::char_traits	typeref:typename:int
format_handler	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  format_handler(range r, basic_string_view<Char> str,$/;"	f	struct:format_handler
format_handler	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct format_handler : internal::error_handler {$/;"	s
format_int	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit format_int(int value) { format_signed(value); }$/;"	f	class:format_int
format_int	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit format_int(long long value) { format_signed(value); }$/;"	f	class:format_int
format_int	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit format_int(long value) { format_signed(value); }$/;"	f	class:format_int
format_int	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit format_int(unsigned long long value) : str_(format_decimal(value)) {}$/;"	f	class:format_int
format_int	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit format_int(unsigned long value) : str_(format_decimal(value)) {}$/;"	f	class:format_int
format_int	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit format_int(unsigned value) : str_(format_decimal(value)) {}$/;"	f	class:format_int
format_int	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class format_int {$/;"	c
format_signed	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void format_signed(long long value) {$/;"	f	class:format_int	typeref:typename:void
format_spec	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit format_spec(T value) : value_(value) {}$/;"	f	class:format_spec
format_spec	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class format_spec {$/;"	c
format_spec_tag	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^enum format_spec_tag {fill_tag, align_tag, width_tag, type_tag};$/;"	g
format_specs	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef basic_format_specs<char_type> format_specs;$/;"	t	class:basic_writer	typeref:typename:basic_format_specs<char_type>
format_specs	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef basic_format_specs<char_type> format_specs;$/;"	t	class:internal::arg_formatter_base	typeref:typename:basic_format_specs<char_type>
format_specs	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef typename base::format_specs format_specs;$/;"	t	class:arg_formatter	typeref:typename:base::format_specs
format_specs	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef basic_format_specs<char> format_specs;$/;"	t	typeref:typename:basic_format_specs<char>
format_specs	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  typedef basic_format_specs<Char> format_specs;$/;"	t	class:internal::printf_width_handler	typeref:typename:basic_format_specs<Char>
format_specs	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  typedef basic_format_specs<char_type> format_specs;$/;"	t	class:basic_printf_context	typeref:typename:basic_format_specs<char_type>
format_specs	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  typedef typename base::format_specs format_specs;$/;"	t	class:printf_arg_formatter	typeref:typename:base::format_specs
format_str_	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  basic_string_view<Char> format_str_;$/;"	m	class:basic_parse_context	typeref:typename:basic_string_view<Char>
format_str_quoted	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR const char* format_str_quoted(bool add_space, const Arg&, $/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR const char *
format_str_quoted	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR const char* format_str_quoted(bool add_space, const char) {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR const char *
format_str_quoted	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR const char* format_str_quoted(bool add_space, const char*) {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR const char *
format_str_quoted	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR const wchar_t* format_str_quoted(bool add_space, const wchar_t) {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR const wchar_t *
format_str_quoted	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR const wchar_t* format_str_quoted(bool add_space, const wchar_t*) {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR const wchar_t *
format_string_checker	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit FMT_CONSTEXPR format_string_checker($/;"	f	class:internal::format_string_checker	typeref:typename:FMT_CONSTEXPR
format_string_checker	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class format_string_checker {$/;"	c	namespace:internal
format_string_traits	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct format_string_traits {$/;"	s	namespace:internal
format_string_traits	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct format_string_traits<$/;"	s	namespace:internal
format_string_traits	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct format_string_traits<Char *> : format_string_traits_base<Char> {};$/;"	s	namespace:internal
format_string_traits	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct format_string_traits<Char[N]> : format_string_traits_base<Char> {};$/;"	s	namespace:internal
format_string_traits	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct format_string_traits<const Char *> : format_string_traits_base<Char> {};$/;"	s	namespace:internal
format_string_traits	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct format_string_traits<const Char[N]> : format_string_traits_base<Char> {};$/;"	s	namespace:internal
format_string_traits	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct format_string_traits<$/;"	s	namespace:internal
format_string_traits_base	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct format_string_traits_base { typedef Char char_type; };$/;"	s	namespace:internal
format_system_error	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void format_system_error($/;"	f	typeref:typename:FMT_FUNC void
format_to	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    format_to(std::back_insert_iterator<Container> out,$/;"	f	typeref:typename:std::enable_if<is_contiguous<Container>::value,std::back_insert_iterator<Container>>::type
format_to	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline OutputIt format_to(OutputIt out, string_view format_str,$/;"	f	typeref:typename:OutputIt
format_to	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline typename buffer_context<Char>::type::iterator format_to($/;"	f	typeref:typename:buffer_context<Char>::type::iterator
format_to_n	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline format_to_n_result<OutputIt> format_to_n($/;"	f	typeref:typename:format_to_n_result<OutputIt>
format_to_n_args	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^using format_to_n_args = fmt::basic_format_args<format_to_n_context<OutputIt>>;$/;"	t	typeref:typename:fmt::basic_format_args<format_to_n_context<OutputIt>>
format_to_n_context	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^using format_to_n_context = typename fmt::format_context_t<$/;"	t	typeref:typename:fmt::format_context_t<fmt::internal::truncating_iterator<OutputIt>>::type
format_to_n_result	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct format_to_n_result {$/;"	s
format_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct format_type :$/;"	s	namespace:internal
format_uint	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline Char *format_uint(Char *buffer, UInt value, unsigned num_digits,$/;"	f	namespace:internal	typeref:typename:Char *
format_uint	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline It format_uint(It out, UInt value, unsigned num_digits,$/;"	f	namespace:internal	typeref:typename:It
format_value	vendor/spdlog/include/spdlog/fmt/bundled/ostream.h	/^void format_value(basic_buffer<Char> &buffer, const T &value) {$/;"	f	namespace:internal	typeref:typename:void
format_windows_error	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void internal::format_windows_error($/;"	f	class:internal	typeref:typename:FMT_FUNC void
formatbuf	vendor/spdlog/include/spdlog/fmt/bundled/ostream.h	/^  formatbuf(basic_buffer<Char> &buffer) : buffer_(buffer) {}$/;"	f	class:internal::formatbuf
formatbuf	vendor/spdlog/include/spdlog/fmt/bundled/ostream.h	/^class formatbuf : public std::basic_streambuf<Char> {$/;"	c	namespace:internal
formatted	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    fmt::memory_buffer formatted;$/;"	v	typeref:typename:fmt::memory_buffer
formatted_1	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    fmt::memory_buffer formatted_1;$/;"	v	typeref:typename:fmt::memory_buffer
formatted_2	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    fmt::memory_buffer formatted_2;$/;"	v	typeref:typename:fmt::memory_buffer
formatted_size	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline std::size_t formatted_size(string_view format_str,$/;"	f	typeref:typename:std::size_t
formatter	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct formatter {$/;"	s
formatter	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    arg_formatter_base &formatter;$/;"	m	struct:internal::arg_formatter_base::char_spec_handler	typeref:typename:arg_formatter_base &
formatter	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    arg_formatter_base &formatter;$/;"	m	struct:internal::arg_formatter_base::cstring_spec_handler	typeref:typename:arg_formatter_base &
formatter	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct formatter<$/;"	s
formatter	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct formatter<arg_join<It, Char>, Char>:$/;"	s
formatter	vendor/spdlog/include/spdlog/fmt/bundled/ostream.h	/^struct formatter<T, Char,$/;"	s
formatter	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^struct formatter<RangeT, Char,$/;"	s
formatter	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^struct formatter<TupleT, Char, $/;"	s
formatter	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^struct formatter<std::tm, Char> {$/;"	s
formatter	vendor/spdlog/include/spdlog/formatter.h	/^class formatter$/;"	c	namespace:spdlog
formatter	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    auto formatter = std::make_shared<spdlog::pattern_formatter>("%^%$", spdlog::pattern_time_ty/;"	v	typeref:typename:auto
formatter	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    auto formatter = std::make_shared<spdlog::pattern_formatter>("%^%v%$", spdlog::pattern_time_/;"	v	typeref:typename:auto
formatter	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    auto formatter = std::make_shared<spdlog::pattern_formatter>("%^***%$");$/;"	v	typeref:typename:auto
formatter	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    auto formatter = std::make_shared<spdlog::pattern_formatter>("**%$");$/;"	v	typeref:typename:auto
formatter	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    auto formatter = std::make_shared<spdlog::pattern_formatter>("**%^");$/;"	v	typeref:typename:auto
formatter	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    auto formatter = std::make_shared<spdlog::pattern_formatter>("XX%^YYY%$", spdlog::pattern_ti/;"	v	typeref:typename:auto
formatter-bench	vendor/spdlog/bench/CMakeLists.txt	/^add_executable(formatter-bench formatter-bench.cpp)$/;"	t
formatter-bench	vendor/spdlog/bench/Makefile	/^formatter-bench: formatter-bench.cpp$/;"	t
formatter_	vendor/spdlog/include/spdlog/details/registry.h	/^    std::unique_ptr<formatter> formatter_;$/;"	m	class:spdlog::details::registry	typeref:typename:std::unique_ptr<formatter>
formatter_	vendor/spdlog/include/spdlog/sinks/sink.h	/^    std::unique_ptr<spdlog::formatter> formatter_;$/;"	m	class:spdlog::sinks::sink	typeref:typename:std::unique_ptr<spdlog::formatter>
formatter_1	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    auto formatter_1 = std::make_shared<spdlog::pattern_formatter>("%+");$/;"	v	typeref:typename:auto
formatter_1	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    auto formatter_1 = std::make_shared<spdlog::pattern_formatter>("%D %X [%] [%n] %v");$/;"	v	typeref:typename:auto
formatter_1	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    auto formatter_1 = std::make_shared<spdlog::pattern_formatter>("%D %X [%] [%n] %v", pattern_/;"	v	typeref:typename:auto
formatter_1	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    auto formatter_1 = std::make_shared<spdlog::pattern_formatter>();$/;"	v	typeref:typename:auto
formatter_2	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    auto formatter_2 = formatter_1->clone();$/;"	v	typeref:typename:auto
formatter_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  struct formatter_type { typedef formatter<T, char_type> type; };$/;"	s	class:basic_format_context
formatter_type	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  struct formatter_type { typedef printf_formatter<T> type; };$/;"	s	class:basic_printf_context
formatters_	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    std::vector<std::unique_ptr<details::flag_formatter>> formatters_;$/;"	m	class:spdlog::pattern_formatter	typeref:typename:std::vector<std::unique_ptr<details::flag_formatter>>
formatting	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^    formatting_tuple<Char>& formatting;$/;"	m	struct:formatter::format_each	typeref:typename:formatting_tuple<Char> &
formatting	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  formatting_range<Char> formatting;$/;"	m	struct:formatter	typeref:typename:formatting_range<Char>
formatting	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  formatting_tuple<Char> formatting;$/;"	m	struct:formatter	typeref:typename:formatting_tuple<Char>
formatting_base	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^struct formatting_base {$/;"	s
formatting_range	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  formatting_range() : prefix('{'), delimiter(','), postfix('}') {}$/;"	f	struct:formatting_range
formatting_range	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^struct formatting_range : formatting_base<Char> {$/;"	s
formatting_tuple	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  formatting_tuple() : prefix('('), delimiter(','), postfix(')') {}$/;"	f	struct:formatting_tuple
formatting_tuple	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^struct formatting_tuple : formatting_base<Char> {$/;"	s
fp	dependencies/include/v8.h	/^  void* fp;  \/\/ Frame pointer.$/;"	m	struct:v8::RegisterState	typeref:typename:void *
fp	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^  explicit fp(Double d) {$/;"	f	class:internal::fp
fp	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^  fp(): f(0), e(0) {}$/;"	f	class:internal::fp
fp	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^  fp(uint64_t f, int e): f(f), e(e) {}$/;"	f	class:internal::fp
fp	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^class fp {$/;"	c	namespace:internal
fpToString	vendor/spdlog/tests/catch.hpp	/^std::string fpToString( T value, int precision ) {$/;"	f	namespace:Catch	typeref:typename:std::string
fprintf	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^inline int fprintf(std::FILE *f, string_view format_str, const Args & ... args) {$/;"	f	typeref:typename:int
fprintf	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^inline int fprintf(std::FILE *f, wstring_view format_str,$/;"	f	typeref:typename:int
fprintf	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^inline int fprintf(std::ostream &os, string_view format_str,$/;"	f	typeref:typename:int
fprintf	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^inline int fprintf(std::wostream &os, wstring_view format_str,$/;"	f	typeref:typename:int
fputil	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef std::numeric_limits<internal::dummy_int> fputil;$/;"	t	namespace:internal	typeref:typename:std::numeric_limits<internal::dummy_int>
frames_count	dependencies/include/v8-profiler.h	/^  unsigned frames_count : kMaxFramesCountLog2;  \/\/ Number of captured frames.$/;"	m	struct:v8::TickSample	typeref:typename:unsigned
frames_count	dependencies/include/v8.h	/^  size_t frames_count;            \/\/ Number of frames collected.$/;"	m	struct:v8::SampleInfo	typeref:typename:size_t
freelocale	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  static void freelocale(locale_t locale) {$/;"	f	class:Locale	typeref:typename:void
fromAnsi	dependencies/include/SFML/System/Utf.inl	/^Out Utf<16>::fromAnsi(In begin, In end, Out output, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
fromAnsi	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::fromAnsi(In begin, In end, Out output, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
fromAnsi	dependencies/include/SFML/System/Utf.inl	/^Out Utf<8>::fromAnsi(In begin, In end, Out output, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
fromLatin1	dependencies/include/SFML/System/Utf.inl	/^Out Utf<16>::fromLatin1(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
fromLatin1	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::fromLatin1(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
fromLatin1	dependencies/include/SFML/System/Utf.inl	/^Out Utf<8>::fromLatin1(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
fromUtf16	dependencies/include/SFML/System/String.inl	/^String String::fromUtf16(T begin, T end)$/;"	f	class:String	typeref:typename:String
fromUtf32	dependencies/include/SFML/System/String.inl	/^String String::fromUtf32(T begin, T end)$/;"	f	class:String	typeref:typename:String
fromUtf8	dependencies/include/SFML/System/String.inl	/^String String::fromUtf8(T begin, T end)$/;"	f	class:String	typeref:typename:String
fromWide	dependencies/include/SFML/System/Utf.inl	/^Out Utf<16>::fromWide(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
fromWide	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::fromWide(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
fromWide	dependencies/include/SFML/System/Utf.inl	/^Out Utf<8>::fromWide(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
from_str	vendor/spdlog/include/spdlog/common.h	/^inline spdlog::level::level_enum from_str(const std::string &name) SPDLOG_NOEXCEPT$/;"	f	namespace:spdlog::level	typeref:typename:spdlog::level::level_enum
fuchsia	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    fuchsia = 0xFF00FF,                 \/\/ rgb(255,0,255)$/;"	e	enum:color
full	vendor/spdlog/include/spdlog/details/circular_q.h	/^    bool full()$/;"	f	class:spdlog::details::circular_q	typeref:typename:bool
fullConfig	vendor/spdlog/tests/catch.hpp	/^        Ptr<IConfig> fullConfig() const { return m_fullConfig; }$/;"	f	struct:Catch::ReporterConfig	typeref:typename:Ptr<IConfig>
full_days	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^static const char *full_days[]{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday",/;"	v	namespace:spdlog::details	typeref:typename:const char * []
full_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit full_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::full_formatter
full_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class full_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
full_months	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^static const char *full_months[]{$/;"	v	namespace:spdlog::details	typeref:typename:const char * []
function	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct function {$/;"	s	namespace:internal
function	vendor/spdlog/tests/catch.hpp	/^            void (*function)( C& );$/;"	m	struct:Clara::Detail::BoundUnaryFunction	typeref:typename:void (*)(C &)
function	vendor/spdlog/tests/catch.hpp	/^            void (*function)( C&, T );$/;"	m	struct:Clara::Detail::BoundBinaryFunction	typeref:typename:void (*)(C &,T)
functionObj	vendor/spdlog/tests/catch.hpp	/^            IArgFunction<ConfigT>* functionObj;$/;"	m	class:Clara::Detail::BoundArgFunction	typeref:typename:IArgFunction<ConfigT> *
g	dependencies/include/SFML/Graphics/Color.hpp	/^    Uint8 g; \/\/\/< Green component$/;"	m	class:sf::Color	typeref:typename:Uint8
g	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    uint8_t g;$/;"	m	struct:rgb	typeref:typename:uint8_t
gainsboro	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    gainsboro = 0xDCDCDC,               \/\/ rgb(220,220,220)$/;"	e	enum:color
gcc48	vendor/spdlog/.travis.yml	/^addons: &gcc48$/;"	a
gcc7	vendor/spdlog/.travis.yml	/^addons: &gcc7$/;"	a
generator	vendor/spdlog/tests/catch.hpp	/^            const IGenerator<T>* generator = *it;$/;"	m	class:Catch::CompositeGenerator	typeref:typename:const IGenerator<T> *
get	vendor/spdlog/include/spdlog/details/registry.h	/^    std::shared_ptr<logger> get(const std::string &logger_name)$/;"	f	class:spdlog::details::registry	typeref:typename:std::shared_ptr<logger>
get	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  format_arg get(size_type index) const {$/;"	f	class:basic_format_args	typeref:typename:format_arg
get	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^  std::locale get() { return locale_; }$/;"	f	class:locale	typeref:typename:std::locale
get	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  FILE *get() const FMT_NOEXCEPT { return file_; }$/;"	f	class:buffered_file	typeref:typename:FILE *
get	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  Type get() const { return locale_; }$/;"	f	class:Locale	typeref:typename:Type
get	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  int get() const FMT_NOEXCEPT { return value_; }$/;"	f	class:error_code	typeref:typename:int
get	vendor/spdlog/include/spdlog/spdlog.h	/^inline std::shared_ptr<logger> get(const std::string &name)$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
get	vendor/spdlog/tests/catch.hpp	/^        T* get() { return m_p; }$/;"	f	class:Catch::Ptr	typeref:typename:T *
get	vendor/spdlog/tests/catch.hpp	/^        const T* get() const{ return m_p; }$/;"	f	class:Catch::Ptr	typeref:typename:const T *
get	vendor/spdlog/tests/catch.hpp	/^    ITagAliasRegistry const& ITagAliasRegistry::get() { return TagAliasRegistry::get(); }$/;"	f	class:Catch::ITagAliasRegistry	typeref:typename:ITagAliasRegistry const &
get	vendor/spdlog/tests/catch.hpp	/^    TagAliasRegistry& TagAliasRegistry::get() {$/;"	f	class:Catch::TagAliasRegistry	typeref:typename:TagAliasRegistry &
getAllNonHiddenTests	vendor/spdlog/tests/catch.hpp	/^        virtual std::vector<TestCase> const& getAllNonHiddenTests() const {$/;"	f	class:Catch::TestRegistry	typeref:typename:std::vector<TestCase> const &
getAllTests	vendor/spdlog/tests/catch.hpp	/^        virtual std::vector<TestCase> const& getAllTests() const {$/;"	f	class:Catch::TestRegistry	typeref:typename:std::vector<TestCase> const &
getAnnotation	vendor/spdlog/tests/catch.hpp	/^        inline std::string getAnnotation(   Class cls,$/;"	f	namespace:Catch::Detail	typeref:typename:std::string
getConfig	vendor/spdlog/tests/catch.hpp	/^        virtual Ptr<IConfig const> getConfig() const {$/;"	f	class:Catch::Context	typeref:typename:Ptr<IConfig const>
getCurrentContext	vendor/spdlog/tests/catch.hpp	/^    IContext& getCurrentContext() {$/;"	f	namespace:Catch	typeref:typename:IContext &
getCurrentIndex	vendor/spdlog/tests/catch.hpp	/^        std::size_t getCurrentIndex() const {$/;"	f	struct:Catch::GeneratorInfo	typeref:typename:std::size_t
getCurrentMutableContext	vendor/spdlog/tests/catch.hpp	/^    IMutableContext& getCurrentMutableContext() {$/;"	f	namespace:Catch	typeref:typename:IMutableContext &
getCurrentTestName	vendor/spdlog/tests/catch.hpp	/^        virtual std::string getCurrentTestName() const {$/;"	f	class:Catch::RunContext	typeref:typename:std::string
getCurrentTicks	vendor/spdlog/tests/catch.hpp	/^        uint64_t getCurrentTicks() {$/;"	f	namespace:Catch::__anon368216750b10	typeref:typename:uint64_t
getDescription	vendor/spdlog/tests/catch.hpp	/^            virtual std::string getDescription() const {$/;"	f	class:Catch::LegacyReporterRegistrar::ReporterFactory	typeref:typename:std::string
getDescription	vendor/spdlog/tests/catch.hpp	/^            virtual std::string getDescription() const {$/;"	f	class:Catch::ReporterRegistrar::ReporterFactory	typeref:typename:std::string
getDescription	vendor/spdlog/tests/catch.hpp	/^        static std::string getDescription() {$/;"	f	class:Catch::JunitReporter	typeref:typename:std::string
getDescription	vendor/spdlog/tests/catch.hpp	/^        static std::string getDescription() {$/;"	f	class:Catch::XmlReporter	typeref:typename:std::string
getDescription	vendor/spdlog/tests/catch.hpp	/^        static std::string getDescription() {$/;"	f	struct:Catch::CompactReporter	typeref:typename:std::string
getDescription	vendor/spdlog/tests/catch.hpp	/^        static std::string getDescription() {$/;"	f	struct:Catch::ConsoleReporter	typeref:typename:std::string
getElapsedMicroseconds	vendor/spdlog/tests/catch.hpp	/^    unsigned int Timer::getElapsedMicroseconds() const {$/;"	f	class:Catch::Timer	typeref:typename:unsigned int
getElapsedMilliseconds	vendor/spdlog/tests/catch.hpp	/^    unsigned int Timer::getElapsedMilliseconds() const {$/;"	f	class:Catch::Timer	typeref:typename:unsigned int
getElapsedSeconds	vendor/spdlog/tests/catch.hpp	/^    double Timer::getElapsedSeconds() const {$/;"	f	class:Catch::Timer	typeref:typename:double
getExceptionTranslatorRegistry	vendor/spdlog/tests/catch.hpp	/^            virtual IExceptionTranslatorRegistry& getExceptionTranslatorRegistry() {$/;"	f	class:Catch::__anon368216750610::RegistryHub	typeref:typename:IExceptionTranslatorRegistry &
getExpandedExpression	vendor/spdlog/tests/catch.hpp	/^    std::string AssertionResult::getExpandedExpression() const {$/;"	f	class:Catch::AssertionResult	typeref:typename:std::string
getExpression	vendor/spdlog/tests/catch.hpp	/^    std::string AssertionResult::getExpression() const {$/;"	f	class:Catch::AssertionResult	typeref:typename:std::string
getExpressionInMacro	vendor/spdlog/tests/catch.hpp	/^    std::string AssertionResult::getExpressionInMacro() const {$/;"	f	class:Catch::AssertionResult	typeref:typename:std::string
getFactories	vendor/spdlog/tests/catch.hpp	/^        FactoryMap const& getFactories() const {$/;"	f	class:Catch::ReporterRegistry	typeref:typename:FactoryMap const &
getFilename	vendor/spdlog/tests/catch.hpp	/^        std::string const& getFilename() const {$/;"	f	class:Catch::Config	typeref:typename:std::string const &
getFilteredTests	vendor/spdlog/tests/catch.hpp	/^        virtual void getFilteredTests( TestSpec const& testSpec, IConfig const& config, std::vec/;"	f	class:Catch::TestRegistry	typeref:typename:void
getGeneratorIndex	vendor/spdlog/tests/catch.hpp	/^        virtual size_t getGeneratorIndex( std::string const& fileInfo, size_t totalSize ) {$/;"	f	class:Catch::Context	typeref:typename:size_t
getGeneratorInfo	vendor/spdlog/tests/catch.hpp	/^        IGeneratorInfo& getGeneratorInfo( std::string const& fileInfo, std::size_t size ) {$/;"	f	class:Catch::GeneratorsForTest	typeref:typename:IGeneratorInfo &
getGeneratorsForCurrentTest	vendor/spdlog/tests/catch.hpp	/^        IGeneratorsForTest& getGeneratorsForCurrentTest() {$/;"	f	class:Catch::Context	typeref:typename:IGeneratorsForTest &
getLastResult	vendor/spdlog/tests/catch.hpp	/^        virtual const AssertionResult* getLastResult() const {$/;"	f	class:Catch::RunContext	typeref:typename:const AssertionResult *
getLineOfChars	vendor/spdlog/tests/catch.hpp	/^    char const* getLineOfChars() {$/;"	f	namespace:Catch	typeref:typename:char const *
getMessage	vendor/spdlog/tests/catch.hpp	/^    std::string AssertionResult::getMessage() const {$/;"	f	class:Catch::AssertionResult	typeref:typename:std::string
getMutableRegistryHub	vendor/spdlog/tests/catch.hpp	/^    IMutableRegistryHub& getMutableRegistryHub() {$/;"	f	namespace:Catch	typeref:typename:IMutableRegistryHub &
getName	vendor/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsEqualTo>             { static const char* getName(){ retu/;"	f	struct:Catch::Internal::OperatorTraits	typeref:typename:const char *
getName	vendor/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsGreaterThan>         { static const char* getName(){ retu/;"	f	struct:Catch::Internal::OperatorTraits	typeref:typename:const char *
getName	vendor/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsGreaterThanOrEqualTo>{ static const char* getName(){ retu/;"	f	struct:Catch::Internal::OperatorTraits	typeref:typename:const char *
getName	vendor/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsLessThan>            { static const char* getName(){ retu/;"	f	struct:Catch::Internal::OperatorTraits	typeref:typename:const char *
getName	vendor/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsLessThanOrEqualTo>   { static const char* getName(){ retu/;"	f	struct:Catch::Internal::OperatorTraits	typeref:typename:const char *
getName	vendor/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsNotEqualTo>          { static const char* getName(){ retu/;"	f	struct:Catch::Internal::OperatorTraits	typeref:typename:const char *
getName	vendor/spdlog/tests/catch.hpp	/^    template<Operator Op> struct OperatorTraits             { static const char* getName(){ retu/;"	f	struct:Catch::Internal::OperatorTraits	typeref:typename:const char *
getParent	vendor/spdlog/tests/catch.hpp	/^        TrackedSection* getParent() {$/;"	f	class:Catch::SectionTracking::TrackedSection	typeref:typename:TrackedSection *
getPreferences	vendor/spdlog/tests/catch.hpp	/^        virtual ReporterPreferences getPreferences() const {$/;"	f	class:Catch::JunitReporter	typeref:typename:ReporterPreferences
getPreferences	vendor/spdlog/tests/catch.hpp	/^        virtual ReporterPreferences getPreferences() const {$/;"	f	class:Catch::XmlReporter	typeref:typename:ReporterPreferences
getPreferences	vendor/spdlog/tests/catch.hpp	/^        virtual ReporterPreferences getPreferences() const {$/;"	f	struct:Catch::CompactReporter	typeref:typename:ReporterPreferences
getPreferences	vendor/spdlog/tests/catch.hpp	/^        virtual ReporterPreferences getPreferences() const {$/;"	f	struct:Catch::ConsoleReporter	typeref:typename:ReporterPreferences
getPreferences	vendor/spdlog/tests/catch.hpp	/^    ReporterPreferences LegacyReporterAdapter::getPreferences() const {$/;"	f	class:Catch::LegacyReporterAdapter	typeref:typename:ReporterPreferences
getProcessName	vendor/spdlog/tests/catch.hpp	/^        std::string getProcessName() const { return m_data.processName; }$/;"	f	class:Catch::Config	typeref:typename:std::string
getRegistryHub	vendor/spdlog/tests/catch.hpp	/^    IRegistryHub& getRegistryHub() {$/;"	f	namespace:Catch	typeref:typename:IRegistryHub &
getReporterName	vendor/spdlog/tests/catch.hpp	/^        std::string getReporterName() const { return m_data.reporterName; }$/;"	f	class:Catch::Config	typeref:typename:std::string
getReporterRegistry	vendor/spdlog/tests/catch.hpp	/^            virtual IReporterRegistry const& getReporterRegistry() const {$/;"	f	class:Catch::__anon368216750610::RegistryHub	typeref:typename:IReporterRegistry const &
getResultCapture	vendor/spdlog/tests/catch.hpp	/^        virtual IResultCapture* getResultCapture() {$/;"	f	class:Catch::Context	typeref:typename:IResultCapture *
getResultCapture	vendor/spdlog/tests/catch.hpp	/^    IResultCapture& getResultCapture() {$/;"	f	namespace:Catch	typeref:typename:IResultCapture &
getResultType	vendor/spdlog/tests/catch.hpp	/^    ResultWas::OfType AssertionResult::getResultType() const {$/;"	f	class:Catch::AssertionResult	typeref:typename:ResultWas::OfType
getRunner	vendor/spdlog/tests/catch.hpp	/^        virtual IRunner* getRunner() {$/;"	f	class:Catch::Context	typeref:typename:IRunner *
getSourceInfo	vendor/spdlog/tests/catch.hpp	/^    SourceLineInfo AssertionResult::getSourceInfo() const {$/;"	f	class:Catch::AssertionResult	typeref:typename:SourceLineInfo
getTestCaseInfo	vendor/spdlog/tests/catch.hpp	/^    TestCaseInfo const& TestCase::getTestCaseInfo() const$/;"	f	class:Catch::TestCase	typeref:typename:TestCaseInfo const &
getTestCaseRegistry	vendor/spdlog/tests/catch.hpp	/^            virtual ITestCaseRegistry const& getTestCaseRegistry() const {$/;"	f	class:Catch::__anon368216750610::RegistryHub	typeref:typename:ITestCaseRegistry const &
getTestMacroName	vendor/spdlog/tests/catch.hpp	/^    std::string AssertionResult::getTestMacroName() const {$/;"	f	class:Catch::AssertionResult	typeref:typename:std::string
getTheRegistryHub	vendor/spdlog/tests/catch.hpp	/^        inline RegistryHub*& getTheRegistryHub() {$/;"	f	namespace:Catch::__anon368216750610	typeref:typename:RegistryHub * &
getValue	vendor/spdlog/tests/catch.hpp	/^    virtual T getValue( std::size_t index ) const {$/;"	f	class:Catch::BetweenGenerator	typeref:typename:T
getValue	vendor/spdlog/tests/catch.hpp	/^    virtual T getValue( std::size_t index ) const {$/;"	f	class:Catch::ValuesGenerator	typeref:typename:T
get_allocator	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  Allocator get_allocator() const { return *this; }$/;"	f	class:basic_memory_buffer	typeref:typename:Allocator
get_arg	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  format_arg get_arg(unsigned arg_id) { return this->do_get_arg(arg_id); }$/;"	f	class:basic_format_context	typeref:typename:format_arg
get_arg	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  format_arg get_arg(unsigned arg_id) {$/;"	f	class:internal::context_base	typeref:typename:format_arg
get_arg	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR basic_format_arg<Context> get_arg(Id arg_id) {$/;"	f	class:internal::specs_handler	typeref:typename:FMT_CONSTEXPR basic_format_arg<Context>
get_arg	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR basic_format_arg<Context> get_arg(auto_id) {$/;"	f	class:internal::specs_handler	typeref:typename:FMT_CONSTEXPR basic_format_arg<Context>
get_arg	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  basic_format_context<Range, Char>::get_arg($/;"	f	class:basic_format_context	typeref:typename:basic_format_context<Range,Char>::format_arg
get_arg	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  basic_printf_context<OutputIt, Char, AF>::get_arg($/;"	f	class:basic_printf_context	typeref:typename:basic_printf_context<OutputIt,Char,AF>::format_arg
get_cached_offset	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    int get_cached_offset(const log_msg &msg, const std::tm &tm_time)$/;"	f	class:spdlog::details::z_formatter	typeref:typename:int
get_cached_power	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC fp get_cached_power(int min_exponent, int &pow10_exponent) {$/;"	f	namespace:internal	typeref:typename:FMT_FUNC fp
get_container	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^inline Container &get_container(std::back_insert_iterator<Container> it) {$/;"	f	namespace:internal	typeref:typename:Container &
get_default_raw	vendor/spdlog/include/spdlog/details/registry.h	/^    logger *get_default_raw()$/;"	f	class:spdlog::details::registry	typeref:typename:logger *
get_filesize	vendor/spdlog/tests/utils.cpp	/^std::size_t get_filesize(const std::string &filename)$/;"	f	typeref:typename:std::size_t
get_indexes	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^get_indexes(T const &) { return {}; }$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR make_index_sequence<std::tuple_size<T>::value>
get_prefix	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    string_view get_prefix() const { return string_view(prefix, prefix_size); }$/;"	f	struct:basic_writer::int_writer	typeref:typename:string_view
get_private	dependencies/include/v8.h	/^  PrivateData* get_private() const { return private_; }$/;"	f	class:v8::PropertyDescriptor	typeref:typename:PrivateData *
get_time_	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    std::tm get_time_(const details::log_msg &msg)$/;"	f	class:spdlog::pattern_formatter	typeref:typename:std::tm
get_tp	vendor/spdlog/include/spdlog/details/registry.h	/^    std::shared_ptr<thread_pool> get_tp()$/;"	f	class:spdlog::details::registry	typeref:typename:std::shared_ptr<thread_pool>
get_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct get_type {$/;"	s	namespace:internal
get_types	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  static FMT_CONSTEXPR11 long long get_types() {$/;"	f	class:format_arg_store	typeref:typename:FMT_CONSTEXPR11 long long
get_types	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR11 unsigned long long get_types() { return 0; }$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR11 unsigned long long
get_types	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR11 unsigned long long get_types() {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR11 unsigned long long
getter	dependencies/include/v8.h	/^  GenericNamedPropertyGetterCallback getter;$/;"	m	struct:v8::NamedPropertyHandlerConfiguration	typeref:typename:GenericNamedPropertyGetterCallback
getter	dependencies/include/v8.h	/^  IndexedPropertyGetterCallback getter;$/;"	m	struct:v8::IndexedPropertyHandlerConfiguration	typeref:typename:IndexedPropertyGetterCallback
ghost_white	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    ghost_white = 0xF8F8FF,             \/\/ rgb(248,248,255)$/;"	e	enum:color
glStatesSet	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^        bool      glStatesSet;    \/\/\/< Are our internal GL states set yet?$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:bool
globalCount	vendor/spdlog/tests/catch.hpp	/^        static unsigned int globalCount;$/;"	m	struct:Catch::MessageInfo	typeref:typename:unsigned int
globalCount	vendor/spdlog/tests/catch.hpp	/^    unsigned int MessageInfo::globalCount = 0;$/;"	m	class:Catch::MessageInfo	typeref:typename:unsigned int
glyphs	dependencies/include/SFML/Graphics/Font.hpp	/^        GlyphTable       glyphs;  \/\/\/< Table mapping code points to their corresponding glyph$/;"	m	struct:sf::Font::Page	typeref:typename:GlyphTable
gmtime	vendor/spdlog/include/spdlog/details/os.h	/^inline std::tm gmtime() SPDLOG_NOEXCEPT$/;"	f	namespace:spdlog::details::os	typeref:typename:std::tm
gmtime	vendor/spdlog/include/spdlog/details/os.h	/^inline std::tm gmtime(const std::time_t &time_tt) SPDLOG_NOEXCEPT$/;"	f	namespace:spdlog::details::os	typeref:typename:std::tm
gmtime	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^inline std::tm gmtime(std::time_t time) {$/;"	f	typeref:typename:std::tm
gmtime_r	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^inline null<> gmtime_r(...) { return null<>(); }$/;"	f	namespace:internal	typeref:typename:null<>
gmtime_s	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^inline null<> gmtime_s(...) { return null<>(); }$/;"	f	namespace:internal	typeref:typename:null<>
gold	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    gold = 0xFFD700,                    \/\/ rgb(255,215,0)$/;"	e	enum:color
golden_rod	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    golden_rod = 0xDAA520,              \/\/ rgb(218,165,32)$/;"	e	enum:color
gray	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    gray = 0x808080,                    \/\/ rgb(128,128,128)$/;"	e	enum:color
green	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    green = 0x008000,                   \/\/ rgb(0,128,0)$/;"	e	enum:color
green	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string green = "\\033[32m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
green_yellow	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    green_yellow = 0xADFF2F,            \/\/ rgb(173,255,47)$/;"	e	enum:color
grisu2_format	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void grisu2_format(double value, char *buffer, size_t &size, char type,$/;"	f	namespace:internal	typeref:typename:FMT_FUNC void
grisu2_format_positive	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void grisu2_format_positive(double value, char *buffer, size_t &size,$/;"	f	namespace:internal	typeref:typename:FMT_FUNC void
grisu2_gen_digits	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void grisu2_gen_digits($/;"	f	namespace:internal	typeref:typename:FMT_FUNC void
grisu2_prettify	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void grisu2_prettify(char *buffer, size_t &size, int exp,$/;"	f	namespace:internal	typeref:typename:FMT_FUNC void
groupIndex	vendor/spdlog/tests/catch.hpp	/^        std::size_t groupIndex;$/;"	m	struct:Catch::GroupInfo	typeref:typename:std::size_t
groupInfo	vendor/spdlog/tests/catch.hpp	/^        GroupInfo groupInfo;$/;"	m	struct:Catch::TestGroupStats	typeref:typename:GroupInfo
groups	dependencies/include/v8-profiler.h	/^    RetainerGroups groups;$/;"	m	struct:v8::HeapProfiler::RetainerInfos	typeref:typename:RetainerGroups
groupsCounts	vendor/spdlog/tests/catch.hpp	/^        std::size_t groupsCounts;$/;"	m	struct:Catch::GroupInfo	typeref:typename:std::size_t
grow	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  void grow(std::size_t capacity) FMT_OVERRIDE {$/;"	f	class:internal::container_buffer	typeref:typename:void
grow	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^void basic_fixed_buffer<Char>::grow(std::size_t) {$/;"	f	class:basic_fixed_buffer	typeref:typename:void
grow	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^void basic_memory_buffer<T, SIZE, Allocator>::grow(std::size_t size) {$/;"	f	class:basic_memory_buffer	typeref:typename:void
handle	vendor/spdlog/include/spdlog/details/console_globals.h	/^    static HANDLE handle()$/;"	f	struct:spdlog::details::console_stderr	typeref:typename:HANDLE
handle	vendor/spdlog/include/spdlog/details/console_globals.h	/^    static HANDLE handle()$/;"	f	struct:spdlog::details::console_stdout	typeref:typename:HANDLE
handle	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    explicit handle(internal::custom_value<Context> custom): custom_(custom) {}$/;"	f	class:basic_format_arg::handle
handle	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  class handle {$/;"	c	class:basic_format_arg
handle	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^    int handle(char *message) {$/;"	f	class:__anon3d87c0370110::safe_strerror::dispatcher	typeref:typename:int
handle	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^    int handle(int result) {$/;"	f	class:__anon3d87c0370110::safe_strerror::dispatcher	typeref:typename:int
handle	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^    int handle(internal::null<>) {$/;"	f	class:__anon3d87c0370110::safe_strerror::dispatcher	typeref:typename:int
handle	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^    bool handle(internal::null<>) {$/;"	f	struct:gmtime::dispatcher	typeref:typename:bool
handle	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^    bool handle(internal::null<>) {$/;"	f	struct:localtime::dispatcher	typeref:typename:bool
handle	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^    bool handle(std::tm *tm) { return tm != FMT_NULL; }$/;"	f	struct:gmtime::dispatcher	typeref:typename:bool
handle	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^    bool handle(std::tm *tm) { return tm != FMT_NULL; }$/;"	f	struct:localtime::dispatcher	typeref:typename:bool
handleEvents	src/Game.cpp	/^void Game::handleEvents(){$/;"	f	class:Game	typeref:typename:void
handleFatalErrorCondition	vendor/spdlog/tests/catch.hpp	/^        virtual void handleFatalErrorCondition( std::string const& message ) {$/;"	f	class:Catch::RunContext	typeref:typename:void
handleSignal	vendor/spdlog/tests/catch.hpp	/^        static void handleSignal( int sig ) {$/;"	f	struct:Catch::FatalConditionHandler	typeref:typename:void
handleUnfinishedSections	vendor/spdlog/tests/catch.hpp	/^        void handleUnfinishedSections() {$/;"	f	class:Catch::RunContext	typeref:typename:void
handle_char_specs	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void handle_char_specs($/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR void
handle_cstring_type_spec	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void handle_cstring_type_spec(Char spec, Handler &&handler) {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR void
handle_dynamic_spec	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^void handle_dynamic_spec($/;"	f	namespace:internal	typeref:typename:void
handle_flag_	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void handle_flag_(char flag, details::padding_info padding)$/;"	f	class:spdlog::pattern_formatter	typeref:typename:void
handle_float_type_spec	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void handle_float_type_spec(Char spec, Handler &&handler) {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR void
handle_int_type_spec	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void handle_int_type_spec(Char spec, Handler &&handler) {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR void
handle_padspec_	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    details::padding_info handle_padspec_(std::string::const_iterator &it, std::string::const_it/;"	f	class:spdlog::pattern_formatter	typeref:typename:details::padding_info
handle_specs	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void handle_specs(Context &ctx) {$/;"	f	class:dynamic_formatter	typeref:typename:void
handler	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  Handler &handler;$/;"	m	struct:internal::id_adapter	typeref:typename:Handler &
handler	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  SpecHandler &handler;$/;"	m	struct:internal::precision_adapter	typeref:typename:SpecHandler &
handler	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  SpecHandler &handler;$/;"	m	struct:internal::width_adapter	typeref:typename:SpecHandler &
handler_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    Handler &handler_;$/;"	m	struct:internal::parse_format_string::writer	typeref:typename:Handler &
handler_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  ErrorHandler &handler_;$/;"	m	class:internal::precision_checker	typeref:typename:ErrorHandler &
handler_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  ErrorHandler &handler_;$/;"	m	class:internal::width_checker	typeref:typename:ErrorHandler &
handler_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    typedef internal::dynamic_specs_handler<ParseContext> handler_type;$/;"	t	function:formatter::parse	typeref:typename:internal::dynamic_specs_handler<ParseContext>
hasChildren	vendor/spdlog/tests/catch.hpp	/^        bool hasChildren() const {$/;"	f	class:Catch::SectionTracking::TrackedSection	typeref:typename:bool
hasExpandedExpression	vendor/spdlog/tests/catch.hpp	/^    bool AssertionResult::hasExpandedExpression() const {$/;"	f	class:Catch::AssertionResult	typeref:typename:bool
hasExpression	vendor/spdlog/tests/catch.hpp	/^    bool AssertionResult::hasExpression() const {$/;"	f	class:Catch::AssertionResult	typeref:typename:bool
hasFilters	vendor/spdlog/tests/catch.hpp	/^        bool hasFilters() const {$/;"	f	class:Catch::TestSpec	typeref:typename:bool
hasLongName	vendor/spdlog/tests/catch.hpp	/^        bool hasLongName( std::string const& _longName ) const {$/;"	f	struct:Clara::OptionArgProperties	typeref:typename:bool
hasMemoryOnConsole	dependencies/include/v8-inspector.h	/^  bool hasMemoryOnConsole;$/;"	m	class:v8_inspector::V8ContextInfo	typeref:typename:bool
hasMessage	vendor/spdlog/tests/catch.hpp	/^    bool AssertionResult::hasMessage() const {$/;"	f	class:Catch::AssertionResult	typeref:typename:bool
hasShortName	vendor/spdlog/tests/catch.hpp	/^        bool hasShortName( std::string const& shortName ) const {$/;"	f	struct:Clara::OptionArgProperties	typeref:typename:bool
has_external_callback	dependencies/include/v8-profiler.h	/^  bool has_external_callback : 1;$/;"	m	struct:v8::TickSample	typeref:typename:bool:1
head_	vendor/spdlog/include/spdlog/details/circular_q.h	/^    typename std::vector<T>::size_type head_ = 0;$/;"	m	class:spdlog::details::circular_q	typeref:typename:std::vector<T>::size_type
height	dependencies/include/SFML/Graphics/Font.hpp	/^        unsigned int height; \/\/\/< Height of the row$/;"	m	struct:sf::Font::Row	typeref:typename:unsigned int
height	dependencies/include/SFML/Graphics/Rect.hpp	/^    T height; \/\/\/< Height of the rectangle$/;"	m	class:sf::Rect	typeref:typename:T
height	dependencies/include/SFML/Window/Event.hpp	/^        unsigned int height; \/\/\/< New height, in pixels$/;"	m	struct:sf::Event::SizeEvent	typeref:typename:unsigned int
height	dependencies/include/SFML/Window/VideoMode.hpp	/^    unsigned int height;       \/\/\/< Video mode height, in pixels$/;"	m	class:sf::VideoMode	typeref:typename:unsigned int
helper	vendor/spdlog/tests/test_file_helper.cpp	/^        file_helper helper;$/;"	v	typeref:typename:file_helper
helper	vendor/spdlog/tests/test_file_helper.cpp	/^    file_helper helper;$/;"	v	typeref:typename:file_helper
hex_writer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    struct hex_writer {$/;"	s	struct:basic_writer::int_writer
hit_count	dependencies/include/v8-profiler.h	/^    unsigned int hit_count;$/;"	m	struct:v8::CpuProfileNode::LineTick	typeref:typename:unsigned int
honey_dew	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    honey_dew = 0xF0FFF0,               \/\/ rgb(240,255,240)$/;"	e	enum:color
host_defined_options	dependencies/include/v8.h	/^    Local<PrimitiveArray> host_defined_options;$/;"	m	class:v8::ScriptCompiler::Source	typeref:typename:Local<PrimitiveArray>
host_defined_options_	dependencies/include/v8.h	/^  Local<PrimitiveArray> host_defined_options_;$/;"	m	class:v8::ScriptOrigin	typeref:typename:Local<PrimitiveArray>
hot_pink	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    hot_pink = 0xFF69B4,                \/\/ rgb(255,105,180)$/;"	e	enum:color
humanReadableName	dependencies/include/v8-inspector.h	/^  StringView humanReadableName;$/;"	m	class:v8_inspector::V8ContextInfo	typeref:typename:StringView
i	vendor/spdlog/example/example.cpp	/^    int i;$/;"	m	struct:my_type	typeref:typename:int	file:
i	vendor/spdlog/example/jni/example.cpp	/^    int i;$/;"	m	struct:my_type	typeref:typename:int	file:
i	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^    std::size_t& i;$/;"	m	struct:formatter::format_each	typeref:typename:std::size_t &
i	vendor/spdlog/tests/test_async.cpp	/^        for (size_t i = 0; i < messages; i++)$/;"	v	typeref:typename:size_t
i	vendor/spdlog/tests/test_async.cpp	/^        for (size_t i = 0; i < n_threads; i++)$/;"	v	typeref:typename:size_t
i	vendor/spdlog/tests/test_async.cpp	/^    for (size_t i = 0; i < messages; i++)$/;"	v	typeref:typename:size_t
i	vendor/spdlog/tests/test_file_logging.cpp	/^    for (int i = 0; i < 1000; i++)$/;"	v	typeref:typename:int
i	vendor/spdlog/tests/test_file_logging.cpp	/^    for (int i = 0; i < 10; ++i)$/;"	v	typeref:typename:int
i	vendor/spdlog/tests/test_mpmc_q.cpp	/^    for (int i = 0; i < static_cast<int>(q_size); i++)$/;"	v	typeref:typename:int
i	vendor/spdlog/tests/test_mpmc_q.cpp	/^    for (int i = 1; i < static_cast<int>(q_size); i++)$/;"	v	typeref:typename:int
i	vendor/spdlog/tests/test_mpmc_q.cpp	/^    int i;$/;"	v	typeref:typename:int
i_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit i_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::i_formatter
i_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class i_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
id	dependencies/include/libplatform/v8-tracing.h	/^  uint64_t id() const { return id_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:uint64_t
id	dependencies/include/v8-inspector.h	/^  uintptr_t id;$/;"	m	struct:v8_inspector::V8StackTraceId	typeref:typename:uintptr_t
id	vendor/spdlog/tests/catch.hpp	/^    struct SignalDefs { int id; const char* name; };$/;"	m	struct:Catch::SignalDefs	typeref:typename:int
id_	dependencies/include/libplatform/v8-tracing.h	/^  uint64_t id_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:uint64_t
id_adapter	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct id_adapter {$/;"	s	namespace:internal
ident_	vendor/spdlog/include/spdlog/sinks/syslog_sink.h	/^    const std::string ident_;$/;"	m	class:spdlog::sinks::syslog_sink	typeref:typename:const std::string
impl	dependencies/include/v8-util.h	/^  typename Traits::Impl* impl() { return &impl_; }$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:Traits::Impl *
impl	dependencies/include/v8.h	/^    internal::ScriptStreamingData* impl() const { return impl_.get(); }$/;"	f	class:v8::ScriptCompiler::StreamedSource	typeref:typename:internal::ScriptStreamingData *
impl_	dependencies/include/v8-util.h	/^  typename Traits::Impl impl_;$/;"	m	class:v8::PersistentValueMapBase	typeref:typename:Traits::Impl
impl_	dependencies/include/v8-util.h	/^  typename Traits::Impl impl_;$/;"	m	class:v8::PersistentValueVector	typeref:typename:Traits::Impl
impl_	dependencies/include/v8.h	/^    std::unique_ptr<internal::ScriptStreamingData> impl_;$/;"	m	class:v8::ScriptCompiler::StreamedSource	typeref:typename:std::unique_ptr<internal::ScriptStreamingData>
impl_	dependencies/include/v8.h	/^  std::unique_ptr<WasmStreamingImpl> impl_;$/;"	m	class:v8::WasmStreaming	typeref:typename:std::unique_ptr<WasmStreamingImpl>
implicit_args_	dependencies/include/v8.h	/^  internal::Address* implicit_args_;$/;"	m	class:v8::FunctionCallbackInfo	typeref:typename:internal::Address *
implicit_bit	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^  static FMT_CONSTEXPR_DECL const uint64_t implicit_bit =$/;"	m	class:internal::fp	typeref:typename:FMT_CONSTEXPR_DECL const uint64_t
in_terminal	vendor/spdlog/include/spdlog/details/os.h	/^inline bool in_terminal(FILE *file) SPDLOG_NOEXCEPT$/;"	f	namespace:spdlog::details::os	typeref:typename:bool
includeSuccessfulResults	vendor/spdlog/tests/catch.hpp	/^        virtual bool includeSuccessfulResults() const   { return m_data.showSuccessfulTests; }$/;"	f	class:Catch::Config	typeref:typename:bool
include_install_dir	vendor/spdlog/CMakeLists.txt	/^set(include_install_dir "${CMAKE_INSTALL_INCLUDEDIR}")$/;"	v
included_categories_	dependencies/include/libplatform/v8-tracing.h	/^  StringList included_categories_;$/;"	m	class:v8::platform::tracing::TraceConfig	typeref:typename:StringList
incr_msg_counter_	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::incr_msg_counter_(details::log_msg &msg)$/;"	f	class:spdlog::logger	typeref:typename:void
indent	vendor/spdlog/tests/catch.hpp	/^        std::size_t indent;         \/\/ indent of subsequent lines, or all if initialIndent is /;"	m	struct:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes	typeref:typename:std::size_t
indent	vendor/spdlog/tests/catch.hpp	/^        std::size_t indent;         \/\/ indent of subsequent lines, or all if initialIndent is /;"	m	struct:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes	typeref:typename:std::size_t
index	dependencies/include/v8-profiler.h	/^  uint32_t index;  \/\/ Index of the time interval that was changed.$/;"	m	struct:v8::HeapStatsUpdate	typeref:typename:uint32_t
index	vendor/spdlog/tests/catch.hpp	/^        for( size_t index = 0; it != itEnd; ++it )$/;"	m	class:Catch::CompositeGenerator	typeref:typename:size_t
index_sequence	dependencies/include/nlohmann/json.hpp	/^struct index_sequence$/;"	s	namespace:nlohmann::detail
index_sequence	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^using index_sequence = integer_sequence<std::size_t, N...>;$/;"	t	namespace:internal	typeref:typename:integer_sequence<std::size_t,N...>
index_sequence	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^using index_sequence = std::index_sequence<N...>;$/;"	t	namespace:internal	typeref:typename:std::index_sequence<N...>
index_sequence_for	dependencies/include/nlohmann/json.hpp	/^using index_sequence_for = make_index_sequence<sizeof...(Ts)>;$/;"	t	namespace:nlohmann::detail
indian_red	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    indian_red = 0xCD5C5C,              \/\/ rgb(205,92,92)$/;"	e	enum:color
indigo	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    indigo = 0x4B0082,                  \/\/ rgb(75,0,130)$/;"	e	enum:color
inf_or_nan_writer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  struct inf_or_nan_writer {$/;"	s	class:basic_writer
info	vendor/spdlog/include/spdlog/common.h	/^    info = SPDLOG_LEVEL_INFO,$/;"	e	enum:spdlog::level::level_enum
info	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::info(const T &msg)$/;"	f	class:spdlog::logger	typeref:typename:void
info	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::info(const char *fmt, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
info	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::info(const wchar_t *fmt, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
info	vendor/spdlog/include/spdlog/spdlog.h	/^inline void info(const T &msg)$/;"	f	namespace:spdlog	typeref:typename:void
info	vendor/spdlog/include/spdlog/spdlog.h	/^inline void info(const char *fmt, const Args &... args)$/;"	f	namespace:spdlog	typeref:typename:void
info	vendor/spdlog/include/spdlog/spdlog.h	/^inline void info(const wchar_t *fmt, const Args &... args)$/;"	f	namespace:spdlog	typeref:typename:void
info	vendor/spdlog/tests/catch.hpp	/^            SectionInfo info;$/;"	m	struct:Catch::RunContext::UnfinishedSections	typeref:typename:SectionInfo
infoMessages	vendor/spdlog/tests/catch.hpp	/^        std::vector<MessageInfo> infoMessages;$/;"	m	struct:Catch::AssertionStats	typeref:typename:std::vector<MessageInfo>
info_arch	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_arch	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_cray	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_cray	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_language_dialect_default	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default =$/;"	v	typeref:typename:const char *
info_language_dialect_default	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v	typeref:typename:const char *
info_platform	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_platform	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate_version	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_simulate_version	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
init	src/Game.cpp	/^void Game::init(const char *title, int xpos, int ypos, int width, int height, bool fullscreen){$/;"	f	class:Game	typeref:typename:void
init	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR init(const T &v) : val(v) {}$/;"	f	struct:internal::init	typeref:typename:FMT_CONSTEXPR
init	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct init {$/;"	s	namespace:internal
init	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void system_error::init($/;"	f	class:system_error	typeref:typename:FMT_FUNC void
init	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void windows_error::init($/;"	f	class:windows_error	typeref:typename:FMT_FUNC void
init	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^void arg_map<Context>::init(const basic_format_args<Context> &args) {$/;"	f	class:internal::arg_map	typeref:typename:void
init_thread_pool	vendor/spdlog/include/spdlog/async.h	/^inline void init_thread_pool(size_t q_size, size_t thread_count)$/;"	f	namespace:spdlog	typeref:typename:void
initialIndent	vendor/spdlog/tests/catch.hpp	/^        std::size_t initialIndent;  \/\/ indent of first line, or npos$/;"	m	struct:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes	typeref:typename:std::size_t
initialIndent	vendor/spdlog/tests/catch.hpp	/^        std::size_t initialIndent;  \/\/ indent of first line, or npos$/;"	m	struct:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes	typeref:typename:std::size_t
initialize_logger	vendor/spdlog/include/spdlog/details/registry.h	/^    void initialize_logger(std::shared_ptr<logger> new_logger)$/;"	f	class:spdlog::details::registry	typeref:typename:void
inline_buffer_size	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^enum { inline_buffer_size = 500 };$/;"	e	enum:__anondc8451670103
installAdditionalCommandLineAPI	dependencies/include/v8-inspector.h	/^  virtual void installAdditionalCommandLineAPI(v8::Local<v8::Context>,$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
instance	vendor/spdlog/include/spdlog/details/registry.h	/^    static registry &instance()$/;"	f	class:spdlog::details::registry	typeref:typename:registry &
instance	vendor/spdlog/tests/catch.hpp	/^            static IColourImpl* instance() {$/;"	f	struct:Catch::__anon368216750810::NoColourImpl	typeref:typename:IColourImpl *
instance	vendor/spdlog/tests/catch.hpp	/^        static IColourImpl* instance() {$/;"	f	class:Catch::__anon368216750a10::PosixColourImpl	typeref:typename:IColourImpl *
int_checker	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^struct int_checker {$/;"	s	namespace:internal
int_checker	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^struct int_checker<true> {$/;"	s	namespace:internal
int_traits	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct int_traits {$/;"	s	namespace:internal
int_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  int_type, uint_type, long_long_type, ulong_long_type, bool_type, char_type,$/;"	e	enum:internal::type
int_type	vendor/spdlog/include/spdlog/fmt/bundled/ostream.h	/^  typedef typename std::basic_streambuf<Char>::int_type int_type;$/;"	t	class:internal::formatbuf	typeref:typename:std::basic_streambuf<Char>::int_type
int_type_checker	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR explicit int_type_checker(ErrorHandler eh) : ErrorHandler(eh) {}$/;"	f	class:internal::int_type_checker	typeref:typename:FMT_CONSTEXPR
int_type_checker	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class int_type_checker : private ErrorHandler {$/;"	c	namespace:internal
int_value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    int int_value;$/;"	m	union:internal::value::__anonbb24b047030a	typeref:typename:int
int_writer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    int_writer(basic_writer<Range> &w, Int value, const Spec &s)$/;"	f	struct:basic_writer::int_writer
int_writer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  struct int_writer {$/;"	s	class:basic_writer
integer_sequence	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^struct integer_sequence {$/;"	s	namespace:internal
integer_sequence	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^using integer_sequence = std::integer_sequence<T, N...>;$/;"	t	namespace:internal	typeref:typename:std::integer_sequence<T,N...>
internal	dependencies/include/v8-internal.h	/^namespace internal {$/;"	n	namespace:v8
internal	dependencies/include/v8.h	/^namespace internal {$/;"	n	namespace:v8
internal	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^namespace internal {$/;"	n
internal	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^namespace internal {$/;"	n
internal	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^namespace internal {$/;"	n
internal	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^namespace internal {$/;"	n
internal	vendor/spdlog/include/spdlog/fmt/bundled/ostream.h	/^namespace internal {$/;"	n
internal	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^namespace internal {$/;"	n
internal	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^namespace internal {$/;"	n
internal	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^namespace internal {$/;"	n
internal	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^namespace internal{$/;"	n
internal_listener_	dependencies/include/v8-profiler.h	/^  void* internal_listener_;$/;"	m	class:v8::CodeEventHandler	typeref:typename:void *
intersects	dependencies/include/SFML/Graphics/Rect.inl	/^bool Rect<T>::intersects(const Rect<T>& rectangle) const$/;"	f	class:Rect	typeref:typename:bool
intersects	dependencies/include/SFML/Graphics/Rect.inl	/^bool Rect<T>::intersects(const Rect<T>& rectangle, Rect<T>& intersection) const$/;"	f	class:Rect	typeref:typename:bool
invoke	vendor/spdlog/tests/catch.hpp	/^        virtual void invoke() const {$/;"	f	class:Catch::FreeFunctionTestCase	typeref:typename:void
invoke	vendor/spdlog/tests/catch.hpp	/^        virtual void invoke() const {$/;"	f	class:Catch::OcMethod	typeref:typename:void
invoke	vendor/spdlog/tests/catch.hpp	/^    virtual void invoke() const {$/;"	f	class:Catch::MethodTestCase	typeref:typename:void
invoke	vendor/spdlog/tests/catch.hpp	/^    void TestCase::invoke() const {$/;"	f	class:Catch::TestCase	typeref:typename:void
invokeActiveTestCase	vendor/spdlog/tests/catch.hpp	/^        void invokeActiveTestCase() {$/;"	f	class:Catch::RunContext	typeref:typename:void
is8Bit	dependencies/include/v8-inspector.h	/^  bool is8Bit() const { return m_is8Bit; }$/;"	f	class:v8_inspector::StringView	typeref:typename:bool
isCompleted	vendor/spdlog/tests/catch.hpp	/^        bool isCompleted() const {$/;"	f	class:Catch::SectionTracking::TestCaseTracker	typeref:typename:bool
isDebuggerActive	vendor/spdlog/tests/catch.hpp	/^        bool isDebuggerActive() {$/;"	f	namespace:Catch	typeref:typename:bool
isDebuggerActive	vendor/spdlog/tests/catch.hpp	/^        bool isDebuggerActive(){$/;"	f	namespace:Catch	typeref:typename:bool
isDebuggerActive	vendor/spdlog/tests/catch.hpp	/^       inline bool isDebuggerActive() { return false; }$/;"	f	namespace:Catch	typeref:typename:bool
isFalseTest	vendor/spdlog/tests/catch.hpp	/^    inline bool isFalseTest( int flags )                { return ( flags & ResultDisposition::Fa/;"	f	namespace:Catch	typeref:typename:bool
isFixedPositional	vendor/spdlog/tests/catch.hpp	/^        bool isFixedPositional() const {$/;"	f	struct:Clara::PositionalArgProperties	typeref:typename:bool
isHidden	vendor/spdlog/tests/catch.hpp	/^    bool TestCaseInfo::isHidden() const {$/;"	f	class:Catch::TestCaseInfo	typeref:typename:bool
isInspectableHeapObject	dependencies/include/v8-inspector.h	/^  virtual bool isInspectableHeapObject(v8::Local<v8::Object>) { return true; }$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:bool
isJustInfo	vendor/spdlog/tests/catch.hpp	/^    inline bool isJustInfo( int flags ) {$/;"	f	namespace:Catch	typeref:typename:bool
isOk	vendor/spdlog/tests/catch.hpp	/^    bool AssertionResult::isOk() const {$/;"	f	class:Catch::AssertionResult	typeref:typename:bool
isOk	vendor/spdlog/tests/catch.hpp	/^    inline bool isOk( ResultWas::OfType resultType ) {$/;"	f	namespace:Catch	typeref:typename:bool
isOwned	vendor/spdlog/tests/catch.hpp	/^        bool isOwned;$/;"	m	class:Catch::Stream	typeref:typename:bool
isReservedTag	vendor/spdlog/tests/catch.hpp	/^    inline bool isReservedTag( std::string const& tag ) {$/;"	f	namespace:Catch	typeref:typename:bool
isRunning	src/Game.hpp	/^  bool isRunning;$/;"	m	class:Game	typeref:typename:bool
isSet	vendor/spdlog/tests/catch.hpp	/^            bool isSet() const {$/;"	f	class:Clara::Detail::BoundArgFunction	typeref:typename:bool
isTrue	vendor/spdlog/tests/catch.hpp	/^    inline bool isTrue( bool value ){ return value; }$/;"	f	namespace:Catch	typeref:typename:bool
is_arithmetic	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  bool is_arithmetic() const { return internal::is_arithmetic(type_); }$/;"	f	class:basic_format_arg	typeref:typename:bool
is_arithmetic	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR bool is_arithmetic(type t) {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR bool
is_color_terminal	vendor/spdlog/include/spdlog/details/os.h	/^inline bool is_color_terminal() SPDLOG_NOEXCEPT$/;"	f	namespace:spdlog::details::os	typeref:typename:bool
is_compile_string	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct is_compile_string :$/;"	s	namespace:internal
is_contiguous	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct is_contiguous : std::false_type {};$/;"	s
is_detected	dependencies/include/nlohmann/json.hpp	/^using is_detected = typename detector<nonesuch, void, Op, Args...>::value_t;$/;"	t	namespace:nlohmann	typeref:typename:detector<nonesuch,void,Op,Args...>::value_t
is_detected_convertible	dependencies/include/nlohmann/json.hpp	/^using is_detected_convertible =$/;"	t	namespace:nlohmann	typeref:typename:std::is_convertible<detected_t<Op,Args...>,To>
is_detected_exact	dependencies/include/nlohmann/json.hpp	/^using is_detected_exact = std::is_same<Expected, detected_t<Op, Args...>>;$/;"	t	namespace:nlohmann	typeref:typename:std::is_same<Expected,detected_t<Op,Args...>>
is_format_string	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct is_format_string :$/;"	s	namespace:internal
is_integer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct is_integer {$/;"	s	namespace:internal
is_integral	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  bool is_integral() const { return internal::is_integral(type_); }$/;"	f	class:basic_format_arg	typeref:typename:bool
is_integral	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR bool is_integral(type t) {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR bool
is_like_std_string	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^class is_like_std_string {$/;"	c	namespace:internal
is_name_start	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR bool is_name_start(Char c) {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR bool
is_named_arg	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct is_named_arg : std::false_type {};$/;"	s	namespace:internal
is_negative	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    !std::numeric_limits<T>::is_signed, bool>::type is_negative(T) {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR typename std::enable_if<!std::numeric_limits<T>::is_signed,bool>::type
is_negative	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    std::numeric_limits<T>::is_signed, bool>::type is_negative(T value) {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR typename std::enable_if<std::numeric_limits<T>::is_signed,bool>::type
is_range	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^struct is_range {$/;"	s
is_range_	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^struct is_range_ : std::false_type {};$/;"	s	namespace:internal
is_range_	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^struct is_range_<T, typename std::conditional<$/;"	s	namespace:internal
is_streamable	vendor/spdlog/include/spdlog/fmt/bundled/ostream.h	/^class is_streamable {$/;"	c	namespace:internal
is_tuple_like	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^struct is_tuple_like {$/;"	s
is_tuple_like_	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^class is_tuple_like_ {$/;"	c	namespace:internal
is_zero_int	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^class is_zero_int: public function<bool> {$/;"	c	namespace:internal
isinf	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline dummy_int isinf(...) { return dummy_int(); }$/;"	f	namespace:internal	typeref:typename:dummy_int
isinfinity	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  static bool isinfinity(T x) {$/;"	f	class:std::numeric_limits	typeref:typename:bool
isnan	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline dummy_int isnan(...) { return dummy_int(); }$/;"	f	namespace:internal	typeref:typename:dummy_int
isnegative	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  static bool isnegative(double x) {$/;"	f	class:std::numeric_limits	typeref:typename:bool
isnotanumber	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  static bool isnotanumber(T x) {$/;"	f	class:std::numeric_limits	typeref:typename:bool
isolate	dependencies/include/v8-util.h	/^  Isolate* isolate() { return isolate_; }$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:Isolate *
isolate_	dependencies/include/v8-util.h	/^  Isolate* isolate_;$/;"	m	class:v8::PersistentValueMapBase	typeref:typename:Isolate *
isolate_	dependencies/include/v8-util.h	/^  Isolate* isolate_;$/;"	m	class:v8::PersistentValueVector	typeref:typename:Isolate *
isolate_	dependencies/include/v8.h	/^  Isolate* isolate_ = nullptr;$/;"	m	class:v8::WasmModuleObjectBuilderStreaming	typeref:typename:Isolate *
isolate_	dependencies/include/v8.h	/^  Isolate* isolate_;$/;"	m	class:v8::WeakCallbackInfo	typeref:typename:Isolate *
isolate_	dependencies/include/v8.h	/^  internal::Isolate* const isolate_;$/;"	m	class:v8::SealHandleScope	typeref:typename:internal::Isolate * const
isolate_	dependencies/include/v8.h	/^  internal::Isolate* isolate_;$/;"	m	class:v8::HandleScope	typeref:typename:internal::Isolate *
it	vendor/spdlog/tests/catch.hpp	/^            for( Text::const_iterator it = _text.begin(), itEnd = _text.end();$/;"	m	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	typeref:typename:Text::const_iterator
it	vendor/spdlog/tests/catch.hpp	/^            for( Text::const_iterator it = _text.begin(), itEnd = _text.end();$/;"	m	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	typeref:typename:Text::const_iterator
it	vendor/spdlog/tests/catch.hpp	/^        typename std::vector<const IGenerator<T>*>::const_iterator it = m_composed.begin();$/;"	m	class:Catch::CompositeGenerator	typeref:typename:std::vector<const IGenerator<T> * >::const_iterator
itEnd	vendor/spdlog/tests/catch.hpp	/^            for( Text::const_iterator it = _text.begin(), itEnd = _text.end();$/;"	m	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	typeref:typename:Text::const_iterator
itEnd	vendor/spdlog/tests/catch.hpp	/^            for( Text::const_iterator it = _text.begin(), itEnd = _text.end();$/;"	m	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	typeref:typename:Text::const_iterator
itEnd	vendor/spdlog/tests/catch.hpp	/^        typename std::vector<const IGenerator<T>*>::const_iterator itEnd = m_composed.end();$/;"	m	class:Catch::CompositeGenerator	typeref:typename:std::vector<const IGenerator<T> * >::const_iterator
itMessage	vendor/spdlog/tests/catch.hpp	/^            std::vector<MessageInfo>::const_iterator itMessage;$/;"	m	class:Catch::CompactReporter::AssertionPrinter	typeref:typename:std::vector<MessageInfo>::const_iterator
it_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  OutputIt it_;$/;"	m	class:output_range	typeref:typename:OutputIt
item	vendor/spdlog/tests/test_mpmc_q.cpp	/^        int item = -1;$/;"	v	typeref:typename:int
item	vendor/spdlog/tests/test_mpmc_q.cpp	/^    int item = -1;$/;"	v	typeref:typename:int
item_type	vendor/spdlog/include/spdlog/details/circular_q.h	/^    using item_type = T;$/;"	t	class:spdlog::details::circular_q	typeref:typename:T
item_type	vendor/spdlog/include/spdlog/details/mpmc_blocking_q.h	/^    using item_type = T;$/;"	t	class:spdlog::details::mpmc_blocking_queue	typeref:typename:T
item_type	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    using item_type = async_msg;$/;"	t	class:spdlog::details::thread_pool	typeref:typename:async_msg
iterator	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typedef OutputIt iterator;$/;"	t	class:internal::context_base	typeref:typename:OutputIt
iterator	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typedef const Char *iterator;$/;"	t	class:basic_string_view	typeref:typename:const Char *
iterator	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typedef typename basic_string_view<Char>::iterator iterator;$/;"	t	class:basic_parse_context	typeref:typename:basic_string_view<Char>::iterator
iterator	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef OutputIt iterator;$/;"	t	class:output_range	typeref:typename:OutputIt
iterator	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef decltype(internal::declval<Range>().begin()) iterator;$/;"	t	class:basic_writer
iterator	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef decltype(internal::declval<Range>().begin()) iterator;$/;"	t	class:internal::arg_formatter_base
iterator	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef internal::null_terminating_iterator<Char> iterator;$/;"	t	class:internal::format_string_checker	typeref:typename:internal::null_terminating_iterator<Char>
iterator	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef internal::null_terminating_iterator<Char> iterator;$/;"	t	struct:format_handler	typeref:typename:internal::null_terminating_iterator<Char>
iterator	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef typename base::iterator iterator;$/;"	t	class:arg_formatter	typeref:typename:base::iterator
iterator	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  typedef decltype(internal::declval<Range>().begin()) iterator;$/;"	t	class:printf_arg_formatter
iterator	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  typedef internal::null_terminating_iterator<char_type> iterator;$/;"	t	class:basic_printf_context	typeref:typename:internal::null_terminating_iterator<char_type>
iterator_category	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef std::output_iterator_tag iterator_category;$/;"	t	class:internal::counting_iterator	typeref:typename:std::output_iterator_tag
iterator_category	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef std::output_iterator_tag iterator_category;$/;"	t	class:internal::truncating_iterator	typeref:typename:std::output_iterator_tag
iterator_category	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:internal::null_terminating_iterator	typeref:typename:std::random_access_iterator_tag
iterator_traits	dependencies/include/nlohmann/json.hpp	/^struct iterator_traits$/;"	s	namespace:nlohmann::detail
iterator_traits	dependencies/include/nlohmann/json.hpp	/^struct iterator_traits<T*, enable_if_t<std::is_object<T>::value>>$/;"	v	namespace:nlohmann::detail	typeref:struct:iterator_traits template struct
iterator_types	dependencies/include/nlohmann/json.hpp	/^struct iterator_types {};$/;"	s	namespace:nlohmann::detail
ivory	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    ivory = 0xFFFFF0,                   \/\/ rgb(255,255,240)$/;"	e	enum:color
j	vendor/spdlog/tests/test_async.cpp	/^        for (size_t j = 0; j < messages; j++)$/;"	v	typeref:typename:size_t
join	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^arg_join<It, char> join(It begin, It end, string_view sep) {$/;"	f	typeref:typename:arg_join<It,char>
join	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^arg_join<It, wchar_t> join(It begin, It end, wstring_view sep) {$/;"	f	typeref:typename:arg_join<It,wchar_t>
join	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^auto join(const Range &range, string_view sep)$/;"	f	typeref:typename:arg_join<decltype (internal::begin (range)),char>
join	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^auto join(const Range &range, wstring_view sep)$/;"	f	typeref:typename:arg_join<decltype (internal::begin (range)),wchar_t>
joystickButton	dependencies/include/SFML/Window/Event.hpp	/^        JoystickButtonEvent   joystickButton;    \/\/\/< Joystick button event parameters (Event/;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:JoystickButtonEvent
joystickConnect	dependencies/include/SFML/Window/Event.hpp	/^        JoystickConnectEvent  joystickConnect;   \/\/\/< Joystick (dis)connect event parameters /;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:JoystickConnectEvent
joystickId	dependencies/include/SFML/Window/Event.hpp	/^        unsigned int   joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count/;"	m	struct:sf::Event::JoystickMoveEvent	typeref:typename:unsigned int
joystickId	dependencies/include/SFML/Window/Event.hpp	/^        unsigned int joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count -/;"	m	struct:sf::Event::JoystickButtonEvent	typeref:typename:unsigned int
joystickId	dependencies/include/SFML/Window/Event.hpp	/^        unsigned int joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count -/;"	m	struct:sf::Event::JoystickConnectEvent	typeref:typename:unsigned int
joystickMove	dependencies/include/SFML/Window/Event.hpp	/^        JoystickMoveEvent     joystickMove;      \/\/\/< Joystick move event parameters (Event::/;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:JoystickMoveEvent
js_entry_stub	dependencies/include/v8.h	/^  JSEntryStub js_entry_stub;$/;"	m	struct:v8::UnwindState	typeref:typename:JSEntryStub
jsge	CMakeLists.txt	/^add_executable(jsge$/;"	t
json	dependencies/include/nlohmann/json.hpp	/^using json = basic_json<>;$/;"	t	namespace:nlohmann	typeref:typename:basic_json<>
kAbort	dependencies/include/v8-profiler.h	/^    kAbort = 1$/;"	e	enum:v8::ActivityControl::ControlOption
kAbort	dependencies/include/v8-profiler.h	/^    kAbort = 1$/;"	e	enum:v8::OutputStream::WriteResult
kAllCanRead	dependencies/include/v8.h	/^  kAllCanRead = 1,$/;"	e	enum:v8::PropertyHandlerFlags
kAllow	dependencies/include/v8.h	/^enum class ConstructorBehavior { kThrow, kAllow };$/;"	e	enum:v8::ConstructorBehavior
kApiDoubleSize	dependencies/include/v8-internal.h	/^const int kApiDoubleSize = sizeof(double);$/;"	v	namespace:v8::internal	typeref:typename:const int
kApiInt64Size	dependencies/include/v8-internal.h	/^const int kApiInt64Size = sizeof(int64_t);$/;"	v	namespace:v8::internal	typeref:typename:const int
kApiIntSize	dependencies/include/v8-internal.h	/^const int kApiIntSize = sizeof(int);$/;"	v	namespace:v8::internal	typeref:typename:const int
kApiSystemPointerSize	dependencies/include/v8-internal.h	/^const int kApiSystemPointerSize = sizeof(void*);$/;"	v	namespace:v8::internal	typeref:typename:const int
kApiTaggedSize	dependencies/include/v8-internal.h	/^const int kApiTaggedSize = kApiSystemPointerSize;$/;"	v	namespace:v8::internal	typeref:typename:const int
kArgsLength	dependencies/include/v8.h	/^  static const int kArgsLength = 6;$/;"	m	class:v8::FunctionCallbackInfo	typeref:typename:const int
kArgsLength	dependencies/include/v8.h	/^  static const int kArgsLength = 7;$/;"	m	class:v8::PropertyCallbackInfo	typeref:typename:const int
kArray	dependencies/include/v8-profiler.h	/^    kArray = 1,          \/\/ An array of elements.$/;"	e	enum:v8::HeapGraphNode::Type
kBigInt	dependencies/include/v8-profiler.h	/^    kBigInt = 13         \/\/ BigInt.$/;"	e	enum:v8::HeapGraphNode::Type
kCallbackType	dependencies/include/v8-util.h	/^  static const PersistentContainerCallbackType kCallbackType = kNotWeak;$/;"	m	class:v8::DefaultGlobalMapTraits	typeref:typename:const PersistentContainerCallbackType
kCallbackType	dependencies/include/v8-util.h	/^  static const PersistentContainerCallbackType kCallbackType = kNotWeak;$/;"	m	class:v8::DefaultPersistentValueMapTraits	typeref:typename:const PersistentContainerCallbackType
kCallerLineNumbers	dependencies/include/v8-profiler.h	/^  kCallerLineNumbers,$/;"	e	enum:v8::CpuProfilingMode
kChunkSize	dependencies/include/libplatform/v8-tracing.h	/^  static const size_t kChunkSize = 64;$/;"	m	class:v8::platform::tracing::TraceBufferChunk	typeref:typename:const size_t
kClosure	dependencies/include/v8-profiler.h	/^    kClosure = 5,        \/\/ Function closure.$/;"	e	enum:v8::HeapGraphNode::Type
kCode	dependencies/include/v8-profiler.h	/^    kCode = 4,           \/\/ Compiled code.$/;"	e	enum:v8::HeapGraphNode::Type
kColumnOffset	dependencies/include/v8.h	/^    kColumnOffset = 1 << 1 | kLineNumber,$/;"	e	enum:v8::StackTrace::StackTraceOptions
kConsString	dependencies/include/v8-profiler.h	/^    kConsString = 10,    \/\/ Concatenated string. A pair of pointers to strings.$/;"	e	enum:v8::HeapGraphNode::Type
kConsumeCodeCache	dependencies/include/v8.h	/^    kConsumeCodeCache,$/;"	e	enum:v8::ScriptCompiler::CompileOptions
kContextVariable	dependencies/include/v8-profiler.h	/^    kContextVariable = 0,  \/\/ A variable from a function context.$/;"	e	enum:v8::HeapGraphEdge::Type
kContinue	dependencies/include/v8-profiler.h	/^    kContinue = 0,$/;"	e	enum:v8::ActivityControl::ControlOption
kContinue	dependencies/include/v8-profiler.h	/^    kContinue = 0,$/;"	e	enum:v8::OutputStream::WriteResult
kConvertToString	dependencies/include/v8.h	/^enum class KeyConversionMode { kConvertToString, kKeepNumbers };$/;"	e	enum:v8::KeyConversionMode
kDataIndex	dependencies/include/v8.h	/^  static const int kDataIndex = 4;$/;"	m	class:v8::FunctionCallbackInfo	typeref:typename:const int
kDataIndex	dependencies/include/v8.h	/^  static const int kDataIndex = 5;$/;"	m	class:v8::PropertyCallbackInfo	typeref:typename:const int
kDetailed	dependencies/include/v8.h	/^    kDetailed = kOverview | kIsEval | kIsConstructor | kScriptNameOrSourceURL$/;"	e	enum:v8::StackTrace::StackTraceOptions
kDisabled	dependencies/include/libplatform/libplatform.h	/^enum class IdleTaskSupport { kDisabled, kEnabled };$/;"	e	enum:v8::platform::IdleTaskSupport
kDisabled	dependencies/include/libplatform/libplatform.h	/^enum class InProcessStackDumping { kDisabled, kEnabled };$/;"	e	enum:v8::platform::InProcessStackDumping
kDoNotWait	dependencies/include/libplatform/libplatform.h	/^  kDoNotWait = false,$/;"	e	enum:v8::platform::MessageLoopBehavior
kDotAll	dependencies/include/v8.h	/^    kDotAll = 1 << 5,$/;"	e	enum:v8::RegExp::Flags
kEagerCompile	dependencies/include/v8.h	/^    kEagerCompile$/;"	e	enum:v8::ScriptCompiler::CompileOptions
kElement	dependencies/include/v8-profiler.h	/^    kElement = 1,          \/\/ An element of an array.$/;"	e	enum:v8::HeapGraphEdge::Type
kEmbedderDataArrayHeaderSize	dependencies/include/v8-internal.h	/^  static const int kEmbedderDataArrayHeaderSize = 2 * kApiTaggedSize;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kEmbedderDataSlotSize	dependencies/include/v8-internal.h	/^  static const int kEmbedderDataSlotSize =$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kEmbedderFieldCount	dependencies/include/v8.h	/^  static const int kEmbedderFieldCount = V8_ARRAY_BUFFER_INTERNAL_FIELD_COUNT;$/;"	m	class:v8::ArrayBuffer	typeref:typename:const int
kEmbedderFieldCount	dependencies/include/v8.h	/^  static const int kEmbedderFieldCount = V8_PROMISE_INTERNAL_FIELD_COUNT;$/;"	m	class:v8::Promise	typeref:typename:const int
kEmbedderFieldCount	dependencies/include/v8.h	/^  static const int kEmbedderFieldCount =$/;"	m	class:v8::ArrayBufferView	typeref:typename:const int
kEmbedderFieldsInWeakCallback	dependencies/include/v8.h	/^static const int kEmbedderFieldsInWeakCallback = 2;$/;"	v	namespace:v8	typeref:typename:const int
kEmptyStringRootIndex	dependencies/include/v8-internal.h	/^  static const int kEmptyStringRootIndex = 9;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kEnabled	dependencies/include/libplatform/libplatform.h	/^enum class IdleTaskSupport { kDisabled, kEnabled };$/;"	e	enum:v8::platform::IdleTaskSupport
kEnabled	dependencies/include/libplatform/libplatform.h	/^enum class InProcessStackDumping { kDisabled, kEnabled };$/;"	e	enum:v8::platform::InProcessStackDumping
kErrored	dependencies/include/v8.h	/^    kErrored$/;"	e	enum:v8::Module::Status
kEvaluated	dependencies/include/v8.h	/^    kEvaluated,$/;"	e	enum:v8::Module::Status
kEvaluating	dependencies/include/v8.h	/^    kEvaluating,$/;"	e	enum:v8::Module::Status
kExposeFramesAcrossSecurityOrigins	dependencies/include/v8.h	/^    kExposeFramesAcrossSecurityOrigins = 1 << 8,$/;"	e	enum:v8::StackTrace::StackTraceOptions
kExternalAllocationSoftLimit	dependencies/include/v8-internal.h	/^  static constexpr int kExternalAllocationSoftLimit = 64 * 1024 * 1024;$/;"	m	class:v8::internal::Internals	typeref:typename:int
kExternalMemoryAtLastMarkCompactOffset	dependencies/include/v8-internal.h	/^  static const int kExternalMemoryAtLastMarkCompactOffset =$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kExternalMemoryLimitOffset	dependencies/include/v8-internal.h	/^  static const int kExternalMemoryLimitOffset =$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kExternalMemoryOffset	dependencies/include/v8-internal.h	/^  static const int kExternalMemoryOffset =$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kExternalOneByteRepresentationTag	dependencies/include/v8-internal.h	/^  static const int kExternalOneByteRepresentationTag = 0x0a;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kExternalTwoByteRepresentationTag	dependencies/include/v8-internal.h	/^  static const int kExternalTwoByteRepresentationTag = 0x02;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kExternalized	dependencies/include/v8.h	/^enum class ArrayBufferCreationMode { kInternalized, kExternalized };$/;"	e	enum:v8::ArrayBufferCreationMode
kFalseValueRootIndex	dependencies/include/v8-internal.h	/^  static const int kFalseValueRootIndex = 8;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kFinalizer	dependencies/include/v8.h	/^enum class WeakCallbackType { kParameter, kInternalFields, kFinalizer };$/;"	e	enum:v8::WeakCallbackType
kFirstNonstringType	dependencies/include/v8-internal.h	/^  static const int kFirstNonstringType = 0x80;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kFixedArrayHeaderSize	dependencies/include/v8-internal.h	/^  static const int kFixedArrayHeaderSize = 2 * kApiTaggedSize;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kForeignAddressOffset	dependencies/include/v8-internal.h	/^  static const int kForeignAddressOffset = kApiTaggedSize;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kForeignType	dependencies/include/v8-internal.h	/^  static const int kForeignType = 0x87;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kFrozen	dependencies/include/v8.h	/^enum class IntegrityLevel { kFrozen, kSealed };$/;"	e	enum:v8::IntegrityLevel
kFulfilled	dependencies/include/v8.h	/^  enum PromiseState { kPending, kFulfilled, kRejected };$/;"	e	enum:v8::Promise::PromiseState
kFullStringRepresentationMask	dependencies/include/v8-internal.h	/^  static const int kFullStringRepresentationMask = 0x0f;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kFunctionName	dependencies/include/v8.h	/^    kFunctionName = 1 << 3,$/;"	e	enum:v8::StackTrace::StackTraceOptions
kGlobal	dependencies/include/v8.h	/^    kGlobal = 1 << 0,$/;"	e	enum:v8::RegExp::Flags
kHasNoSideEffect	dependencies/include/v8.h	/^  kHasNoSideEffect = 1 << 3,$/;"	e	enum:v8::PropertyHandlerFlags
kHasNoSideEffect	dependencies/include/v8.h	/^  kHasNoSideEffect,$/;"	e	enum:v8::SideEffectType
kHasSideEffect	dependencies/include/v8.h	/^  kHasSideEffect,$/;"	e	enum:v8::SideEffectType
kHasSideEffectToReceiver	dependencies/include/v8.h	/^  kHasSideEffectToReceiver$/;"	e	enum:v8::SideEffectType
kHeapNumber	dependencies/include/v8-profiler.h	/^    kHeapNumber = 7,     \/\/ Number stored in the heap.$/;"	e	enum:v8::HeapGraphNode::Type
kHeapObjectMapOffset	dependencies/include/v8-internal.h	/^  static const int kHeapObjectMapOffset = 0;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kHeapObjectTag	dependencies/include/v8-internal.h	/^const int kHeapObjectTag = 1;$/;"	v	namespace:v8::internal	typeref:typename:const int
kHeapObjectTagMask	dependencies/include/v8-internal.h	/^const intptr_t kHeapObjectTagMask = (1 << kHeapObjectTagSize) - 1;$/;"	v	namespace:v8::internal	typeref:typename:const intptr_t
kHeapObjectTagSize	dependencies/include/v8-internal.h	/^const int kHeapObjectTagSize = 2;$/;"	v	namespace:v8::internal	typeref:typename:const int
kHidden	dependencies/include/v8-profiler.h	/^    kHidden = 0,         \/\/ Hidden node, may be filtered when shown to user.$/;"	e	enum:v8::HeapGraphNode::Type
kHidden	dependencies/include/v8-profiler.h	/^    kHidden = 4,           \/\/ A link that is needed for proper sizes$/;"	e	enum:v8::HeapGraphEdge::Type
kHolderIndex	dependencies/include/v8.h	/^  static const int kHolderIndex = 0;$/;"	m	class:v8::FunctionCallbackInfo	typeref:typename:const int
kHolderIndex	dependencies/include/v8.h	/^  static const int kHolderIndex = 1;$/;"	m	class:v8::PropertyCallbackInfo	typeref:typename:const int
kIgnoreCase	dependencies/include/v8.h	/^    kIgnoreCase = 1 << 1,$/;"	e	enum:v8::RegExp::Flags
kIncludeCEntryFrame	dependencies/include/v8-profiler.h	/^  enum RecordCEntryFrame { kIncludeCEntryFrame, kSkipCEntryFrame };$/;"	e	enum:v8::TickSample::RecordCEntryFrame
kIncludeIndices	dependencies/include/v8.h	/^enum class IndexFilter { kIncludeIndices, kSkipIndices };$/;"	e	enum:v8::IndexFilter
kIncludePrototypes	dependencies/include/v8.h	/^enum class KeyCollectionMode { kOwnOnly, kIncludePrototypes };$/;"	e	enum:v8::KeyCollectionMode
kInstantiated	dependencies/include/v8.h	/^    kInstantiated,$/;"	e	enum:v8::Module::Status
kInstantiating	dependencies/include/v8.h	/^    kInstantiating,$/;"	e	enum:v8::Module::Status
kInternal	dependencies/include/v8-profiler.h	/^    kInternal = 3,         \/\/ A link that can't be accessed from JS,$/;"	e	enum:v8::HeapGraphEdge::Type
kInternalFieldCount	dependencies/include/v8.h	/^  static const int kInternalFieldCount = V8_ARRAY_BUFFER_INTERNAL_FIELD_COUNT;$/;"	m	class:v8::ArrayBuffer	typeref:typename:const int
kInternalFieldCount	dependencies/include/v8.h	/^  static const int kInternalFieldCount = V8_ARRAY_BUFFER_INTERNAL_FIELD_COUNT;$/;"	m	class:v8::SharedArrayBuffer	typeref:typename:const int
kInternalFieldCount	dependencies/include/v8.h	/^  static const int kInternalFieldCount =$/;"	m	class:v8::ArrayBufferView	typeref:typename:const int
kInternalFields	dependencies/include/v8.h	/^enum class WeakCallbackType { kParameter, kInternalFields, kFinalizer };$/;"	e	enum:v8::WeakCallbackType
kInternalFieldsInWeakCallback	dependencies/include/v8.h	/^static const int kInternalFieldsInWeakCallback = 2;$/;"	v	namespace:v8	typeref:typename:const int
kInternalized	dependencies/include/v8.h	/^  kInternalized$/;"	e	enum:v8::NewStringType
kInternalized	dependencies/include/v8.h	/^enum class ArrayBufferCreationMode { kInternalized, kExternalized };$/;"	e	enum:v8::ArrayBufferCreationMode
kInternalizedString	dependencies/include/v8.h	/^    kInternalizedString = static_cast<int>(v8::NewStringType::kInternalized)$/;"	e	enum:v8::String::NewStringType
kIsConstructor	dependencies/include/v8.h	/^    kIsConstructor = 1 << 5,$/;"	e	enum:v8::StackTrace::StackTraceOptions
kIsEval	dependencies/include/v8.h	/^    kIsEval = 1 << 4,$/;"	e	enum:v8::StackTrace::StackTraceOptions
kIsModule	dependencies/include/v8.h	/^    kIsModule = 1 << 3$/;"	e	enum:v8::ScriptOriginOptions::__anon94c341520203
kIsOpaque	dependencies/include/v8.h	/^    kIsOpaque = 1 << 1,$/;"	e	enum:v8::ScriptOriginOptions::__anon94c341520203
kIsSharedCrossOrigin	dependencies/include/v8.h	/^    kIsSharedCrossOrigin = 1,$/;"	e	enum:v8::ScriptOriginOptions::__anon94c341520203
kIsWasm	dependencies/include/v8.h	/^    kIsWasm = 1 << 2,$/;"	e	enum:v8::ScriptOriginOptions::__anon94c341520203
kIsolateEmbedderDataOffset	dependencies/include/v8-internal.h	/^  static const int kIsolateEmbedderDataOffset = 0;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kIsolateIndex	dependencies/include/v8.h	/^  static const int kIsolateIndex = 1;$/;"	m	class:v8::FunctionCallbackInfo	typeref:typename:const int
kIsolateIndex	dependencies/include/v8.h	/^  static const int kIsolateIndex = 2;$/;"	m	class:v8::PropertyCallbackInfo	typeref:typename:const int
kIsolateRootsOffset	dependencies/include/v8-internal.h	/^  static const int kIsolateRootsOffset =$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kJSApiObjectType	dependencies/include/v8-internal.h	/^  static const int kJSApiObjectType = 0x420;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kJSON	dependencies/include/v8-profiler.h	/^    kJSON = 0  \/\/ See format description near 'Serialize' method.$/;"	e	enum:v8::HeapSnapshot::SerializationFormat
kJSObjectHeaderSize	dependencies/include/v8-internal.h	/^  static const int kJSObjectHeaderSize = 3 * kApiTaggedSize;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kJSObjectHeaderSizeForEmbedderFields	dependencies/include/v8-internal.h	/^  static const int kJSObjectHeaderSizeForEmbedderFields =$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kJSObjectType	dependencies/include/v8-internal.h	/^  static const int kJSObjectType = 0x421;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kJSSpecialApiObjectType	dependencies/include/v8-internal.h	/^  static const int kJSSpecialApiObjectType = 0x410;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kKeepNumbers	dependencies/include/v8.h	/^enum class KeyConversionMode { kConvertToString, kKeepNumbers };$/;"	e	enum:v8::KeyConversionMode
kLeafNodeLineNumbers	dependencies/include/v8-profiler.h	/^  kLeafNodeLineNumbers,$/;"	e	enum:v8::CpuProfilingMode
kLineNumber	dependencies/include/v8.h	/^    kLineNumber = 1,$/;"	e	enum:v8::StackTrace::StackTraceOptions
kLineOffsetNotFound	dependencies/include/v8.h	/^  static const int kLineOffsetNotFound;$/;"	m	class:v8::Function	typeref:typename:const int
kMapInstanceTypeOffset	dependencies/include/v8-internal.h	/^  static const int kMapInstanceTypeOffset = 1 * kApiTaggedSize + kApiIntSize;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kMaxFramesCount	dependencies/include/v8-profiler.h	/^  static const unsigned kMaxFramesCount = (1 << kMaxFramesCountLog2) - 1;$/;"	m	struct:v8::TickSample	typeref:typename:const unsigned
kMaxFramesCountLog2	dependencies/include/v8-profiler.h	/^  static const unsigned kMaxFramesCountLog2 = 8;$/;"	m	struct:v8::TickSample	typeref:typename:const unsigned
kMaxLength	dependencies/include/v8.h	/^  static constexpr int kMaxLength = internal::kApiTaggedSize == 4$/;"	m	class:v8::String	typeref:typename:int
kMaxLength	dependencies/include/v8.h	/^  static constexpr size_t kMaxLength = internal::kSmiMaxValue;$/;"	m	class:v8::TypedArray	typeref:typename:size_t
kMultiline	dependencies/include/v8.h	/^    kMultiline = 1 << 2,$/;"	e	enum:v8::RegExp::Flags
kNative	dependencies/include/v8-profiler.h	/^    kNative = 8,         \/\/ Native object (not from V8 heap).$/;"	e	enum:v8::HeapGraphNode::Type
kNativeContextEmbedderDataOffset	dependencies/include/v8-internal.h	/^  static const int kNativeContextEmbedderDataOffset = 7 * kApiTaggedSize;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kNewTargetIndex	dependencies/include/v8.h	/^  static const int kNewTargetIndex = 5;$/;"	m	class:v8::FunctionCallbackInfo	typeref:typename:const int
kNoAccess	dependencies/include/v8-platform.h	/^    kNoAccess,$/;"	e	enum:v8::PageAllocator::Permission
kNoCacheBecauseCacheTooCold	dependencies/include/v8.h	/^    kNoCacheBecauseCacheTooCold,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseCachingDisabled	dependencies/include/v8.h	/^    kNoCacheBecauseCachingDisabled,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseDeferredProduceCodeCache	dependencies/include/v8.h	/^    kNoCacheBecauseDeferredProduceCodeCache$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseExtensionModule	dependencies/include/v8.h	/^    kNoCacheBecauseExtensionModule,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseInDocumentWrite	dependencies/include/v8.h	/^    kNoCacheBecauseInDocumentWrite,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseInlineScript	dependencies/include/v8.h	/^    kNoCacheBecauseInlineScript,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseInspector	dependencies/include/v8.h	/^    kNoCacheBecauseInspector,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseModule	dependencies/include/v8.h	/^    kNoCacheBecauseModule,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseNoResource	dependencies/include/v8.h	/^    kNoCacheBecauseNoResource,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecausePacScript	dependencies/include/v8.h	/^    kNoCacheBecausePacScript,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseResourceWithNoCacheHandler	dependencies/include/v8.h	/^    kNoCacheBecauseResourceWithNoCacheHandler,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseScriptTooSmall	dependencies/include/v8.h	/^    kNoCacheBecauseScriptTooSmall,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseStreamingSource	dependencies/include/v8.h	/^    kNoCacheBecauseStreamingSource,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseV8Extension	dependencies/include/v8.h	/^    kNoCacheBecauseV8Extension,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheNoReason	dependencies/include/v8.h	/^    kNoCacheNoReason = 0,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoColumnInfo	dependencies/include/v8.h	/^  static const int kNoColumnInfo = 0;$/;"	m	class:v8::Message	typeref:typename:const int
kNoColumnNumberInfo	dependencies/include/v8-profiler.h	/^  static const int kNoColumnNumberInfo = Message::kNoColumnInfo;$/;"	m	class:v8::AllocationProfile	typeref:typename:const int
kNoColumnNumberInfo	dependencies/include/v8-profiler.h	/^  static const int kNoColumnNumberInfo = Message::kNoColumnInfo;$/;"	m	class:v8::CpuProfileNode	typeref:typename:const int
kNoCompileOptions	dependencies/include/v8.h	/^    kNoCompileOptions = 0,$/;"	e	enum:v8::ScriptCompiler::CompileOptions
kNoLineNumberInfo	dependencies/include/v8-profiler.h	/^  static const int kNoLineNumberInfo = Message::kNoLineNumberInfo;$/;"	m	class:v8::AllocationProfile	typeref:typename:const int
kNoLineNumberInfo	dependencies/include/v8-profiler.h	/^  static const int kNoLineNumberInfo = Message::kNoLineNumberInfo;$/;"	m	class:v8::CpuProfileNode	typeref:typename:const int
kNoLineNumberInfo	dependencies/include/v8.h	/^  static const int kNoLineNumberInfo = 0;$/;"	m	class:v8::Message	typeref:typename:const int
kNoScriptId	dependencies/include/v8.h	/^  static const int kNoScriptId = 0;$/;"	m	class:v8::UnboundScript	typeref:typename:const int
kNoScriptIdInfo	dependencies/include/v8.h	/^  static const int kNoScriptIdInfo = 0;$/;"	m	class:v8::Message	typeref:typename:const int
kNodeClassIdOffset	dependencies/include/v8-internal.h	/^  static const int kNodeClassIdOffset = 1 * kApiTaggedSize;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kNodeFlagsOffset	dependencies/include/v8-internal.h	/^  static const int kNodeFlagsOffset = 1 * kApiTaggedSize + 3;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kNodeIsActiveShift	dependencies/include/v8-internal.h	/^  static const int kNodeIsActiveShift = 4;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kNodeIsIndependentShift	dependencies/include/v8-internal.h	/^  static const int kNodeIsIndependentShift = 3;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kNodeStateIsNearDeathValue	dependencies/include/v8-internal.h	/^  static const int kNodeStateIsNearDeathValue = 4;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kNodeStateIsPendingValue	dependencies/include/v8-internal.h	/^  static const int kNodeStateIsPendingValue = 3;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kNodeStateIsWeakValue	dependencies/include/v8-internal.h	/^  static const int kNodeStateIsWeakValue = 2;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kNodeStateMask	dependencies/include/v8-internal.h	/^  static const int kNodeStateMask = 0x7;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kNonMasking	dependencies/include/v8.h	/^  kNonMasking = 1 << 1,$/;"	e	enum:v8::PropertyHandlerFlags
kNone	dependencies/include/v8.h	/^    kNone = 0,$/;"	e	enum:v8::RegExp::Flags
kNone	dependencies/include/v8.h	/^  kNone = 0,$/;"	e	enum:v8::PropertyHandlerFlags
kNormal	dependencies/include/v8.h	/^    enum class AllocationMode { kNormal, kReservation };$/;"	e	enum:v8::ArrayBuffer::Allocator::AllocationMode
kNormal	dependencies/include/v8.h	/^  kNormal,$/;"	e	enum:v8::NewStringType
kNormalString	dependencies/include/v8.h	/^    kNormalString = static_cast<int>(v8::NewStringType::kNormal),$/;"	e	enum:v8::String::NewStringType
kNotWeak	dependencies/include/v8-util.h	/^  kNotWeak,$/;"	e	enum:v8::PersistentContainerCallbackType
kNullAddress	dependencies/include/v8-internal.h	/^static const Address kNullAddress = 0;$/;"	v	namespace:v8::internal	typeref:typename:const Address
kNullOddballKind	dependencies/include/v8-internal.h	/^  static const int kNullOddballKind = 3;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kNullValueRootIndex	dependencies/include/v8-internal.h	/^  static const int kNullValueRootIndex = 6;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kNumIsolateDataSlots	dependencies/include/v8-internal.h	/^  static const uint32_t kNumIsolateDataSlots = 4;$/;"	m	class:v8::internal::Internals	typeref:typename:const uint32_t
kObject	dependencies/include/v8-profiler.h	/^    kObject = 3,         \/\/ A JS object (except for arrays and strings).$/;"	e	enum:v8::HeapGraphNode::Type
kOddballKindOffset	dependencies/include/v8-internal.h	/^  static const int kOddballKindOffset = 4 * kApiTaggedSize + kApiDoubleSize;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kOddballType	dependencies/include/v8-internal.h	/^  static const int kOddballType = 0x83;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kOnlyInterceptStrings	dependencies/include/v8.h	/^  kOnlyInterceptStrings = 1 << 2,$/;"	e	enum:v8::PropertyHandlerFlags
kOverview	dependencies/include/v8.h	/^    kOverview = kLineNumber | kColumnOffset | kScriptName | kFunctionName,$/;"	e	enum:v8::StackTrace::StackTraceOptions
kOwnOnly	dependencies/include/v8.h	/^enum class KeyCollectionMode { kOwnOnly, kIncludePrototypes };$/;"	e	enum:v8::KeyCollectionMode
kParameter	dependencies/include/v8.h	/^enum class WeakCallbackType { kParameter, kInternalFields, kFinalizer };$/;"	e	enum:v8::WeakCallbackType
kPending	dependencies/include/v8.h	/^  enum PromiseState { kPending, kFulfilled, kRejected };$/;"	e	enum:v8::Promise::PromiseState
kPersistentContainerNotFound	dependencies/include/v8-util.h	/^static const uintptr_t kPersistentContainerNotFound = 0;$/;"	v	namespace:v8	typeref:typename:const uintptr_t
kPersistentHandleNoClassId	dependencies/include/v8-profiler.h	/^  static const uint16_t kPersistentHandleNoClassId = 0;$/;"	m	class:v8::HeapProfiler	typeref:typename:const uint16_t
kProperty	dependencies/include/v8-profiler.h	/^    kProperty = 2,         \/\/ A named object property.$/;"	e	enum:v8::HeapGraphEdge::Type
kPtrComprIsolateRootBias	dependencies/include/v8-internal.h	/^  static constexpr size_t kPtrComprIsolateRootBias =$/;"	m	class:v8::internal::Internals	typeref:typename:size_t
kRead	dependencies/include/v8-platform.h	/^    kRead,$/;"	e	enum:v8::PageAllocator::Permission
kReadExecute	dependencies/include/v8-platform.h	/^    kReadExecute$/;"	e	enum:v8::PageAllocator::Permission
kReadWrite	dependencies/include/v8-platform.h	/^    kReadWrite,$/;"	e	enum:v8::PageAllocator::Permission
kReadWriteExecute	dependencies/include/v8-platform.h	/^    kReadWriteExecute,$/;"	e	enum:v8::PageAllocator::Permission
kRegExp	dependencies/include/v8-profiler.h	/^    kRegExp = 6,         \/\/ RegExp.$/;"	e	enum:v8::HeapGraphNode::Type
kRejected	dependencies/include/v8.h	/^  enum PromiseState { kPending, kFulfilled, kRejected };$/;"	e	enum:v8::Promise::PromiseState
kReservation	dependencies/include/v8.h	/^    enum class AllocationMode { kNormal, kReservation };$/;"	e	enum:v8::ArrayBuffer::Allocator::AllocationMode
kResetInDestructor	dependencies/include/v8.h	/^  static const bool kResetInDestructor = false;$/;"	m	class:v8::NonCopyablePersistentTraits	typeref:typename:const bool
kResetInDestructor	dependencies/include/v8.h	/^  static const bool kResetInDestructor = true;$/;"	m	struct:v8::CopyablePersistentTraits	typeref:typename:const bool
kReturnValueDefaultValueIndex	dependencies/include/v8.h	/^  static const int kReturnValueDefaultValueIndex = 2;$/;"	m	class:v8::FunctionCallbackInfo	typeref:typename:const int
kReturnValueDefaultValueIndex	dependencies/include/v8.h	/^  static const int kReturnValueDefaultValueIndex = 3;$/;"	m	class:v8::PropertyCallbackInfo	typeref:typename:const int
kReturnValueIndex	dependencies/include/v8.h	/^  static const int kReturnValueIndex = 3;$/;"	m	class:v8::FunctionCallbackInfo	typeref:typename:const int
kReturnValueIndex	dependencies/include/v8.h	/^  static const int kReturnValueIndex = 4;$/;"	m	class:v8::PropertyCallbackInfo	typeref:typename:const int
kRingBufferChunks	dependencies/include/libplatform/v8-tracing.h	/^  static const size_t kRingBufferChunks = 1024;$/;"	m	class:v8::platform::tracing::TraceBuffer	typeref:typename:const size_t
kSamplingForceGC	dependencies/include/v8-profiler.h	/^    kSamplingForceGC = 1 << 0,$/;"	e	enum:v8::HeapProfiler::SamplingFlags
kSamplingNoFlags	dependencies/include/v8-profiler.h	/^    kSamplingNoFlags = 0,$/;"	e	enum:v8::HeapProfiler::SamplingFlags
kScriptId	dependencies/include/v8.h	/^    kScriptId = 1 << 7,$/;"	e	enum:v8::StackTrace::StackTraceOptions
kScriptName	dependencies/include/v8.h	/^    kScriptName = 1 << 2,$/;"	e	enum:v8::StackTrace::StackTraceOptions
kScriptNameOrSourceURL	dependencies/include/v8.h	/^    kScriptNameOrSourceURL = 1 << 6,$/;"	e	enum:v8::StackTrace::StackTraceOptions
kSealed	dependencies/include/v8.h	/^enum class IntegrityLevel { kFrozen, kSealed };$/;"	e	enum:v8::IntegrityLevel
kShortcut	dependencies/include/v8-profiler.h	/^    kShortcut = 5,         \/\/ A link that must not be followed during$/;"	e	enum:v8::HeapGraphEdge::Type
kShouldThrowOnErrorIndex	dependencies/include/v8.h	/^  static const int kShouldThrowOnErrorIndex = 0;$/;"	m	class:v8::PropertyCallbackInfo	typeref:typename:const int
kSkipCEntryFrame	dependencies/include/v8-profiler.h	/^  enum RecordCEntryFrame { kIncludeCEntryFrame, kSkipCEntryFrame };$/;"	e	enum:v8::TickSample::RecordCEntryFrame
kSkipIndices	dependencies/include/v8.h	/^enum class IndexFilter { kIncludeIndices, kSkipIndices };$/;"	e	enum:v8::IndexFilter
kSlicedString	dependencies/include/v8-profiler.h	/^    kSlicedString = 11,  \/\/ Sliced string. A fragment of another string.$/;"	e	enum:v8::HeapGraphNode::Type
kSmiMaxValue	dependencies/include/v8-internal.h	/^const int kSmiMaxValue = -(kSmiMinValue + 1);$/;"	v	namespace:v8::internal	typeref:typename:const int
kSmiMinValue	dependencies/include/v8-internal.h	/^const int kSmiMinValue = (static_cast<unsigned int>(-1)) << (kSmiValueSize - 1);$/;"	v	namespace:v8::internal	typeref:typename:const int
kSmiShiftSize	dependencies/include/v8-internal.h	/^  enum { kSmiShiftSize = 0, kSmiValueSize = 31 };$/;"	e	enum:v8::internal::SmiTagging::__anona4fd579c0103
kSmiShiftSize	dependencies/include/v8-internal.h	/^  enum { kSmiShiftSize = 31, kSmiValueSize = 32 };$/;"	e	enum:v8::internal::SmiTagging::__anona4fd579c0203
kSmiShiftSize	dependencies/include/v8-internal.h	/^const int kSmiShiftSize = PlatformSmiTagging::kSmiShiftSize;$/;"	v	namespace:v8::internal	typeref:typename:const int
kSmiTag	dependencies/include/v8-internal.h	/^const int kSmiTag = 0;$/;"	v	namespace:v8::internal	typeref:typename:const int
kSmiTagMask	dependencies/include/v8-internal.h	/^const intptr_t kSmiTagMask = (1 << kSmiTagSize) - 1;$/;"	v	namespace:v8::internal	typeref:typename:const intptr_t
kSmiTagSize	dependencies/include/v8-internal.h	/^const int kSmiTagSize = 1;$/;"	v	namespace:v8::internal	typeref:typename:const int
kSmiValueSize	dependencies/include/v8-internal.h	/^  enum { kSmiShiftSize = 0, kSmiValueSize = 31 };$/;"	e	enum:v8::internal::SmiTagging::__anona4fd579c0103
kSmiValueSize	dependencies/include/v8-internal.h	/^  enum { kSmiShiftSize = 31, kSmiValueSize = 32 };$/;"	e	enum:v8::internal::SmiTagging::__anona4fd579c0203
kSmiValueSize	dependencies/include/v8-internal.h	/^const int kSmiValueSize = PlatformSmiTagging::kSmiValueSize;$/;"	v	namespace:v8::internal	typeref:typename:const int
kSticky	dependencies/include/v8.h	/^    kSticky = 1 << 3,$/;"	e	enum:v8::RegExp::Flags
kStressTypeDeopt	dependencies/include/v8-testing.h	/^    kStressTypeDeopt$/;"	e	enum:v8::Testing::StressType
kStressTypeOpt	dependencies/include/v8-testing.h	/^    kStressTypeOpt,$/;"	e	enum:v8::Testing::StressType
kString	dependencies/include/v8-profiler.h	/^    kString = 2,         \/\/ A string.$/;"	e	enum:v8::HeapGraphNode::Type
kStringEncodingMask	dependencies/include/v8-internal.h	/^  static const int kStringEncodingMask = 0x8;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kStringResourceOffset	dependencies/include/v8-internal.h	/^  static const int kStringResourceOffset = 1 * kApiTaggedSize + 2 * kApiIntSize;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kSymbol	dependencies/include/v8-profiler.h	/^    kSymbol = 12,        \/\/ A Symbol (ES6).$/;"	e	enum:v8::HeapGraphNode::Type
kSynthetic	dependencies/include/v8-profiler.h	/^    kSynthetic = 9,      \/\/ Synthetic object, usually used for grouping$/;"	e	enum:v8::HeapGraphNode::Type
kTheHoleValueRootIndex	dependencies/include/v8-internal.h	/^  static const int kTheHoleValueRootIndex = 5;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kThisIndex	dependencies/include/v8.h	/^  static const int kThisIndex = 6;$/;"	m	class:v8::PropertyCallbackInfo	typeref:typename:const int
kThrow	dependencies/include/v8.h	/^enum class ConstructorBehavior { kThrow, kAllow };$/;"	e	enum:v8::ConstructorBehavior
kTraceMaxNumArgs	dependencies/include/libplatform/v8-tracing.h	/^const int kTraceMaxNumArgs = 2;$/;"	v	namespace:v8::platform::tracing	typeref:typename:const int
kTrueValueRootIndex	dependencies/include/v8-internal.h	/^  static const int kTrueValueRootIndex = 7;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kUndefinedOddballKind	dependencies/include/v8-internal.h	/^  static const int kUndefinedOddballKind = 5;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kUndefinedValueRootIndex	dependencies/include/v8-internal.h	/^  static const int kUndefinedValueRootIndex = 4;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kUnicode	dependencies/include/v8.h	/^    kUnicode = 1 << 4,$/;"	e	enum:v8::RegExp::Flags
kUninstantiated	dependencies/include/v8.h	/^    kUninstantiated,$/;"	e	enum:v8::Module::Status
kUnknownObjectId	dependencies/include/v8-profiler.h	/^  static const SnapshotObjectId kUnknownObjectId = 0;$/;"	m	class:v8::HeapProfiler	typeref:typename:const SnapshotObjectId
kUnknownType	dependencies/include/v8-profiler.h	/^  kUnknownType = 0$/;"	e	enum:v8::CodeEventType
kWaitForWork	dependencies/include/libplatform/libplatform.h	/^  kWaitForWork = true$/;"	e	enum:v8::platform::MessageLoopBehavior
kWeak	dependencies/include/v8-profiler.h	/^    kWeak = 6              \/\/ A weak reference (ignored by the GC).$/;"	e	enum:v8::HeapGraphEdge::Type
kWeakHeapObjectTag	dependencies/include/v8-internal.h	/^const int kWeakHeapObjectTag = 3;$/;"	v	namespace:v8::internal	typeref:typename:const int
kWeakWithInternalFields	dependencies/include/v8-util.h	/^  kWeakWithInternalFields$/;"	e	enum:v8::PersistentContainerCallbackType
kWeakWithParameter	dependencies/include/v8-util.h	/^  kWeakWithParameter,$/;"	e	enum:v8::PersistentContainerCallbackType
key	dependencies/include/SFML/Window/Event.hpp	/^        KeyEvent              key;               \/\/\/< Key event parameters (Event::KeyPressed/;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:KeyEvent
khaki	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    khaki = 0xF0E68C,                   \/\/ rgb(240,230,140)$/;"	e	enum:color
kind	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  Kind kind;$/;"	m	struct:internal::arg_ref	typeref:typename:Kind
label	vendor/spdlog/tests/catch.hpp	/^            std::string label;$/;"	m	struct:Catch::ConsoleReporter::SummaryColumn	typeref:typename:std::string
label_	dependencies/include/v8-util.h	/^  const char* label_;$/;"	m	class:v8::PersistentValueMapBase	typeref:typename:const char *
last	vendor/spdlog/tests/catch.hpp	/^        std::string const& last() const { return lines.back(); }$/;"	f	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	typeref:typename:std::string const &
last	vendor/spdlog/tests/catch.hpp	/^        std::string const& last() const { return lines.back(); }$/;"	f	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	typeref:typename:std::string const &
lastBlendMode	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^        BlendMode lastBlendMode;  \/\/\/< Cached blending mode$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:BlendMode
lastTextureId	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^        Uint64    lastTextureId;  \/\/\/< Cached texture$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:Uint64
last_err_time_	vendor/spdlog/include/spdlog/logger.h	/^    std::atomic<time_t> last_err_time_{0};$/;"	m	class:spdlog::logger	typeref:typename:std::atomic<time_t>
last_integer_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  last_integer_type = char_type,$/;"	e	enum:internal::type
last_log_secs_	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    std::chrono::seconds last_log_secs_;$/;"	m	class:spdlog::pattern_formatter	typeref:typename:std::chrono::seconds
last_numeric_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  double_type, long_double_type, last_numeric_type = long_double_type,$/;"	e	enum:internal::type
last_update_	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    log_clock::time_point last_update_{std::chrono::seconds(0)};$/;"	m	class:spdlog::details::z_formatter	typeref:typename:log_clock::time_point
latency	vendor/spdlog/bench/CMakeLists.txt	/^add_executable(latency latency.cpp)$/;"	t
latency	vendor/spdlog/bench/Makefile	/^latency: latency.cpp$/;"	t
lavender	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    lavender = 0xE6E6FA,                \/\/ rgb(230,230,250)$/;"	e	enum:color
lavender_blush	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    lavender_blush = 0xFFF0F5,          \/\/ rgb(255,240,245)$/;"	e	enum:color
lawn_green	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    lawn_green = 0x7CFC00,              \/\/ rgb(124,252,0)$/;"	e	enum:color
lazyPrint	vendor/spdlog/tests/catch.hpp	/^        void lazyPrint() {$/;"	f	struct:Catch::ConsoleReporter	typeref:typename:void
lazyPrintGroupInfo	vendor/spdlog/tests/catch.hpp	/^        void lazyPrintGroupInfo() {$/;"	f	struct:Catch::ConsoleReporter	typeref:typename:void
lazyPrintRunInfo	vendor/spdlog/tests/catch.hpp	/^        void lazyPrintRunInfo() {$/;"	f	struct:Catch::ConsoleReporter	typeref:typename:void
lcaseTags	vendor/spdlog/tests/catch.hpp	/^        std::set<std::string> lcaseTags;$/;"	m	struct:Catch::TestCaseInfo	typeref:typename:std::set<std::string>
leave	vendor/spdlog/tests/catch.hpp	/^        void leave() {$/;"	f	class:Catch::SectionTracking::TrackedSection	typeref:typename:void
leaveSection	vendor/spdlog/tests/catch.hpp	/^        void leaveSection() {$/;"	f	class:Catch::SectionTracking::TestCaseTracker	typeref:typename:void
leaveTestCase	vendor/spdlog/tests/catch.hpp	/^        void leaveTestCase() {$/;"	f	class:Catch::SectionTracking::TestCaseTracker	typeref:typename:void
left	dependencies/include/SFML/Graphics/Rect.hpp	/^    T left;   \/\/\/< Left coordinate of the rectangle$/;"	m	class:sf::Rect	typeref:typename:T
left	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^        left,$/;"	e	enum:spdlog::details::padding_info::pad_side
lemon_chiffon	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    lemon_chiffon = 0xFFFACD,           \/\/ rgb(255,250,205)$/;"	e	enum:color
length	dependencies/include/SFML/Audio/Music.hpp	/^        T length; \/\/\/< The length of the time range$/;"	m	struct:sf::Music::Span	typeref:typename:T
length	dependencies/include/v8-inspector.h	/^  size_t length() const { return m_length; }$/;"	f	class:v8_inspector::StringView	typeref:typename:size_t
length	dependencies/include/v8.h	/^    int length() const { return length_; }$/;"	f	class:v8::String::Utf8Value	typeref:typename:int
length	dependencies/include/v8.h	/^    int length() const { return length_; }$/;"	f	class:v8::String::Value	typeref:typename:int
length	dependencies/include/v8.h	/^    int length;$/;"	m	struct:v8::ScriptCompiler::CachedData	typeref:typename:int
length	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR size_t length(const Char *s) {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR size_t
length	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR size_t length(const char *s) { return std::strlen(s); }$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR size_t
length_	dependencies/include/v8.h	/^    int length_;$/;"	m	class:v8::String::Utf8Value	typeref:typename:int
length_	dependencies/include/v8.h	/^    int length_;$/;"	m	class:v8::String::Value	typeref:typename:int
length_	dependencies/include/v8.h	/^  int length_;$/;"	m	class:v8::FunctionCallbackInfo	typeref:typename:int
length_in_bytes	dependencies/include/v8.h	/^  size_t length_in_bytes = 0;$/;"	m	struct:v8::MemoryRange	typeref:typename:size_t
level	vendor/spdlog/include/spdlog/common.h	/^namespace level {$/;"	n	namespace:spdlog
level	vendor/spdlog/include/spdlog/details/log_msg.h	/^    level::level_enum level{level::off};$/;"	m	struct:spdlog::details::log_msg	typeref:typename:level::level_enum
level	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline spdlog::level::level_enum spdlog::logger::level() const$/;"	f	class:spdlog::logger	typeref:typename:spdlog::level::level_enum
level	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    level::level_enum level;$/;"	m	struct:spdlog::details::async_msg	typeref:typename:level::level_enum
level	vendor/spdlog/include/spdlog/sinks/sink.h	/^    level::level_enum level() const$/;"	f	class:spdlog::sinks::sink	typeref:typename:level::level_enum
level_	vendor/spdlog/include/spdlog/details/registry.h	/^    level::level_enum level_ = spdlog::logger::default_level();$/;"	m	class:spdlog::details::registry	typeref:typename:level::level_enum
level_	vendor/spdlog/include/spdlog/logger.h	/^    spdlog::level_t level_{spdlog::logger::default_level()};$/;"	m	class:spdlog::logger	typeref:typename:spdlog::level_t
level_	vendor/spdlog/include/spdlog/sinks/sink.h	/^    level_t level_;$/;"	m	class:spdlog::sinks::sink	typeref:typename:level_t
level_enum	vendor/spdlog/include/spdlog/common.h	/^enum level_enum$/;"	g	namespace:spdlog::level
level_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit level_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::level_formatter
level_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class level_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
level_hasher	vendor/spdlog/include/spdlog/common.h	/^using level_hasher = std::hash<int>;$/;"	t	namespace:spdlog::level	typeref:typename:std::hash<int>
level_string_views	vendor/spdlog/include/spdlog/common.h	/^static string_view_t level_string_views[] SPDLOG_LEVEL_NAMES;$/;"	v	namespace:spdlog::level	typeref:typename:string_view_t[]SPDLOG_LEVEL_NAMES
level_t	vendor/spdlog/include/spdlog/common.h	/^using level_t = details::null_atomic_int;$/;"	t	namespace:spdlog	typeref:typename:details::null_atomic_int
level_t	vendor/spdlog/include/spdlog/common.h	/^using level_t = std::atomic<int>;$/;"	t	namespace:spdlog	typeref:typename:std::atomic<int>
lg	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline char *lg(uint32_t n, Handler h) {$/;"	f	namespace:internal	typeref:typename:char *
lhs	vendor/spdlog/tests/catch.hpp	/^            std::string lhs, rhs, op;$/;"	m	struct:Catch::ResultBuilder::ExprComponents	typeref:typename:std::string
libraryVersion	vendor/spdlog/tests/catch.hpp	/^    Version libraryVersion( 1, 1, 1, "master" );$/;"	v	namespace:Catch	typeref:typename:Version
light_blue	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    light_blue = 0xADD8E6,              \/\/ rgb(173,216,230)$/;"	e	enum:color
light_coral	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    light_coral = 0xF08080,             \/\/ rgb(240,128,128)$/;"	e	enum:color
light_cyan	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    light_cyan = 0xE0FFFF,              \/\/ rgb(224,255,255)$/;"	e	enum:color
light_golden_rod_yellow	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    light_golden_rod_yellow = 0xFAFAD2, \/\/ rgb(250,250,210)$/;"	e	enum:color
light_gray	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    light_gray = 0xD3D3D3,              \/\/ rgb(211,211,211)$/;"	e	enum:color
light_green	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    light_green = 0x90EE90,             \/\/ rgb(144,238,144)$/;"	e	enum:color
light_pink	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    light_pink = 0xFFB6C1,              \/\/ rgb(255,182,193)$/;"	e	enum:color
light_salmon	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    light_salmon = 0xFFA07A,            \/\/ rgb(255,160,122)$/;"	e	enum:color
light_sea_green	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    light_sea_green = 0x20B2AA,         \/\/ rgb(32,178,170)$/;"	e	enum:color
light_sky_blue	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    light_sky_blue = 0x87CEFA,          \/\/ rgb(135,206,250)$/;"	e	enum:color
light_slate_gray	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    light_slate_gray = 0x778899,        \/\/ rgb(119,136,153)$/;"	e	enum:color
light_steel_blue	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    light_steel_blue = 0xB0C4DE,        \/\/ rgb(176,196,222)$/;"	e	enum:color
light_yellow	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    light_yellow = 0xFFFFE0,            \/\/ rgb(255,255,224)$/;"	e	enum:color
lime	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    lime = 0x00FF00,                    \/\/ rgb(0,255,0)$/;"	e	enum:color
lime_green	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    lime_green = 0x32CD32,              \/\/ rgb(50,205,50)$/;"	e	enum:color
limit_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  std::size_t limit_;$/;"	m	class:internal::truncating_iterator	typeref:typename:std::size_t
limits	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^    typedef std::numeric_limits<Double> limits;$/;"	t	function:internal::fp::fp	typeref:typename:std::numeric_limits<Double>
line	dependencies/include/v8-profiler.h	/^    int line;$/;"	m	struct:v8::CpuProfileNode::LineTick	typeref:typename:int
line	vendor/spdlog/include/spdlog/common.h	/^    uint32_t line;$/;"	m	struct:spdlog::source_loc	typeref:typename:uint32_t
line	vendor/spdlog/tests/catch.hpp	/^        std::size_t line;$/;"	m	struct:Catch::SourceLineInfo	typeref:typename:std::size_t
lineInfo	vendor/spdlog/tests/catch.hpp	/^        SourceLineInfo lineInfo;$/;"	m	struct:Catch::AssertionInfo	typeref:typename:SourceLineInfo
lineInfo	vendor/spdlog/tests/catch.hpp	/^        SourceLineInfo lineInfo;$/;"	m	struct:Catch::MessageInfo	typeref:typename:SourceLineInfo
lineInfo	vendor/spdlog/tests/catch.hpp	/^        SourceLineInfo lineInfo;$/;"	m	struct:Catch::SectionInfo	typeref:typename:SourceLineInfo
lineInfo	vendor/spdlog/tests/catch.hpp	/^        SourceLineInfo lineInfo;$/;"	m	struct:Catch::TagAlias	typeref:typename:SourceLineInfo
lineInfo	vendor/spdlog/tests/catch.hpp	/^        SourceLineInfo lineInfo;$/;"	m	struct:Catch::TestCaseInfo	typeref:typename:SourceLineInfo
line_number	dependencies/include/v8-profiler.h	/^    int line_number;$/;"	m	struct:v8::AllocationProfile::Node	typeref:typename:int
line_number_	dependencies/include/v8.h	/^  int line_number_;$/;"	m	class:v8::Location	typeref:typename:int
linen	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    linen = 0xFAF0E6,                   \/\/ rgb(250,240,230)$/;"	e	enum:color
lines	vendor/spdlog/tests/catch.hpp	/^        std::vector<std::string> lines;$/;"	m	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	typeref:typename:std::vector<std::string>
lines	vendor/spdlog/tests/catch.hpp	/^        std::vector<std::string> lines;$/;"	m	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	typeref:typename:std::vector<std::string>
list	vendor/spdlog/tests/catch.hpp	/^    inline Option<std::size_t> list( Config const& config ) {$/;"	f	namespace:Catch	typeref:typename:Option<std::size_t>
listReporters	vendor/spdlog/tests/catch.hpp	/^        bool listReporters() const { return m_data.listReporters; }$/;"	f	class:Catch::Config	typeref:typename:bool
listReporters	vendor/spdlog/tests/catch.hpp	/^        bool listReporters;$/;"	m	struct:Catch::ConfigData	typeref:typename:bool
listReporters	vendor/spdlog/tests/catch.hpp	/^    inline std::size_t listReporters( Config const& \/*config*\/ ) {$/;"	f	namespace:Catch	typeref:typename:std::size_t
listTags	vendor/spdlog/tests/catch.hpp	/^        bool listTags() const { return m_data.listTags; }$/;"	f	class:Catch::Config	typeref:typename:bool
listTags	vendor/spdlog/tests/catch.hpp	/^        bool listTags;$/;"	m	struct:Catch::ConfigData	typeref:typename:bool
listTags	vendor/spdlog/tests/catch.hpp	/^    inline std::size_t listTags( Config const& config ) {$/;"	f	namespace:Catch	typeref:typename:std::size_t
listTestNamesOnly	vendor/spdlog/tests/catch.hpp	/^        bool listTestNamesOnly() const { return m_data.listTestNamesOnly; }$/;"	f	class:Catch::Config	typeref:typename:bool
listTestNamesOnly	vendor/spdlog/tests/catch.hpp	/^        bool listTestNamesOnly;$/;"	m	struct:Catch::ConfigData	typeref:typename:bool
listTests	vendor/spdlog/tests/catch.hpp	/^        bool listTests() const { return m_data.listTests; }$/;"	f	class:Catch::Config	typeref:typename:bool
listTests	vendor/spdlog/tests/catch.hpp	/^        bool listTests;$/;"	m	struct:Catch::ConfigData	typeref:typename:bool
listTests	vendor/spdlog/tests/catch.hpp	/^    inline std::size_t listTests( Config const& config ) {$/;"	f	namespace:Catch	typeref:typename:std::size_t
listTestsNamesOnly	vendor/spdlog/tests/catch.hpp	/^    inline std::size_t listTestsNamesOnly( Config const& config ) {$/;"	f	namespace:Catch	typeref:typename:std::size_t
literals	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline namespace literals {$/;"	n
load	vendor/spdlog/include/spdlog/details/null_mutex.h	/^    int load(std::memory_order) const$/;"	f	struct:spdlog::details::null_atomic_int	typeref:typename:int
loadTestNamesFromFile	vendor/spdlog/tests/catch.hpp	/^    inline void loadTestNamesFromFile( ConfigData& config, std::string const& _filename ) {$/;"	f	namespace:Catch	typeref:typename:void
local	vendor/spdlog/include/spdlog/common.h	/^    local, \/\/ log localtime$/;"	e	enum:spdlog::pattern_time_type
locale	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^  explicit locale(std::locale loc = std::locale()) : locale_(loc) {}$/;"	f	class:locale
locale	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC locale locale_provider::locale() { return fmt::locale(); }$/;"	f	class:locale_provider	typeref:typename:FMT_FUNC locale
locale	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^class locale {$/;"	c
locale_	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^  std::locale locale_;$/;"	m	class:locale	typeref:typename:std::locale
locale_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  std::unique_ptr<locale_provider> locale_;$/;"	m	class:basic_writer	typeref:typename:std::unique_ptr<locale_provider>
locale_	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  locale_t locale_;$/;"	m	class:Locale	typeref:typename:locale_t
locale_provider	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class locale_provider {$/;"	c
locale_t	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  typedef _locale_t locale_t;$/;"	t	class:Locale	typeref:typename:_locale_t
localtime	vendor/spdlog/include/spdlog/details/os.h	/^inline std::tm localtime() SPDLOG_NOEXCEPT$/;"	f	namespace:spdlog::details::os	typeref:typename:std::tm
localtime	vendor/spdlog/include/spdlog/details/os.h	/^inline std::tm localtime(const std::time_t &time_tt) SPDLOG_NOEXCEPT$/;"	f	namespace:spdlog::details::os	typeref:typename:std::tm
localtime	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^inline std::tm localtime(std::time_t time) {$/;"	f	typeref:typename:std::tm
localtime_s	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^inline null<> localtime_s(...) { return null<>(); }$/;"	f	namespace:internal	typeref:typename:null<>
lock	vendor/spdlog/include/spdlog/details/null_mutex.h	/^    void lock() {}$/;"	f	struct:spdlog::details::null_mutex	typeref:typename:void
log	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const T &msg)$/;"	f	class:spdlog::logger	typeref:typename:::type * > void
log	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const T &msg)$/;"	f	class:spdlog::logger	typeref:typename:void
log	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const char *fmt, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
log	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const char *msg)$/;"	f	class:spdlog::logger	typeref:typename:void
log	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const wchar_t *fmt, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
log	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(source_loc source, level::level_enum lvl, const T &msg)$/;"	f	class:spdlog::logger	typeref:typename:::type * > void
log	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(source_loc source, level::level_enum lvl, const T &msg)$/;"	f	class:spdlog::logger	typeref:typename:void
log	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(source_loc source, level::level_enum lvl, const char *fmt, const/;"	f	class:spdlog::logger	typeref:typename:void
log	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(source_loc source, level::level_enum lvl, const char *msg)$/;"	f	class:spdlog::logger	typeref:typename:void
log	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(source_loc source, level::level_enum lvl, const wchar_t *fmt, co/;"	f	class:spdlog::logger	typeref:typename:void
log	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    log,$/;"	e	enum:spdlog::details::async_msg_type
log	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    void log(const details::log_msg &msg) override$/;"	f	class:spdlog::sinks::ansicolor_sink	typeref:typename:void
log	vendor/spdlog/include/spdlog/sinks/base_sink.h	/^    void log(const details::log_msg &msg) final$/;"	f	class:spdlog::sinks::base_sink	typeref:typename:void
log	vendor/spdlog/include/spdlog/sinks/stdout_sinks.h	/^    void log(const details::log_msg &msg) override$/;"	f	class:spdlog::sinks::stdout_sink	typeref:typename:void
log	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    void log(const details::log_msg &msg) final override$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:void
log	vendor/spdlog/include/spdlog/spdlog.h	/^inline void log(level::level_enum lvl, const T &msg)$/;"	f	namespace:spdlog	typeref:typename:void
log	vendor/spdlog/include/spdlog/spdlog.h	/^inline void log(level::level_enum lvl, const char *fmt, const Args &... args)$/;"	f	namespace:spdlog	typeref:typename:void
log	vendor/spdlog/include/spdlog/spdlog.h	/^inline void log(level::level_enum lvl, const wchar_t *fmt, const Args &... args)$/;"	f	namespace:spdlog	typeref:typename:void
log	vendor/spdlog/include/spdlog/spdlog.h	/^inline void log(source_loc source, level::level_enum lvl, const char *fmt, const Args &... args)$/;"	f	namespace:spdlog	typeref:typename:void
log_clock	vendor/spdlog/include/spdlog/common.h	/^using log_clock = std::chrono::system_clock;$/;"	t	namespace:spdlog	typeref:typename:std::chrono::system_clock
log_err_handler	vendor/spdlog/include/spdlog/common.h	/^using log_err_handler = std::function<void(const std::string &err_msg)>;$/;"	t	namespace:spdlog
log_info	vendor/spdlog/tests/test_misc.cpp	/^std::string log_info(const T &what, spdlog::level::level_enum logger_level = spdlog::level::info/;"	f	typeref:typename:std::string
log_level	vendor/spdlog/tests/test_registry.cpp	/^    spdlog::level::level_enum log_level = spdlog::level::level_enum::warn;$/;"	v	typeref:typename:spdlog::level::level_enum
log_msg	vendor/spdlog/include/spdlog/details/log_msg.h	/^    log_msg(const std::string *loggers_name, level::level_enum lvl, string_view_t view)$/;"	f	struct:spdlog::details::log_msg
log_msg	vendor/spdlog/include/spdlog/details/log_msg.h	/^    log_msg(source_loc loc, const std::string *loggers_name, level::level_enum lvl, string_view_/;"	f	struct:spdlog::details::log_msg
log_msg	vendor/spdlog/include/spdlog/details/log_msg.h	/^struct log_msg$/;"	s	namespace:spdlog::details
log_to_str	vendor/spdlog/tests/test_pattern_formatter.cpp	/^static std::string log_to_str(const std::string &msg, const Args &... args)$/;"	f	typeref:typename:std::string	file:
logger	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline spdlog::logger::logger(std::string logger_name, It begin, It end)$/;"	f	class:spdlog::logger
logger	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline spdlog::logger::logger(std::string logger_name, sinks_init_list sinks_list)$/;"	f	class:spdlog::logger
logger	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline spdlog::logger::logger(std::string logger_name, spdlog::sink_ptr single_sink)$/;"	f	class:spdlog::logger
logger	vendor/spdlog/include/spdlog/logger.h	/^class logger$/;"	c	namespace:spdlog
logger	vendor/spdlog/tests/test_async.cpp	/^        auto logger = std::make_shared<async_logger>("as", test_sink, tp, async_overflow_policy:/;"	v	typeref:typename:auto
logger	vendor/spdlog/tests/test_async.cpp	/^        auto logger = std::make_shared<spdlog::async_logger>("as", std::move(file_sink), std::mo/;"	v	typeref:typename:auto
logger	vendor/spdlog/tests/test_async.cpp	/^    auto logger = spdlog::create_async<sinks::test_sink_mt>("as");$/;"	v	typeref:typename:auto
logger	vendor/spdlog/tests/test_async.cpp	/^    auto logger = spdlog::create_async_nb<sinks::test_sink_mt>("as2");$/;"	v	typeref:typename:auto
logger	vendor/spdlog/tests/test_async.cpp	/^    auto logger = std::make_shared<async_logger>("as", test_sink, tp, async_overflow_policy::blo/;"	v	typeref:typename:auto
logger	vendor/spdlog/tests/test_async.cpp	/^    auto logger = std::make_shared<async_logger>("as", test_sink, tp, async_overflow_policy::ove/;"	v	typeref:typename:auto
logger	vendor/spdlog/tests/test_errors.cpp	/^        auto logger = spdlog::create_async<failing_sink>("failed_logger");$/;"	v	typeref:typename:auto
logger	vendor/spdlog/tests/test_errors.cpp	/^        auto logger = spdlog::create_async<spdlog::sinks::basic_file_sink_mt>("logger", filename/;"	v	typeref:typename:auto
logger	vendor/spdlog/tests/test_errors.cpp	/^    auto logger = spdlog::create<failing_sink>("failed_logger");$/;"	v	typeref:typename:auto
logger	vendor/spdlog/tests/test_errors.cpp	/^    auto logger = spdlog::create<spdlog::sinks::basic_file_sink_mt>("logger", filename, true);$/;"	v	typeref:typename:auto
logger	vendor/spdlog/tests/test_errors.cpp	/^    auto logger = spdlog::create<spdlog::sinks::basic_file_sink_mt>("test-error", filename, true/;"	v	typeref:typename:auto
logger	vendor/spdlog/tests/test_file_logging.cpp	/^    auto logger = spdlog::create<sink_type>("logger", basename, 0, 0);$/;"	v	typeref:typename:auto
logger	vendor/spdlog/tests/test_file_logging.cpp	/^    auto logger = spdlog::create<spdlog::sinks::basic_file_sink_mt>("logger", filename);$/;"	v	typeref:typename:auto
logger	vendor/spdlog/tests/test_file_logging.cpp	/^    auto logger = spdlog::rotating_logger_mt("logger", basename, max_size, 0);$/;"	v	typeref:typename:auto
logger	vendor/spdlog/tests/test_file_logging.cpp	/^    auto logger = spdlog::rotating_logger_mt("logger", basename, max_size, 1);$/;"	v	typeref:typename:auto
logger	vendor/spdlog/tests/test_macros.cpp	/^    auto logger = spdlog::create<spdlog::sinks::basic_file_sink_mt>("logger", filename);$/;"	v	typeref:typename:auto
logger	vendor/spdlog/tests/test_misc.cpp	/^    auto logger = spdlog::create<sinks::test_sink_mt>("orig");$/;"	v	typeref:typename:auto
logger	vendor/spdlog/tests/test_misc.cpp	/^    auto logger = spdlog::create<sinks::test_sink_mt>("periodic_flush");$/;"	v	typeref:typename:auto
logger	vendor/spdlog/tests/test_misc.cpp	/^    auto logger = spdlog::create_async<sinks::test_sink_mt>("orig");$/;"	v	typeref:typename:auto
logger	vendor/spdlog/tests/test_registry.cpp	/^    auto logger = std::make_shared<spdlog::logger>(tested_logger_name, std::make_shared<spdlog::/;"	v	typeref:typename:auto
logger1	vendor/spdlog/tests/test_registry.cpp	/^    auto logger1 = spdlog::create<spdlog::sinks::daily_file_sink_st>(tested_logger_name, "filena/;"	v	typeref:typename:auto
logger2	vendor/spdlog/tests/test_registry.cpp	/^    auto logger2 = spdlog::create_async<spdlog::sinks::stdout_color_sink_mt>(tested_logger_name2/;"	v	typeref:typename:auto
logger2	vendor/spdlog/tests/test_registry.cpp	/^    auto logger2 = std::make_shared<spdlog::logger>(tested_logger_name2, std::make_shared<spdlog/;"	v	typeref:typename:auto
logger_map_mutex_	vendor/spdlog/include/spdlog/details/registry.h	/^    std::mutex logger_map_mutex_, flusher_mutex_;$/;"	m	class:spdlog::details::registry	typeref:typename:std::mutex
logger_name	vendor/spdlog/include/spdlog/details/log_msg.h	/^    const std::string *logger_name{nullptr};$/;"	m	struct:spdlog::details::log_msg	typeref:typename:const std::string *
logger_name	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    std::string logger_name = "test";$/;"	v	typeref:typename:std::string
logger_name	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    std::string logger_name = "test2";$/;"	v	typeref:typename:std::string
loggers_	vendor/spdlog/include/spdlog/details/registry.h	/^    std::unordered_map<std::string, std::shared_ptr<logger>> loggers_;$/;"	m	class:spdlog::details::registry	typeref:typename:std::unordered_map<std::string,std::shared_ptr<logger>>
longName	vendor/spdlog/tests/catch.hpp	/^        std::string longName;$/;"	m	struct:Clara::OptionArgProperties	typeref:typename:std::string
long_double_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  double_type, long_double_type, last_numeric_type = long_double_type,$/;"	e	enum:internal::type
long_double_value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    long double long_double_value;$/;"	m	union:internal::value::__anonbb24b047030a	typeref:typename:long double
long_long_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  int_type, uint_type, long_long_type, ulong_long_type, bool_type, char_type,$/;"	e	enum:internal::type
long_long_value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    long long long_long_value;$/;"	m	union:internal::value::__anonbb24b047030a	typeref:typename:long long
long_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^        long_type;$/;"	t	namespace:internal
m_activeTestCase	vendor/spdlog/tests/catch.hpp	/^        TestCase const* m_activeTestCase;$/;"	m	class:Catch::RunContext	typeref:typename:TestCase const *
m_actualSize	dependencies/include/SFML/Graphics/Texture.hpp	/^    Vector2u     m_actualSize;    \/\/\/< Actual texture size (can be greater than public size b/;"	m	class:sf::Texture	typeref:typename:Vector2u
m_address	dependencies/include/SFML/Network/IpAddress.hpp	/^    Uint32 m_address; \/\/\/< Address stored as an unsigned 32 bits integer$/;"	m	class:sf::IpAddress	typeref:typename:Uint32
m_arg	dependencies/include/SFML/System/Thread.inl	/^    A m_arg;$/;"	m	struct:priv::ThreadFunctorWithArg	typeref:typename:A	file:
m_arg	vendor/spdlog/tests/catch.hpp	/^            Arg* m_arg;$/;"	m	class:Clara::CommandLine::ArgBuilder	typeref:typename:Arg *
m_arg	vendor/spdlog/tests/catch.hpp	/^        std::string m_arg;$/;"	m	class:Catch::TestSpecParser	typeref:typename:std::string
m_assertionInfo	vendor/spdlog/tests/catch.hpp	/^        AssertionInfo m_assertionInfo;$/;"	m	class:Catch::ResultBuilder	typeref:typename:AssertionInfo
m_assertions	vendor/spdlog/tests/catch.hpp	/^        Counts m_assertions;$/;"	m	class:Catch::Section	typeref:typename:Counts
m_assertions	vendor/spdlog/tests/catch.hpp	/^        std::vector<AssertionStats> m_assertions;$/;"	m	struct:Catch::CumulativeReporterBase	typeref:typename:std::vector<AssertionStats>
m_body	dependencies/include/SFML/Network/Http.hpp	/^        std::string  m_body;         \/\/\/< Body of the request$/;"	m	class:sf::Http::Request	typeref:typename:std::string
m_body	dependencies/include/SFML/Network/Http.hpp	/^        std::string  m_body;         \/\/\/< Body of the response$/;"	m	class:sf::Http::Response	typeref:typename:std::string
m_boundProcessName	vendor/spdlog/tests/catch.hpp	/^        Detail::BoundArgFunction<ConfigT> m_boundProcessName;$/;"	m	class:Clara::CommandLine	typeref:typename:Detail::BoundArgFunction<ConfigT>
m_bounds	dependencies/include/SFML/Graphics/Shape.hpp	/^    FloatRect      m_bounds;           \/\/\/< Bounding rectangle of the whole shape (outline + /;"	m	class:sf::Shape	typeref:typename:FloatRect
m_bounds	dependencies/include/SFML/Graphics/Text.hpp	/^    mutable FloatRect   m_bounds;              \/\/\/< Bounding rectangle of the text (in local /;"	m	class:sf::Text	typeref:typename:FloatRect
m_buffer	dependencies/include/SFML/Audio/Sound.hpp	/^    const SoundBuffer* m_buffer; \/\/\/< Sound buffer bound to the source$/;"	m	class:sf::Sound	typeref:typename:const SoundBuffer *
m_buffer	dependencies/include/SFML/Audio/SoundBuffer.hpp	/^    unsigned int       m_buffer;   \/\/\/< OpenAL buffer identifier$/;"	m	class:sf::SoundBuffer	typeref:typename:unsigned int
m_buffer	dependencies/include/SFML/Audio/SoundBufferRecorder.hpp	/^    SoundBuffer        m_buffer;  \/\/\/< Sound buffer that will contain the recorded data$/;"	m	class:sf::SoundBufferRecorder	typeref:typename:SoundBuffer
m_buffer	dependencies/include/SFML/Graphics/VertexBuffer.hpp	/^    unsigned int  m_buffer;        \/\/\/< Internal buffer identifier$/;"	m	class:sf::VertexBuffer	typeref:typename:unsigned int
m_buffer	dependencies/include/SFML/Network/UdpSocket.hpp	/^    std::vector<char> m_buffer; \/\/\/< Temporary buffer holding the received data in Receive(Pa/;"	m	class:sf::UdpSocket	typeref:typename:std::vector<char>
m_bufferSeeks	dependencies/include/SFML/Audio/SoundStream.hpp	/^    Int64         m_bufferSeeks[BufferCount]; \/\/\/< If buffer is an "end buffer", holds next s/;"	m	class:sf::SoundStream	typeref:typename:Int64[]
m_buffers	dependencies/include/SFML/Audio/SoundStream.hpp	/^    unsigned int  m_buffers[BufferCount];     \/\/\/< Sound buffers used to store temporary audi/;"	m	class:sf::SoundStream	typeref:typename:unsigned int[]
m_cache	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^    StatesCache m_cache;       \/\/\/< Render states cache$/;"	m	class:sf::RenderTarget	typeref:typename:StatesCache
m_cacheId	dependencies/include/SFML/Graphics/Texture.hpp	/^    Uint64       m_cacheId;       \/\/\/< Unique number that identifies the texture to the rende/;"	m	class:sf::Texture	typeref:typename:Uint64
m_center	dependencies/include/SFML/Graphics/View.hpp	/^    Vector2f          m_center;              \/\/\/< Center of the view, in scene coordinates$/;"	m	class:sf::View	typeref:typename:Vector2f
m_channelCount	dependencies/include/SFML/Audio/InputSoundFile.hpp	/^    unsigned int     m_channelCount; \/\/\/< Number of channels of the sound$/;"	m	class:sf::InputSoundFile	typeref:typename:unsigned int
m_channelCount	dependencies/include/SFML/Audio/SoundRecorder.hpp	/^    unsigned int       m_channelCount;       \/\/\/< Number of recording channels$/;"	m	class:sf::SoundRecorder	typeref:typename:unsigned int
m_channelCount	dependencies/include/SFML/Audio/SoundStream.hpp	/^    unsigned int  m_channelCount;             \/\/\/< Number of channels (1 = mono, 2 = stereo, /;"	m	class:sf::SoundStream	typeref:typename:unsigned int
m_characterSize	dependencies/include/SFML/Graphics/Text.hpp	/^    unsigned int        m_characterSize;       \/\/\/< Base size of characters, in pixels$/;"	m	class:sf::Text	typeref:typename:unsigned int
m_characters16	dependencies/include/v8-inspector.h	/^    const uint16_t* m_characters16;$/;"	m	union:v8_inspector::StringView::__anonf5fcbbf6010a	typeref:typename:const uint16_t *
m_characters8	dependencies/include/v8-inspector.h	/^    const uint8_t* m_characters8;$/;"	m	union:v8_inspector::StringView::__anonf5fcbbf6010a	typeref:typename:const uint8_t *
m_children	vendor/spdlog/tests/catch.hpp	/^        TrackedSections m_children;$/;"	m	class:Catch::SectionTracking::TrackedSection	typeref:typename:TrackedSections
m_cli	vendor/spdlog/tests/catch.hpp	/^        Clara::CommandLine<ConfigData> m_cli;$/;"	m	class:Catch::Session	typeref:typename:Clara::CommandLine<ConfigData>
m_clock	dependencies/include/SFML/Window/Window.hpp	/^    Clock             m_clock;          \/\/\/< Clock for measuring the elapsed time between fra/;"	m	class:sf::Window	typeref:typename:Clock
m_cls	vendor/spdlog/tests/catch.hpp	/^        Class m_cls;$/;"	m	class:Catch::OcMethod	typeref:typename:Class
m_commandSocket	dependencies/include/SFML/Network/Ftp.hpp	/^    TcpSocket   m_commandSocket; \/\/\/< Socket holding the control connection with the server$/;"	m	class:sf::Ftp	typeref:typename:TcpSocket
m_completedASectionThisRun	vendor/spdlog/tests/catch.hpp	/^        bool m_completedASectionThisRun;$/;"	m	class:Catch::SectionTracking::TestCaseTracker	typeref:typename:bool
m_composed	vendor/spdlog/tests/catch.hpp	/^    std::vector<const IGenerator<T>*> m_composed;$/;"	m	class:Catch::CompositeGenerator	typeref:typename:std::vector<const IGenerator<T> * >
m_config	vendor/spdlog/tests/catch.hpp	/^        Ptr<Config> m_config;$/;"	m	class:Catch::Runner	typeref:typename:Ptr<Config>
m_config	vendor/spdlog/tests/catch.hpp	/^        Ptr<Config> m_config;$/;"	m	class:Catch::Session	typeref:typename:Ptr<Config>
m_config	vendor/spdlog/tests/catch.hpp	/^        Ptr<IConfig const> m_config;$/;"	m	class:Catch::Context	typeref:typename:Ptr<IConfig const>
m_config	vendor/spdlog/tests/catch.hpp	/^        Ptr<IConfig const> m_config;$/;"	m	class:Catch::RunContext	typeref:typename:Ptr<IConfig const>
m_config	vendor/spdlog/tests/catch.hpp	/^        Ptr<IConfig> m_config;$/;"	m	struct:Catch::CumulativeReporterBase	typeref:typename:Ptr<IConfig>
m_config	vendor/spdlog/tests/catch.hpp	/^        Ptr<IConfig> m_config;$/;"	m	struct:Catch::StreamingReporterBase	typeref:typename:Ptr<IConfig>
m_configData	vendor/spdlog/tests/catch.hpp	/^        ConfigData m_configData;$/;"	m	class:Catch::Session	typeref:typename:ConfigData
m_connection	dependencies/include/SFML/Network/Http.hpp	/^    TcpSocket      m_connection; \/\/\/< Connection to the host$/;"	m	class:sf::Http	typeref:typename:TcpSocket
m_context	dependencies/include/SFML/Window/Context.hpp	/^    priv::GlContext* m_context; \/\/\/< Internal OpenGL context$/;"	m	class:sf::Context	typeref:typename:priv::GlContext *
m_context	dependencies/include/SFML/Window/Window.hpp	/^    priv::GlContext*  m_context;        \/\/\/< Platform-specific implementation of the OpenGL c/;"	m	class:sf::Window	typeref:typename:priv::GlContext *
m_context	vendor/spdlog/tests/catch.hpp	/^        IMutableContext& m_context;$/;"	m	class:Catch::RunContext	typeref:typename:IMutableContext &
m_count	vendor/spdlog/tests/catch.hpp	/^        std::size_t m_count;$/;"	m	struct:Catch::pluralise	typeref:typename:std::size_t
m_currentFilter	vendor/spdlog/tests/catch.hpp	/^        TestSpec::Filter m_currentFilter;$/;"	m	class:Catch::TestSpecParser	typeref:typename:TestSpec::Filter
m_currentIndex	vendor/spdlog/tests/catch.hpp	/^        std::size_t m_currentIndex;$/;"	m	struct:Catch::GeneratorInfo	typeref:typename:std::size_t
m_currentSection	vendor/spdlog/tests/catch.hpp	/^        TrackedSection* m_currentSection;$/;"	m	class:Catch::SectionTracking::TestCaseTracker	typeref:typename:TrackedSection *
m_currentTexture	dependencies/include/SFML/Graphics/Shader.hpp	/^    int          m_currentTexture; \/\/\/< Location of the current texture in the shader$/;"	m	class:sf::Shader	typeref:typename:int
m_data	dependencies/include/SFML/Network/Packet.hpp	/^    std::vector<char> m_data;    \/\/\/< Data stored in the packet$/;"	m	class:sf::Packet	typeref:typename:std::vector<char>
m_data	dependencies/include/SFML/System/MemoryInputStream.hpp	/^    const char* m_data;   \/\/\/< Pointer to the data in memory$/;"	m	class:sf::MemoryInputStream	typeref:typename:const char *
m_data	vendor/spdlog/tests/catch.hpp	/^        AssertionResultData m_data;$/;"	m	class:Catch::ResultBuilder	typeref:typename:AssertionResultData
m_data	vendor/spdlog/tests/catch.hpp	/^        ConfigData m_data;$/;"	m	class:Catch::Config	typeref:typename:ConfigData
m_deepestSection	vendor/spdlog/tests/catch.hpp	/^        Ptr<SectionNode> m_deepestSection;$/;"	m	struct:Catch::CumulativeReporterBase	typeref:typename:Ptr<SectionNode>
m_defaultFrameBuffer	dependencies/include/SFML/Graphics/RenderWindow.hpp	/^    unsigned int m_defaultFrameBuffer; \/\/\/< Framebuffer to bind when targeting this window$/;"	m	class:sf::RenderWindow	typeref:typename:unsigned int
m_defaultView	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^    View        m_defaultView; \/\/\/< Default view$/;"	m	class:sf::RenderTarget	typeref:typename:View
m_deviceName	dependencies/include/SFML/Audio/SoundRecorder.hpp	/^    std::string        m_deviceName;         \/\/\/< Name of the audio capture device$/;"	m	class:sf::SoundRecorder	typeref:typename:std::string
m_directory	dependencies/include/SFML/Network/Ftp.hpp	/^        std::string m_directory; \/\/\/< Directory extracted from the response message$/;"	m	class:sf::Ftp::DirectoryResponse	typeref:typename:std::string
m_duration	dependencies/include/SFML/Audio/SoundBuffer.hpp	/^    Time               m_duration; \/\/\/< Sound duration$/;"	m	class:sf::SoundBuffer	typeref:typename:Time
m_entryPoint	dependencies/include/SFML/System/Thread.hpp	/^    priv::ThreadFunc* m_entryPoint; \/\/\/< Abstraction of the function to run$/;"	m	class:sf::Thread	typeref:typename:priv::ThreadFunc *
m_epsilon	vendor/spdlog/tests/catch.hpp	/^        double m_epsilon;$/;"	m	class:Catch::Detail::Approx	typeref:typename:double
m_exceptionTranslatorRegistry	vendor/spdlog/tests/catch.hpp	/^            ExceptionTranslatorRegistry m_exceptionTranslatorRegistry;$/;"	m	class:Catch::__anon368216750610::RegistryHub	typeref:typename:ExceptionTranslatorRegistry
m_exclusion	vendor/spdlog/tests/catch.hpp	/^        bool m_exclusion;$/;"	m	class:Catch::TestSpecParser	typeref:typename:bool
m_exprComponents	vendor/spdlog/tests/catch.hpp	/^        } m_exprComponents;$/;"	m	class:Catch::ResultBuilder	typeref:struct:Catch::ResultBuilder::ExprComponents
m_face	dependencies/include/SFML/Graphics/Font.hpp	/^    void*                      m_face;        \/\/\/< Pointer to the internal font face (it is t/;"	m	class:sf::Font	typeref:typename:void *
m_factories	vendor/spdlog/tests/catch.hpp	/^        FactoryMap m_factories;$/;"	m	class:Catch::ReporterRegistry	typeref:typename:FactoryMap
m_fboAttachment	dependencies/include/SFML/Graphics/Texture.hpp	/^    bool         m_fboAttachment; \/\/\/< Is this texture owned by a framebuffer object?$/;"	m	class:sf::Texture	typeref:typename:bool
m_fields	dependencies/include/SFML/Network/Http.hpp	/^        FieldTable   m_fields;       \/\/\/< Fields of the header associated to their value$/;"	m	class:sf::Http::Request	typeref:typename:FieldTable
m_fields	dependencies/include/SFML/Network/Http.hpp	/^        FieldTable   m_fields;       \/\/\/< Fields of the header$/;"	m	class:sf::Http::Response	typeref:typename:FieldTable
m_file	dependencies/include/SFML/Audio/Music.hpp	/^    InputSoundFile     m_file;     \/\/\/< The streamed music file$/;"	m	class:sf::Music	typeref:typename:InputSoundFile
m_file	dependencies/include/SFML/System/FileInputStream.hpp	/^    priv::ResourceStream* m_file;$/;"	m	class:sf::FileInputStream	typeref:typename:priv::ResourceStream *
m_fileInfo	vendor/spdlog/tests/catch.hpp	/^    std::string m_fileInfo;$/;"	m	class:Catch::CompositeGenerator	typeref:typename:std::string
m_fillColor	dependencies/include/SFML/Graphics/Shape.hpp	/^    Color          m_fillColor;        \/\/\/< Fill color$/;"	m	class:sf::Shape	typeref:typename:Color
m_fillColor	dependencies/include/SFML/Graphics/Text.hpp	/^    Color               m_fillColor;           \/\/\/< Text fill color$/;"	m	class:sf::Text	typeref:typename:Color
m_filters	vendor/spdlog/tests/catch.hpp	/^        std::vector<Filter> m_filters;$/;"	m	class:Catch::TestSpec	typeref:typename:std::vector<Filter>
m_floatingArg	vendor/spdlog/tests/catch.hpp	/^        ArgAutoPtr m_floatingArg;$/;"	m	class:Clara::CommandLine	typeref:typename:ArgAutoPtr
m_font	dependencies/include/SFML/Graphics/Text.hpp	/^    const Font*         m_font;                \/\/\/< Font used to display the string$/;"	m	class:sf::Text	typeref:typename:const Font *
m_fontTextureId	dependencies/include/SFML/Graphics/Text.hpp	/^    mutable Uint64      m_fontTextureId;       \/\/\/< The font texture id$/;"	m	class:sf::Text	typeref:typename:Uint64
m_format	dependencies/include/SFML/Audio/SoundStream.hpp	/^    Uint32        m_format;                   \/\/\/< Format of the internal sound buffers$/;"	m	class:sf::SoundStream	typeref:typename:Uint32
m_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit m_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::m_formatter
m_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class m_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
m_frameTimeLimit	dependencies/include/SFML/Window/Window.hpp	/^    Time              m_frameTimeLimit; \/\/\/< Current framerate limit$/;"	m	class:sf::Window	typeref:typename:Time
m_from	vendor/spdlog/tests/catch.hpp	/^    T m_from;$/;"	m	class:Catch::BetweenGenerator	typeref:typename:T
m_fullConfig	vendor/spdlog/tests/catch.hpp	/^        Ptr<IConfig> m_fullConfig;$/;"	m	struct:Catch::ReporterConfig	typeref:typename:Ptr<IConfig>
m_fun	vendor/spdlog/tests/catch.hpp	/^        TestFunction m_fun;$/;"	m	class:Catch::FreeFunctionTestCase	typeref:typename:TestFunction
m_function	dependencies/include/SFML/System/Thread.inl	/^    F m_function;$/;"	m	struct:priv::ThreadFunctorWithArg	typeref:typename:F	file:
m_function	dependencies/include/SFML/System/Thread.inl	/^    void(C::*m_function)();$/;"	m	struct:priv::ThreadMemberFunc	typeref:typename:void (C::*)()	file:
m_functions	vendor/spdlog/tests/catch.hpp	/^        std::set<TestCase> m_functions;$/;"	m	class:Catch::TestRegistry	typeref:typename:std::set<TestCase>
m_functionsInOrder	vendor/spdlog/tests/catch.hpp	/^        std::vector<TestCase> m_functionsInOrder;$/;"	m	class:Catch::TestRegistry	typeref:typename:std::vector<TestCase>
m_functor	dependencies/include/SFML/System/Thread.inl	/^    T m_functor;$/;"	m	struct:priv::ThreadFunctor	typeref:typename:T	file:
m_generatorsByName	vendor/spdlog/tests/catch.hpp	/^        std::map<std::string, IGeneratorInfo*> m_generatorsByName;$/;"	m	class:Catch::GeneratorsForTest	typeref:typename:std::map<std::string,IGeneratorInfo * >
m_generatorsByTestName	vendor/spdlog/tests/catch.hpp	/^        std::map<std::string, IGeneratorsForTest*> m_generatorsByTestName;$/;"	m	class:Catch::Context	typeref:typename:std::map<std::string,IGeneratorsForTest * >
m_generatorsInOrder	vendor/spdlog/tests/catch.hpp	/^        std::vector<IGeneratorInfo*> m_generatorsInOrder;$/;"	m	class:Catch::GeneratorsForTest	typeref:typename:std::vector<IGeneratorInfo * >
m_geometryNeedUpdate	dependencies/include/SFML/Graphics/Text.hpp	/^    mutable bool        m_geometryNeedUpdate;  \/\/\/< Does the geometry need to be recomputed?$/;"	m	class:sf::Text	typeref:typename:bool
m_hasMipmap	dependencies/include/SFML/Graphics/Texture.hpp	/^    bool         m_hasMipmap;     \/\/\/< Has the mipmap been generated?$/;"	m	class:sf::Texture	typeref:typename:bool
m_headerPrinted	vendor/spdlog/tests/catch.hpp	/^        bool m_headerPrinted;$/;"	m	struct:Catch::ConsoleReporter	typeref:typename:bool
m_highestSpecifiedArgPosition	vendor/spdlog/tests/catch.hpp	/^        int m_highestSpecifiedArgPosition;$/;"	m	class:Clara::CommandLine	typeref:typename:int
m_host	dependencies/include/SFML/Network/Http.hpp	/^    IpAddress      m_host;       \/\/\/< Web host address$/;"	m	class:sf::Http	typeref:typename:IpAddress
m_hostName	dependencies/include/SFML/Network/Http.hpp	/^    std::string    m_hostName;   \/\/\/< Web host name$/;"	m	class:sf::Http	typeref:typename:std::string
m_id	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^    Uint64      m_id;          \/\/\/< Unique number that identifies the RenderTarget$/;"	m	class:sf::RenderTarget	typeref:typename:Uint64
m_impl	dependencies/include/SFML/Graphics/RenderTexture.hpp	/^    priv::RenderTextureImpl* m_impl;    \/\/\/< Platform\/hardware specific implementation$/;"	m	class:sf::RenderTexture	typeref:typename:priv::RenderTextureImpl *
m_impl	dependencies/include/SFML/Network/SocketSelector.hpp	/^    SocketSelectorImpl* m_impl; \/\/\/< Opaque pointer to the implementation (which requires OS-/;"	m	class:sf::SocketSelector	typeref:typename:SocketSelectorImpl *
m_impl	dependencies/include/SFML/System/Thread.hpp	/^    priv::ThreadImpl* m_impl;       \/\/\/< OS-specific implementation of the thread$/;"	m	class:sf::Thread	typeref:typename:priv::ThreadImpl *
m_impl	dependencies/include/SFML/System/ThreadLocal.hpp	/^    priv::ThreadLocalImpl* m_impl; \/\/\/< Pointer to the OS specific implementation$/;"	m	class:sf::ThreadLocal	typeref:typename:priv::ThreadLocalImpl *
m_impl	dependencies/include/SFML/Window/Cursor.hpp	/^    priv::CursorImpl* m_impl; \/\/\/< Platform-specific implementation of the cursor$/;"	m	class:sf::Cursor	typeref:typename:priv::CursorImpl *
m_impl	dependencies/include/SFML/Window/Window.hpp	/^    priv::WindowImpl* m_impl;           \/\/\/< Platform-specific implementation of the window$/;"	m	class:sf::Window	typeref:typename:priv::WindowImpl *
m_indent	vendor/spdlog/tests/catch.hpp	/^        std::string m_indent;$/;"	m	class:Catch::XmlWriter	typeref:typename:std::string
m_info	dependencies/include/SFML/Graphics/Font.hpp	/^    Info                       m_info;        \/\/\/< Information about the font$/;"	m	class:sf::Font	typeref:typename:Info
m_info	vendor/spdlog/tests/catch.hpp	/^        AssertionInfo m_info;$/;"	m	class:Catch::AssertionResult	typeref:typename:AssertionInfo
m_info	vendor/spdlog/tests/catch.hpp	/^        MessageInfo m_info;$/;"	m	class:Catch::ScopedMessage	typeref:typename:MessageInfo
m_info	vendor/spdlog/tests/catch.hpp	/^        MessageInfo m_info;$/;"	m	struct:Catch::MessageBuilder	typeref:typename:MessageInfo
m_info	vendor/spdlog/tests/catch.hpp	/^        SectionInfo m_info;$/;"	m	class:Catch::Section	typeref:typename:SectionInfo
m_insideBounds	dependencies/include/SFML/Graphics/Shape.hpp	/^    FloatRect      m_insideBounds;     \/\/\/< Bounding rectangle of the inside (fill)$/;"	m	class:sf::Shape	typeref:typename:FloatRect
m_invTransformUpdated	dependencies/include/SFML/Graphics/View.hpp	/^    mutable bool      m_invTransformUpdated; \/\/\/< Internal state telling if the inverse trans/;"	m	class:sf::View	typeref:typename:bool
m_inverseTransform	dependencies/include/SFML/Graphics/Transformable.hpp	/^    mutable Transform m_inverseTransform;           \/\/\/< Combined transformation of the objec/;"	m	class:sf::Transformable	typeref:typename:Transform
m_inverseTransform	dependencies/include/SFML/Graphics/View.hpp	/^    mutable Transform m_inverseTransform;    \/\/\/< Precomputed inverse projection transform co/;"	m	class:sf::View	typeref:typename:Transform
m_inverseTransformNeedUpdate	dependencies/include/SFML/Graphics/Transformable.hpp	/^    mutable bool      m_inverseTransformNeedUpdate; \/\/\/< Does the transform need to be recomp/;"	m	class:sf::Transformable	typeref:typename:bool
m_is8Bit	dependencies/include/v8-inspector.h	/^  bool m_is8Bit;$/;"	m	class:v8_inspector::StringView	typeref:typename:bool
m_isBlocking	dependencies/include/SFML/Network/Socket.hpp	/^    bool         m_isBlocking; \/\/\/< Current blocking mode of the socket$/;"	m	class:sf::Socket	typeref:typename:bool
m_isCapturing	dependencies/include/SFML/Audio/SoundRecorder.hpp	/^    bool               m_isCapturing;        \/\/\/< Capturing state$/;"	m	class:sf::SoundRecorder	typeref:typename:bool
m_isRepeated	dependencies/include/SFML/Graphics/Texture.hpp	/^    bool         m_isRepeated;    \/\/\/< Is the texture in repeat mode?$/;"	m	class:sf::Texture	typeref:typename:bool
m_isSet	vendor/spdlog/tests/catch.hpp	/^        bool m_isSet;$/;"	m	struct:Catch::FatalConditionHandler	typeref:typename:bool
m_isSmooth	dependencies/include/SFML/Graphics/Texture.hpp	/^    bool         m_isSmooth;      \/\/\/< Status of the smooth filter$/;"	m	class:sf::Texture	typeref:typename:bool
m_isStreaming	dependencies/include/SFML/Audio/SoundStream.hpp	/^    bool          m_isStreaming;              \/\/\/< Streaming state (true = playing, false = s/;"	m	class:sf::SoundStream	typeref:typename:bool
m_isValid	dependencies/include/SFML/Network/Packet.hpp	/^    bool              m_isValid; \/\/\/< Reading state of the packet$/;"	m	class:sf::Packet	typeref:typename:bool
m_label	vendor/spdlog/tests/catch.hpp	/^        std::string m_label;$/;"	m	struct:Catch::pluralise	typeref:typename:std::string
m_lastAssertionInfo	vendor/spdlog/tests/catch.hpp	/^        AssertionInfo m_lastAssertionInfo;$/;"	m	class:Catch::RunContext	typeref:typename:AssertionInfo
m_lastResult	vendor/spdlog/tests/catch.hpp	/^        AssertionResult m_lastResult;$/;"	m	class:Catch::RunContext	typeref:typename:AssertionResult
m_legacyReporter	vendor/spdlog/tests/catch.hpp	/^        Ptr<IReporter> m_legacyReporter;$/;"	m	class:Catch::LegacyReporterAdapter	typeref:typename:Ptr<IReporter>
m_length	dependencies/include/v8-inspector.h	/^  size_t m_length;$/;"	m	class:v8_inspector::StringView	typeref:typename:size_t
m_letterSpacingFactor	dependencies/include/SFML/Graphics/Text.hpp	/^    float               m_letterSpacingFactor; \/\/\/< Spacing factor between letters$/;"	m	class:sf::Text	typeref:typename:float
m_lhs	vendor/spdlog/tests/catch.hpp	/^    T m_lhs;$/;"	m	class:Catch::ExpressionLhs	typeref:typename:T
m_library	dependencies/include/SFML/Graphics/Font.hpp	/^    void*                      m_library;     \/\/\/< Pointer to the internal library interface /;"	m	class:sf::Font	typeref:typename:void *
m_lineInfo	vendor/spdlog/tests/catch.hpp	/^        SourceLineInfo m_lineInfo;$/;"	m	class:Catch::NotImplementedException	typeref:typename:SourceLineInfo
m_lineSpacingFactor	dependencies/include/SFML/Graphics/Text.hpp	/^    float               m_lineSpacingFactor;   \/\/\/< Spacing factor between lines$/;"	m	class:sf::Text	typeref:typename:float
m_listing	dependencies/include/SFML/Network/Ftp.hpp	/^        std::vector<std::string> m_listing; \/\/\/< Directory\/file names extracted from the dat/;"	m	class:sf::Ftp::ListingResponse	typeref:typename:std::vector<std::string>
m_loop	dependencies/include/SFML/Audio/SoundStream.hpp	/^    bool          m_loop;                     \/\/\/< Loop flag (true to loop, false to play onc/;"	m	class:sf::SoundStream	typeref:typename:bool
m_loopSpan	dependencies/include/SFML/Audio/Music.hpp	/^    Span<Uint64>       m_loopSpan; \/\/\/< Loop Range Specifier$/;"	m	class:sf::Music	typeref:typename:Span<Uint64>
m_majorVersion	dependencies/include/SFML/Network/Http.hpp	/^        unsigned int m_majorVersion; \/\/\/< Major HTTP version$/;"	m	class:sf::Http::Request	typeref:typename:unsigned int
m_majorVersion	dependencies/include/SFML/Network/Http.hpp	/^        unsigned int m_majorVersion; \/\/\/< Major HTTP version$/;"	m	class:sf::Http::Response	typeref:typename:unsigned int
m_matchers	vendor/spdlog/tests/catch.hpp	/^            std::vector<Ptr<Matcher<ExpressionT> > > m_matchers;$/;"	m	class:Catch::Matchers::Impl::Generic::AllOf	typeref:typename:std::vector<Ptr<Matcher<ExpressionT>>>
m_matchers	vendor/spdlog/tests/catch.hpp	/^            std::vector<Ptr<Matcher<ExpressionT> > > m_matchers;$/;"	m	class:Catch::Matchers::Impl::Generic::AnyOf	typeref:typename:std::vector<Ptr<Matcher<ExpressionT>>>
m_matrix	dependencies/include/SFML/Graphics/Transform.hpp	/^    float m_matrix[16]; \/\/\/< 4x4 matrix defining the transformation$/;"	m	class:sf::Transform	typeref:typename:float[16]
m_message	dependencies/include/SFML/Network/Ftp.hpp	/^        std::string m_message; \/\/\/< Last message received from the server$/;"	m	class:sf::Ftp::Response	typeref:typename:std::string
m_messages	vendor/spdlog/tests/catch.hpp	/^        std::vector<MessageInfo> m_messages;$/;"	m	class:Catch::RunContext	typeref:typename:std::vector<MessageInfo>
m_method	dependencies/include/SFML/Network/Http.hpp	/^        Method       m_method;       \/\/\/< Method to use for the request$/;"	m	class:sf::Http::Request	typeref:typename:Method
m_method	vendor/spdlog/tests/catch.hpp	/^    void (C::*m_method)();$/;"	m	class:Catch::MethodTestCase	typeref:typename:void (C::*)()
m_microseconds	dependencies/include/SFML/System/Time.hpp	/^    Int64 m_microseconds; \/\/\/< Time value stored as microseconds$/;"	m	class:sf::Time	typeref:typename:Int64
m_minorVersion	dependencies/include/SFML/Network/Http.hpp	/^        unsigned int m_minorVersion; \/\/\/< Minor HTTP version$/;"	m	class:sf::Http::Request	typeref:typename:unsigned int
m_minorVersion	dependencies/include/SFML/Network/Http.hpp	/^        unsigned int m_minorVersion; \/\/\/< Minor HTTP version$/;"	m	class:sf::Http::Response	typeref:typename:unsigned int
m_mode	vendor/spdlog/tests/catch.hpp	/^        Mode m_mode;$/;"	m	class:Catch::TestSpecParser	typeref:typename:Mode
m_moved	vendor/spdlog/tests/catch.hpp	/^        bool m_moved;$/;"	m	struct:Catch::Colour	typeref:typename:bool
m_mutex	dependencies/include/SFML/Audio/Music.hpp	/^    Mutex              m_mutex;    \/\/\/< Mutex protecting the data$/;"	m	class:sf::Music	typeref:typename:Mutex
m_mutex	dependencies/include/SFML/System/Lock.hpp	/^    Mutex& m_mutex; \/\/\/< Mutex to lock \/ unlock$/;"	m	class:sf::Lock	typeref:typename:Mutex &
m_mutexImpl	dependencies/include/SFML/System/Mutex.hpp	/^    priv::MutexImpl* m_mutexImpl; \/\/\/< OS-specific implementation$/;"	m	class:sf::Mutex	typeref:typename:priv::MutexImpl *
m_name	vendor/spdlog/tests/catch.hpp	/^            std::string m_name;$/;"	m	class:Catch::TestSpec::NamePattern	typeref:typename:std::string
m_name	vendor/spdlog/tests/catch.hpp	/^        std::string m_name;$/;"	m	class:Catch::Section	typeref:typename:std::string
m_name	vendor/spdlog/tests/catch.hpp	/^        std::string m_name;$/;"	m	class:Catch::SectionTracking::TrackedSection	typeref:typename:std::string
m_needsNewline	vendor/spdlog/tests/catch.hpp	/^        bool m_needsNewline;$/;"	m	class:Catch::XmlWriter	typeref:typename:bool
m_nonHiddenFunctions	vendor/spdlog/tests/catch.hpp	/^        std::vector<TestCase> m_nonHiddenFunctions;$/;"	m	class:Catch::TestRegistry	typeref:typename:std::vector<TestCase>
m_object	dependencies/include/SFML/System/Thread.inl	/^    C* m_object;$/;"	m	struct:priv::ThreadMemberFunc	typeref:typename:C *	file:
m_offset	dependencies/include/SFML/System/MemoryInputStream.hpp	/^    Int64       m_offset; \/\/\/< Current reading position$/;"	m	class:sf::MemoryInputStream	typeref:typename:Int64
m_ofs	vendor/spdlog/tests/catch.hpp	/^        std::ofstream m_ofs;$/;"	m	class:Catch::Runner	typeref:typename:std::ofstream
m_options	vendor/spdlog/tests/catch.hpp	/^        std::vector<Arg> m_options;$/;"	m	class:Clara::CommandLine	typeref:typename:std::vector<Arg>
m_origin	dependencies/include/SFML/Graphics/Transformable.hpp	/^    Vector2f          m_origin;                     \/\/\/< Origin of translation\/rotation\/sca/;"	m	class:sf::Transformable	typeref:typename:Vector2f
m_os	vendor/spdlog/tests/catch.hpp	/^        mutable std::ostream m_os;$/;"	m	class:Catch::Config	typeref:typename:std::ostream
m_os	vendor/spdlog/tests/catch.hpp	/^        std::ostream* m_os;$/;"	m	class:Catch::XmlWriter	typeref:typename:std::ostream *
m_oss	vendor/spdlog/tests/catch.hpp	/^        std::ostringstream m_oss;$/;"	m	class:Catch::StreamRedirect	typeref:typename:std::ostringstream
m_other	vendor/spdlog/tests/catch.hpp	/^            SectionInfo const& m_other;$/;"	m	struct:Catch::CumulativeReporterBase::BySectionInfo	typeref:typename:SectionInfo const &
m_outlineColor	dependencies/include/SFML/Graphics/Shape.hpp	/^    Color          m_outlineColor;     \/\/\/< Outline color$/;"	m	class:sf::Shape	typeref:typename:Color
m_outlineColor	dependencies/include/SFML/Graphics/Text.hpp	/^    Color               m_outlineColor;        \/\/\/< Text outline color$/;"	m	class:sf::Text	typeref:typename:Color
m_outlineThickness	dependencies/include/SFML/Graphics/Shape.hpp	/^    float          m_outlineThickness; \/\/\/< Thickness of the shape's outline$/;"	m	class:sf::Shape	typeref:typename:float
m_outlineThickness	dependencies/include/SFML/Graphics/Text.hpp	/^    float               m_outlineThickness;    \/\/\/< Thickness of the text's outline$/;"	m	class:sf::Text	typeref:typename:float
m_outlineVertices	dependencies/include/SFML/Graphics/Shape.hpp	/^    VertexArray    m_outlineVertices;  \/\/\/< Vertex array containing the outline geometry$/;"	m	class:sf::Shape	typeref:typename:VertexArray
m_outlineVertices	dependencies/include/SFML/Graphics/Text.hpp	/^    mutable VertexArray m_outlineVertices;     \/\/\/< Vertex array containing the outline geome/;"	m	class:sf::Text	typeref:typename:VertexArray
m_p	vendor/spdlog/tests/catch.hpp	/^        T* m_p;$/;"	m	class:Catch::Ptr	typeref:typename:T *
m_pages	dependencies/include/SFML/Graphics/Font.hpp	/^    mutable PageTable          m_pages;       \/\/\/< Table containing the glyphs pages by chara/;"	m	class:sf::Font	typeref:typename:PageTable
m_parent	vendor/spdlog/tests/catch.hpp	/^        TrackedSection* m_parent;$/;"	m	class:Catch::SectionTracking::TrackedSection	typeref:typename:TrackedSection *
m_patterns	vendor/spdlog/tests/catch.hpp	/^            std::vector<Ptr<Pattern> > m_patterns;$/;"	m	struct:Catch::TestSpec::Filter	typeref:typename:std::vector<Ptr<Pattern>>
m_pendingPacket	dependencies/include/SFML/Network/TcpSocket.hpp	/^    PendingPacket m_pendingPacket; \/\/\/< Temporary data of the packet currently being received$/;"	m	class:sf::TcpSocket	typeref:typename:PendingPacket
m_pixelBuffer	dependencies/include/SFML/Graphics/Font.hpp	/^    mutable std::vector<Uint8> m_pixelBuffer; \/\/\/< Pixel buffer holding a glyph's pixels befo/;"	m	class:sf::Font	typeref:typename:std::vector<Uint8>
m_pixels	dependencies/include/SFML/Graphics/Image.hpp	/^    std::vector<Uint8> m_pixels; \/\/\/< Pixels of the image$/;"	m	class:sf::Image	typeref:typename:std::vector<Uint8>
m_pixelsFlipped	dependencies/include/SFML/Graphics/Texture.hpp	/^    mutable bool m_pixelsFlipped; \/\/\/< To work around the inconsistency in Y orientation$/;"	m	class:sf::Texture	typeref:typename:bool
m_pointCount	dependencies/include/SFML/Graphics/CircleShape.hpp	/^    std::size_t m_pointCount; \/\/\/< Number of points composing the circle$/;"	m	class:sf::CircleShape	typeref:typename:std::size_t
m_points	dependencies/include/SFML/Graphics/ConvexShape.hpp	/^    std::vector<Vector2f> m_points; \/\/\/< Points composing the convex polygon$/;"	m	class:sf::ConvexShape	typeref:typename:std::vector<Vector2f>
m_port	dependencies/include/SFML/Network/Http.hpp	/^    unsigned short m_port;       \/\/\/< Port used for connection with host$/;"	m	class:sf::Http	typeref:typename:unsigned short
m_pos	vendor/spdlog/tests/catch.hpp	/^        std::size_t m_start, m_pos;$/;"	m	class:Catch::TestSpecParser	typeref:typename:std::size_t
m_position	dependencies/include/SFML/Graphics/Transformable.hpp	/^    Vector2f          m_position;                   \/\/\/< Position of the object in the 2D wor/;"	m	class:sf::Transformable	typeref:typename:Vector2f
m_positionalArgs	vendor/spdlog/tests/catch.hpp	/^        std::map<int, Arg> m_positionalArgs;$/;"	m	class:Clara::CommandLine	typeref:typename:std::map<int,Arg>
m_prevBuf	vendor/spdlog/tests/catch.hpp	/^        std::streambuf* m_prevBuf;$/;"	m	class:Catch::StreamRedirect	typeref:typename:std::streambuf *
m_prevConfig	vendor/spdlog/tests/catch.hpp	/^        Ptr<IConfig const> m_prevConfig;$/;"	m	class:Catch::RunContext	typeref:typename:Ptr<IConfig const>
m_prevResultCapture	vendor/spdlog/tests/catch.hpp	/^        IResultCapture* m_prevResultCapture;$/;"	m	class:Catch::RunContext	typeref:typename:IResultCapture *
m_prevRunner	vendor/spdlog/tests/catch.hpp	/^        IRunner* m_prevRunner;$/;"	m	class:Catch::RunContext	typeref:typename:IRunner *
m_primitiveType	dependencies/include/SFML/Graphics/VertexArray.hpp	/^    PrimitiveType       m_primitiveType; \/\/\/< Type of primitives to draw$/;"	m	class:sf::VertexArray	typeref:typename:PrimitiveType
m_primitiveType	dependencies/include/SFML/Graphics/VertexBuffer.hpp	/^    PrimitiveType m_primitiveType; \/\/\/< Type of primitives to draw$/;"	m	class:sf::VertexBuffer	typeref:typename:PrimitiveType
m_processingInterval	dependencies/include/SFML/Audio/SoundRecorder.hpp	/^    Time               m_processingInterval; \/\/\/< Time period between calls to onProcessSampl/;"	m	class:sf::SoundRecorder	typeref:typename:Time
m_radius	dependencies/include/SFML/Graphics/CircleShape.hpp	/^    float       m_radius;     \/\/\/< Radius of the circle$/;"	m	class:sf::CircleShape	typeref:typename:float
m_rb	vendor/spdlog/tests/catch.hpp	/^    ResultBuilder& m_rb;$/;"	m	class:Catch::ExpressionLhs	typeref:typename:ResultBuilder &
m_rc	vendor/spdlog/tests/catch.hpp	/^        mutable unsigned int m_rc;$/;"	m	struct:Catch::SharedImpl	typeref:typename:unsigned int
m_readPos	dependencies/include/SFML/Network/Packet.hpp	/^    std::size_t       m_readPos; \/\/\/< Current reading position in the packet$/;"	m	class:sf::Packet	typeref:typename:std::size_t
m_reader	dependencies/include/SFML/Audio/InputSoundFile.hpp	/^    SoundFileReader* m_reader;       \/\/\/< Reader that handles I\/O on the file's format$/;"	m	class:sf::InputSoundFile	typeref:typename:SoundFileReader *
m_receiveBuffer	dependencies/include/SFML/Network/Ftp.hpp	/^    std::string m_receiveBuffer; \/\/\/< Received command data that is yet to be processed$/;"	m	class:sf::Ftp	typeref:typename:std::string
m_refCount	dependencies/include/SFML/Graphics/Font.hpp	/^    int*                       m_refCount;    \/\/\/< Reference counter used by implicit sharing$/;"	m	class:sf::Font	typeref:typename:int *
m_registry	vendor/spdlog/tests/catch.hpp	/^        std::map<std::string, TagAlias> m_registry;$/;"	m	class:Catch::TagAliasRegistry	typeref:typename:std::map<std::string,TagAlias>
m_reporter	vendor/spdlog/tests/catch.hpp	/^        Ptr<IStreamingReporter> m_reporter;$/;"	m	class:Catch::RunContext	typeref:typename:Ptr<IStreamingReporter>
m_reporter	vendor/spdlog/tests/catch.hpp	/^        Ptr<IStreamingReporter> m_reporter;$/;"	m	class:Catch::Runner	typeref:typename:Ptr<IStreamingReporter>
m_reporterRegistry	vendor/spdlog/tests/catch.hpp	/^            ReporterRegistry m_reporterRegistry;$/;"	m	class:Catch::__anon368216750610::RegistryHub	typeref:typename:ReporterRegistry
m_resultCapture	vendor/spdlog/tests/catch.hpp	/^        IResultCapture* m_resultCapture;$/;"	m	class:Catch::Context	typeref:typename:IResultCapture *
m_resultData	vendor/spdlog/tests/catch.hpp	/^        AssertionResultData m_resultData;$/;"	m	class:Catch::AssertionResult	typeref:typename:AssertionResultData
m_rootSection	vendor/spdlog/tests/catch.hpp	/^        Ptr<SectionNode> m_rootSection;$/;"	m	struct:Catch::CumulativeReporterBase	typeref:typename:Ptr<SectionNode>
m_rotation	dependencies/include/SFML/Graphics/Transformable.hpp	/^    float             m_rotation;                   \/\/\/< Orientation of the object, in degree/;"	m	class:sf::Transformable	typeref:typename:float
m_rotation	dependencies/include/SFML/Graphics/View.hpp	/^    float             m_rotation;            \/\/\/< Angle of rotation of the view rectangle, in/;"	m	class:sf::View	typeref:typename:float
m_runInfo	vendor/spdlog/tests/catch.hpp	/^        TestRunInfo m_runInfo;$/;"	m	class:Catch::RunContext	typeref:typename:TestRunInfo
m_runState	vendor/spdlog/tests/catch.hpp	/^        RunState m_runState;$/;"	m	class:Catch::SectionTracking::TrackedSection	typeref:typename:RunState
m_runner	vendor/spdlog/tests/catch.hpp	/^        IRunner* m_runner;$/;"	m	class:Catch::Context	typeref:typename:IRunner *
m_sRgb	dependencies/include/SFML/Graphics/Texture.hpp	/^    bool         m_sRgb;          \/\/\/< Should the texture source be converted from sRGB?$/;"	m	class:sf::Texture	typeref:typename:bool
m_sampleCount	dependencies/include/SFML/Audio/InputSoundFile.hpp	/^    Uint64           m_sampleCount;  \/\/\/< Total number of samples in the file$/;"	m	class:sf::InputSoundFile	typeref:typename:Uint64
m_sampleOffset	dependencies/include/SFML/Audio/InputSoundFile.hpp	/^    Uint64           m_sampleOffset; \/\/\/< Sample Read Position$/;"	m	class:sf::InputSoundFile	typeref:typename:Uint64
m_sampleRate	dependencies/include/SFML/Audio/InputSoundFile.hpp	/^    unsigned int     m_sampleRate;   \/\/\/< Number of samples per second$/;"	m	class:sf::InputSoundFile	typeref:typename:unsigned int
m_sampleRate	dependencies/include/SFML/Audio/SoundRecorder.hpp	/^    unsigned int       m_sampleRate;         \/\/\/< Sample rate$/;"	m	class:sf::SoundRecorder	typeref:typename:unsigned int
m_sampleRate	dependencies/include/SFML/Audio/SoundStream.hpp	/^    unsigned int  m_sampleRate;               \/\/\/< Frequency (samples \/ second)$/;"	m	class:sf::SoundStream	typeref:typename:unsigned int
m_samples	dependencies/include/SFML/Audio/Music.hpp	/^    std::vector<Int16> m_samples;  \/\/\/< Temporary buffer of samples$/;"	m	class:sf::Music	typeref:typename:std::vector<Int16>
m_samples	dependencies/include/SFML/Audio/SoundBuffer.hpp	/^    std::vector<Int16> m_samples;  \/\/\/< Samples buffer$/;"	m	class:sf::SoundBuffer	typeref:typename:std::vector<Int16>
m_samples	dependencies/include/SFML/Audio/SoundBufferRecorder.hpp	/^    std::vector<Int16> m_samples; \/\/\/< Temporary sample buffer to hold the recorded data$/;"	m	class:sf::SoundBufferRecorder	typeref:typename:std::vector<Int16>
m_samples	dependencies/include/SFML/Audio/SoundRecorder.hpp	/^    std::vector<Int16> m_samples;            \/\/\/< Buffer to store captured samples$/;"	m	class:sf::SoundRecorder	typeref:typename:std::vector<Int16>
m_samplesProcessed	dependencies/include/SFML/Audio/SoundStream.hpp	/^    Uint64        m_samplesProcessed;         \/\/\/< Number of buffers processed since beginnin/;"	m	class:sf::SoundStream	typeref:typename:Uint64
m_scale	dependencies/include/SFML/Graphics/Transformable.hpp	/^    Vector2f          m_scale;                      \/\/\/< Scale of the object$/;"	m	class:sf::Transformable	typeref:typename:Vector2f
m_scale	vendor/spdlog/tests/catch.hpp	/^        double m_scale;$/;"	m	class:Catch::Detail::Approx	typeref:typename:double
m_sectionDepth	vendor/spdlog/tests/catch.hpp	/^        int m_sectionDepth;$/;"	m	class:Catch::XmlReporter	typeref:typename:int
m_sectionIncluded	vendor/spdlog/tests/catch.hpp	/^        bool m_sectionIncluded;$/;"	m	class:Catch::Section	typeref:typename:bool
m_sectionStack	vendor/spdlog/tests/catch.hpp	/^        std::vector<Ptr<SectionNode> > m_sectionStack;$/;"	m	struct:Catch::CumulativeReporterBase	typeref:typename:std::vector<Ptr<SectionNode>>
m_sectionStack	vendor/spdlog/tests/catch.hpp	/^        std::vector<SectionInfo> m_sectionStack;$/;"	m	struct:Catch::StreamingReporterBase	typeref:typename:std::vector<SectionInfo>
m_sections	vendor/spdlog/tests/catch.hpp	/^        std::vector<std::vector<Ptr<SectionNode> > > m_sections;$/;"	m	struct:Catch::CumulativeReporterBase	typeref:typename:std::vector<std::vector<Ptr<SectionNode>>>
m_sel	vendor/spdlog/tests/catch.hpp	/^        SEL m_sel;$/;"	m	class:Catch::OcMethod	typeref:typename:SEL
m_sendPos	dependencies/include/SFML/Network/Packet.hpp	/^    std::size_t       m_sendPos; \/\/\/< Current send position in the packet (for handling parti/;"	m	class:sf::Packet	typeref:typename:std::size_t
m_shaderProgram	dependencies/include/SFML/Graphics/Shader.hpp	/^    unsigned int m_shaderProgram;  \/\/\/< OpenGL identifier for the program$/;"	m	class:sf::Shader	typeref:typename:unsigned int
m_shouldDebugBreak	vendor/spdlog/tests/catch.hpp	/^        bool m_shouldDebugBreak;$/;"	m	class:Catch::ResultBuilder	typeref:typename:bool
m_shouldThrow	vendor/spdlog/tests/catch.hpp	/^        bool m_shouldThrow;$/;"	m	class:Catch::ResultBuilder	typeref:typename:bool
m_size	dependencies/include/SFML/Graphics/Image.hpp	/^    Vector2u           m_size;   \/\/\/< Image size$/;"	m	class:sf::Image	typeref:typename:Vector2u
m_size	dependencies/include/SFML/Graphics/RectangleShape.hpp	/^    Vector2f m_size; \/\/\/< Size of the rectangle$/;"	m	class:sf::RectangleShape	typeref:typename:Vector2f
m_size	dependencies/include/SFML/Graphics/Texture.hpp	/^    Vector2u     m_size;          \/\/\/< Public texture size$/;"	m	class:sf::Texture	typeref:typename:Vector2u
m_size	dependencies/include/SFML/Graphics/VertexBuffer.hpp	/^    std::size_t   m_size;          \/\/\/< Size in Vertexes of the currently allocated buffer$/;"	m	class:sf::VertexBuffer	typeref:typename:std::size_t
m_size	dependencies/include/SFML/Graphics/View.hpp	/^    Vector2f          m_size;                \/\/\/< Size of the view, in scene coordinates$/;"	m	class:sf::View	typeref:typename:Vector2f
m_size	dependencies/include/SFML/System/MemoryInputStream.hpp	/^    Int64       m_size;   \/\/\/< Total size of the data$/;"	m	class:sf::MemoryInputStream	typeref:typename:Int64
m_size	dependencies/include/SFML/Window/Window.hpp	/^    Vector2u          m_size;           \/\/\/< Current size of the window$/;"	m	class:sf::Window	typeref:typename:Vector2u
m_size	vendor/spdlog/tests/catch.hpp	/^        std::size_t m_size;$/;"	m	struct:Catch::GeneratorInfo	typeref:typename:std::size_t
m_socket	dependencies/include/SFML/Network/Socket.hpp	/^    SocketHandle m_socket;     \/\/\/< Socket descriptor$/;"	m	class:sf::Socket	typeref:typename:SocketHandle
m_sounds	dependencies/include/SFML/Audio/SoundBuffer.hpp	/^    mutable SoundList  m_sounds;   \/\/\/< List of sounds that are using this buffer$/;"	m	class:sf::SoundBuffer	typeref:typename:SoundList
m_source	dependencies/include/SFML/Audio/SoundSource.hpp	/^    unsigned int m_source; \/\/\/< OpenAL source identifier$/;"	m	class:sf::SoundSource	typeref:typename:unsigned int
m_start	vendor/spdlog/tests/catch.hpp	/^        std::size_t m_start, m_pos;$/;"	m	class:Catch::TestSpecParser	typeref:typename:std::size_t
m_startTime	dependencies/include/SFML/System/Clock.hpp	/^    Time m_startTime; \/\/\/< Time of last reset, in microseconds$/;"	m	class:sf::Clock	typeref:typename:Time
m_status	dependencies/include/SFML/Network/Ftp.hpp	/^        Status      m_status;  \/\/\/< Status code returned from the server$/;"	m	class:sf::Ftp::Response	typeref:typename:Status
m_status	dependencies/include/SFML/Network/Http.hpp	/^        Status       m_status;       \/\/\/< Status code$/;"	m	class:sf::Http::Response	typeref:typename:Status
m_str	vendor/spdlog/tests/catch.hpp	/^            std::string m_str;$/;"	m	struct:Catch::Matchers::Impl::StdString::Equals	typeref:typename:std::string
m_stream	dependencies/include/SFML/Audio/InputSoundFile.hpp	/^    InputStream*     m_stream;       \/\/\/< Input stream used to access the file's data$/;"	m	class:sf::InputSoundFile	typeref:typename:InputStream *
m_stream	dependencies/include/SFML/Graphics/Font.hpp	/^    void*                      m_stream; \/\/\/< Asset file streamer (if loaded from file)$/;"	m	class:sf::Font	typeref:typename:void *
m_stream	vendor/spdlog/tests/catch.hpp	/^        CopyableStream m_stream;$/;"	m	class:Catch::ResultBuilder	typeref:typename:CopyableStream
m_stream	vendor/spdlog/tests/catch.hpp	/^        Stream m_stream;$/;"	m	class:Catch::Config	typeref:typename:Stream
m_stream	vendor/spdlog/tests/catch.hpp	/^        std::ostream& m_stream;$/;"	m	class:Catch::StreamRedirect	typeref:typename:std::ostream &
m_stream	vendor/spdlog/tests/catch.hpp	/^        std::ostream* m_stream;$/;"	m	struct:Catch::ReporterConfig	typeref:typename:std::ostream *
m_stream	vendor/spdlog/tests/catch.hpp	/^        std::ostringstream m_stream;$/;"	m	struct:Catch::MessageBuilder	typeref:typename:std::ostringstream
m_streamOwned	dependencies/include/SFML/Audio/InputSoundFile.hpp	/^    bool             m_streamOwned;  \/\/\/< Is the stream internal or external?$/;"	m	class:sf::InputSoundFile	typeref:typename:bool
m_streamRec	dependencies/include/SFML/Graphics/Font.hpp	/^    void*                      m_streamRec;   \/\/\/< Pointer to the stream rec instance (it is /;"	m	class:sf::Font	typeref:typename:void *
m_string	dependencies/include/SFML/Graphics/Text.hpp	/^    String              m_string;              \/\/\/< String to display$/;"	m	class:sf::Text	typeref:typename:String
m_string	dependencies/include/SFML/System/String.hpp	/^    std::basic_string<Uint32> m_string; \/\/\/< Internal string of UTF-32 characters$/;"	m	class:sf::String	typeref:typename:std::basic_string<Uint32>
m_stroker	dependencies/include/SFML/Graphics/Font.hpp	/^    void*                      m_stroker;     \/\/\/< Pointer to the stroker (it is typeless to /;"	m	class:sf::Font	typeref:typename:void *
m_style	dependencies/include/SFML/Graphics/Text.hpp	/^    Uint32              m_style;               \/\/\/< Text style (see Style enum)$/;"	m	class:sf::Text	typeref:typename:Uint32
m_substr	vendor/spdlog/tests/catch.hpp	/^                NSString* m_substr;$/;"	m	struct:Catch::Matchers::Impl::NSStringMatchers::StringHolder	typeref:typename:NSString *
m_substr	vendor/spdlog/tests/catch.hpp	/^            std::string m_substr;$/;"	m	struct:Catch::Matchers::Impl::StdString::Contains	typeref:typename:std::string
m_substr	vendor/spdlog/tests/catch.hpp	/^            std::string m_substr;$/;"	m	struct:Catch::Matchers::Impl::StdString::EndsWith	typeref:typename:std::string
m_substr	vendor/spdlog/tests/catch.hpp	/^            std::string m_substr;$/;"	m	struct:Catch::Matchers::Impl::StdString::StartsWith	typeref:typename:std::string
m_tag	vendor/spdlog/tests/catch.hpp	/^            std::string m_tag;$/;"	m	class:Catch::TestSpec::TagPattern	typeref:typename:std::string
m_tagAliases	vendor/spdlog/tests/catch.hpp	/^        ITagAliasRegistry const* m_tagAliases;$/;"	m	class:Catch::TestSpecParser	typeref:typename:ITagAliasRegistry const *
m_tagIsOpen	vendor/spdlog/tests/catch.hpp	/^        bool m_tagIsOpen;$/;"	m	class:Catch::XmlWriter	typeref:typename:bool
m_tags	vendor/spdlog/tests/catch.hpp	/^        std::vector<std::string> m_tags;$/;"	m	class:Catch::XmlWriter	typeref:typename:std::vector<std::string>
m_targetString	vendor/spdlog/tests/catch.hpp	/^        std::string& m_targetString;$/;"	m	class:Catch::StreamRedirect	typeref:typename:std::string &
m_testCase	vendor/spdlog/tests/catch.hpp	/^        TrackedSection m_testCase;$/;"	m	class:Catch::SectionTracking::TestCaseTracker	typeref:typename:TrackedSection
m_testCaseRegistry	vendor/spdlog/tests/catch.hpp	/^            TestRegistry m_testCaseRegistry;$/;"	m	class:Catch::__anon368216750610::RegistryHub	typeref:typename:TestRegistry
m_testCaseTimer	vendor/spdlog/tests/catch.hpp	/^        Timer m_testCaseTimer;$/;"	m	class:Catch::XmlReporter	typeref:typename:Timer
m_testCaseTracker	vendor/spdlog/tests/catch.hpp	/^        Option<TestCaseTracker> m_testCaseTracker;$/;"	m	class:Catch::RunContext	typeref:typename:Option<TestCaseTracker>
m_testCases	vendor/spdlog/tests/catch.hpp	/^        std::vector<Ptr<TestCaseNode> > m_testCases;$/;"	m	struct:Catch::CumulativeReporterBase	typeref:typename:std::vector<Ptr<TestCaseNode>>
m_testGroups	vendor/spdlog/tests/catch.hpp	/^        std::vector<Ptr<TestGroupNode> > m_testGroups;$/;"	m	struct:Catch::CumulativeReporterBase	typeref:typename:std::vector<Ptr<TestGroupNode>>
m_testRuns	vendor/spdlog/tests/catch.hpp	/^        std::vector<Ptr<TestRunNode> > m_testRuns;$/;"	m	struct:Catch::CumulativeReporterBase	typeref:typename:std::vector<Ptr<TestRunNode>>
m_testSpec	vendor/spdlog/tests/catch.hpp	/^        TestSpec m_testSpec;$/;"	m	class:Catch::Config	typeref:typename:TestSpec
m_testSpec	vendor/spdlog/tests/catch.hpp	/^        TestSpec m_testSpec;$/;"	m	class:Catch::TestSpecParser	typeref:typename:TestSpec
m_testsAlreadyRun	vendor/spdlog/tests/catch.hpp	/^        std::set<TestCase> m_testsAlreadyRun;$/;"	m	class:Catch::Runner	typeref:typename:std::set<TestCase>
m_texture	dependencies/include/SFML/Graphics/RenderTexture.hpp	/^    Texture                  m_texture; \/\/\/< Target texture to draw on$/;"	m	class:sf::RenderTexture	typeref:typename:Texture
m_texture	dependencies/include/SFML/Graphics/Shape.hpp	/^    const Texture* m_texture;          \/\/\/< Texture of the shape$/;"	m	class:sf::Shape	typeref:typename:const Texture *
m_texture	dependencies/include/SFML/Graphics/Sprite.hpp	/^    const Texture* m_texture;     \/\/\/< Texture of the sprite$/;"	m	class:sf::Sprite	typeref:typename:const Texture *
m_texture	dependencies/include/SFML/Graphics/Texture.hpp	/^    unsigned int m_texture;       \/\/\/< Internal texture identifier$/;"	m	class:sf::Texture	typeref:typename:unsigned int
m_textureRect	dependencies/include/SFML/Graphics/Shape.hpp	/^    IntRect        m_textureRect;      \/\/\/< Rectangle defining the area of the source texture/;"	m	class:sf::Shape	typeref:typename:IntRect
m_textureRect	dependencies/include/SFML/Graphics/Sprite.hpp	/^    IntRect        m_textureRect; \/\/\/< Rectangle defining the area of the source texture to d/;"	m	class:sf::Sprite	typeref:typename:IntRect
m_textures	dependencies/include/SFML/Graphics/Shader.hpp	/^    TextureTable m_textures;       \/\/\/< Texture variables in the shader, mapped to their loca/;"	m	class:sf::Shader	typeref:typename:TextureTable
m_thread	dependencies/include/SFML/Audio/SoundRecorder.hpp	/^    Thread             m_thread;             \/\/\/< Thread running the background recording tas/;"	m	class:sf::SoundRecorder	typeref:typename:Thread
m_thread	dependencies/include/SFML/Audio/SoundStream.hpp	/^    Thread        m_thread;                   \/\/\/< Thread running the background tasks$/;"	m	class:sf::SoundStream	typeref:typename:Thread
m_threadMutex	dependencies/include/SFML/Audio/SoundStream.hpp	/^    mutable Mutex m_threadMutex;              \/\/\/< Thread mutex$/;"	m	class:sf::SoundStream	typeref:typename:Mutex
m_threadStartState	dependencies/include/SFML/Audio/SoundStream.hpp	/^    Status        m_threadStartState;         \/\/\/< State the thread starts in (Playing, Pause/;"	m	class:sf::SoundStream	typeref:typename:Status
m_throwOnUnrecognisedTokens	vendor/spdlog/tests/catch.hpp	/^        bool m_throwOnUnrecognisedTokens;$/;"	m	class:Clara::CommandLine	typeref:typename:bool
m_ticks	vendor/spdlog/tests/catch.hpp	/^        uint64_t m_ticks;$/;"	m	class:Catch::Timer	typeref:typename:uint64_t
m_timer	vendor/spdlog/tests/catch.hpp	/^        Timer m_timer;$/;"	m	class:Catch::Section	typeref:typename:Timer
m_to	vendor/spdlog/tests/catch.hpp	/^    T m_to;$/;"	m	class:Catch::BetweenGenerator	typeref:typename:T
m_totalSize	vendor/spdlog/tests/catch.hpp	/^    size_t m_totalSize;$/;"	m	class:Catch::CompositeGenerator	typeref:typename:size_t
m_totals	vendor/spdlog/tests/catch.hpp	/^        Totals m_totals;$/;"	m	class:Catch::RunContext	typeref:typename:Totals
m_tracker	vendor/spdlog/tests/catch.hpp	/^            TestCaseTracker& m_tracker;$/;"	m	class:Catch::SectionTracking::TestCaseTracker::Guard	typeref:typename:TestCaseTracker &
m_transform	dependencies/include/SFML/Graphics/Transformable.hpp	/^    mutable Transform m_transform;                  \/\/\/< Combined transformation of the objec/;"	m	class:sf::Transformable	typeref:typename:Transform
m_transform	dependencies/include/SFML/Graphics/View.hpp	/^    mutable Transform m_transform;           \/\/\/< Precomputed projection transform correspond/;"	m	class:sf::View	typeref:typename:Transform
m_transformNeedUpdate	dependencies/include/SFML/Graphics/Transformable.hpp	/^    mutable bool      m_transformNeedUpdate;        \/\/\/< Does the transform need to be recomp/;"	m	class:sf::Transformable	typeref:typename:bool
m_transformUpdated	dependencies/include/SFML/Graphics/View.hpp	/^    mutable bool      m_transformUpdated;    \/\/\/< Internal state telling if the transform nee/;"	m	class:sf::View	typeref:typename:bool
m_translateFunction	vendor/spdlog/tests/catch.hpp	/^            std::string(*m_translateFunction)( T& );$/;"	m	class:Catch::ExceptionTranslatorRegistrar::ExceptionTranslator	typeref:typename:std::string (*)(T &)
m_translators	vendor/spdlog/tests/catch.hpp	/^        std::vector<const IExceptionTranslator*> m_translators;$/;"	m	class:Catch::ExceptionTranslatorRegistry	typeref:typename:std::vector<const IExceptionTranslator * >
m_type	dependencies/include/SFML/Network/Socket.hpp	/^    Type         m_type;       \/\/\/< Type of the socket (TCP or UDP)$/;"	m	class:sf::Socket	typeref:typename:Type
m_underlyingPattern	vendor/spdlog/tests/catch.hpp	/^            Ptr<Pattern> m_underlyingPattern;$/;"	m	class:Catch::TestSpec::ExcludedPattern	typeref:typename:Ptr<Pattern>
m_unfinishedSections	vendor/spdlog/tests/catch.hpp	/^        std::vector<UnfinishedSections> m_unfinishedSections;$/;"	m	class:Catch::RunContext	typeref:typename:std::vector<UnfinishedSections>
m_uniforms	dependencies/include/SFML/Graphics/Shader.hpp	/^    UniformTable m_uniforms;       \/\/\/< Parameters location cache$/;"	m	class:sf::Shader	typeref:typename:UniformTable
m_unnamedCount	vendor/spdlog/tests/catch.hpp	/^        size_t m_unnamedCount;$/;"	m	class:Catch::TestRegistry	typeref:typename:size_t
m_unusedTokens	vendor/spdlog/tests/catch.hpp	/^        std::vector<Clara::Parser::Token> m_unusedTokens;$/;"	m	class:Catch::Session	typeref:typename:std::vector<Clara::Parser::Token>
m_uri	dependencies/include/SFML/Network/Http.hpp	/^        std::string  m_uri;          \/\/\/< Target URI of the request$/;"	m	class:sf::Http::Request	typeref:typename:std::string
m_usage	dependencies/include/SFML/Graphics/VertexBuffer.hpp	/^    Usage         m_usage;         \/\/\/< How this vertex buffer is to be used$/;"	m	class:sf::VertexBuffer	typeref:typename:Usage
m_valid	dependencies/include/SFML/Network/IpAddress.hpp	/^    bool   m_valid;   \/\/\/< Is the address valid?$/;"	m	class:sf::IpAddress	typeref:typename:bool
m_value	vendor/spdlog/tests/catch.hpp	/^        double m_value;$/;"	m	class:Catch::Detail::Approx	typeref:typename:double
m_values	vendor/spdlog/tests/catch.hpp	/^    std::vector<T> m_values;$/;"	m	class:Catch::ValuesGenerator	typeref:typename:std::vector<T>
m_vertices	dependencies/include/SFML/Graphics/Shape.hpp	/^    VertexArray    m_vertices;         \/\/\/< Vertex array containing the fill geometry$/;"	m	class:sf::Shape	typeref:typename:VertexArray
m_vertices	dependencies/include/SFML/Graphics/Sprite.hpp	/^    Vertex         m_vertices[4]; \/\/\/< Vertices defining the sprite's geometry$/;"	m	class:sf::Sprite	typeref:typename:Vertex[4]
m_vertices	dependencies/include/SFML/Graphics/Text.hpp	/^    mutable VertexArray m_vertices;            \/\/\/< Vertex array containing the fill geometry$/;"	m	class:sf::Text	typeref:typename:VertexArray
m_vertices	dependencies/include/SFML/Graphics/VertexArray.hpp	/^    std::vector<Vertex> m_vertices;      \/\/\/< Vertices contained in the array$/;"	m	class:sf::VertexArray	typeref:typename:std::vector<Vertex>
m_view	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^    View        m_view;        \/\/\/< Current view$/;"	m	class:sf::RenderTarget	typeref:typename:View
m_viewport	dependencies/include/SFML/Graphics/View.hpp	/^    FloatRect         m_viewport;            \/\/\/< Viewport rectangle, expressed as a factor o/;"	m	class:sf::View	typeref:typename:FloatRect
m_what	vendor/spdlog/tests/catch.hpp	/^        std::string m_what;$/;"	m	class:Catch::NotImplementedException	typeref:typename:std::string
m_wildcard	vendor/spdlog/tests/catch.hpp	/^            WildcardPosition m_wildcard;$/;"	m	class:Catch::TestSpec::NamePattern	typeref:typename:WildcardPosition
m_writer	dependencies/include/SFML/Audio/OutputSoundFile.hpp	/^    SoundFileWriter* m_writer; \/\/\/< Writer that handles I\/O on the file's format$/;"	m	class:sf::OutputSoundFile	typeref:typename:SoundFileWriter *
m_writer	vendor/spdlog/tests/catch.hpp	/^            mutable XmlWriter* m_writer;$/;"	m	class:Catch::XmlWriter::ScopedElement	typeref:typename:XmlWriter *
m_writer	vendor/spdlog/tests/catch.hpp	/^        WriterF m_writer;$/;"	m	class:Catch::StreamBufImpl	typeref:typename:WriterF
m_xml	vendor/spdlog/tests/catch.hpp	/^        XmlWriter m_xml;$/;"	m	class:Catch::XmlReporter	typeref:typename:XmlWriter
macroName	vendor/spdlog/tests/catch.hpp	/^        std::string macroName;$/;"	m	struct:Catch::AssertionInfo	typeref:typename:std::string
macroName	vendor/spdlog/tests/catch.hpp	/^        std::string macroName;$/;"	m	struct:Catch::MessageInfo	typeref:typename:std::string
magenta	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    magenta = 0xFF00FF,                 \/\/ rgb(255,0,255)$/;"	e	enum:color
magenta	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string magenta = "\\033[35m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
main	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f	typeref:typename:void
main	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	build/default/CMakeFiles/feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f	typeref:typename:int
main	build/default/CMakeFiles/feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f	typeref:typename:int
main	dependencies/include/SFML/Main.hpp	/^    #define main /;"	d
main	src/Main.cpp	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	vendor/spdlog/bench/async_bench.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	vendor/spdlog/bench/bench.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	vendor/spdlog/bench/formatter-bench.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	vendor/spdlog/bench/latency.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	vendor/spdlog/example/example.cpp	/^int main(int, char *[])$/;"	f	typeref:typename:int
main	vendor/spdlog/example/jni/example.cpp	/^int main(int, char *[])$/;"	f	typeref:typename:int
main	vendor/spdlog/example/multisink.cpp	/^int main(int, char *[])$/;"	f	typeref:typename:int
main	vendor/spdlog/tests/catch.hpp	/^int main (int argc, char * const argv[]) {$/;"	f	typeref:typename:int
main_type	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^  typedef internal::int_traits<int>::main_type main_type;$/;"	t	function:__anon3d87c0370110::format_error_code	typeref:typename:internal::int_traits<int>::main_type
main_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    std::numeric_limits<T>::digits <= 32, uint32_t, uint64_t>::type main_type;$/;"	t	struct:internal::int_traits	typeref:typename:std::conditional<std::numeric_limits<T>::digits<=32,uint32_t,uint64_t>::type
main_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    typedef typename internal::int_traits<Int>::main_type main_type;$/;"	t	function:basic_writer::write_decimal	typeref:typename:internal::int_traits<Int>::main_type
main_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef typename internal::int_traits<T>::main_type main_type;$/;"	t	function:format_decimal	typeref:typename:internal::int_traits<T>::main_type
majorVersion	dependencies/include/SFML/Window/ContextSettings.hpp	/^    unsigned int majorVersion;      \/\/\/< Major number of the context version to create$/;"	m	struct:sf::ContextSettings	typeref:typename:unsigned int
majorVersion	vendor/spdlog/tests/catch.hpp	/^        unsigned int const majorVersion;$/;"	m	struct:Catch::Version	typeref:typename:unsigned int const
makeCommandLineParser	vendor/spdlog/tests/catch.hpp	/^    inline Clara::CommandLine<ConfigData> makeCommandLineParser() {$/;"	f	namespace:Catch	typeref:typename:Clara::CommandLine<ConfigData>
makeRatio	vendor/spdlog/tests/catch.hpp	/^        static std::size_t makeRatio( std::size_t number, std::size_t total ) {$/;"	f	struct:Catch::ConsoleReporter	typeref:typename:std::size_t
makeReporter	vendor/spdlog/tests/catch.hpp	/^        void makeReporter() {$/;"	f	class:Catch::Runner	typeref:typename:void
makeSafe	vendor/spdlog/tests/catch.hpp	/^        static type makeSafe( bool value ) {$/;"	f	class:Catch::SafeBool	typeref:typename:type
makeString	vendor/spdlog/tests/catch.hpp	/^        inline std::string makeString( const char* str ) { return str ? std::string( str ) : std/;"	f	namespace:Catch::Matchers::Impl::StdString	typeref:typename:std::string
makeString	vendor/spdlog/tests/catch.hpp	/^        inline std::string makeString( std::string const& str ) { return str; }$/;"	f	namespace:Catch::Matchers::Impl::StdString	typeref:typename:std::string
makeString	vendor/spdlog/tests/catch.hpp	/^    std::string makeString( T const& value ) {$/;"	f	namespace:Catch::Detail	typeref:typename:std::string
makeTestCase	vendor/spdlog/tests/catch.hpp	/^    TestCase makeTestCase(  ITestCase* _testCase,$/;"	f	namespace:Catch	typeref:typename:TestCase
makeUnexpectedResultBuilder	vendor/spdlog/tests/catch.hpp	/^        ResultBuilder makeUnexpectedResultBuilder() const {$/;"	f	class:Catch::RunContext	typeref:typename:ResultBuilder
make_arg	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    make_arg(const T &value) {$/;"	f	namespace:internal	typeref:typename:std::enable_if<IS_PACKED,value<Context>>::type
make_arg	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR basic_format_arg<Context> make_arg(const T &value) {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR basic_format_arg<Context>
make_arg_ref	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR arg_ref_type make_arg_ref(Id arg_id) {$/;"	f	class:internal::dynamic_specs_handler	typeref:typename:FMT_CONSTEXPR arg_ref_type
make_arg_ref	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR arg_ref_type make_arg_ref(auto_id) {$/;"	f	class:internal::dynamic_specs_handler	typeref:typename:FMT_CONSTEXPR arg_ref_type
make_checked	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline stdext::checked_array_iterator<T*> make_checked(T *p, std::size_t size) {$/;"	f	namespace:internal	typeref:typename:stdext::checked_array_iterator<T * >
make_format_args	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    make_format_args(const Args & ... args) {$/;"	f	typeref:typename:format_arg_store<Context,Args...>
make_format_args	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    make_format_args(const Args & ... args) {$/;"	f	typeref:typename:format_arg_store<format_context,Args...>
make_format_to_n_args	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    make_format_to_n_args(const Args & ... args) {$/;"	f	typeref:typename:format_arg_store<format_to_n_context<OutputIt>,Args...>
make_index_sequence	dependencies/include/nlohmann/json.hpp	/^struct make_index_sequence$/;"	s	namespace:nlohmann::detail
make_index_sequence	dependencies/include/nlohmann/json.hpp	/^template<> struct make_index_sequence<0> : index_sequence<> {};$/;"	s	namespace:nlohmann::detail
make_index_sequence	dependencies/include/nlohmann/json.hpp	/^template<> struct make_index_sequence<1> : index_sequence<0> {};$/;"	s	namespace:nlohmann::detail
make_index_sequence	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^using make_index_sequence = make_integer_sequence<std::size_t, N>;$/;"	t	namespace:internal	typeref:typename:make_integer_sequence<std::size_t,N>
make_index_sequence	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^using make_index_sequence = std::make_index_sequence<N>;$/;"	t	namespace:internal	typeref:typename:std::make_index_sequence<N>
make_integer_sequence	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^struct make_integer_sequence : make_integer_sequence<T, N - 1, N - 1, Ns...> {};$/;"	s	namespace:internal
make_integer_sequence	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^struct make_integer_sequence<T, 0, Ns...> : integer_sequence<T, Ns...> {};$/;"	s	namespace:internal
make_printf_args	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^    make_printf_args(const Args & ... args) {$/;"	f	typeref:typename:format_arg_store<printf_context<internal::buffer>::type,Args...>
make_unsigned_or_bool	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^struct make_unsigned_or_bool : std::make_unsigned<T> {};$/;"	s	namespace:internal
make_unsigned_or_bool	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^struct make_unsigned_or_bool<bool> {$/;"	s	namespace:internal
make_value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    make_value(const named_arg<T, typename C::char_type> &val) {$/;"	f	namespace:internal	typeref:typename:init<C,const void *,named_arg_type>
make_value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  make_value(const T &val) { return basic_string_view<Char>(val); }$/;"	f	namespace:internal
make_value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  make_value(const T &val) { return static_cast<int>(val); }$/;"	f	namespace:internal
make_value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  make_value(const T &val) { return val; }$/;"	f	namespace:internal
make_void	dependencies/include/nlohmann/json.hpp	/^template <typename ...Ts> struct make_void$/;"	s	namespace:nlohmann::detail
map_	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  entry *map_;$/;"	m	class:internal::arg_map	typeref:typename:entry *
map_	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  internal::arg_map<basic_format_context> map_;$/;"	m	class:basic_format_context	typeref:typename:internal::arg_map<basic_format_context>
maroon	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    maroon = 0x800000,                  \/\/ rgb(128,0,0)$/;"	e	enum:color
match	vendor/spdlog/tests/catch.hpp	/^                virtual bool match( ExpressionType const& str ) const {$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::Contains	typeref:typename:bool
match	vendor/spdlog/tests/catch.hpp	/^                virtual bool match( ExpressionType const& str ) const {$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::EndsWith	typeref:typename:bool
match	vendor/spdlog/tests/catch.hpp	/^                virtual bool match( ExpressionType const& str ) const {$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::Equals	typeref:typename:bool
match	vendor/spdlog/tests/catch.hpp	/^                virtual bool match( ExpressionType const& str ) const {$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::StartsWith	typeref:typename:bool
match	vendor/spdlog/tests/catch.hpp	/^            virtual bool match( ExpressionT const& expr ) const$/;"	f	class:Catch::Matchers::Impl::Generic::AllOf	typeref:typename:bool
match	vendor/spdlog/tests/catch.hpp	/^            virtual bool match( ExpressionT const& expr ) const$/;"	f	class:Catch::Matchers::Impl::Generic::AnyOf	typeref:typename:bool
match	vendor/spdlog/tests/catch.hpp	/^            virtual bool match( std::string const& expr ) const {$/;"	f	struct:Catch::Matchers::Impl::StdString::Contains	typeref:typename:bool
match	vendor/spdlog/tests/catch.hpp	/^            virtual bool match( std::string const& expr ) const {$/;"	f	struct:Catch::Matchers::Impl::StdString::EndsWith	typeref:typename:bool
match	vendor/spdlog/tests/catch.hpp	/^            virtual bool match( std::string const& expr ) const {$/;"	f	struct:Catch::Matchers::Impl::StdString::Equals	typeref:typename:bool
match	vendor/spdlog/tests/catch.hpp	/^            virtual bool match( std::string const& expr ) const {$/;"	f	struct:Catch::Matchers::Impl::StdString::StartsWith	typeref:typename:bool
match	vendor/spdlog/tests/test_file_logging.cpp	/^    std::smatch match;$/;"	v	typeref:typename:std::smatch
matches	vendor/spdlog/tests/catch.hpp	/^            bool matches( TestCaseInfo const& testCase ) const {$/;"	f	struct:Catch::TestSpec::Filter	typeref:typename:bool
matches	vendor/spdlog/tests/catch.hpp	/^            virtual bool matches( TestCaseInfo const& testCase ) const { return !m_underlyingPat/;"	f	class:Catch::TestSpec::ExcludedPattern	typeref:typename:bool
matches	vendor/spdlog/tests/catch.hpp	/^            virtual bool matches( TestCaseInfo const& testCase ) const {$/;"	f	class:Catch::TestSpec::NamePattern	typeref:typename:bool
matches	vendor/spdlog/tests/catch.hpp	/^            virtual bool matches( TestCaseInfo const& testCase ) const {$/;"	f	class:Catch::TestSpec::TagPattern	typeref:typename:bool
matches	vendor/spdlog/tests/catch.hpp	/^        bool matches( TestCaseInfo const& testCase ) const {$/;"	f	class:Catch::TestSpec	typeref:typename:bool
maxAsyncCallStackDepthChanged	dependencies/include/v8-inspector.h	/^  virtual void maxAsyncCallStackDepthChanged(int depth) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
max_files_	vendor/spdlog/include/spdlog/sinks/rotating_file_sink.h	/^    std::size_t max_files_;$/;"	m	class:spdlog::sinks::rotating_file_sink	typeref:typename:std::size_t
max_items_	vendor/spdlog/include/spdlog/details/circular_q.h	/^    size_t max_items_;$/;"	m	class:spdlog::details::circular_q	typeref:typename:size_t
max_packed_args	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^enum { max_packed_args = 15 };$/;"	e	enum:internal::__anonbb24b0470403
max_size	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  unsigned max_size() const {$/;"	f	class:basic_format_args	typeref:typename:unsigned
max_size	vendor/spdlog/tests/test_file_logging.cpp	/^    size_t max_size = 1024 * 10;$/;"	v	typeref:typename:size_t
max_size_	vendor/spdlog/include/spdlog/sinks/rotating_file_sink.h	/^    std::size_t max_size_;$/;"	m	class:spdlog::sinks::rotating_file_sink	typeref:typename:std::size_t
medium_aqua_marine	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    medium_aqua_marine = 0x66CDAA,      \/\/ rgb(102,205,170)$/;"	e	enum:color
medium_blue	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    medium_blue = 0x0000CD,             \/\/ rgb(0,0,205)$/;"	e	enum:color
medium_orchid	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    medium_orchid = 0xBA55D3,           \/\/ rgb(186,85,211)$/;"	e	enum:color
medium_purple	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    medium_purple = 0x9370DB,           \/\/ rgb(147,112,219)$/;"	e	enum:color
medium_sea_green	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    medium_sea_green = 0x3CB371,        \/\/ rgb(60,179,113)$/;"	e	enum:color
medium_slate_blue	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    medium_slate_blue = 0x7B68EE,       \/\/ rgb(123,104,238)$/;"	e	enum:color
medium_spring_green	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    medium_spring_green = 0x00FA9A,     \/\/ rgb(0,250,154)$/;"	e	enum:color
medium_turquoise	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    medium_turquoise = 0x48D1CC,        \/\/ rgb(72,209,204)$/;"	e	enum:color
medium_violet_red	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    medium_violet_red = 0xC71585,       \/\/ rgb(199,21,133)$/;"	e	enum:color
member	vendor/spdlog/tests/catch.hpp	/^            M C::* member;$/;"	m	struct:Clara::Detail::BoundDataMember	typeref:typename:M C::*
member	vendor/spdlog/tests/catch.hpp	/^            void (C::*member)( M );$/;"	m	struct:Clara::Detail::BoundUnaryMethod	typeref:typename:void (C::*)(M)
member	vendor/spdlog/tests/catch.hpp	/^            void (C::*member)();$/;"	m	struct:Clara::Detail::BoundNullaryMethod	typeref:typename:void (C::*)()
memoryInfo	dependencies/include/v8-inspector.h	/^  virtual v8::MaybeLocal<v8::Value> memoryInfo(v8::Isolate*,$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:v8::MaybeLocal<v8::Value>
memory_buffer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef basic_memory_buffer<char> memory_buffer;$/;"	t	typeref:typename:basic_memory_buffer<char>
message	vendor/spdlog/tests/catch.hpp	/^            std::string message;$/;"	m	class:Catch::ConsoleReporter::AssertionPrinter	typeref:typename:std::string
message	vendor/spdlog/tests/catch.hpp	/^        std::string message;$/;"	m	struct:Catch::AssertionResultData	typeref:typename:std::string
message	vendor/spdlog/tests/catch.hpp	/^        std::string message;$/;"	m	struct:Catch::MessageInfo	typeref:typename:std::string
messageLabel	vendor/spdlog/tests/catch.hpp	/^            std::string messageLabel;$/;"	m	class:Catch::ConsoleReporter::AssertionPrinter	typeref:typename:std::string
messages	vendor/spdlog/tests/catch.hpp	/^            std::vector<MessageInfo> messages;$/;"	m	class:Catch::CompactReporter::AssertionPrinter	typeref:typename:std::vector<MessageInfo>
messages	vendor/spdlog/tests/catch.hpp	/^            std::vector<MessageInfo> messages;$/;"	m	class:Catch::ConsoleReporter::AssertionPrinter	typeref:typename:std::vector<MessageInfo>
messages	vendor/spdlog/tests/test_async.cpp	/^    size_t messages = 100;$/;"	v	typeref:typename:size_t
messages	vendor/spdlog/tests/test_async.cpp	/^    size_t messages = 1024 * 10;$/;"	v	typeref:typename:size_t
messages	vendor/spdlog/tests/test_async.cpp	/^    size_t messages = 1024;$/;"	v	typeref:typename:size_t
messages	vendor/spdlog/tests/test_async.cpp	/^    size_t messages = 256;$/;"	v	typeref:typename:size_t
midnight_blue	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    midnight_blue = 0x191970,           \/\/ rgb(25,25,112)$/;"	e	enum:color
millis_from	vendor/spdlog/tests/test_mpmc_q.cpp	/^static milliseconds millis_from(const test_clock::time_point &tp0)$/;"	f	typeref:typename:milliseconds	file:
minorVersion	dependencies/include/SFML/Window/ContextSettings.hpp	/^    unsigned int minorVersion;      \/\/\/< Minor number of the context version to create$/;"	m	struct:sf::ContextSettings	typeref:typename:unsigned int
minorVersion	vendor/spdlog/tests/catch.hpp	/^        unsigned int const minorVersion;$/;"	m	struct:Catch::Version	typeref:typename:unsigned int const
mint_cream	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    mint_cream = 0xF5FFFA,              \/\/ rgb(245,255,250)$/;"	e	enum:color
missingAssertions	vendor/spdlog/tests/catch.hpp	/^        bool missingAssertions;$/;"	m	struct:Catch::SectionStats	typeref:typename:bool
misty_rose	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    misty_rose = 0xFFE4E1,              \/\/ rgb(255,228,225)$/;"	e	enum:color
moccasin	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    moccasin = 0xFFE4B5,                \/\/ rgb(255,228,181)$/;"	e	enum:color
mode_	dependencies/include/libplatform/v8-tracing.h	/^  Mode mode_ = DISABLED;$/;"	m	class:v8::platform::tracing::TracingController	typeref:typename:Mode
monostate	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct monostate {};$/;"	s
months	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^static const char *months[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct/;"	v	namespace:spdlog::details	typeref:typename:const char * []
mouseButton	dependencies/include/SFML/Window/Event.hpp	/^        MouseButtonEvent      mouseButton;       \/\/\/< Mouse button event parameters (Event::M/;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:MouseButtonEvent
mouseMove	dependencies/include/SFML/Window/Event.hpp	/^        MouseMoveEvent        mouseMove;         \/\/\/< Mouse move event parameters (Event::Mou/;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:MouseMoveEvent
mouseWheel	dependencies/include/SFML/Window/Event.hpp	/^        MouseWheelEvent       mouseWheel;        \/\/\/< Mouse wheel event parameters (Event::Mo/;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:MouseWheelEvent
mouseWheelScroll	dependencies/include/SFML/Window/Event.hpp	/^        MouseWheelScrollEvent mouseWheelScroll;  \/\/\/< Mouse wheel event parameters (Event::Mo/;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:MouseWheelScrollEvent
move	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void move(basic_memory_buffer &other) {$/;"	f	class:basic_memory_buffer	typeref:typename:void
move	vendor/spdlog/tests/catch.hpp	/^    void move( CompositeGenerator& other ) {$/;"	f	class:Catch::CompositeGenerator	typeref:typename:void
moveNext	vendor/spdlog/tests/catch.hpp	/^        bool moveNext() {$/;"	f	class:Catch::GeneratorsForTest	typeref:typename:bool
moveNext	vendor/spdlog/tests/catch.hpp	/^        bool moveNext() {$/;"	f	struct:Catch::GeneratorInfo	typeref:typename:bool
mpmc_blocking_queue	vendor/spdlog/include/spdlog/details/mpmc_blocking_q.h	/^    explicit mpmc_blocking_queue(size_t max_items)$/;"	f	class:spdlog::details::mpmc_blocking_queue
mpmc_blocking_queue	vendor/spdlog/include/spdlog/details/mpmc_blocking_q.h	/^class mpmc_blocking_queue$/;"	c	namespace:spdlog::details
msg	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    spdlog::details::log_msg msg(&logger_name, spdlog::level::info, "");$/;"	v	typeref:typename:spdlog::details::log_msg
msg	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    spdlog::details::log_msg msg(&logger_name, spdlog::level::info, "ignored");$/;"	v	typeref:typename:spdlog::details::log_msg
msg	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    spdlog::details::log_msg msg(&logger_name, spdlog::level::info, "some message");$/;"	v	typeref:typename:spdlog::details::log_msg
msg	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    spdlog::details::log_msg msg(&logger_name, spdlog::level::info, spdlog::string_view_t(buf.da/;"	v	typeref:typename:spdlog::details::log_msg
msg	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    std::string msg = "Hello custom eol test";$/;"	v	typeref:typename:std::string
msg_	vendor/spdlog/include/spdlog/common.h	/^    std::string msg_;$/;"	m	class:spdlog::spdlog_ex	typeref:typename:std::string
msg_counter	vendor/spdlog/tests/test_sink.h	/^    size_t msg_counter()$/;"	f	class:spdlog::sinks::test_sink	typeref:typename:size_t
msg_counter_	vendor/spdlog/include/spdlog/logger.h	/^    std::atomic<size_t> msg_counter_{1};$/;"	m	class:spdlog::logger	typeref:typename:std::atomic<size_t>
msg_counter_	vendor/spdlog/tests/test_sink.h	/^    size_t msg_counter_{0};$/;"	m	class:spdlog::sinks::test_sink	typeref:typename:size_t
msg_id	vendor/spdlog/include/spdlog/details/log_msg.h	/^    size_t msg_id{0};$/;"	m	struct:spdlog::details::log_msg	typeref:typename:size_t
msg_id	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    size_t msg_id;$/;"	m	struct:spdlog::details::async_msg	typeref:typename:size_t
msg_type	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    async_msg_type msg_type;$/;"	m	struct:spdlog::details::async_msg	typeref:typename:async_msg_type
msvc_sink	vendor/spdlog/include/spdlog/sinks/msvc_sink.h	/^    explicit msvc_sink() {}$/;"	f	class:spdlog::sinks::msvc_sink
msvc_sink	vendor/spdlog/include/spdlog/sinks/msvc_sink.h	/^class msvc_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
msvc_sink_mt	vendor/spdlog/include/spdlog/sinks/msvc_sink.h	/^using msvc_sink_mt = msvc_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:msvc_sink<std::mutex>
msvc_sink_st	vendor/spdlog/include/spdlog/sinks/msvc_sink.h	/^using msvc_sink_st = msvc_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:msvc_sink<details::null_mutex>
multi_sink_example	vendor/spdlog/example/example.cpp	/^void multi_sink_example()$/;"	f	typeref:typename:void
multisink	vendor/spdlog/example/CMakeLists.txt	/^add_executable(multisink multisink.cpp)$/;"	t
muteMetrics	dependencies/include/v8-inspector.h	/^  virtual void muteMetrics(int contextGroupId) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
mutex	vendor/spdlog/include/spdlog/details/console_globals.h	/^    static mutex_t &mutex()$/;"	f	struct:spdlog::details::console_mutex	typeref:typename:mutex_t &
mutex	vendor/spdlog/include/spdlog/details/console_globals.h	/^    static mutex_t &mutex()$/;"	f	struct:spdlog::details::console_nullmutex	typeref:typename:mutex_t &
mutex_	dependencies/include/libplatform/v8-tracing.h	/^  std::unique_ptr<base::Mutex> mutex_;$/;"	m	class:v8::platform::tracing::TracingController	typeref:typename:std::unique_ptr<base::Mutex>
mutex_	vendor/spdlog/include/spdlog/details/periodic_worker.h	/^    std::mutex mutex_;$/;"	m	class:spdlog::details::periodic_worker	typeref:typename:std::mutex
mutex_	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    mutex_t &mutex_;$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:mutex_t &
mutex_	vendor/spdlog/include/spdlog/sinks/base_sink.h	/^    Mutex mutex_;$/;"	m	class:spdlog::sinks::base_sink	typeref:typename:Mutex
mutex_	vendor/spdlog/include/spdlog/sinks/stdout_sinks.h	/^    mutex_t &mutex_;$/;"	m	class:spdlog::sinks::stdout_sink	typeref:typename:mutex_t &
mutex_	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    mutex_t &mutex_;$/;"	m	class:spdlog::sinks::wincolor_sink	typeref:typename:mutex_t &
mutex_t	vendor/spdlog/include/spdlog/details/console_globals.h	/^    using mutex_t = null_mutex;$/;"	t	struct:spdlog::details::console_nullmutex	typeref:typename:null_mutex
mutex_t	vendor/spdlog/include/spdlog/details/console_globals.h	/^    using mutex_t = std::mutex;$/;"	t	struct:spdlog::details::console_mutex	typeref:typename:std::mutex
mutex_t	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    using mutex_t = typename ConsoleMutex::mutex_t;$/;"	t	class:spdlog::sinks::ansicolor_sink	typeref:typename:ConsoleMutex::mutex_t
mutex_t	vendor/spdlog/include/spdlog/sinks/stdout_sinks.h	/^    using mutex_t = typename ConsoleMutex::mutex_t;$/;"	t	class:spdlog::sinks::stdout_sink	typeref:typename:ConsoleMutex::mutex_t
mutex_t	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    using mutex_t = typename ConsoleMutex::mutex_t;$/;"	t	class:spdlog::sinks::wincolor_sink	typeref:typename:ConsoleMutex::mutex_t
my_type	vendor/spdlog/example/example.cpp	/^struct my_type$/;"	s	file:
my_type	vendor/spdlog/example/jni/example.cpp	/^struct my_type$/;"	s	file:
n	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    size_t n;$/;"	m	struct:basic_writer::double_writer	typeref:typename:size_t
n_threads	vendor/spdlog/tests/test_async.cpp	/^    size_t n_threads = 10;$/;"	v	typeref:typename:size_t
name	dependencies/include/SFML/Window/Joystick.hpp	/^        String       name;      \/\/\/< Name of the joystick$/;"	m	struct:sf::Joystick::Identification	typeref:typename:String
name	dependencies/include/libplatform/v8-tracing.h	/^  const char* name() const { return name_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:const char *
name	dependencies/include/v8-profiler.h	/^    Local<String> name;$/;"	m	struct:v8::AllocationProfile::Node	typeref:typename:Local<String>
name	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline const std::string &spdlog::logger::name() const$/;"	f	class:spdlog::logger	typeref:typename:const std::string &
name	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    basic_string_view<char_type> name;$/;"	m	struct:internal::arg_map::entry	typeref:typename:basic_string_view<char_type>
name	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  basic_string_view<Char> name;$/;"	m	struct:internal::named_arg_base	typeref:typename:basic_string_view<Char>
name	vendor/spdlog/tests/catch.hpp	/^        std::string name;$/;"	m	struct:Catch::ConfigData	typeref:typename:std::string
name	vendor/spdlog/tests/catch.hpp	/^        std::string name;$/;"	m	struct:Catch::GroupInfo	typeref:typename:std::string
name	vendor/spdlog/tests/catch.hpp	/^        std::string name;$/;"	m	struct:Catch::SectionInfo	typeref:typename:std::string
name	vendor/spdlog/tests/catch.hpp	/^        std::string name;$/;"	m	struct:Catch::TestCaseInfo	typeref:typename:std::string
name	vendor/spdlog/tests/catch.hpp	/^        std::string name;$/;"	m	struct:Catch::TestRunInfo	typeref:typename:std::string
name	vendor/spdlog/tests/catch.hpp	/^        virtual std::string name() const        { return m_data.name.empty() ? m_data.processNam/;"	f	class:Catch::Config	typeref:typename:std::string
name	vendor/spdlog/tests/catch.hpp	/^    const char* name;$/;"	m	struct:Catch::NameAndDesc	typeref:typename:const char *
name	vendor/spdlog/tests/catch.hpp	/^    struct SignalDefs { int id; const char* name; };$/;"	m	struct:Catch::SignalDefs	typeref:typename:const char *
name_	dependencies/include/libplatform/v8-tracing.h	/^  const char* name_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:const char *
name_	vendor/spdlog/include/spdlog/logger.h	/^    const std::string name_;$/;"	m	class:spdlog::logger	typeref:typename:const std::string
name_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit name_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::name_formatter
name_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class name_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
named_arg	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  named_arg(basic_string_view<Char> name, const T &val)$/;"	f	struct:internal::named_arg
named_arg	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct named_arg : named_arg_base<Char> {$/;"	s	namespace:internal
named_arg_base	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  named_arg_base(basic_string_view<Char> nm) : name(nm) {}$/;"	f	struct:internal::named_arg_base
named_arg_base	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct named_arg_base {$/;"	s	namespace:internal
named_arg_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  none_type, named_arg_type,$/;"	e	enum:internal::type
namespace	vendor/spdlog/CMakeLists.txt	/^set(namespace "${PROJECT_NAME}::")$/;"	v
native_module_	dependencies/include/v8.h	/^  const std::shared_ptr<internal::wasm::NativeModule> native_module_;$/;"	m	class:v8::CompiledWasmModule	typeref:typename:const std::shared_ptr<internal::wasm::NativeModule>
navajo_white	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    navajo_white = 0xFFDEAD,            \/\/ rgb(255,222,173)$/;"	e	enum:color
navy	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    navy = 0x000080,                    \/\/ rgb(0,0,128)$/;"	e	enum:color
newlineIfNecessary	vendor/spdlog/tests/catch.hpp	/^        void newlineIfNecessary() {$/;"	f	class:Catch::XmlWriter	typeref:typename:void
newlocale	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  static locale_t newlocale(int category_mask, const char *locale, locale_t) {$/;"	f	class:Locale	typeref:typename:locale_t
next	dependencies/include/SFML/System/Utf.inl	/^In Utf<16>::next(In begin, In end)$/;"	f	class:Utf	typeref:typename:In
next	dependencies/include/SFML/System/Utf.inl	/^In Utf<32>::next(In begin, In \/*end*\/)$/;"	f	class:Utf	typeref:typename:In
next	dependencies/include/SFML/System/Utf.inl	/^In Utf<8>::next(In begin, In end)$/;"	f	class:Utf	typeref:typename:In
nextRow	dependencies/include/SFML/Graphics/Font.hpp	/^        unsigned int     nextRow; \/\/\/< Y position of the next new row in the texture$/;"	m	struct:sf::Font::Page	typeref:typename:unsigned int
next_arg	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  format_arg next_arg() {$/;"	f	class:basic_format_context	typeref:typename:format_arg
next_arg_id	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR unsigned basic_parse_context<Char, ErrorHandler>::next_arg_id() {$/;"	f	class:basic_parse_context	typeref:typename:FMT_CONSTEXPR unsigned
next_arg_id_	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  int next_arg_id_;$/;"	m	class:basic_parse_context	typeref:typename:int
next_free_	dependencies/include/libplatform/v8-tracing.h	/^  size_t next_free_ = 0;$/;"	m	class:v8::platform::tracing::TraceBufferChunk	typeref:typename:size_t
next_rotation_tp_	vendor/spdlog/include/spdlog/sinks/daily_file_sink.h	/^    log_clock::time_point next_rotation_tp_()$/;"	f	class:spdlog::sinks::daily_file_sink	typeref:typename:log_clock::time_point
nlohmann	dependencies/include/nlohmann/json.hpp	/^namespace nlohmann$/;"	n
noMatchingTestCases	vendor/spdlog/tests/catch.hpp	/^        virtual void noMatchingTestCases( std::string const& ) {}$/;"	f	struct:Catch::StreamingReporterBase	typeref:typename:void
noMatchingTestCases	vendor/spdlog/tests/catch.hpp	/^        virtual void noMatchingTestCases( std::string const& \/*spec*\/ ) {}$/;"	f	class:Catch::JunitReporter	typeref:typename:void
noMatchingTestCases	vendor/spdlog/tests/catch.hpp	/^        virtual void noMatchingTestCases( std::string const& s ) {$/;"	f	class:Catch::XmlReporter	typeref:typename:void
noMatchingTestCases	vendor/spdlog/tests/catch.hpp	/^        virtual void noMatchingTestCases( std::string const& spec ) {$/;"	f	struct:Catch::CompactReporter	typeref:typename:void
noMatchingTestCases	vendor/spdlog/tests/catch.hpp	/^        virtual void noMatchingTestCases( std::string const& spec ) {$/;"	f	struct:Catch::ConsoleReporter	typeref:typename:void
noMatchingTestCases	vendor/spdlog/tests/catch.hpp	/^    void LegacyReporterAdapter::noMatchingTestCases( std::string const& ) {}$/;"	f	class:Catch::LegacyReporterAdapter	typeref:typename:void
noThrow	vendor/spdlog/tests/catch.hpp	/^        bool noThrow;$/;"	m	struct:Catch::ConfigData	typeref:typename:bool
no_formatter_error	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct no_formatter_error : std::false_type {};$/;"	s
no_thousands_sep	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct no_thousands_sep {$/;"	s	namespace:internal
node_id	dependencies/include/v8-profiler.h	/^    uint32_t node_id;$/;"	m	struct:v8::AllocationProfile::Node	typeref:typename:uint32_t
node_id	dependencies/include/v8-profiler.h	/^    uint32_t node_id;$/;"	m	struct:v8::AllocationProfile::Sample	typeref:typename:uint32_t
none	vendor/spdlog/tests/catch.hpp	/^        bool none() const { return nullableValue == NULL; }$/;"	f	class:Catch::Option	typeref:typename:bool
none_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  none_type, named_arg_type,$/;"	e	enum:internal::type
nonesuch	dependencies/include/nlohmann/json.hpp	/^struct nonesuch$/;"	s	namespace:nlohmann::detail
normalize	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^  void normalize() {$/;"	f	class:internal::fp	typeref:typename:void
now	vendor/spdlog/include/spdlog/details/os.h	/^inline spdlog::log_clock::time_point now() SPDLOG_NOEXCEPT$/;"	f	namespace:spdlog::details::os	typeref:typename:spdlog::log_clock::time_point
now_tm	vendor/spdlog/include/spdlog/sinks/daily_file_sink.h	/^    tm now_tm(log_clock::time_point tp)$/;"	f	class:spdlog::sinks::daily_file_sink	typeref:typename:tm
now_tm	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    auto now_tm = spdlog::details::os::localtime();$/;"	v	typeref:typename:auto
null	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct null {};$/;"	s	namespace:internal
null_atomic_int	vendor/spdlog/include/spdlog/details/null_mutex.h	/^    explicit null_atomic_int(int val)$/;"	f	struct:spdlog::details::null_atomic_int
null_atomic_int	vendor/spdlog/include/spdlog/details/null_mutex.h	/^struct null_atomic_int$/;"	s	namespace:spdlog::details
null_handler	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  struct null_handler: internal::error_handler {$/;"	s	class:dynamic_formatter
null_logger_mt	vendor/spdlog/include/spdlog/sinks/null_sink.h	/^inline std::shared_ptr<logger> null_logger_mt(const std::string &logger_name)$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
null_logger_st	vendor/spdlog/include/spdlog/sinks/null_sink.h	/^inline std::shared_ptr<logger> null_logger_st(const std::string &logger_name)$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
null_mutex	vendor/spdlog/include/spdlog/details/null_mutex.h	/^struct null_mutex$/;"	s	namespace:spdlog::details
null_sink	vendor/spdlog/include/spdlog/sinks/null_sink.h	/^class null_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
null_sink_mt	vendor/spdlog/include/spdlog/sinks/null_sink.h	/^using null_sink_mt = null_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:null_sink<std::mutex>
null_sink_st	vendor/spdlog/include/spdlog/sinks/null_sink.h	/^using null_sink_st = null_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:null_sink<details::null_mutex>
null_terminating_iterator	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR explicit null_terminating_iterator(const Range &r)$/;"	f	class:internal::null_terminating_iterator	typeref:typename:FMT_CONSTEXPR
null_terminating_iterator	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR null_terminating_iterator(const Char *ptr, const Char *end)$/;"	f	class:internal::null_terminating_iterator	typeref:typename:FMT_CONSTEXPR
null_terminating_iterator	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  null_terminating_iterator() : ptr_(0), end_(0) {}$/;"	f	class:internal::null_terminating_iterator
null_terminating_iterator	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class null_terminating_iterator {$/;"	c	namespace:internal
nullableValue	vendor/spdlog/tests/catch.hpp	/^        T* nullableValue;$/;"	m	class:Catch::Option	typeref:typename:T *
num_args	dependencies/include/libplatform/v8-tracing.h	/^  int num_args() const { return num_args_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:int
num_args_	dependencies/include/libplatform/v8-tracing.h	/^  int num_args_ = 0;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:int
num_digits	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^      unsigned num_digits;$/;"	m	struct:basic_writer::int_writer::bin_writer	typeref:typename:unsigned
num_digits	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^      unsigned num_digits;$/;"	m	struct:basic_writer::int_writer::dec_writer	typeref:typename:unsigned
num_digits	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^      unsigned num_digits;$/;"	m	struct:basic_writer::int_writer::hex_writer	typeref:typename:unsigned
num_writer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    struct num_writer {$/;"	s	struct:basic_writer::int_writer
numeric_limits	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class numeric_limits<fmt::internal::dummy_int> :$/;"	c	namespace:std
observers_	dependencies/include/libplatform/v8-tracing.h	/^  std::unordered_set<v8::TracingController::TraceStateObserver*> observers_;$/;"	m	class:v8::platform::tracing::TracingController	typeref:typename:std::unordered_set<v8::TracingController::TraceStateObserver * >
off	vendor/spdlog/include/spdlog/common.h	/^    off = SPDLOG_LEVEL_OFF,$/;"	e	enum:spdlog::level::level_enum
offset	dependencies/include/SFML/Audio/Music.hpp	/^        T offset; \/\/\/< The beginning offset of the time range$/;"	m	struct:sf::Music::Span	typeref:typename:T
offset_minutes_	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    int offset_minutes_{0};$/;"	m	class:spdlog::details::z_formatter	typeref:typename:int
okToFail	vendor/spdlog/tests/catch.hpp	/^    bool TestCaseInfo::okToFail() const {$/;"	f	class:Catch::TestCaseInfo	typeref:typename:bool
old_lace	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    old_lace = 0xFDF5E6,                \/\/ rgb(253,245,230)$/;"	e	enum:color
olive	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    olive = 0x808000,                   \/\/ rgb(128,128,0)$/;"	e	enum:color
olive_drab	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    olive_drab = 0x6B8E23,              \/\/ rgb(107,142,35)$/;"	e	enum:color
on	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  template <unsigned N> char *on(uint32_t u) {$/;"	f	class:internal::decimal_formatter	typeref:typename:char *
on	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  template <unsigned N> char *on(uint32_t u) {$/;"	f	class:internal::decimal_formatter_null	typeref:typename:char *
on_align	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    void on_align(alignment) {}$/;"	f	struct:dynamic_formatter::null_handler	typeref:typename:void
on_align	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_align(alignment align) { specs_.align_ = align; }$/;"	f	class:internal::specs_setter	typeref:typename:FMT_CONSTEXPR void
on_align	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_align(alignment align) {$/;"	f	class:internal::specs_checker	typeref:typename:FMT_CONSTEXPR void
on_arg_id	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_arg_id() {$/;"	f	class:internal::format_string_checker	typeref:typename:FMT_CONSTEXPR void
on_arg_id	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_arg_id(basic_string_view<Char>) {}$/;"	f	class:internal::format_string_checker	typeref:typename:FMT_CONSTEXPR void
on_arg_id	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_arg_id(unsigned id) {$/;"	f	class:internal::format_string_checker	typeref:typename:FMT_CONSTEXPR void
on_arg_id	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void on_arg_id() { arg = context.next_arg(); }$/;"	f	struct:format_handler	typeref:typename:void
on_arg_id	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void on_arg_id(basic_string_view<Char> id) {$/;"	f	struct:format_handler	typeref:typename:void
on_arg_id	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void on_arg_id(unsigned id) {$/;"	f	struct:format_handler	typeref:typename:void
on_bin	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    void on_bin() {$/;"	f	struct:basic_writer::int_writer	typeref:typename:void
on_bin	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_bin() {}$/;"	f	class:internal::int_type_checker	typeref:typename:FMT_CONSTEXPR void
on_black	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_black = "\\033[40m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
on_blue	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_blue = "\\033[44m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
on_char	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    void on_char() { formatter.write_char(value); }$/;"	f	struct:internal::arg_formatter_base::char_spec_handler	typeref:typename:void
on_char	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_char() {}$/;"	f	class:internal::char_specs_checker	typeref:typename:FMT_CONSTEXPR void
on_cyan	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_cyan = "\\033[46m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
on_dec	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    void on_dec() {$/;"	f	struct:basic_writer::int_writer	typeref:typename:void
on_dec	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_dec() {}$/;"	f	class:internal::int_type_checker	typeref:typename:FMT_CONSTEXPR void
on_dynamic_precision	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_dynamic_precision(Id arg_id) {$/;"	f	class:internal::dynamic_specs_handler	typeref:typename:FMT_CONSTEXPR void
on_dynamic_precision	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_dynamic_precision(Id arg_id) {$/;"	f	class:internal::specs_handler	typeref:typename:FMT_CONSTEXPR void
on_dynamic_width	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_dynamic_width(Id arg_id) {$/;"	f	class:internal::dynamic_specs_handler	typeref:typename:FMT_CONSTEXPR void
on_dynamic_width	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_dynamic_width(Id arg_id) {$/;"	f	class:internal::specs_handler	typeref:typename:FMT_CONSTEXPR void
on_error	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void on_error(const char *message) {$/;"	f	class:basic_parse_context	typeref:typename:FMT_CONSTEXPR void
on_error	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  void on_error(const char *message) { parse_context_.on_error(message); }$/;"	f	class:internal::context_base	typeref:typename:void
on_error	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void internal::error_handler::on_error(const char *message) {$/;"	f	class:internal::error_handler	typeref:typename:FMT_FUNC void
on_error	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    void on_error() {$/;"	f	struct:basic_writer::int_writer	typeref:typename:void
on_error	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_error() {$/;"	f	class:internal::float_type_checker	typeref:typename:FMT_CONSTEXPR void
on_error	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_error() {$/;"	f	class:internal::int_type_checker	typeref:typename:FMT_CONSTEXPR void
on_error	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_error(const char *message) { handler.on_error(message); }$/;"	f	struct:internal::precision_adapter	typeref:typename:FMT_CONSTEXPR void
on_error	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_error(const char *message) {$/;"	f	class:internal::dynamic_specs_handler	typeref:typename:FMT_CONSTEXPR void
on_error	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_error(const char *message) {$/;"	f	class:internal::format_string_checker	typeref:typename:FMT_CONSTEXPR void
on_error	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_error(const char *message) {$/;"	f	struct:internal::id_adapter	typeref:typename:FMT_CONSTEXPR void
on_error	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_error(const char *message) {$/;"	f	struct:internal::width_adapter	typeref:typename:FMT_CONSTEXPR void
on_error	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void on_error() {$/;"	f	struct:float_spec_handler	typeref:typename:void
on_error	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void on_error(const char *message) {$/;"	f	class:internal::specs_handler	typeref:typename:void
on_exp	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_exp() {}$/;"	f	class:internal::float_type_checker	typeref:typename:FMT_CONSTEXPR void
on_exp	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void on_exp() {$/;"	f	struct:float_spec_handler	typeref:typename:void
on_fill	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_fill(Char fill) { specs_.fill_ = fill; }$/;"	f	class:internal::specs_setter	typeref:typename:FMT_CONSTEXPR void
on_fixed	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_fixed() {}$/;"	f	class:internal::float_type_checker	typeref:typename:FMT_CONSTEXPR void
on_fixed	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void on_fixed() {$/;"	f	struct:float_spec_handler	typeref:typename:void
on_format_specs	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR const Char *on_format_specs(iterator it) {$/;"	f	class:internal::format_string_checker	typeref:typename:FMT_CONSTEXPR const Char *
on_format_specs	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  iterator on_format_specs(iterator it) {$/;"	f	struct:format_handler	typeref:typename:iterator
on_general	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_general() {}$/;"	f	class:internal::float_type_checker	typeref:typename:FMT_CONSTEXPR void
on_general	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void on_general() {$/;"	f	struct:float_spec_handler	typeref:typename:void
on_green	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_green = "\\033[42m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
on_hash	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    void on_hash() {}$/;"	f	struct:dynamic_formatter::null_handler	typeref:typename:void
on_hash	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_hash() { specs_.flags_ |= HASH_FLAG; }$/;"	f	class:internal::specs_setter	typeref:typename:FMT_CONSTEXPR void
on_hash	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_hash() {$/;"	f	class:internal::specs_checker	typeref:typename:FMT_CONSTEXPR void
on_hex	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    void on_hex() {$/;"	f	struct:basic_writer::int_writer	typeref:typename:void
on_hex	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_hex() {}$/;"	f	class:internal::float_type_checker	typeref:typename:FMT_CONSTEXPR void
on_hex	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_hex() {}$/;"	f	class:internal::int_type_checker	typeref:typename:FMT_CONSTEXPR void
on_hex	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void on_hex() {$/;"	f	struct:float_spec_handler	typeref:typename:void
on_int	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    void on_int() {$/;"	f	struct:internal::arg_formatter_base::char_spec_handler	typeref:typename:void
on_int	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_int() {$/;"	f	class:internal::char_specs_checker	typeref:typename:FMT_CONSTEXPR void
on_magenta	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_magenta = "\\033[45m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
on_minus	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    void on_minus() {}$/;"	f	struct:dynamic_formatter::null_handler	typeref:typename:void
on_minus	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_minus() { specs_.flags_ |= MINUS_FLAG; }$/;"	f	class:internal::specs_setter	typeref:typename:FMT_CONSTEXPR void
on_minus	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_minus() {$/;"	f	class:internal::specs_checker	typeref:typename:FMT_CONSTEXPR void
on_num	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    void on_num() {$/;"	f	struct:basic_writer::int_writer	typeref:typename:void
on_num	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_num() {}$/;"	f	class:internal::int_type_checker	typeref:typename:FMT_CONSTEXPR void
on_oct	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    void on_oct() {$/;"	f	struct:basic_writer::int_writer	typeref:typename:void
on_oct	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_oct() {}$/;"	f	class:internal::int_type_checker	typeref:typename:FMT_CONSTEXPR void
on_plus	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    void on_plus() {}$/;"	f	struct:dynamic_formatter::null_handler	typeref:typename:void
on_plus	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_plus() { specs_.flags_ |= SIGN_FLAG | PLUS_FLAG; }$/;"	f	class:internal::specs_setter	typeref:typename:FMT_CONSTEXPR void
on_plus	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_plus() {$/;"	f	class:internal::specs_checker	typeref:typename:FMT_CONSTEXPR void
on_pointer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    void on_pointer() { formatter.write_pointer(value); }$/;"	f	struct:internal::arg_formatter_base::cstring_spec_handler	typeref:typename:void
on_pointer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_pointer() {}$/;"	f	class:internal::cstring_type_checker	typeref:typename:FMT_CONSTEXPR void
on_precision	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_precision(unsigned precision) {$/;"	f	class:internal::specs_setter	typeref:typename:FMT_CONSTEXPR void
on_red	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_red = "\\033[41m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
on_replacement_field	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_replacement_field(const Char *) {}$/;"	f	class:internal::format_string_checker	typeref:typename:FMT_CONSTEXPR void
on_replacement_field	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void on_replacement_field(const Char *p) {$/;"	f	struct:format_handler	typeref:typename:void
on_space	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    void on_space() {}$/;"	f	struct:dynamic_formatter::null_handler	typeref:typename:void
on_space	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_space() { specs_.flags_ |= SIGN_FLAG; }$/;"	f	class:internal::specs_setter	typeref:typename:FMT_CONSTEXPR void
on_space	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_space() {$/;"	f	class:internal::specs_checker	typeref:typename:FMT_CONSTEXPR void
on_string	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    void on_string() { formatter.write(value); }$/;"	f	struct:internal::arg_formatter_base::cstring_spec_handler	typeref:typename:void
on_string	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_string() {}$/;"	f	class:internal::cstring_type_checker	typeref:typename:FMT_CONSTEXPR void
on_text	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_text(const Char *, const Char *) {}$/;"	f	class:internal::format_string_checker	typeref:typename:FMT_CONSTEXPR void
on_text	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void on_text(const Char *begin, const Char *end) {$/;"	f	struct:format_handler	typeref:typename:void
on_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_type(Char type) { specs_.type_ = type; }$/;"	f	class:internal::specs_setter	typeref:typename:FMT_CONSTEXPR void
on_white	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_white = "\\033[47m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
on_width	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_width(unsigned width) { specs_.width_ = width; }$/;"	f	class:internal::specs_setter	typeref:typename:FMT_CONSTEXPR void
on_yellow	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_yellow = "\\033[43m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
on_zero	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_zero() {$/;"	f	class:internal::specs_checker	typeref:typename:FMT_CONSTEXPR void
on_zero	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_zero() {$/;"	f	class:internal::specs_setter	typeref:typename:FMT_CONSTEXPR void
op	vendor/spdlog/tests/catch.hpp	/^            std::string lhs, rhs, op;$/;"	m	struct:Catch::ResultBuilder::ExprComponents	typeref:typename:std::string
opCast	vendor/spdlog/tests/catch.hpp	/^    inline T& opCast(T const& t) { return const_cast<T&>(t); }$/;"	f	namespace:Catch::Internal	typeref:typename:T &
opCast	vendor/spdlog/tests/catch.hpp	/^    inline std::nullptr_t opCast(std::nullptr_t) { return nullptr; }$/;"	f	namespace:Catch::Internal	typeref:typename:std::nullptr_t
open	vendor/spdlog/include/spdlog/details/file_helper.h	/^    void open(const filename_t &fname, bool truncate = false)$/;"	f	class:spdlog::details::file_helper	typeref:typename:void
openStream	vendor/spdlog/tests/catch.hpp	/^        void openStream() {$/;"	f	class:Catch::Runner	typeref:typename:void
open_interval	vendor/spdlog/include/spdlog/details/file_helper.h	/^    const int open_interval = 10;$/;"	m	class:spdlog::details::file_helper	typeref:typename:const int
open_tries	vendor/spdlog/include/spdlog/details/file_helper.h	/^    const int open_tries = 5;$/;"	m	class:spdlog::details::file_helper	typeref:typename:const int
operator !	vendor/spdlog/tests/catch.hpp	/^        bool operator !() const { return m_p == NULL; }$/;"	f	class:Catch::Ptr	typeref:typename:bool
operator !	vendor/spdlog/tests/catch.hpp	/^        bool operator !() const { return nullableValue == NULL; }$/;"	f	class:Catch::Option	typeref:typename:bool
operator !=	dependencies/include/SFML/Graphics/Rect.inl	/^inline bool operator !=(const Rect<T>& left, const Rect<T>& right)$/;"	f	typeref:typename:bool
operator !=	dependencies/include/SFML/System/Vector2.inl	/^inline bool operator !=(const Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:bool
operator !=	dependencies/include/SFML/System/Vector3.inl	/^inline bool operator !=(const Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:bool
operator !=	dependencies/include/v8.h	/^  V8_INLINE bool operator!=(const Local<S>& that) const {$/;"	f	class:v8::Local	typeref:typename:V8_INLINE bool
operator !=	dependencies/include/v8.h	/^  V8_INLINE bool operator!=(const Local<S>& that) const {$/;"	f	class:v8::PersistentBase	typeref:typename:V8_INLINE bool
operator !=	dependencies/include/v8.h	/^  V8_INLINE bool operator!=(const PersistentBase<S>& that) const {$/;"	f	class:v8::PersistentBase	typeref:typename:V8_INLINE bool
operator !=	dependencies/include/v8.h	/^  template <class S> V8_INLINE bool operator!=($/;"	f	class:v8::Local	typeref:typename:V8_INLINE bool
operator !=	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  friend bool operator!=(basic_string_view lhs, basic_string_view rhs) {$/;"	f	typeref:typename:bool
operator !=	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR bool operator!=(null_terminating_iterator other) const {$/;"	f	class:internal::null_terminating_iterator	typeref:typename:FMT_CONSTEXPR bool
operator !=	vendor/spdlog/tests/catch.hpp	/^        friend bool operator != ( Approx const& lhs, double rhs ) {$/;"	f	namespace:Catch::Detail	typeref:typename:bool
operator !=	vendor/spdlog/tests/catch.hpp	/^        friend bool operator != ( double lhs, Approx const& rhs ) {$/;"	f	namespace:Catch::Detail	typeref:typename:bool
operator !=	vendor/spdlog/tests/catch.hpp	/^    ResultBuilder& operator != ( RhsT const& rhs ) {$/;"	f	class:Catch::ExpressionLhs	typeref:typename:ResultBuilder &
operator !=	vendor/spdlog/tests/catch.hpp	/^    ResultBuilder& operator != ( bool rhs ) {$/;"	f	class:Catch::ExpressionLhs	typeref:typename:ResultBuilder &
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^      !is_integer<T>::value, unsigned long long>::type operator()(T) {$/;"	f	class:internal::precision_checker	typeref:typename:FMT_CONSTEXPR typename std::enable_if<!is_integer<T>::value,unsigned long long>::type
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^      !is_integer<T>::value, unsigned long long>::type operator()(T) {$/;"	f	class:internal::width_checker	typeref:typename:FMT_CONSTEXPR typename std::enable_if<!is_integer<T>::value,unsigned long long>::type
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^      is_integer<T>::value, unsigned long long>::type operator()(T value) {$/;"	f	class:internal::precision_checker	typeref:typename:FMT_CONSTEXPR typename std::enable_if<is_integer<T>::value,unsigned long long>::type
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^      is_integer<T>::value, unsigned long long>::type operator()(T value) {$/;"	f	class:internal::width_checker	typeref:typename:FMT_CONSTEXPR typename std::enable_if<is_integer<T>::value,unsigned long long>::type
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^      operator()(T value) {$/;"	f	class:internal::arg_formatter_base	typeref:typename:std::enable_if<std::is_floating_point<T>::value,iterator>::type
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^      operator()(T value) {$/;"	f	class:internal::arg_formatter_base	typeref:typename:std::enable_if<std::is_integral<T>::value,iterator>::type
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^      void operator()(It &&it) const {$/;"	f	struct:basic_writer::int_writer::bin_writer	typeref:typename:void
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^      void operator()(It &&it) const {$/;"	f	struct:basic_writer::int_writer::dec_writer	typeref:typename:void
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^      void operator()(It &&it) const {$/;"	f	struct:basic_writer::int_writer::hex_writer	typeref:typename:void
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^      void operator()(It &&it) const {$/;"	f	struct:basic_writer::int_writer::num_writer	typeref:typename:void
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    FMT_CONSTEXPR void operator()(const Char *begin, const Char *end) {$/;"	f	struct:internal::parse_format_string::writer	typeref:typename:FMT_CONSTEXPR void
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    void operator()(It &&it) const { *it++ = value; }$/;"	f	struct:internal::arg_formatter_base::char_writer	typeref:typename:void
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    void operator()(It &&it) const {$/;"	f	struct:basic_writer::inf_or_nan_writer	typeref:typename:void
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    void operator()(It &&it) const {$/;"	f	struct:basic_writer::padded_int_writer	typeref:typename:void
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    void operator()(It &&it) const {$/;"	f	struct:basic_writer::str_writer	typeref:typename:void
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    void operator()(It &&it) {$/;"	f	struct:basic_writer::double_writer	typeref:typename:void
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    void operator()(const char *str) const {$/;"	f	struct:basic_writer::write_double::write_inf_or_nan_t	typeref:typename:void
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()() { handler.on_arg_id(); }$/;"	f	struct:internal::id_adapter	typeref:typename:FMT_CONSTEXPR void
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()() { handler.on_dynamic_precision(auto_id()); }$/;"	f	struct:internal::precision_adapter	typeref:typename:FMT_CONSTEXPR void
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()() { handler.on_dynamic_width(auto_id()); }$/;"	f	struct:internal::width_adapter	typeref:typename:FMT_CONSTEXPR void
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()(basic_string_view<Char> id) {$/;"	f	struct:internal::id_adapter	typeref:typename:FMT_CONSTEXPR void
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()(basic_string_view<Char> id) {$/;"	f	struct:internal::precision_adapter	typeref:typename:FMT_CONSTEXPR void
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()(basic_string_view<Char> id) {$/;"	f	struct:internal::width_adapter	typeref:typename:FMT_CONSTEXPR void
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()(unsigned id) { handler.on_arg_id(id); }$/;"	f	struct:internal::id_adapter	typeref:typename:FMT_CONSTEXPR void
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()(unsigned id) { handler.on_dynamic_width(id); }$/;"	f	struct:internal::width_adapter	typeref:typename:FMT_CONSTEXPR void
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()(unsigned id) {$/;"	f	struct:internal::precision_adapter	typeref:typename:FMT_CONSTEXPR void
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  bool operator()(T) const { return false; }$/;"	f	class:internal::custom_formatter	typeref:typename:bool
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  bool operator()(typename basic_format_arg<Context>::handle h) const {$/;"	f	class:internal::custom_formatter	typeref:typename:bool
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  iterator operator()(basic_string_view<char_type> value) {$/;"	f	class:internal::arg_formatter_base	typeref:typename:iterator
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  iterator operator()(const char_type *value) {$/;"	f	class:internal::arg_formatter_base	typeref:typename:iterator
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  iterator operator()(const void *value) {$/;"	f	class:internal::arg_formatter_base	typeref:typename:iterator
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  iterator operator()(monostate) {$/;"	f	class:internal::arg_formatter_base	typeref:typename:iterator
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  iterator operator()(typename basic_format_arg<context_type>::handle handle) {$/;"	f	class:arg_formatter	typeref:typename:iterator
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  std::basic_string<Char> operator()(const Args &... args) const {$/;"	f	class:internal::udl_formatter	typeref:typename:std::basic_string<Char>
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void operator()(Char *&buffer) {$/;"	f	class:internal::add_thousands_sep	typeref:typename:void
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void operator()(Char *) {}$/;"	f	struct:internal::no_thousands_sep	typeref:typename:void
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^      operator()(T value) { return value == 0; }$/;"	f	class:internal::is_zero_int	typeref:typename:std::enable_if<std::is_integral<T>::value,bool>::type
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^      operator()(T value) {$/;"	f	class:internal::char_converter	typeref:typename:std::enable_if<std::is_integral<T>::value>::type
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^      operator()(T value) {$/;"	f	class:internal::printf_precision_handler	typeref:typename:std::enable_if<std::is_integral<T>::value,int>::type
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^      operator()(T value) {$/;"	f	class:internal::printf_width_handler	typeref:typename:std::enable_if<std::is_integral<T>::value,unsigned>::type
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^      operator()(T value) {$/;"	f	class:printf_arg_formatter	typeref:typename:std::enable_if<std::is_floating_point<T>::value,iterator>::type
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^      operator()(T value) {$/;"	f	class:printf_arg_formatter	typeref:typename:std::enable_if<std::is_integral<T>::value,iterator>::type
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^      operator()(U value) {$/;"	f	class:internal::arg_converter	typeref:typename:std::enable_if<std::is_integral<U>::value>::type
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  iterator operator()(basic_string_view<char_type> value) {$/;"	f	class:printf_arg_formatter	typeref:typename:iterator
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  iterator operator()(const char *value) {$/;"	f	class:printf_arg_formatter	typeref:typename:iterator
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  iterator operator()(const void *value) {$/;"	f	class:printf_arg_formatter	typeref:typename:iterator
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  iterator operator()(const wchar_t *value) {$/;"	f	class:printf_arg_formatter	typeref:typename:iterator
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  iterator operator()(monostate value) {$/;"	f	class:printf_arg_formatter	typeref:typename:iterator
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  iterator operator()(typename basic_format_arg<context_type>::handle handle) {$/;"	f	class:printf_arg_formatter	typeref:typename:iterator
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  void operator()(bool value) {$/;"	f	class:internal::arg_converter	typeref:typename:void
operator ()	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^    void operator()(const T& v) {$/;"	f	struct:formatter::format_each	typeref:typename:void
operator ()	vendor/spdlog/tests/catch.hpp	/^            int operator()( int n ) const { return std::rand() % n; }$/;"	f	struct:Catch::TestRegistry::RandomNumberGenerator	typeref:typename:int
operator ()	vendor/spdlog/tests/catch.hpp	/^        Approx operator()( double value ) {$/;"	f	class:Catch::Detail::Approx	typeref:typename:Approx
operator ()	vendor/spdlog/tests/catch.hpp	/^        void operator()( std::string const&str ) {$/;"	f	struct:Catch::OutputDebugWriter	typeref:typename:void
operator () 	vendor/spdlog/tests/catch.hpp	/^            bool operator() ( Ptr<SectionNode> const& node ) const {$/;"	f	struct:Catch::CumulativeReporterBase::BySectionInfo	typeref:typename:bool
operator () 	vendor/spdlog/tests/catch.hpp	/^            bool operator() (TestCase i,TestCase j) const { return (i<j);}$/;"	f	struct:Catch::TestRegistry::LexSort	typeref:typename:bool
operator *	dependencies/include/SFML/System/ThreadLocalPtr.inl	/^T& ThreadLocalPtr<T>::operator *() const$/;"	f	class:sf::ThreadLocalPtr	typeref:typename:T &
operator *	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T> operator *(T left, const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T>
operator *	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T> operator *(const Vector2<T>& left, T right)$/;"	f	typeref:typename:Vector2<T>
operator *	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T> operator *(T left, const Vector3<T>& right)$/;"	f	typeref:typename:Vector3<T>
operator *	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T> operator *(const Vector3<T>& left, T right)$/;"	f	typeref:typename:Vector3<T>
operator *	dependencies/include/v8.h	/^    char* operator*() { return str_; }$/;"	f	class:v8::String::Utf8Value	typeref:typename:char *
operator *	dependencies/include/v8.h	/^    const char* operator*() const { return str_; }$/;"	f	class:v8::String::Utf8Value	typeref:typename:const char *
operator *	dependencies/include/v8.h	/^    const uint16_t* operator*() const { return str_; }$/;"	f	class:v8::String::Value	typeref:typename:const uint16_t *
operator *	dependencies/include/v8.h	/^    uint16_t* operator*() { return str_; }$/;"	f	class:v8::String::Value	typeref:typename:uint16_t *
operator *	dependencies/include/v8.h	/^  V8_INLINE T* operator*() const { return this->val_; }$/;"	f	class:v8::Global	typeref:typename:V8_INLINE T *
operator *	dependencies/include/v8.h	/^  V8_INLINE T* operator*() const { return this->val_; }$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE T *
operator *	dependencies/include/v8.h	/^  V8_INLINE T* operator*() const { return val_; }$/;"	f	class:v8::Local	typeref:typename:V8_INLINE T *
operator *	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC fp operator*(fp x, fp y) {$/;"	f	namespace:internal	typeref:typename:FMT_FUNC fp
operator *	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR Char operator*() const {$/;"	f	class:internal::null_terminating_iterator	typeref:typename:FMT_CONSTEXPR Char
operator *	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  T &operator*() const { return blackhole_; }$/;"	f	class:internal::counting_iterator	typeref:typename:T &
operator *	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  reference operator*() const { return count_ < limit_ ? *out_ : blackhole_; }$/;"	f	class:internal::truncating_iterator	typeref:typename:reference
operator *	vendor/spdlog/tests/catch.hpp	/^        T const& operator*() const { return *nullableValue; }$/;"	f	class:Catch::Option	typeref:typename:T const &
operator *	vendor/spdlog/tests/catch.hpp	/^        T& operator*() const { return *m_p; }$/;"	f	class:Catch::Ptr	typeref:typename:T &
operator *	vendor/spdlog/tests/catch.hpp	/^        T& operator*() { return *nullableValue; }$/;"	f	class:Catch::Option	typeref:typename:T &
operator *=	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T>& operator *=(Vector2<T>& left, T right)$/;"	f	typeref:typename:Vector2<T> &
operator *=	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T>& operator *=(Vector3<T>& left, T right)$/;"	f	typeref:typename:Vector3<T> &
operator +	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T> operator +(const Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T>
operator +	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T> operator +(const Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:Vector3<T>
operator +	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR null_terminating_iterator operator+(difference_type n) {$/;"	f	class:internal::null_terminating_iterator	typeref:typename:FMT_CONSTEXPR null_terminating_iterator
operator +	vendor/spdlog/tests/catch.hpp	/^        std::string operator+() {$/;"	f	struct:Catch::StreamEndStop	typeref:typename:std::string
operator +	vendor/spdlog/tests/catch.hpp	/^    T const& operator + ( T const& value, StreamEndStop ) {$/;"	f	namespace:Catch	typeref:typename:T const &
operator ++	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR null_terminating_iterator operator++() {$/;"	f	class:internal::null_terminating_iterator	typeref:typename:FMT_CONSTEXPR null_terminating_iterator
operator ++	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR null_terminating_iterator operator++(int) {$/;"	f	class:internal::null_terminating_iterator	typeref:typename:FMT_CONSTEXPR null_terminating_iterator
operator ++	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  counting_iterator operator++(int) {$/;"	f	class:internal::counting_iterator	typeref:typename:counting_iterator
operator ++	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  counting_iterator& operator++() {$/;"	f	class:internal::counting_iterator	typeref:typename:counting_iterator &
operator ++	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  truncating_iterator operator++(int) {$/;"	f	class:internal::truncating_iterator	typeref:typename:truncating_iterator
operator ++	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  truncating_iterator& operator++() {$/;"	f	class:internal::truncating_iterator	typeref:typename:truncating_iterator &
operator +=	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T>& operator +=(Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T> &
operator +=	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T>& operator +=(Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:Vector3<T> &
operator +=	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR null_terminating_iterator operator+=(difference_type n) {$/;"	f	class:internal::null_terminating_iterator	typeref:typename:FMT_CONSTEXPR null_terminating_iterator
operator +=	vendor/spdlog/tests/catch.hpp	/^        Counts& operator += ( Counts const& other ) {$/;"	f	struct:Catch::Counts	typeref:typename:Counts &
operator +=	vendor/spdlog/tests/catch.hpp	/^        Totals& operator += ( Totals const& other ) {$/;"	f	struct:Catch::Totals	typeref:typename:Totals &
operator -	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T> operator -(const Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T>
operator -	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T> operator -(const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T>
operator -	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T> operator -(const Vector3<T>& left)$/;"	f	typeref:typename:Vector3<T>
operator -	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T> operator -(const Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:Vector3<T>
operator -	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^inline fp operator-(fp x, fp y) {$/;"	f	namespace:internal	typeref:typename:fp
operator -	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR difference_type operator-($/;"	f	class:internal::null_terminating_iterator	typeref:typename:FMT_CONSTEXPR difference_type
operator -	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR null_terminating_iterator operator-(difference_type n) {$/;"	f	class:internal::null_terminating_iterator	typeref:typename:FMT_CONSTEXPR null_terminating_iterator
operator -	vendor/spdlog/tests/catch.hpp	/^        Counts operator - ( Counts const& other ) const {$/;"	f	struct:Catch::Counts	typeref:typename:Counts
operator -	vendor/spdlog/tests/catch.hpp	/^        Totals operator - ( Totals const& other ) const {$/;"	f	struct:Catch::Totals	typeref:typename:Totals
operator --	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR null_terminating_iterator operator--() {$/;"	f	class:internal::null_terminating_iterator	typeref:typename:FMT_CONSTEXPR null_terminating_iterator
operator -=	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T>& operator -=(Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T> &
operator -=	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T>& operator -=(Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:Vector3<T> &
operator ->	dependencies/include/SFML/System/ThreadLocalPtr.inl	/^T* ThreadLocalPtr<T>::operator ->() const$/;"	f	class:sf::ThreadLocalPtr	typeref:typename:T *
operator ->	dependencies/include/v8.h	/^  V8_INLINE T* operator->() const { return val_; }$/;"	f	class:v8::Local	typeref:typename:V8_INLINE T *
operator ->	vendor/spdlog/tests/catch.hpp	/^        T* operator->() const { return m_p; }$/;"	f	class:Catch::Ptr	typeref:typename:T *
operator ->	vendor/spdlog/tests/catch.hpp	/^        T* operator->() { return nullableValue; }$/;"	f	class:Catch::Option	typeref:typename:T *
operator ->	vendor/spdlog/tests/catch.hpp	/^        const T* operator->() const { return nullableValue; }$/;"	f	class:Catch::Option	typeref:typename:const T *
operator ->*	vendor/spdlog/tests/catch.hpp	/^    inline ExpressionLhs<T const&> ResultBuilder::operator->* ( T const& operand ) {$/;"	f	class:Catch::ResultBuilder	typeref:typename:ExpressionLhs<T const &>
operator ->*	vendor/spdlog/tests/catch.hpp	/^    inline ExpressionLhs<bool> ResultBuilder::operator->* ( bool value ) {$/;"	f	class:Catch::ResultBuilder	typeref:typename:ExpressionLhs<bool>
operator /	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T> operator \/(const Vector2<T>& left, T right)$/;"	f	typeref:typename:Vector2<T>
operator /	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T> operator \/(const Vector3<T>& left, T right)$/;"	f	typeref:typename:Vector3<T>
operator /=	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T>& operator \/=(Vector2<T>& left, T right)$/;"	f	typeref:typename:Vector2<T> &
operator /=	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T>& operator \/=(Vector3<T>& left, T right)$/;"	f	typeref:typename:Vector3<T> &
operator <	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  friend bool operator<(basic_string_view lhs, basic_string_view rhs) {$/;"	f	typeref:typename:bool
operator <	vendor/spdlog/tests/catch.hpp	/^        bool operator < ( MessageInfo const& other ) const {$/;"	f	struct:Catch::MessageInfo	typeref:typename:bool
operator <	vendor/spdlog/tests/catch.hpp	/^    ResultBuilder& operator < ( RhsT const& rhs ) {$/;"	f	class:Catch::ExpressionLhs	typeref:typename:ResultBuilder &
operator <	vendor/spdlog/tests/catch.hpp	/^    bool SourceLineInfo::operator < ( SourceLineInfo const& other ) const {$/;"	f	class:Catch::SourceLineInfo	typeref:typename:bool
operator <	vendor/spdlog/tests/catch.hpp	/^    bool TestCase::operator < ( TestCase const& other ) const {$/;"	f	class:Catch::TestCase	typeref:typename:bool
operator <<	vendor/spdlog/example/example.cpp	/^    friend OStream &operator<<(OStream &os, const my_type &c)$/;"	f	typeref:typename:OStream &	file:
operator <<	vendor/spdlog/example/jni/example.cpp	/^    friend OStream &operator<<(OStream &os, const my_type &c)$/;"	f	typeref:typename:OStream &	file:
operator <<	vendor/spdlog/tests/catch.hpp	/^        MessageBuilder& operator << ( T const& value ) {$/;"	f	struct:Catch::MessageBuilder	typeref:typename:MessageBuilder &
operator <<	vendor/spdlog/tests/catch.hpp	/^        ResultBuilder& operator << ( T const& value ) {$/;"	f	class:Catch::ResultBuilder	typeref:typename:ResultBuilder &
operator <<	vendor/spdlog/tests/catch.hpp	/^    inline std::ostream& operator << ( std::ostream& os, Colour const& ) { return os; }$/;"	f	namespace:Catch	typeref:typename:std::ostream &
operator <<	vendor/spdlog/tests/catch.hpp	/^    std::ostream& operator << ( std::ostream& os, SourceLineInfo const& info ) {$/;"	f	namespace:Catch	typeref:typename:std::ostream &
operator <<	vendor/spdlog/tests/catch.hpp	/^    std::ostream& operator << ( std::ostream& os, pluralise const& pluraliser ) {$/;"	f	namespace:Catch	typeref:typename:std::ostream &
operator <=	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  friend bool operator<=(basic_string_view lhs, basic_string_view rhs) {$/;"	f	typeref:typename:bool
operator <=	vendor/spdlog/tests/catch.hpp	/^    ResultBuilder& operator <= ( RhsT const& rhs ) {$/;"	f	class:Catch::ExpressionLhs	typeref:typename:ResultBuilder &
operator =	dependencies/include/SFML/System/ThreadLocalPtr.inl	/^ThreadLocalPtr<T>& ThreadLocalPtr<T>::operator =(T* value)$/;"	f	class:sf::ThreadLocalPtr	typeref:typename:ThreadLocalPtr<T> &
operator =	dependencies/include/SFML/System/ThreadLocalPtr.inl	/^ThreadLocalPtr<T>& ThreadLocalPtr<T>::operator =(const ThreadLocalPtr<T>& right)$/;"	f	class:sf::ThreadLocalPtr	typeref:typename:ThreadLocalPtr<T> &
operator =	dependencies/include/v8-util.h	/^    void operator=(PersistentContainerValue value) {$/;"	f	class:v8::PersistentValueMapBase::PersistentValueReference	typeref:typename:void
operator =	dependencies/include/v8-util.h	/^    void operator=(const PersistentValueReference& other) {$/;"	f	class:v8::PersistentValueMapBase::PersistentValueReference	typeref:typename:void
operator =	dependencies/include/v8.h	/^  V8_INLINE Global& operator=(Global<S>&& rhs) {  \/\/ NOLINT$/;"	f	class:v8::Global	typeref:typename:V8_INLINE Global &
operator =	dependencies/include/v8.h	/^  V8_INLINE Persistent& operator=(const Persistent& that) {$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE Persistent &
operator =	dependencies/include/v8.h	/^  V8_INLINE Persistent& operator=(const Persistent<S, M2>& that) { \/\/ NOLINT$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE Persistent &
operator =	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    async_msg &operator=(async_msg &&other) SPDLOG_NOEXCEPT$/;"	f	struct:spdlog::details::async_msg	typeref:typename:async_msg &
operator =	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^    void operator=(const dispatcher &) {}$/;"	f	class:__anon3d87c0370110::safe_strerror::dispatcher	typeref:typename:void
operator =	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR arg_ref &operator=(unsigned idx) {$/;"	f	struct:internal::arg_ref	typeref:typename:FMT_CONSTEXPR arg_ref &
operator =	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR null_terminating_iterator &operator=(const Char *ptr) {$/;"	f	class:internal::null_terminating_iterator	typeref:typename:FMT_CONSTEXPR null_terminating_iterator &
operator =	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  basic_memory_buffer &operator=(basic_memory_buffer &&other) {$/;"	f	class:basic_memory_buffer	typeref:typename:basic_memory_buffer &
operator =	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  named_arg<T, Char> operator=(T &&value) const {$/;"	f	struct:internal::udl_arg	typeref:typename:named_arg<T,Char>
operator =	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  buffered_file& operator=(buffered_file &&other) {$/;"	f	class:buffered_file	typeref:typename:buffered_file &
operator =	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  file& operator=(file &&other) {$/;"	f	class:file	typeref:typename:file &
operator =	vendor/spdlog/tests/catch.hpp	/^            BoundArgFunction& operator = ( BoundArgFunction const& other ) {$/;"	f	class:Clara::Detail::BoundArgFunction	typeref:typename:BoundArgFunction &
operator =	vendor/spdlog/tests/catch.hpp	/^        CopyableStream& operator=( CopyableStream const& other ) {$/;"	f	struct:Catch::CopyableStream	typeref:typename:CopyableStream &
operator =	vendor/spdlog/tests/catch.hpp	/^        LazyStat& operator=( T const& _value ) {$/;"	f	struct:Catch::LazyStat	typeref:typename:LazyStat &
operator =	vendor/spdlog/tests/catch.hpp	/^        Option& operator = ( T const& _value ) {$/;"	f	class:Catch::Option	typeref:typename:Option &
operator =	vendor/spdlog/tests/catch.hpp	/^        Option& operator= ( Option const& _other ) {$/;"	f	class:Catch::Option	typeref:typename:Option &
operator =	vendor/spdlog/tests/catch.hpp	/^        Ptr& operator = ( Ptr const& other ){$/;"	f	class:Catch::Ptr	typeref:typename:Ptr &
operator =	vendor/spdlog/tests/catch.hpp	/^        Ptr& operator = ( T* p ){$/;"	f	class:Catch::Ptr	typeref:typename:Ptr &
operator =	vendor/spdlog/tests/catch.hpp	/^    TestCase& TestCase::operator = ( TestCase const& other ) {$/;"	f	class:Catch::TestCase	typeref:typename:TestCase &
operator ==	dependencies/include/SFML/Graphics/Rect.inl	/^inline bool operator ==(const Rect<T>& left, const Rect<T>& right)$/;"	f	typeref:typename:bool
operator ==	dependencies/include/SFML/System/Vector2.inl	/^inline bool operator ==(const Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:bool
operator ==	dependencies/include/SFML/System/Vector3.inl	/^inline bool operator ==(const Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:bool
operator ==	dependencies/include/v8.h	/^  V8_INLINE bool operator==(const Local<S>& that) const {$/;"	f	class:v8::Local	typeref:typename:V8_INLINE bool
operator ==	dependencies/include/v8.h	/^  V8_INLINE bool operator==(const Local<S>& that) const {$/;"	f	class:v8::PersistentBase	typeref:typename:V8_INLINE bool
operator ==	dependencies/include/v8.h	/^  V8_INLINE bool operator==(const PersistentBase<S>& that) const {$/;"	f	class:v8::PersistentBase	typeref:typename:V8_INLINE bool
operator ==	dependencies/include/v8.h	/^  template <class S> V8_INLINE bool operator==($/;"	f	class:v8::Local	typeref:typename:V8_INLINE bool
operator ==	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  friend bool operator==(basic_string_view lhs, basic_string_view rhs) {$/;"	f	typeref:typename:bool
operator ==	vendor/spdlog/tests/catch.hpp	/^            bool operator == ( Ptr<SectionNode> const& other ) const {$/;"	f	struct:Catch::CumulativeReporterBase::SectionNode	typeref:typename:bool
operator ==	vendor/spdlog/tests/catch.hpp	/^            bool operator == ( SectionNode const& other ) const {$/;"	f	struct:Catch::CumulativeReporterBase::SectionNode	typeref:typename:bool
operator ==	vendor/spdlog/tests/catch.hpp	/^        bool operator == ( MessageInfo const& other ) const {$/;"	f	struct:Catch::MessageInfo	typeref:typename:bool
operator ==	vendor/spdlog/tests/catch.hpp	/^        friend bool operator == ( Approx const& lhs, double rhs ) {$/;"	f	namespace:Catch::Detail	typeref:typename:bool
operator ==	vendor/spdlog/tests/catch.hpp	/^        friend bool operator == ( double lhs, Approx const& rhs ) {$/;"	f	namespace:Catch::Detail	typeref:typename:bool
operator ==	vendor/spdlog/tests/catch.hpp	/^    ResultBuilder& operator == ( RhsT const& rhs ) {$/;"	f	class:Catch::ExpressionLhs	typeref:typename:ResultBuilder &
operator ==	vendor/spdlog/tests/catch.hpp	/^    ResultBuilder& operator == ( bool rhs ) {$/;"	f	class:Catch::ExpressionLhs	typeref:typename:ResultBuilder &
operator ==	vendor/spdlog/tests/catch.hpp	/^    bool SourceLineInfo::operator == ( SourceLineInfo const& other ) const {$/;"	f	class:Catch::SourceLineInfo	typeref:typename:bool
operator ==	vendor/spdlog/tests/catch.hpp	/^    bool TestCase::operator == ( TestCase const& other ) const {$/;"	f	class:Catch::TestCase	typeref:typename:bool
operator >	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  friend bool operator>(basic_string_view lhs, basic_string_view rhs) {$/;"	f	typeref:typename:bool
operator >	vendor/spdlog/tests/catch.hpp	/^    ResultBuilder& operator > ( RhsT const& rhs ) {$/;"	f	class:Catch::ExpressionLhs	typeref:typename:ResultBuilder &
operator >=	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  friend bool operator>=(basic_string_view lhs, basic_string_view rhs) {$/;"	f	typeref:typename:bool
operator >=	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  bool operator>=(null_terminating_iterator other) const {$/;"	f	class:internal::null_terminating_iterator	typeref:typename:bool
operator >=	vendor/spdlog/tests/catch.hpp	/^    ResultBuilder& operator >= ( RhsT const& rhs ) {$/;"	f	class:Catch::ExpressionLhs	typeref:typename:ResultBuilder &
operator []	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  T &operator[](std::size_t index) { return ptr_[index]; }$/;"	f	class:internal::basic_buffer	typeref:typename:T &
operator []	vendor/spdlog/tests/catch.hpp	/^            OptBuilder& operator[]( std::string const& optName ) {$/;"	f	class:Clara::CommandLine::OptBuilder	typeref:typename:OptBuilder &
operator []	vendor/spdlog/tests/catch.hpp	/^        ArgBuilder operator[]( UnpositionalTag ) {$/;"	f	class:Clara::CommandLine	typeref:typename:ArgBuilder
operator []	vendor/spdlog/tests/catch.hpp	/^        ArgBuilder operator[]( int position ) {$/;"	f	class:Clara::CommandLine	typeref:typename:ArgBuilder
operator []	vendor/spdlog/tests/catch.hpp	/^        OptBuilder operator[]( std::string const& optName ) {$/;"	f	class:Clara::CommandLine	typeref:typename:OptBuilder
operator |	vendor/spdlog/tests/catch.hpp	/^    inline ResultDisposition::Flags operator | ( ResultDisposition::Flags lhs, ResultDisposition/;"	f	namespace:Catch	typeref:typename:ResultDisposition::Flags
optUsage	vendor/spdlog/tests/catch.hpp	/^        std::string optUsage() const {$/;"	f	class:Clara::CommandLine	typeref:typename:std::string
optUsage	vendor/spdlog/tests/catch.hpp	/^        void optUsage( std::ostream& os, std::size_t indent = 0, std::size_t width = Detail::con/;"	f	class:Clara::CommandLine	typeref:typename:void
options_	dependencies/include/v8.h	/^  ScriptOriginOptions options_;$/;"	m	class:v8::ScriptOrigin	typeref:typename:ScriptOriginOptions
orange	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    orange = 0xFFA500,                  \/\/ rgb(255,165,0)$/;"	e	enum:color
orange_red	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    orange_red = 0xFF4500,              \/\/ rgb(255,69,0)$/;"	e	enum:color
orchid	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    orchid = 0xDA70D6,                  \/\/ rgb(218,112,214)$/;"	e	enum:color
origin	dependencies/include/v8-inspector.h	/^  StringView origin;$/;"	m	class:v8_inspector::V8ContextInfo	typeref:typename:StringView
originalAttributes	vendor/spdlog/tests/catch.hpp	/^        WORD originalAttributes;$/;"	m	class:Catch::__anon368216750910::Win32ColourImpl	typeref:typename:WORD
os	vendor/spdlog/include/spdlog/details/os.h	/^namespace os {$/;"	n	namespace:spdlog::details
oss	vendor/spdlog/tests/catch.hpp	/^        std::ostringstream oss;$/;"	m	struct:Catch::CopyableStream	typeref:typename:std::ostringstream
oss	vendor/spdlog/tests/test_misc.cpp	/^    std::ostringstream oss;$/;"	v	typeref:typename:std::ostringstream
oss	vendor/spdlog/tests/test_pattern_formatter.cpp	/^    std::stringstream oss;$/;"	v	typeref:typename:std::stringstream
oss_logger	vendor/spdlog/tests/test_misc.cpp	/^    spdlog::logger oss_logger("oss", oss_sink);$/;"	v	typeref:typename:spdlog::logger
oss_sink	vendor/spdlog/tests/test_misc.cpp	/^    auto oss_sink = std::make_shared<spdlog::sinks::ostream_sink_mt>(oss);$/;"	v	typeref:typename:auto
ostream_	vendor/spdlog/include/spdlog/sinks/ostream_sink.h	/^    std::ostream &ostream_;$/;"	m	class:spdlog::sinks::ostream_sink	typeref:typename:std::ostream &
ostream_sink	vendor/spdlog/include/spdlog/sinks/ostream_sink.h	/^    explicit ostream_sink(std::ostream &os, bool force_flush = false)$/;"	f	class:spdlog::sinks::ostream_sink
ostream_sink	vendor/spdlog/include/spdlog/sinks/ostream_sink.h	/^class ostream_sink final : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
ostream_sink_mt	vendor/spdlog/include/spdlog/sinks/ostream_sink.h	/^using ostream_sink_mt = ostream_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:ostream_sink<std::mutex>
ostream_sink_st	vendor/spdlog/include/spdlog/sinks/ostream_sink.h	/^using ostream_sink_st = ostream_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:ostream_sink<details::null_mutex>
out	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  iterator out() { return out_; }$/;"	f	class:internal::context_base	typeref:typename:iterator
out	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  OutputIt out;$/;"	m	struct:format_to_n_result	typeref:typename:OutputIt
out	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  iterator out() const { return out_; }$/;"	f	class:basic_writer	typeref:typename:iterator
out	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  iterator out() { return writer_.out(); }$/;"	f	class:internal::arg_formatter_base	typeref:typename:iterator
out	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^    typename std::add_lvalue_reference<decltype(std::declval<FormatContext>().out())>::type out;$/;"	m	struct:formatter::format_each	typeref:typename:std::add_lvalue_reference<decltype (std::declval<FormatContext> ().out ())>::type
out_	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  iterator out_;$/;"	m	class:internal::context_base	typeref:typename:iterator
out_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  OutputIt out_;$/;"	m	class:internal::truncating_iterator	typeref:typename:OutputIt
out_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  iterator out_;  \/\/ Output iterator.$/;"	m	class:basic_writer	typeref:typename:iterator
out_handle_	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    HANDLE out_handle_;$/;"	m	class:spdlog::sinks::wincolor_sink	typeref:typename:HANDLE
output	vendor/spdlog/tests/test_misc.cpp	/^    auto output = oss.str();$/;"	v	typeref:typename:auto
outputFilename	vendor/spdlog/tests/catch.hpp	/^        std::string outputFilename;$/;"	m	struct:Catch::ConfigData	typeref:typename:std::string
output_range	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit output_range(OutputIt it): it_(it) {}$/;"	f	class:output_range
output_range	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class output_range {$/;"	c
overallIndex	vendor/spdlog/tests/catch.hpp	/^        size_t overallIndex = getCurrentContext().getGeneratorIndex( m_fileInfo, m_totalSize );$/;"	m	class:Catch::CompositeGenerator	typeref:typename:size_t
overflow	vendor/spdlog/include/spdlog/fmt/bundled/ostream.h	/^  int_type overflow(int_type ch = traits_type::eof()) FMT_OVERRIDE {$/;"	f	class:internal::formatbuf	typeref:typename:int_type
overflow	vendor/spdlog/tests/catch.hpp	/^        int overflow( int c ) {$/;"	f	class:Catch::StreamBufImpl	typeref:typename:int
overflow_policy_	vendor/spdlog/include/spdlog/async_logger.h	/^    async_overflow_policy overflow_policy_;$/;"	m	class:spdlog::async_logger	typeref:typename:async_overflow_policy
overrun_counter	vendor/spdlog/include/spdlog/details/circular_q.h	/^    size_t overrun_counter() const$/;"	f	class:spdlog::details::circular_q	typeref:typename:size_t
overrun_counter	vendor/spdlog/include/spdlog/details/mpmc_blocking_q.h	/^    size_t overrun_counter()$/;"	f	class:spdlog::details::mpmc_blocking_queue	typeref:typename:size_t
overrun_counter	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    size_t overrun_counter()$/;"	f	class:spdlog::details::thread_pool	typeref:typename:size_t
overrun_counter	vendor/spdlog/tests/test_async.cpp	/^    size_t overrun_counter = 0;$/;"	v	typeref:typename:size_t
overrun_counter_	vendor/spdlog/include/spdlog/details/circular_q.h	/^    size_t overrun_counter_ = 0;$/;"	m	class:spdlog::details::circular_q	typeref:typename:size_t
overrun_oldest	vendor/spdlog/include/spdlog/async_logger.h	/^    overrun_oldest \/\/ Discard oldest message in the queue if full when trying to$/;"	e	enum:spdlog::async_overflow_policy
p_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit p_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::p_formatter
p_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class p_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
pad2	vendor/spdlog/include/spdlog/details/fmt_helper.h	/^inline void pad2(int n, fmt::basic_memory_buffer<char, Buffer_Size> &dest)$/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:void
pad3	vendor/spdlog/include/spdlog/details/fmt_helper.h	/^inline void pad3(T n, fmt::basic_memory_buffer<char, Buffer_Size> &dest)$/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:void
pad6	vendor/spdlog/include/spdlog/details/fmt_helper.h	/^inline void pad6(T n, fmt::basic_memory_buffer<char, Buffer_Size> &dest)$/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:void
pad9	vendor/spdlog/include/spdlog/details/fmt_helper.h	/^inline void pad9(T n, fmt::basic_memory_buffer<char, Buffer_Size> &dest)$/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:void
pad_it	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    void pad_it(size_t count)$/;"	f	class:spdlog::details::scoped_pad	typeref:typename:void
pad_side	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    enum pad_side$/;"	g	struct:spdlog::details::padding_info
pad_uint	vendor/spdlog/include/spdlog/details/fmt_helper.h	/^inline void pad_uint(T n, unsigned int width, fmt::basic_memory_buffer<char, Buffer_Size> &dest)$/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:void
padded_int_writer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  struct padded_int_writer {$/;"	s	class:basic_writer
padding	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    std::size_t padding;$/;"	m	struct:basic_writer::padded_int_writer	typeref:typename:std::size_t
padding_info	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    padding_info(size_t width, padding_info::pad_side side)$/;"	f	struct:spdlog::details::padding_info
padding_info	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^struct padding_info$/;"	s	namespace:spdlog::details
padinfo_	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    const padding_info &padinfo_;$/;"	m	class:spdlog::details::scoped_pad	typeref:typename:const padding_info &
padinfo_	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    padding_info padinfo_;$/;"	m	class:spdlog::details::flag_formatter	typeref:typename:padding_info
pale_golden_rod	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    pale_golden_rod = 0xEEE8AA,         \/\/ rgb(238,232,170)$/;"	e	enum:color
pale_green	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    pale_green = 0x98FB98,              \/\/ rgb(152,251,152)$/;"	e	enum:color
pale_turquoise	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    pale_turquoise = 0xAFEEEE,          \/\/ rgb(175,238,238)$/;"	e	enum:color
pale_violet_red	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    pale_violet_red = 0xDB7093,         \/\/ rgb(219,112,147)$/;"	e	enum:color
papaya_whip	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    papaya_whip = 0xFFEFD5,             \/\/ rgb(255,239,213)$/;"	e	enum:color
parameter_	dependencies/include/v8.h	/^  T* parameter_;$/;"	m	class:v8::WeakCallbackInfo	typeref:typename:T *
parameter_copy_storage_	dependencies/include/libplatform/v8-tracing.h	/^  char* parameter_copy_storage_ = nullptr;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:char *
parse	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR typename ParseContext::iterator parse(ParseContext &ctx) {$/;"	f	struct:formatter	typeref:typename:FMT_CONSTEXPR typename ParseContext::iterator
parse	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  auto parse(ParseContext &ctx) -> decltype(ctx.begin()) {$/;"	f	class:dynamic_formatter	typeref:typename:decltype (ctx.begin ())
parse	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  auto parse(ParseContext &ctx) -> decltype(ctx.begin()) { return ctx.begin(); }$/;"	f	struct:printf_formatter	typeref:typename:decltype (ctx.begin ())
parse	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  FMT_CONSTEXPR auto parse(ParseContext &ctx) -> decltype(ctx.begin()) {$/;"	f	struct:formatter	typeref:typename:decltype (ctx.begin ())
parse	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  FMT_CONSTEXPR auto parse(ParseContext &ctx) -> decltype(ctx.begin()) {$/;"	f	struct:formatting_base	typeref:typename:decltype (ctx.begin ())
parse	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^  auto parse(ParseContext &ctx) -> decltype(ctx.begin()) {$/;"	f	struct:formatter	typeref:typename:decltype (ctx.begin ())
parse	vendor/spdlog/tests/catch.hpp	/^        ConfigT parse( int argc, char const * const * argv ) const {$/;"	f	class:Clara::CommandLine	typeref:typename:ConfigT
parse	vendor/spdlog/tests/catch.hpp	/^        TestSpecParser& parse( std::string const& arg ) {$/;"	f	class:Catch::TestSpecParser	typeref:typename:TestSpecParser &
parseInto	vendor/spdlog/tests/catch.hpp	/^        std::vector<Parser::Token> parseInto( int argc, char const * const * argv, ConfigT& conf/;"	f	class:Clara::CommandLine	typeref:typename:std::vector<Parser::Token>
parseIntoTokens	vendor/spdlog/tests/catch.hpp	/^        void parseIntoTokens( int argc, char const * const * argv, std::vector<Parser::Token>& t/;"	f	struct:Clara::Parser	typeref:typename:void
parseIntoTokens	vendor/spdlog/tests/catch.hpp	/^        void parseIntoTokens( std::string arg, std::vector<Parser::Token>& tokens ) const {$/;"	f	struct:Clara::Parser	typeref:typename:void
parseSpecialTag	vendor/spdlog/tests/catch.hpp	/^    inline TestCaseInfo::SpecialProperties parseSpecialTag( std::string const& tag ) {$/;"	f	namespace:Catch	typeref:typename:TestCaseInfo::SpecialProperties
parseTestSpec	vendor/spdlog/tests/catch.hpp	/^    inline TestSpec parseTestSpec( std::string const& arg ) {$/;"	f	namespace:Catch	typeref:typename:TestSpec
parse_arg_id	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR Iterator parse_arg_id(Iterator it, IDHandler &&handler) {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR Iterator
parse_arg_id	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR const Char *parse_arg_id($/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR const Char *
parse_context	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  basic_parse_context<char_type> &parse_context() {$/;"	f	class:internal::context_base	typeref:typename:basic_parse_context<char_type> &
parse_context	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^typedef basic_parse_context<char> parse_context;$/;"	t	typeref:typename:basic_parse_context<char>
parse_context_	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  basic_parse_context<Char> parse_context_;$/;"	m	class:internal::context_base	typeref:typename:basic_parse_context<Char>
parse_context_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef basic_parse_context<Char, ErrorHandler> parse_context_type;$/;"	t	class:internal::format_string_checker	typeref:typename:basic_parse_context<Char,ErrorHandler>
parse_flags	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^void basic_printf_context<OutputIt, Char, AF>::parse_flags($/;"	f	class:basic_printf_context	typeref:typename:void
parse_format_specs	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    parse_format_specs(ParseContext &ctx) {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR const typename ParseContext::char_type *
parse_format_specs	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR Iterator parse_format_specs(Iterator it, SpecHandler &&handler) {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR Iterator
parse_format_string	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void parse_format_string($/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR void
parse_func	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef const Char *(*parse_func)(parse_context_type &);$/;"	t	class:internal::format_string_checker	typeref:typename:const Char * (*)(parse_context_type &)
parse_funcs_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  parse_func parse_funcs_[NUM_ARGS > 0 ? NUM_ARGS : 1];$/;"	m	class:internal::format_string_checker	typeref:typename:parse_func[]
parse_header	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^unsigned basic_printf_context<OutputIt, Char, AF>::parse_header($/;"	f	class:basic_printf_context	typeref:typename:unsigned
parse_nonnegative_int	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR unsigned parse_nonnegative_int($/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR unsigned
parse_nonnegative_int	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR unsigned parse_nonnegative_int(Iterator &it, ErrorHandler &&eh) {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR unsigned
passOrFail	vendor/spdlog/tests/catch.hpp	/^            std::string passOrFail;$/;"	m	class:Catch::ConsoleReporter::AssertionPrinter	typeref:typename:std::string
passed	vendor/spdlog/tests/catch.hpp	/^        std::size_t passed;$/;"	m	struct:Catch::Counts	typeref:typename:std::size_t
passedString	vendor/spdlog/tests/catch.hpp	/^            static const char* passedString() { return "PASSED"; }$/;"	f	class:Catch::CompactReporter::AssertionPrinter	typeref:typename:const char *
passedString	vendor/spdlog/tests/catch.hpp	/^            static const char* passedString() { return "passed"; }$/;"	f	class:Catch::CompactReporter::AssertionPrinter	typeref:typename:const char *
pattern_	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    std::string pattern_;$/;"	m	class:spdlog::pattern_formatter	typeref:typename:std::string
pattern_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit pattern_formatter($/;"	f	class:spdlog::pattern_formatter
pattern_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit pattern_formatter(pattern_time_type time_type = pattern_time_type::local, std::stri/;"	f	class:spdlog::pattern_formatter
pattern_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class pattern_formatter final : public formatter$/;"	c	namespace:spdlog
pattern_time_type	vendor/spdlog/include/spdlog/common.h	/^enum class pattern_time_type$/;"	g	namespace:spdlog
pattern_time_type_	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    pattern_time_type pattern_time_type_;$/;"	m	class:spdlog::pattern_formatter	typeref:typename:pattern_time_type
payload	vendor/spdlog/include/spdlog/details/log_msg.h	/^    const string_view_t payload;$/;"	m	struct:spdlog::details::log_msg	typeref:typename:const string_view_t
pc	dependencies/include/v8-profiler.h	/^  void* pc;        \/\/ Instruction pointer.$/;"	m	struct:v8::TickSample	typeref:typename:void *
pc	dependencies/include/v8.h	/^  void* pc;  \/\/ Instruction pointer.$/;"	m	struct:v8::RegisterState	typeref:typename:void *
peach_puff	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    peach_puff = 0xFFDAB9,              \/\/ rgb(255,218,185)$/;"	e	enum:color
performOptionalSelector	vendor/spdlog/tests/catch.hpp	/^inline id performOptionalSelector( id obj, SEL sel ) {$/;"	f	typeref:typename:id
periodic_flusher_	vendor/spdlog/include/spdlog/details/registry.h	/^    std::unique_ptr<periodic_worker> periodic_flusher_;$/;"	m	class:spdlog::details::registry	typeref:typename:std::unique_ptr<periodic_worker>
periodic_worker	vendor/spdlog/include/spdlog/details/periodic_worker.h	/^    periodic_worker(const std::function<void()> &callback_fun, std::chrono::seconds interval)$/;"	f	class:spdlog::details::periodic_worker
periodic_worker	vendor/spdlog/include/spdlog/details/periodic_worker.h	/^class periodic_worker$/;"	c	namespace:spdlog::details
peru	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    peru = 0xCD853F,                    \/\/ rgb(205,133,63)$/;"	e	enum:color
phase	dependencies/include/libplatform/v8-tracing.h	/^  char phase() const { return phase_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:char
phase_	dependencies/include/libplatform/v8-tracing.h	/^  char phase_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:char
pid	dependencies/include/libplatform/v8-tracing.h	/^  int pid() const { return pid_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:int
pid	vendor/spdlog/include/spdlog/details/os.h	/^inline int pid()$/;"	f	namespace:spdlog::details::os	typeref:typename:int
pid_	dependencies/include/libplatform/v8-tracing.h	/^  int pid_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:int
pid_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit pid_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::pid_formatter
pid_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class pid_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
pink	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    pink = 0xFFC0CB,                    \/\/ rgb(255,192,203)$/;"	e	enum:color
pkg_config	vendor/spdlog/CMakeLists.txt	/^set(pkg_config "${CMAKE_BINARY_DIR}\/${PROJECT_NAME}.pc")$/;"	v
pkgconfig_install_dir	vendor/spdlog/CMakeLists.txt	/^set(pkgconfig_install_dir "${CMAKE_INSTALL_LIBDIR}\/pkgconfig")$/;"	v
placeholder	vendor/spdlog/tests/catch.hpp	/^        std::string placeholder; \/\/ Only value if boundField takes an arg$/;"	m	struct:Clara::CommonArgProperties	typeref:typename:std::string
platform	dependencies/include/libplatform/libplatform.h	/^namespace platform {$/;"	n	namespace:v8
platform	dependencies/include/libplatform/v8-tracing.h	/^namespace platform {$/;"	n	namespace:v8
platformColourInstance	vendor/spdlog/tests/catch.hpp	/^    IColourImpl* platformColourInstance() {$/;"	f	namespace:Catch::__anon368216750910	typeref:typename:IColourImpl *
platformColourInstance	vendor/spdlog/tests/catch.hpp	/^    IColourImpl* platformColourInstance() {$/;"	f	namespace:Catch::__anon368216750a10	typeref:typename:IColourImpl *
platformColourInstance	vendor/spdlog/tests/catch.hpp	/^    static IColourImpl* platformColourInstance() { return NoColourImpl::instance(); }$/;"	f	namespace:Catch	typeref:typename:IColourImpl *
playerTex	src/Game.cpp	/^SDL_Texture* playerTex;$/;"	v	typeref:typename:SDL_Texture *
plum	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    plum = 0xDDA0DD,                    \/\/ rgb(221,160,221)$/;"	e	enum:color
pluralise	vendor/spdlog/tests/catch.hpp	/^    pluralise::pluralise( std::size_t count, std::string const& label )$/;"	f	class:Catch::pluralise
pluralise	vendor/spdlog/tests/catch.hpp	/^    struct pluralise {$/;"	s	namespace:Catch
pointer	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    const void *pointer;$/;"	m	union:internal::value::__anonbb24b047030a	typeref:typename:const void *
pointer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef T* pointer;$/;"	t	class:internal::counting_iterator	typeref:typename:T *
pointer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef const Char* pointer;$/;"	t	class:internal::null_terminating_iterator	typeref:typename:const Char *
pointer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef typename traits::pointer pointer;$/;"	t	class:internal::truncating_iterator	typeref:typename:traits::pointer
pointer_from	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR const Char *pointer_from(null_terminating_iterator<Char> it) {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR const Char *
pointer_from	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR const T *pointer_from(const T *p) { return p; }$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR const T *
pointer_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  cstring_type, string_type, pointer_type, custom_type$/;"	e	enum:internal::type
popScopedMessage	vendor/spdlog/tests/catch.hpp	/^        virtual void popScopedMessage( MessageInfo const& message ) {$/;"	f	class:Catch::RunContext	typeref:typename:void
pop_cv_	vendor/spdlog/include/spdlog/details/mpmc_blocking_q.h	/^    std::condition_variable pop_cv_;$/;"	m	class:spdlog::details::mpmc_blocking_queue	typeref:typename:std::condition_variable
pop_front	vendor/spdlog/include/spdlog/details/circular_q.h	/^    void pop_front(T &popped_item)$/;"	f	class:spdlog::details::circular_q	typeref:typename:void
popped_item	vendor/spdlog/tests/test_mpmc_q.cpp	/^    int popped_item;$/;"	v	typeref:typename:int
populate	vendor/spdlog/tests/catch.hpp	/^        std::vector<Parser::Token> populate( std::vector<Parser::Token> const& tokens, ConfigT& /;"	f	class:Clara::CommandLine	typeref:typename:std::vector<Parser::Token>
populateFixedArgs	vendor/spdlog/tests/catch.hpp	/^        std::vector<Parser::Token> populateFixedArgs( std::vector<Parser::Token> const& tokens, /;"	f	class:Clara::CommandLine	typeref:typename:std::vector<Parser::Token>
populateFloatingArgs	vendor/spdlog/tests/catch.hpp	/^        std::vector<Parser::Token> populateFloatingArgs( std::vector<Parser::Token> const& token/;"	f	class:Clara::CommandLine	typeref:typename:std::vector<Parser::Token>
populateOptions	vendor/spdlog/tests/catch.hpp	/^        std::vector<Parser::Token> populateOptions( std::vector<Parser::Token> const& tokens, Co/;"	f	class:Clara::CommandLine	typeref:typename:std::vector<Parser::Token>
position	dependencies/include/SFML/Graphics/Vertex.hpp	/^    Vector2f  position;  \/\/\/< 2D position of the vertex$/;"	m	class:sf::Vertex	typeref:typename:Vector2f
position	dependencies/include/SFML/Window/Event.hpp	/^        float          position;   \/\/\/< New position on the axis (in range [-100 .. 100])$/;"	m	struct:sf::Event::JoystickMoveEvent	typeref:typename:float
position	dependencies/include/v8-profiler.h	/^  size_t position;$/;"	m	struct:v8::CpuProfileDeoptFrame	typeref:typename:size_t
position	vendor/spdlog/tests/catch.hpp	/^        int position; \/\/ -1 means non-positional (floating)$/;"	m	struct:Clara::PositionalArgProperties	typeref:typename:int
post_async_msg_	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    void post_async_msg_(async_msg &&new_msg, async_overflow_policy overflow_policy)$/;"	f	class:spdlog::details::thread_pool	typeref:typename:void
post_flush	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    void post_flush(async_logger_ptr &&worker_ptr, async_overflow_policy overflow_policy)$/;"	f	class:spdlog::details::thread_pool	typeref:typename:void
post_log	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    void post_log(async_logger_ptr &&worker_ptr, details::log_msg &msg, async_overflow_policy ov/;"	f	class:spdlog::details::thread_pool	typeref:typename:void
postfix	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  Char postfix;$/;"	m	struct:formatting_range	typeref:typename:Char
postfix	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  Char postfix;$/;"	m	struct:formatting_tuple	typeref:typename:Char
powder_blue	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    powder_blue = 0xB0E0E6,             \/\/ rgb(176,224,230)$/;"	e	enum:color
precision	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR int precision() const { return precision_; }$/;"	f	class:basic_format_specs	typeref:typename:FMT_CONSTEXPR int
precision	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  int precision() const { return -1; }$/;"	f	struct:align_spec	typeref:typename:int
precision_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  int precision_;$/;"	m	class:basic_format_specs	typeref:typename:int
precision_adapter	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit FMT_CONSTEXPR precision_adapter(SpecHandler &h) : handler(h) {}$/;"	f	struct:internal::precision_adapter	typeref:typename:FMT_CONSTEXPR
precision_adapter	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct precision_adapter {$/;"	s	namespace:internal
precision_checker	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit FMT_CONSTEXPR precision_checker(ErrorHandler &eh) : handler_(eh) {}$/;"	f	class:internal::precision_checker	typeref:typename:FMT_CONSTEXPR
precision_checker	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class precision_checker: public function<unsigned long long> {$/;"	c	namespace:internal
precision_ref	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  arg_ref<Char> precision_ref;$/;"	m	struct:internal::dynamic_format_specs	typeref:typename:arg_ref<Char>
prefix	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    char prefix[4];$/;"	m	struct:basic_writer::int_writer	typeref:typename:char[4]
prefix	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    string_view prefix;$/;"	m	struct:basic_writer::padded_int_writer	typeref:typename:string_view
prefix	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  Char prefix;$/;"	m	struct:formatting_range	typeref:typename:Char
prefix	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  Char prefix;$/;"	m	struct:formatting_tuple	typeref:typename:Char
prefix_size	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    unsigned prefix_size;$/;"	m	struct:basic_writer::int_writer	typeref:typename:unsigned
prepare_logdir	vendor/spdlog/bench/latency.cpp	/^void prepare_logdir()$/;"	f	typeref:typename:void
prepare_logdir	vendor/spdlog/tests/utils.cpp	/^void prepare_logdir()$/;"	f	typeref:typename:void
prevAssertions	vendor/spdlog/tests/catch.hpp	/^            Counts prevAssertions;$/;"	m	struct:Catch::RunContext::UnfinishedSections	typeref:typename:Counts
prev_limit_	dependencies/include/v8.h	/^  internal::Address* prev_limit_;$/;"	m	class:v8::HandleScope	typeref:typename:internal::Address *
prev_limit_	dependencies/include/v8.h	/^  internal::Address* prev_limit_;$/;"	m	class:v8::SealHandleScope	typeref:typename:internal::Address *
prev_next_	dependencies/include/v8.h	/^  internal::Address* prev_next_;$/;"	m	class:v8::HandleScope	typeref:typename:internal::Address *
prev_sealed_level_	dependencies/include/v8.h	/^  int prev_sealed_level_;$/;"	m	class:v8::SealHandleScope	typeref:typename:int
prevent_child_fd	vendor/spdlog/include/spdlog/details/os.h	/^inline void prevent_child_fd(FILE *f)$/;"	f	namespace:spdlog::details::os	typeref:typename:void
print	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^inline void print(rgb fd, rgb bg, string_view format_str, const Args &... args)$/;"	f	typeref:typename:void
print	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^inline void print(rgb fd, string_view format_str, const Args &... args)$/;"	f	typeref:typename:void
print	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^inline void print(std::FILE *f, string_view format_str, const Args & ... args) {$/;"	f	typeref:typename:void
print	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^inline void print(std::FILE *f, wstring_view format_str,$/;"	f	typeref:typename:void
print	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^inline void print(string_view format_str, const Args & ... args) {$/;"	f	typeref:typename:void
print	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^inline void print(wstring_view format_str, const Args & ... args) {$/;"	f	typeref:typename:void
print	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    print(String format_str, const Args & ... args) {$/;"	f	typeref:typename:std::enable_if<internal::is_compile_string<String>::value>::type
print	vendor/spdlog/include/spdlog/fmt/bundled/ostream.h	/^inline void print(std::ostream &os, string_view format_str,$/;"	f	typeref:typename:void
print	vendor/spdlog/include/spdlog/fmt/bundled/ostream.h	/^inline void print(std::wostream &os, wstring_view format_str,$/;"	f	typeref:typename:void
print	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  inline void print(string_view format_str, const Args & ... args) {$/;"	f	class:buffered_file	typeref:typename:void
print	vendor/spdlog/tests/catch.hpp	/^            void print() const {$/;"	f	class:Catch::ConsoleReporter::AssertionPrinter	typeref:typename:void
print	vendor/spdlog/tests/catch.hpp	/^            void print() {$/;"	f	class:Catch::CompactReporter::AssertionPrinter	typeref:typename:void
print	vendor/spdlog/tests/catch.hpp	/^      static void print( const Tuple& tuple, std::ostream& os )$/;"	f	struct:Catch::TupleDetail::ElementPrinter	typeref:typename:void
print	vendor/spdlog/tests/catch.hpp	/^      static void print( const Tuple&, std::ostream& ) {}$/;"	f	struct:Catch::TupleDetail::ElementPrinter	typeref:typename:void
printClosedHeader	vendor/spdlog/tests/catch.hpp	/^        void printClosedHeader( std::string const& _name ) {$/;"	f	struct:Catch::ConsoleReporter	typeref:typename:void
printExpressionWas	vendor/spdlog/tests/catch.hpp	/^            void printExpressionWas() {$/;"	f	class:Catch::CompactReporter::AssertionPrinter	typeref:typename:void
printHeaderString	vendor/spdlog/tests/catch.hpp	/^        void printHeaderString( std::string const& _string, std::size_t indent = 0 ) {$/;"	f	struct:Catch::ConsoleReporter	typeref:typename:void
printInfoMessages	vendor/spdlog/tests/catch.hpp	/^            bool printInfoMessages;$/;"	m	class:Catch::CompactReporter::AssertionPrinter	typeref:typename:bool
printInfoMessages	vendor/spdlog/tests/catch.hpp	/^            bool printInfoMessages;$/;"	m	class:Catch::ConsoleReporter::AssertionPrinter	typeref:typename:bool
printIssue	vendor/spdlog/tests/catch.hpp	/^            void printIssue( std::string issue ) const {$/;"	f	class:Catch::CompactReporter::AssertionPrinter	typeref:typename:void
printMessage	vendor/spdlog/tests/catch.hpp	/^            void printMessage() const {$/;"	f	class:Catch::ConsoleReporter::AssertionPrinter	typeref:typename:void
printMessage	vendor/spdlog/tests/catch.hpp	/^            void printMessage() {$/;"	f	class:Catch::CompactReporter::AssertionPrinter	typeref:typename:void
printOpenHeader	vendor/spdlog/tests/catch.hpp	/^        void printOpenHeader( std::string const& _name ) {$/;"	f	struct:Catch::ConsoleReporter	typeref:typename:void
printOriginalExpression	vendor/spdlog/tests/catch.hpp	/^            void printOriginalExpression() const {$/;"	f	class:Catch::CompactReporter::AssertionPrinter	typeref:typename:void
printOriginalExpression	vendor/spdlog/tests/catch.hpp	/^            void printOriginalExpression() const {$/;"	f	class:Catch::ConsoleReporter::AssertionPrinter	typeref:typename:void
printReconstructedExpression	vendor/spdlog/tests/catch.hpp	/^            void printReconstructedExpression() const {$/;"	f	class:Catch::CompactReporter::AssertionPrinter	typeref:typename:void
printReconstructedExpression	vendor/spdlog/tests/catch.hpp	/^            void printReconstructedExpression() const {$/;"	f	class:Catch::ConsoleReporter::AssertionPrinter	typeref:typename:void
printRemainingMessages	vendor/spdlog/tests/catch.hpp	/^            void printRemainingMessages( Colour::Code colour = dimColour() ) {$/;"	f	class:Catch::CompactReporter::AssertionPrinter	typeref:typename:void
printResultType	vendor/spdlog/tests/catch.hpp	/^            void printResultType( Colour::Code colour, std::string passOrFail ) const {$/;"	f	class:Catch::CompactReporter::AssertionPrinter	typeref:typename:void
printResultType	vendor/spdlog/tests/catch.hpp	/^            void printResultType() const {$/;"	f	class:Catch::ConsoleReporter::AssertionPrinter	typeref:typename:void
printSourceInfo	vendor/spdlog/tests/catch.hpp	/^            void printSourceInfo() const {$/;"	f	class:Catch::CompactReporter::AssertionPrinter	typeref:typename:void
printSourceInfo	vendor/spdlog/tests/catch.hpp	/^            void printSourceInfo() const {$/;"	f	class:Catch::ConsoleReporter::AssertionPrinter	typeref:typename:void
printSummaryDivider	vendor/spdlog/tests/catch.hpp	/^        void printSummaryDivider() {$/;"	f	struct:Catch::ConsoleReporter	typeref:typename:void
printSummaryRow	vendor/spdlog/tests/catch.hpp	/^        void printSummaryRow( std::string const& label, std::vector<SummaryColumn> const& cols, /;"	f	struct:Catch::ConsoleReporter	typeref:typename:void
printTestCaseAndSectionHeader	vendor/spdlog/tests/catch.hpp	/^        void printTestCaseAndSectionHeader() {$/;"	f	struct:Catch::ConsoleReporter	typeref:typename:void
printTotals	vendor/spdlog/tests/catch.hpp	/^        void printTotals( Totals const& totals ) {$/;"	f	struct:Catch::ConsoleReporter	typeref:typename:void
printTotals	vendor/spdlog/tests/catch.hpp	/^        void printTotals( const Totals& totals ) const {$/;"	f	struct:Catch::CompactReporter	typeref:typename:void
printTotalsDivider	vendor/spdlog/tests/catch.hpp	/^        void printTotalsDivider( Totals const& totals ) {$/;"	f	struct:Catch::ConsoleReporter	typeref:typename:void
print_ccode_	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    void print_ccode_(const std::string &color_code)$/;"	f	class:spdlog::sinks::ansicolor_sink	typeref:typename:void
print_range_	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    void print_range_(const fmt::memory_buffer &formatted, size_t start, size_t end)$/;"	f	class:spdlog::sinks::ansicolor_sink	typeref:typename:void
print_range_	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    void print_range_(const fmt::memory_buffer &formatted, size_t start, size_t end)$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:void
print_rgb	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^inline void print_rgb(rgb fd, string_view format_str, const Args &... args)$/;"	f	typeref:typename:void
printf	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^inline int printf(string_view format_str, const Args & ... args) {$/;"	f	typeref:typename:int
printf	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^inline int printf(wstring_view format_str, const Args & ... args) {$/;"	f	typeref:typename:int
printf	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^void printf(internal::basic_buffer<Char> &buf, basic_string_view<Char> format,$/;"	f	typeref:typename:void
printf_arg_formatter	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  printf_arg_formatter(internal::basic_buffer<char_type> &buffer,$/;"	f	class:printf_arg_formatter
printf_arg_formatter	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^class printf_arg_formatter:$/;"	c
printf_args	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^typedef basic_format_args<printf_context<internal::buffer>::type> printf_args;$/;"	t	typeref:typename:basic_format_args<printf_context<internal::buffer>::type>
printf_context	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^struct printf_context {$/;"	s
printf_formatter	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^struct printf_formatter {$/;"	s
printf_precision_handler	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^class printf_precision_handler: public function<int> {$/;"	c	namespace:internal
printf_width_handler	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  explicit printf_width_handler(format_specs &spec) : spec_(spec) {}$/;"	f	class:internal::printf_width_handler
printf_width_handler	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^class printf_width_handler: public function<unsigned> {$/;"	c	namespace:internal
priorities_	vendor/spdlog/include/spdlog/sinks/syslog_sink.h	/^    std::array<int, 7> priorities_;$/;"	m	class:spdlog::sinks::syslog_sink	typeref:typename:std::array<int,7>
priority_tag	dependencies/include/nlohmann/json.hpp	/^template<> struct priority_tag<0> {};$/;"	s	namespace:nlohmann::detail
priority_tag	dependencies/include/nlohmann/json.hpp	/^template<unsigned N> struct priority_tag : priority_tag < N - 1 > {};$/;"	s	namespace:nlohmann::detail
priv	dependencies/include/SFML/Audio/SoundFileFactory.inl	/^namespace priv$/;"	n	namespace:sf	file:
priv	dependencies/include/SFML/Graphics/Glsl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	dependencies/include/SFML/Graphics/RenderTexture.hpp	/^namespace priv$/;"	n	namespace:sf
priv	dependencies/include/SFML/System/FileInputStream.hpp	/^namespace priv$/;"	n	namespace:sf
priv	dependencies/include/SFML/System/Mutex.hpp	/^namespace priv$/;"	n	namespace:sf
priv	dependencies/include/SFML/System/Thread.hpp	/^namespace priv$/;"	n	namespace:sf
priv	dependencies/include/SFML/System/Thread.inl	/^namespace priv$/;"	n	file:
priv	dependencies/include/SFML/System/ThreadLocal.hpp	/^namespace priv$/;"	n	namespace:sf
priv	dependencies/include/SFML/Window/Context.hpp	/^namespace priv$/;"	n	namespace:sf
priv	dependencies/include/SFML/Window/Cursor.hpp	/^namespace priv$/;"	n	namespace:sf
priv	dependencies/include/SFML/Window/Window.hpp	/^namespace priv$/;"	n	namespace:sf
private_	dependencies/include/v8.h	/^  PrivateData* private_;$/;"	m	class:v8::PropertyDescriptor	typeref:typename:PrivateData *
private_	dependencies/include/v8.h	/^  PrivateData* private_;$/;"	m	class:v8::ValueDeserializer	typeref:typename:PrivateData *
private_	dependencies/include/v8.h	/^  PrivateData* private_;$/;"	m	class:v8::ValueSerializer	typeref:typename:PrivateData *
processName	vendor/spdlog/tests/catch.hpp	/^        std::string processName;$/;"	m	struct:Catch::ConfigData	typeref:typename:std::string
process_next_msg_	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    bool process_next_msg_()$/;"	f	class:spdlog::details::thread_pool	typeref:typename:bool
productId	dependencies/include/SFML/Window/Joystick.hpp	/^        unsigned int productId; \/\/\/< Product identifier$/;"	m	struct:sf::Joystick::Identification	typeref:typename:unsigned int
project_config	vendor/spdlog/CMakeLists.txt	/^set(project_config "${CMAKE_CURRENT_BINARY_DIR}\/${PROJECT_NAME}Config.cmake")$/;"	v
promise_	dependencies/include/v8.h	/^  Persistent<Promise, CopyablePersistentTraits<Promise>> promise_;$/;"	m	class:v8::WasmModuleObjectBuilderStreaming	typeref:typename:Persistent<Promise,CopyablePersistentTraits<Promise>>
promise_	dependencies/include/v8.h	/^  Persistent<Promise> promise_;$/;"	m	class:v8::WasmModuleObjectBuilderStreaming	typeref:typename:Persistent<Promise>
properties	vendor/spdlog/tests/catch.hpp	/^        SpecialProperties properties;$/;"	m	struct:Catch::TestCaseInfo	typeref:typename:SpecialProperties
protocol	dependencies/include/v8-inspector.h	/^namespace protocol {$/;"	n	namespace:v8_inspector
ptr	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline const void *ptr(const T *p) { return p; }$/;"	f	typeref:typename:const void *
ptr_	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  T *ptr_;$/;"	m	class:internal::basic_buffer	typeref:typename:T *
ptr_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  const Char *ptr_;$/;"	m	class:internal::null_terminating_iterator	typeref:typename:const Char *
purple	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    purple = 0x800080,                  \/\/ rgb(128,0,128)$/;"	e	enum:color
pushScopedMessage	vendor/spdlog/tests/catch.hpp	/^        virtual void pushScopedMessage( MessageInfo const& message ) {$/;"	f	class:Catch::RunContext	typeref:typename:void
push_back	vendor/spdlog/include/spdlog/details/circular_q.h	/^    void push_back(T &&item)$/;"	f	class:spdlog::details::circular_q	typeref:typename:void
push_back	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  void push_back(const T &value) {$/;"	f	class:internal::basic_buffer	typeref:typename:void
push_back	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  void push_back(value<Context> val) {$/;"	f	class:internal::arg_map	typeref:typename:void
push_cv_	vendor/spdlog/include/spdlog/details/mpmc_blocking_q.h	/^    std::condition_variable push_cv_;$/;"	m	class:spdlog::details::mpmc_blocking_queue	typeref:typename:std::condition_variable
q_	vendor/spdlog/include/spdlog/details/mpmc_blocking_q.h	/^    spdlog::details::circular_q<T> q_;$/;"	m	class:spdlog::details::mpmc_blocking_queue	typeref:typename:spdlog::details::circular_q<T>
q_	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    q_type q_;$/;"	m	class:spdlog::details::thread_pool	typeref:typename:q_type
q_size	vendor/spdlog/tests/test_mpmc_q.cpp	/^    size_t q_size = 0;$/;"	v	typeref:typename:size_t
q_size	vendor/spdlog/tests/test_mpmc_q.cpp	/^    size_t q_size = 100;$/;"	v	typeref:typename:size_t
q_size	vendor/spdlog/tests/test_mpmc_q.cpp	/^    size_t q_size = 10;$/;"	v	typeref:typename:size_t
q_size	vendor/spdlog/tests/test_mpmc_q.cpp	/^    size_t q_size = 1;$/;"	v	typeref:typename:size_t
q_type	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    using q_type = details::mpmc_blocking_queue<item_type>;$/;"	t	class:spdlog::details::thread_pool	typeref:typename:details::mpmc_blocking_queue<item_type>
qnxnto	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
qnxnto	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
query	dependencies/include/v8.h	/^  GenericNamedPropertyQueryCallback query;$/;"	m	struct:v8::NamedPropertyHandlerConfiguration	typeref:typename:GenericNamedPropertyQueryCallback
query	dependencies/include/v8.h	/^  IndexedPropertyQueryCallback query;$/;"	m	struct:v8::IndexedPropertyHandlerConfiguration	typeref:typename:IndexedPropertyQueryCallback
queue_mutex_	vendor/spdlog/include/spdlog/details/mpmc_blocking_q.h	/^    std::mutex queue_mutex_;$/;"	m	class:spdlog::details::mpmc_blocking_queue	typeref:typename:std::mutex
queue_size	vendor/spdlog/tests/test_async.cpp	/^    size_t queue_size = 128;$/;"	v	typeref:typename:size_t
queue_size	vendor/spdlog/tests/test_async.cpp	/^    size_t queue_size = 256;$/;"	v	typeref:typename:size_t
queue_size	vendor/spdlog/tests/test_async.cpp	/^    size_t queue_size = 4;$/;"	v	typeref:typename:size_t
quitMessageLoopOnPause	dependencies/include/v8-inspector.h	/^  virtual void quitMessageLoopOnPause() {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
r	dependencies/include/SFML/Graphics/Color.hpp	/^    Uint8 r; \/\/\/< Red component$/;"	m	class:sf::Color	typeref:typename:Uint8
r	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    uint8_t r;$/;"	m	struct:rgb	typeref:typename:uint8_t
r_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit r_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::r_formatter
r_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class r_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
range	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^                         typename FormatContext::char_type> range;$/;"	t	function:dynamic_formatter::format	typeref:typename:output_range<typename FormatContext::iterator,typename FormatContext::char_type>
range	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef Range range;$/;"	t	class:arg_formatter	typeref:typename:Range
range	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef back_insert_range<internal::buffer> range;$/;"	t	function:vformat_to	typeref:typename:back_insert_range<internal::buffer>
range	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef back_insert_range<internal::wbuffer> range;$/;"	t	function:vformat_to	typeref:typename:back_insert_range<internal::wbuffer>
range	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef output_range<OutputIt, char> range;$/;"	t	function:vformat_to	typeref:typename:output_range<OutputIt,char>
range	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef output_range<OutputIt, wchar_t> range;$/;"	t	function:vformat_to	typeref:typename:output_range<OutputIt,wchar_t>
range	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef typename ArgFormatter::range range;$/;"	t	struct:format_handler	typeref:typename:ArgFormatter::range
rangeToString	vendor/spdlog/tests/catch.hpp	/^    std::string rangeToString( InputIterator first, InputIterator last ) {$/;"	f	namespace:Catch::Detail	typeref:typename:std::string
range_length_limit	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const std::size_t range_length_limit =$/;"	m	struct:formatting_range	typeref:typename:FMT_CONSTEXPR_DECL const std::size_t
range_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^                         typename FormatContext::char_type> range_type;$/;"	t	function:formatter::format	typeref:typename:output_range<typename FormatContext::iterator,typename FormatContext::char_type>
raw	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    fmt::basic_memory_buffer<char, 176> raw;$/;"	m	struct:spdlog::details::async_msg	typeref:typename:fmt::basic_memory_buffer<char,176>
rawMemoryToString	vendor/spdlog/tests/catch.hpp	/^    inline std::string rawMemoryToString( const T& object ) {$/;"	f	namespace:Catch::Detail	typeref:typename:std::string
rawMemoryToString	vendor/spdlog/tests/catch.hpp	/^    std::string rawMemoryToString( const void *object, std::size_t size )$/;"	f	namespace:Catch::Detail	typeref:typename:std::string
re	vendor/spdlog/tests/test_file_logging.cpp	/^    std::regex re(R"(^daily_(19|20)\\d\\d-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])\\.txt$)");$/;"	v	typeref:typename:std::regex
react	vendor/spdlog/tests/catch.hpp	/^    void ResultBuilder::react() {$/;"	f	class:Catch::ResultBuilder	typeref:typename:void
rebecca_purple	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    rebecca_purple = 0x663399,          \/\/ rgb(102,51,153)$/;"	e	enum:color
rebuild	vendor/spdlog/bench/Makefile	/^rebuild: clean all$/;"	t
rebuild	vendor/spdlog/example/Makefile	/^rebuild: clean all$/;"	t
rebuild	vendor/spdlog/tests/Makefile	/^rebuild: clean tests$/;"	t
rebuild-debug	vendor/spdlog/example/Makefile	/^rebuild-debug: clean debug$/;"	t
reconstructExpression	vendor/spdlog/tests/catch.hpp	/^    std::string ResultBuilder::reconstructExpression() const {$/;"	f	class:Catch::ResultBuilder	typeref:typename:std::string
reconstructedExpression	vendor/spdlog/tests/catch.hpp	/^        std::string reconstructedExpression;$/;"	m	struct:Catch::AssertionResultData	typeref:typename:std::string
record_mode_	dependencies/include/libplatform/v8-tracing.h	/^  TraceRecordMode record_mode_;$/;"	m	class:v8::platform::tracing::TraceConfig	typeref:typename:TraceRecordMode
red	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    red = 0xFF0000,                     \/\/ rgb(255,0,0)$/;"	e	enum:color
red	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string red = "\\033[31m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
reference	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef T& reference;$/;"	t	class:internal::counting_iterator	typeref:typename:T &
reference	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef const Char& reference;$/;"	t	class:internal::null_terminating_iterator	typeref:typename:const Char &
reference	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef typename traits::reference reference;$/;"	t	class:internal::truncating_iterator	typeref:typename:traits::reference
registerReader	dependencies/include/SFML/Audio/SoundFileFactory.inl	/^void SoundFileFactory::registerReader()$/;"	f	class:sf::SoundFileFactory	typeref:typename:void
registerReporter	vendor/spdlog/tests/catch.hpp	/^            virtual void registerReporter( std::string const& name, IReporterFactory* factory ) /;"	f	class:Catch::__anon368216750610::RegistryHub	typeref:typename:void
registerReporter	vendor/spdlog/tests/catch.hpp	/^        void registerReporter( std::string const& name, IReporterFactory* factory ) {$/;"	f	class:Catch::ReporterRegistry	typeref:typename:void
registerTest	vendor/spdlog/tests/catch.hpp	/^            virtual void registerTest( TestCase const& testInfo ) {$/;"	f	class:Catch::__anon368216750610::RegistryHub	typeref:typename:void
registerTest	vendor/spdlog/tests/catch.hpp	/^        virtual void registerTest( TestCase const& testCase ) {$/;"	f	class:Catch::TestRegistry	typeref:typename:void
registerTestCase	vendor/spdlog/tests/catch.hpp	/^    void AutoReg::registerTestCase( ITestCase* testCase,$/;"	f	class:Catch::AutoReg	typeref:typename:void
registerTestMethods	vendor/spdlog/tests/catch.hpp	/^    inline size_t registerTestMethods() {$/;"	f	namespace:Catch	typeref:typename:size_t
registerTranslator	vendor/spdlog/tests/catch.hpp	/^            virtual void registerTranslator( const IExceptionTranslator* translator ) {$/;"	f	class:Catch::__anon368216750610::RegistryHub	typeref:typename:void
registerTranslator	vendor/spdlog/tests/catch.hpp	/^        virtual void registerTranslator( const IExceptionTranslator* translator ) {$/;"	f	class:Catch::ExceptionTranslatorRegistry	typeref:typename:void
registerWriter	dependencies/include/SFML/Audio/SoundFileFactory.inl	/^void SoundFileFactory::registerWriter()$/;"	f	class:sf::SoundFileFactory	typeref:typename:void
register_logger	vendor/spdlog/include/spdlog/details/registry.h	/^    void register_logger(std::shared_ptr<logger> new_logger)$/;"	f	class:spdlog::details::registry	typeref:typename:void
register_logger	vendor/spdlog/include/spdlog/spdlog.h	/^inline void register_logger(std::shared_ptr<logger> logger)$/;"	f	namespace:spdlog	typeref:typename:void
register_logger_	vendor/spdlog/include/spdlog/details/registry.h	/^    void register_logger_(std::shared_ptr<logger> new_logger)$/;"	f	class:spdlog::details::registry	typeref:typename:void
registry	vendor/spdlog/include/spdlog/details/registry.h	/^    registry()$/;"	f	class:spdlog::details::registry
registry	vendor/spdlog/include/spdlog/details/registry.h	/^class registry$/;"	c	namespace:spdlog::details
rejected	dependencies/include/v8.h	/^    bool rejected;$/;"	m	struct:v8::ScriptCompiler::CachedData	typeref:typename:bool
release	vendor/spdlog/tests/catch.hpp	/^        virtual void release() const {$/;"	f	struct:Catch::SharedImpl	typeref:typename:void
release	vendor/spdlog/tests/catch.hpp	/^    void Stream::release() {$/;"	f	class:Catch::Stream	typeref:typename:void
remove	vendor/spdlog/include/spdlog/details/os.h	/^inline int remove(const filename_t &filename) SPDLOG_NOEXCEPT$/;"	f	namespace:spdlog::details::os	typeref:typename:int
remove_prefix	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void remove_prefix(size_t n) {$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR void
remove_sink	vendor/spdlog/include/spdlog/sinks/dist_sink.h	/^    void remove_sink(std::shared_ptr<sink> sink)$/;"	f	class:spdlog::sinks::dist_sink	typeref:typename:void
rename	vendor/spdlog/include/spdlog/details/os.h	/^inline int rename(const filename_t &filename1, const filename_t &filename2) SPDLOG_NOEXCEPT$/;"	f	namespace:spdlog::details::os	typeref:typename:int
rename_file	vendor/spdlog/include/spdlog/sinks/rotating_file_sink.h	/^    bool rename_file(const filename_t &src_filename, const filename_t &target_filename)$/;"	f	class:spdlog::sinks::rotating_file_sink	typeref:typename:bool
render	src/Game.cpp	/^void Game::render(){$/;"	f	class:Game	typeref:typename:void
renderer	src/Game.hpp	/^  SDL_Renderer *renderer;$/;"	m	class:Game	typeref:typename:SDL_Renderer *
reopen	vendor/spdlog/include/spdlog/details/file_helper.h	/^    void reopen(bool truncate)$/;"	f	class:spdlog::details::file_helper	typeref:typename:void
replaceInPlace	vendor/spdlog/tests/catch.hpp	/^    bool replaceInPlace( std::string& str, std::string const& replaceThis, std::string const& wi/;"	f	namespace:Catch	typeref:typename:bool
report_error	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^void report_error(FormatFunc func, int error_code,$/;"	f	namespace:__anon3d87c0370110	typeref:typename:void
report_system_error	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void report_system_error($/;"	f	typeref:typename:FMT_FUNC void
report_windows_error	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void report_windows_error($/;"	f	typeref:typename:FMT_FUNC void
reporterName	vendor/spdlog/tests/catch.hpp	/^        std::string reporterName;$/;"	m	struct:Catch::ConfigData	typeref:typename:std::string
require_numeric_argument	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void require_numeric_argument() {$/;"	f	class:internal::specs_checker	typeref:typename:FMT_CONSTEXPR void
require_wchar	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^inline void require_wchar() {$/;"	f	namespace:internal	typeref:typename:void
reserve	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  void reserve(std::size_t new_capacity) {$/;"	f	class:internal::basic_buffer	typeref:typename:void
reserve	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    reserve(std::back_insert_iterator<Container> &it, std::size_t n) {$/;"	f	namespace:internal	typeref:typename:std::enable_if<is_contiguous<Container>::value,typename checked<typename Container::value_type>::type>::type
reserve	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  auto reserve(std::size_t n) -> decltype(internal::reserve(out_, n)) {$/;"	f	class:basic_writer	typeref:typename:decltype (internal::reserve (out_,n))
reserve	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline Iterator &reserve(Iterator &it, std::size_t) { return it; }$/;"	f	namespace:internal	typeref:typename:Iterator &
reset	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string reset = "\\033[m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
reset	vendor/spdlog/tests/catch.hpp	/^		void reset() {}$/;"	f	struct:Catch::FatalConditionHandler	typeref:typename:void
reset	vendor/spdlog/tests/catch.hpp	/^        void reset() {$/;"	f	class:Catch::Option	typeref:typename:void
reset	vendor/spdlog/tests/catch.hpp	/^        void reset() {$/;"	f	class:Catch::Ptr	typeref:typename:void
reset	vendor/spdlog/tests/catch.hpp	/^        void reset() {$/;"	f	struct:Catch::FatalConditionHandler	typeref:typename:void
reset	vendor/spdlog/tests/catch.hpp	/^        void reset() {$/;"	f	struct:Catch::LazyStat	typeref:typename:void
resize	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  void resize(std::size_t new_size) {$/;"	f	class:internal::basic_buffer	typeref:typename:void
resourceNameToUrl	dependencies/include/v8-inspector.h	/^  virtual std::unique_ptr<StringBuffer> resourceNameToUrl($/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:std::unique_ptr<StringBuffer>
resource_column_offset	dependencies/include/v8.h	/^    Local<Integer> resource_column_offset;$/;"	m	class:v8::ScriptCompiler::Source	typeref:typename:Local<Integer>
resource_column_offset_	dependencies/include/v8.h	/^  Local<Integer> resource_column_offset_;$/;"	m	class:v8::ScriptOrigin	typeref:typename:Local<Integer>
resource_line_offset	dependencies/include/v8.h	/^    Local<Integer> resource_line_offset;$/;"	m	class:v8::ScriptCompiler::Source	typeref:typename:Local<Integer>
resource_line_offset_	dependencies/include/v8.h	/^  Local<Integer> resource_line_offset_;$/;"	m	class:v8::ScriptOrigin	typeref:typename:Local<Integer>
resource_name	dependencies/include/v8.h	/^    Local<Value> resource_name;$/;"	m	class:v8::ScriptCompiler::Source	typeref:typename:Local<Value>
resource_name_	dependencies/include/v8.h	/^  Local<Value> resource_name_;$/;"	m	class:v8::ScriptOrigin	typeref:typename:Local<Value>
resource_options	dependencies/include/v8.h	/^    ScriptOriginOptions resource_options;$/;"	m	class:v8::ScriptCompiler::Source	typeref:typename:ScriptOriginOptions
result	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  struct result { typedef Result type; };$/;"	s	struct:internal::function
result	vendor/spdlog/include/spdlog/fmt/bundled/ostream.h	/^  typedef decltype(test<T>(0)) result;$/;"	t	class:internal::is_streamable
result	vendor/spdlog/tests/catch.hpp	/^            AssertionResult const& result;$/;"	m	class:Catch::CompactReporter::AssertionPrinter	typeref:typename:AssertionResult const &
result	vendor/spdlog/tests/catch.hpp	/^            AssertionResult const& result;$/;"	m	class:Catch::ConsoleReporter::AssertionPrinter	typeref:typename:AssertionResult const &
resultDisposition	vendor/spdlog/tests/catch.hpp	/^        ResultDisposition::Flags resultDisposition;$/;"	m	struct:Catch::AssertionInfo	typeref:typename:ResultDisposition::Flags
resultType	vendor/spdlog/tests/catch.hpp	/^        ResultWas::OfType resultType;$/;"	m	struct:Catch::AssertionResultData	typeref:typename:ResultWas::OfType
result_of	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct result_of<F(Args...)> {$/;"	s	namespace:internal
reverse	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string reverse = "\\033[7m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
rgb	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    FMT_CONSTEXPR_DECL rgb()$/;"	f	struct:rgb	typeref:typename:FMT_CONSTEXPR_DECL
rgb	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    FMT_CONSTEXPR_DECL rgb(uint32_t hex)$/;"	f	struct:rgb	typeref:typename:FMT_CONSTEXPR_DECL
rgb	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    FMT_CONSTEXPR_DECL rgb(uint8_t r_, uint8_t g_, uint8_t b_)$/;"	f	struct:rgb	typeref:typename:FMT_CONSTEXPR_DECL
rgb	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^struct rgb$/;"	s
rhs	vendor/spdlog/tests/catch.hpp	/^            std::string lhs, rhs, op;$/;"	m	struct:Catch::ResultBuilder::ExprComponents	typeref:typename:std::string
right	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^        right,$/;"	e	enum:spdlog::details::padding_info::pad_side
rngSeed	vendor/spdlog/tests/catch.hpp	/^        unsigned int rngSeed;$/;"	m	struct:Catch::ConfigData	typeref:typename:unsigned int
rngSeed	vendor/spdlog/tests/catch.hpp	/^        virtual unsigned int rngSeed() const    { return m_data.rngSeed; }$/;"	f	class:Catch::Config	typeref:typename:unsigned int
rosy_brown	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    rosy_brown = 0xBC8F8F,              \/\/ rgb(188,143,143)$/;"	e	enum:color
rotate_	vendor/spdlog/include/spdlog/sinks/rotating_file_sink.h	/^    void rotate_()$/;"	f	class:spdlog::sinks::rotating_file_sink	typeref:typename:void
rotating_example	vendor/spdlog/example/example.cpp	/^void rotating_example()$/;"	f	typeref:typename:void
rotating_file_sink	vendor/spdlog/include/spdlog/sinks/rotating_file_sink.h	/^    rotating_file_sink(filename_t base_filename, std::size_t max_size, std::size_t max_files)$/;"	f	class:spdlog::sinks::rotating_file_sink
rotating_file_sink	vendor/spdlog/include/spdlog/sinks/rotating_file_sink.h	/^class rotating_file_sink final : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
rotating_file_sink_mt	vendor/spdlog/include/spdlog/sinks/rotating_file_sink.h	/^using rotating_file_sink_mt = rotating_file_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:rotating_file_sink<std::mutex>
rotating_file_sink_st	vendor/spdlog/include/spdlog/sinks/rotating_file_sink.h	/^using rotating_file_sink_st = rotating_file_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:rotating_file_sink<details::null_mutex>
rotating_logger_mt	vendor/spdlog/include/spdlog/sinks/rotating_file_sink.h	/^inline std::shared_ptr<logger> rotating_logger_mt($/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
rotating_logger_st	vendor/spdlog/include/spdlog/sinks/rotating_file_sink.h	/^inline std::shared_ptr<logger> rotating_logger_st($/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
rotation_h_	vendor/spdlog/include/spdlog/sinks/daily_file_sink.h	/^    int rotation_h_;$/;"	m	class:spdlog::sinks::daily_file_sink	typeref:typename:int
rotation_m_	vendor/spdlog/include/spdlog/sinks/daily_file_sink.h	/^    int rotation_m_;$/;"	m	class:spdlog::sinks::daily_file_sink	typeref:typename:int
rotation_tp_	vendor/spdlog/include/spdlog/sinks/daily_file_sink.h	/^    log_clock::time_point rotation_tp_;$/;"	m	class:spdlog::sinks::daily_file_sink	typeref:typename:log_clock::time_point
round	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void round(char *buffer, size_t &size, int &exp,$/;"	f	namespace:internal	typeref:typename:FMT_FUNC void
rows	dependencies/include/SFML/Graphics/Font.hpp	/^        std::vector<Row> rows;    \/\/\/< List containing the position of all the existing rows$/;"	m	struct:sf::Font::Page	typeref:typename:std::vector<Row>
rows	vendor/spdlog/tests/catch.hpp	/^            std::vector<std::string> rows;$/;"	m	struct:Catch::ConsoleReporter::SummaryColumn	typeref:typename:std::vector<std::string>
royal_blue	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    royal_blue = 0x4169E1,              \/\/ rgb(65,105,225)$/;"	e	enum:color
run	dependencies/include/SFML/System/Thread.inl	/^    virtual void run() {(m_object->*m_function)();}$/;"	f	struct:priv::ThreadMemberFunc	typeref:typename:void	file:
run	dependencies/include/SFML/System/Thread.inl	/^    virtual void run() {m_function(m_arg);}$/;"	f	struct:priv::ThreadFunctorWithArg	typeref:typename:void	file:
run	dependencies/include/SFML/System/Thread.inl	/^    virtual void run() {m_functor();}$/;"	f	struct:priv::ThreadFunctor	typeref:typename:void	file:
run	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^    int run() {$/;"	f	class:__anon3d87c0370110::safe_strerror::dispatcher	typeref:typename:int
run	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^    bool run() {$/;"	f	struct:gmtime::dispatcher	typeref:typename:bool
run	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^    bool run() {$/;"	f	struct:localtime::dispatcher	typeref:typename:bool
run	vendor/spdlog/tests/catch.hpp	/^        int run( int argc, char* const argv[] ) {$/;"	f	class:Catch::Session	typeref:typename:int
run	vendor/spdlog/tests/catch.hpp	/^        int run() {$/;"	f	class:Catch::Session	typeref:typename:int
runCurrentTest	vendor/spdlog/tests/catch.hpp	/^        void runCurrentTest( std::string& redirectedCout, std::string& redirectedCerr ) {$/;"	f	class:Catch::RunContext	typeref:typename:void
runIfWaitingForDebugger	dependencies/include/v8-inspector.h	/^  virtual void runIfWaitingForDebugger(int contextGroupId) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
runInfo	vendor/spdlog/tests/catch.hpp	/^        TestRunInfo runInfo;$/;"	m	struct:Catch::TestRunStats	typeref:typename:TestRunInfo
runMessageLoopOnPause	dependencies/include/v8-inspector.h	/^  virtual void runMessageLoopOnPause(int contextGroupId) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
runOrder	vendor/spdlog/tests/catch.hpp	/^        RunTests::InWhatOrder runOrder;$/;"	m	struct:Catch::ConfigData	typeref:typename:RunTests::InWhatOrder
runOrder	vendor/spdlog/tests/catch.hpp	/^        virtual RunTests::InWhatOrder runOrder() const  { return m_data.runOrder; }$/;"	f	class:Catch::Config	typeref:typename:RunTests::InWhatOrder
runState	vendor/spdlog/tests/catch.hpp	/^        RunState runState() const { return m_runState; }$/;"	f	class:Catch::SectionTracking::TrackedSection	typeref:typename:RunState
runTest	vendor/spdlog/tests/catch.hpp	/^        Totals runTest( TestCase const& testCase ) {$/;"	f	class:Catch::RunContext	typeref:typename:Totals
runTests	vendor/spdlog/tests/catch.hpp	/^        Totals runTests() {$/;"	f	class:Catch::Runner	typeref:typename:Totals
running	src/Game.hpp	/^  bool running() { return isRunning ;}$/;"	f	class:Game	typeref:typename:bool
rv	vendor/spdlog/tests/test_mpmc_q.cpp	/^    auto rv = q.dequeue_for(popped_item, milliseconds::zero());$/;"	v	typeref:typename:auto
rv	vendor/spdlog/tests/test_mpmc_q.cpp	/^    auto rv = q.dequeue_for(popped_item, wait_ms);$/;"	v	typeref:typename:auto
s	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    const Char *s;$/;"	m	struct:basic_writer::str_writer	typeref:typename:const Char *
s	vendor/spdlog/tests/catch.hpp	/^        static std::ostream &s;$/;"	m	struct:Catch::Detail::IsStreamInsertable	typeref:typename:std::ostream &
sRgbCapable	dependencies/include/SFML/Window/ContextSettings.hpp	/^    bool         sRgbCapable;       \/\/\/< Whether the context framebuffer is sRGB capable$/;"	m	struct:sf::ContextSettings	typeref:typename:bool
s_readers	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^    static ReaderFactoryArray s_readers; \/\/\/< List of all registered readers$/;"	m	class:sf::SoundFileFactory	typeref:typename:ReaderFactoryArray
s_writers	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^    static WriterFactoryArray s_writers; \/\/\/< List of all registered writers$/;"	m	class:sf::SoundFileFactory	typeref:typename:WriterFactoryArray
saddle_brown	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    saddle_brown = 0x8B4513,            \/\/ rgb(139,69,19)$/;"	e	enum:color
safe_strerror	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^int safe_strerror($/;"	f	namespace:__anon3d87c0370110	typeref:typename:int
salmon	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    salmon = 0xFA8072,                  \/\/ rgb(250,128,114)$/;"	e	enum:color
sampleCount	dependencies/include/SFML/Audio/SoundFileReader.hpp	/^        Uint64       sampleCount;  \/\/\/< Total number of samples in the file$/;"	m	struct:sf::SoundFileReader::Info	typeref:typename:Uint64
sampleCount	dependencies/include/SFML/Audio/SoundStream.hpp	/^        std::size_t  sampleCount; \/\/\/< Number of samples pointed by Samples$/;"	m	struct:sf::SoundStream::Chunk	typeref:typename:std::size_t
sampleRate	dependencies/include/SFML/Audio/SoundFileReader.hpp	/^        unsigned int sampleRate;   \/\/\/< Samples rate of the sound, in samples per second$/;"	m	struct:sf::SoundFileReader::Info	typeref:typename:unsigned int
sample_id	dependencies/include/v8-profiler.h	/^    uint64_t sample_id;$/;"	m	struct:v8::AllocationProfile::Sample	typeref:typename:uint64_t
samples	dependencies/include/SFML/Audio/SoundStream.hpp	/^        const Int16* samples;     \/\/\/< Pointer to the audio samples$/;"	m	struct:sf::SoundStream::Chunk	typeref:typename:const Int16 *
sandy_brown	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    sandy_brown = 0xF4A460,             \/\/ rgb(244,164,96)$/;"	e	enum:color
scale	vendor/spdlog/tests/catch.hpp	/^        Approx& scale( double newScale ) {$/;"	f	class:Catch::Detail::Approx	typeref:typename:Approx &
scope	dependencies/include/libplatform/v8-tracing.h	/^  const char* scope() const { return scope_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:const char *
scope_	dependencies/include/libplatform/v8-tracing.h	/^  const char* scope_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:const char *
scopedElement	vendor/spdlog/tests/catch.hpp	/^        ScopedElement scopedElement( std::string const& name ) {$/;"	f	class:Catch::XmlWriter	typeref:typename:ScopedElement
scoped_pad	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    scoped_pad(size_t wrapped_size, padding_info &padinfo, fmt::memory_buffer &dest)$/;"	f	class:spdlog::details::scoped_pad
scoped_pad	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    scoped_pad(spdlog::string_view_t txt, padding_info &padinfo, fmt::memory_buffer &dest)$/;"	f	class:spdlog::details::scoped_pad
scoped_pad	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class scoped_pad$/;"	c	namespace:spdlog::details
script_id	dependencies/include/v8-profiler.h	/^    int script_id;$/;"	m	struct:v8::AllocationProfile::Node	typeref:typename:int
script_id	dependencies/include/v8-profiler.h	/^  int script_id;$/;"	m	struct:v8::CpuProfileDeoptFrame	typeref:typename:int
script_id_	dependencies/include/v8.h	/^  Local<Integer> script_id_;$/;"	m	class:v8::ScriptOrigin	typeref:typename:Local<Integer>
script_name	dependencies/include/v8-profiler.h	/^    Local<String> script_name;$/;"	m	struct:v8::AllocationProfile::Node	typeref:typename:Local<String>
sea_green	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    sea_green = 0x2E8B57,               \/\/ rgb(46,139,87)$/;"	e	enum:color
sea_shell	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    sea_shell = 0xFFF5EE,               \/\/ rgb(255,245,238)$/;"	e	enum:color
sectionEnded	vendor/spdlog/tests/catch.hpp	/^        virtual void sectionEnded( SectionInfo const& info, Counts const& prevAssertions, double/;"	f	class:Catch::RunContext	typeref:typename:void
sectionEnded	vendor/spdlog/tests/catch.hpp	/^        virtual void sectionEnded( SectionStats const& \/* _sectionStats *\/ ) {$/;"	f	struct:Catch::StreamingReporterBase	typeref:typename:void
sectionEnded	vendor/spdlog/tests/catch.hpp	/^        virtual void sectionEnded( SectionStats const& _sectionStats ) {$/;"	f	struct:Catch::ConsoleReporter	typeref:typename:void
sectionEnded	vendor/spdlog/tests/catch.hpp	/^        virtual void sectionEnded( SectionStats const& sectionStats ) {$/;"	f	class:Catch::XmlReporter	typeref:typename:void
sectionEnded	vendor/spdlog/tests/catch.hpp	/^        virtual void sectionEnded( SectionStats const& sectionStats ) {$/;"	f	struct:Catch::CumulativeReporterBase	typeref:typename:void
sectionEnded	vendor/spdlog/tests/catch.hpp	/^    void LegacyReporterAdapter::sectionEnded( SectionStats const& sectionStats ) {$/;"	f	class:Catch::LegacyReporterAdapter	typeref:typename:void
sectionInfo	vendor/spdlog/tests/catch.hpp	/^        SectionInfo sectionInfo;$/;"	m	struct:Catch::SectionStats	typeref:typename:SectionInfo
sectionStarted	vendor/spdlog/tests/catch.hpp	/^        virtual bool sectionStarted ($/;"	f	class:Catch::RunContext	typeref:typename:bool
sectionStarting	vendor/spdlog/tests/catch.hpp	/^        virtual void sectionStarting( SectionInfo const& _sectionInfo ) {$/;"	f	struct:Catch::ConsoleReporter	typeref:typename:void
sectionStarting	vendor/spdlog/tests/catch.hpp	/^        virtual void sectionStarting( SectionInfo const& _sectionInfo ) {$/;"	f	struct:Catch::StreamingReporterBase	typeref:typename:void
sectionStarting	vendor/spdlog/tests/catch.hpp	/^        virtual void sectionStarting( SectionInfo const& sectionInfo ) {$/;"	f	class:Catch::XmlReporter	typeref:typename:void
sectionStarting	vendor/spdlog/tests/catch.hpp	/^        virtual void sectionStarting( SectionInfo const& sectionInfo ) {$/;"	f	struct:Catch::CumulativeReporterBase	typeref:typename:void
sectionStarting	vendor/spdlog/tests/catch.hpp	/^    void LegacyReporterAdapter::sectionStarting( SectionInfo const& sectionInfo ) {$/;"	f	class:Catch::LegacyReporterAdapter	typeref:typename:void
self	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^      int_writer &self;$/;"	m	struct:basic_writer::int_writer::hex_writer	typeref:typename:int_writer &
sensor	dependencies/include/SFML/Window/Event.hpp	/^        SensorEvent           sensor;            \/\/\/< Sensor event parameters (Event::SensorC/;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:SensorEvent
sentinel	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef void sentinel;$/;"	t	class:output_range	typeref:typename:void
sep	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^      char_type sep;$/;"	m	struct:basic_writer::int_writer::num_writer	typeref:typename:char_type
sep	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  basic_string_view<Char> sep;$/;"	m	struct:arg_join	typeref:typename:basic_string_view<Char>
sep_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  basic_string_view<Char> sep_;$/;"	m	class:internal::add_thousands_sep	typeref:typename:basic_string_view<Char>
separators	vendor/spdlog/tests/catch.hpp	/^        std::string separators;$/;"	m	struct:Clara::Parser	typeref:typename:std::string
seq	dependencies/include/libplatform/v8-tracing.h	/^  uint32_t seq() const { return seq_; }$/;"	f	class:v8::platform::tracing::TraceBufferChunk	typeref:typename:uint32_t
seq_	dependencies/include/libplatform/v8-tracing.h	/^  uint32_t seq_;$/;"	m	class:v8::platform::tracing::TraceBufferChunk	typeref:typename:uint32_t
sequence	vendor/spdlog/tests/catch.hpp	/^        unsigned int sequence;$/;"	m	struct:Catch::MessageInfo	typeref:typename:unsigned int
set	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  void set(T *buf_data, std::size_t buf_capacity) FMT_NOEXCEPT {$/;"	f	class:internal::basic_buffer	typeref:typename:void
set	vendor/spdlog/tests/catch.hpp	/^            virtual void set( C& obj, std::string const& stringValue ) const {$/;"	f	struct:Clara::Detail::BoundBinaryFunction	typeref:typename:void
set	vendor/spdlog/tests/catch.hpp	/^            virtual void set( C& obj, std::string const& stringValue ) const {$/;"	f	struct:Clara::Detail::BoundUnaryFunction	typeref:typename:void
set	vendor/spdlog/tests/catch.hpp	/^            virtual void set( C& p, std::string const& stringValue ) const {$/;"	f	struct:Clara::Detail::BoundDataMember	typeref:typename:void
set	vendor/spdlog/tests/catch.hpp	/^            virtual void set( C& p, std::string const& stringValue ) const {$/;"	f	struct:Clara::Detail::BoundNullaryMethod	typeref:typename:void
set	vendor/spdlog/tests/catch.hpp	/^            virtual void set( C& p, std::string const& stringValue ) const {$/;"	f	struct:Clara::Detail::BoundUnaryMethod	typeref:typename:void
set	vendor/spdlog/tests/catch.hpp	/^            virtual void set( C&, std::string const& ) const {}$/;"	f	struct:Clara::Detail::NullBinder	typeref:typename:void
set	vendor/spdlog/tests/catch.hpp	/^            void set( ConfigT& config, std::string const& value ) const {$/;"	f	class:Clara::Detail::BoundArgFunction	typeref:typename:void
setColour	vendor/spdlog/tests/catch.hpp	/^        void setColour( const char* _escapeCode ) {$/;"	f	class:Catch::__anon368216750a10::PosixColourImpl	typeref:typename:void
setConfig	vendor/spdlog/tests/catch.hpp	/^        virtual void setConfig( Ptr<IConfig const> const& config ) {$/;"	f	class:Catch::Context	typeref:typename:void
setFileInfo	vendor/spdlog/tests/catch.hpp	/^    CompositeGenerator& setFileInfo( const char* fileInfo ) {$/;"	f	class:Catch::CompositeGenerator	typeref:typename:CompositeGenerator &
setFilename	vendor/spdlog/tests/catch.hpp	/^        void setFilename( std::string const& filename ) {$/;"	f	class:Catch::Config	typeref:typename:void
setFlag	vendor/spdlog/tests/catch.hpp	/^            virtual void setFlag( C& ) const {}$/;"	f	struct:Clara::Detail::NullBinder	typeref:typename:void
setFlag	vendor/spdlog/tests/catch.hpp	/^            virtual void setFlag( C& obj ) const {$/;"	f	struct:Clara::Detail::BoundBinaryFunction	typeref:typename:void
setFlag	vendor/spdlog/tests/catch.hpp	/^            virtual void setFlag( C& p ) const {$/;"	f	struct:Clara::Detail::BoundDataMember	typeref:typename:void
setFlag	vendor/spdlog/tests/catch.hpp	/^            virtual void setFlag( C& p ) const {$/;"	f	struct:Clara::Detail::BoundNullaryMethod	typeref:typename:void
setFlag	vendor/spdlog/tests/catch.hpp	/^            virtual void setFlag( C& p ) const {$/;"	f	struct:Clara::Detail::BoundUnaryFunction	typeref:typename:void
setFlag	vendor/spdlog/tests/catch.hpp	/^            virtual void setFlag( C& p ) const {$/;"	f	struct:Clara::Detail::BoundUnaryMethod	typeref:typename:void
setFlag	vendor/spdlog/tests/catch.hpp	/^            void setFlag( ConfigT& config ) const {$/;"	f	class:Clara::Detail::BoundArgFunction	typeref:typename:void
setIndent	vendor/spdlog/tests/catch.hpp	/^        TextAttributes& setIndent( std::size_t _value )         { indent = _value; return *this;/;"	f	struct:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes	typeref:typename:TextAttributes &
setIndent	vendor/spdlog/tests/catch.hpp	/^        TextAttributes& setIndent( std::size_t _value )         { indent = _value; return *this;/;"	f	struct:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes	typeref:typename:TextAttributes &
setInitialIndent	vendor/spdlog/tests/catch.hpp	/^        TextAttributes& setInitialIndent( std::size_t _value )  { initialIndent = _value; return/;"	f	struct:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes	typeref:typename:TextAttributes &
setInitialIndent	vendor/spdlog/tests/catch.hpp	/^        TextAttributes& setInitialIndent( std::size_t _value )  { initialIndent = _value; return/;"	f	struct:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes	typeref:typename:TextAttributes &
setLhs	vendor/spdlog/tests/catch.hpp	/^    ResultBuilder& ResultBuilder::setLhs( std::string const& lhs ) {$/;"	f	class:Catch::ResultBuilder	typeref:typename:ResultBuilder &
setOp	vendor/spdlog/tests/catch.hpp	/^    ResultBuilder& ResultBuilder::setOp( std::string const& op ) {$/;"	f	class:Catch::ResultBuilder	typeref:typename:ResultBuilder &
setOrder	vendor/spdlog/tests/catch.hpp	/^    inline void setOrder( ConfigData& config, std::string const& order ) {$/;"	f	namespace:Catch	typeref:typename:void
setPositionalArg	vendor/spdlog/tests/catch.hpp	/^        friend void setPositionalArg( Arg& arg, int position )$/;"	f	namespace:Clara	typeref:typename:void
setResultCapture	vendor/spdlog/tests/catch.hpp	/^        virtual void setResultCapture( IResultCapture* resultCapture ) {$/;"	f	class:Catch::Context	typeref:typename:void
setResultType	vendor/spdlog/tests/catch.hpp	/^    ResultBuilder& ResultBuilder::setResultType( ResultWas::OfType result ) {$/;"	f	class:Catch::ResultBuilder	typeref:typename:ResultBuilder &
setResultType	vendor/spdlog/tests/catch.hpp	/^    ResultBuilder& ResultBuilder::setResultType( bool result ) {$/;"	f	class:Catch::ResultBuilder	typeref:typename:ResultBuilder &
setRhs	vendor/spdlog/tests/catch.hpp	/^    ResultBuilder& ResultBuilder::setRhs( std::string const& rhs ) {$/;"	f	class:Catch::ResultBuilder	typeref:typename:ResultBuilder &
setRngSeed	vendor/spdlog/tests/catch.hpp	/^    inline void setRngSeed( ConfigData& config, std::string const& seed ) {$/;"	f	namespace:Catch	typeref:typename:void
setRunner	vendor/spdlog/tests/catch.hpp	/^        virtual void setRunner( IRunner* runner ) {$/;"	f	class:Catch::Context	typeref:typename:void
setShowDurations	vendor/spdlog/tests/catch.hpp	/^    inline void setShowDurations( ConfigData& config, bool _showDurations ) {$/;"	f	namespace:Catch	typeref:typename:void
setStream	vendor/spdlog/tests/catch.hpp	/^        void setStream( std::ostream& os ) {$/;"	f	class:Catch::XmlWriter	typeref:typename:void
setStreamBuf	vendor/spdlog/tests/catch.hpp	/^        void setStreamBuf( std::streambuf* buf ) {$/;"	f	class:Catch::Config	typeref:typename:void
setTabChar	vendor/spdlog/tests/catch.hpp	/^        TextAttributes& setTabChar( char _value )               { tabChar = _value; return *this/;"	f	struct:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes	typeref:typename:TextAttributes &
setTabChar	vendor/spdlog/tests/catch.hpp	/^        TextAttributes& setTabChar( char _value )               { tabChar = _value; return *this/;"	f	struct:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes	typeref:typename:TextAttributes &
setTextAttribute	vendor/spdlog/tests/catch.hpp	/^        void setTextAttribute( WORD _textAttribute ) {$/;"	f	class:Catch::__anon368216750910::Win32ColourImpl	typeref:typename:void
setThrowOnUnrecognisedTokens	vendor/spdlog/tests/catch.hpp	/^        CommandLine& setThrowOnUnrecognisedTokens( bool shouldThrow = true ) {$/;"	f	class:Clara::CommandLine	typeref:typename:CommandLine &
setVerbosity	vendor/spdlog/tests/catch.hpp	/^    inline void setVerbosity( ConfigData& config, int level ) {$/;"	f	namespace:Catch	typeref:typename:void
setWidth	vendor/spdlog/tests/catch.hpp	/^        TextAttributes& setWidth( std::size_t _value )          { width = _value; return *this; /;"	f	struct:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes	typeref:typename:TextAttributes &
setWidth	vendor/spdlog/tests/catch.hpp	/^        TextAttributes& setWidth( std::size_t _value )          { width = _value; return *this; /;"	f	struct:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes	typeref:typename:TextAttributes &
set_automatic_registration	vendor/spdlog/include/spdlog/details/registry.h	/^    void set_automatic_registration(bool automatic_regsistration)$/;"	f	class:spdlog::details::registry	typeref:typename:void
set_automatic_registration	vendor/spdlog/include/spdlog/spdlog.h	/^inline void set_automatic_registration(bool automatic_registation)$/;"	f	namespace:spdlog	typeref:typename:void
set_color	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    void set_color(level::level_enum color_level, const std::string &color)$/;"	f	class:spdlog::sinks::ansicolor_sink	typeref:typename:void
set_color	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    void set_color(level::level_enum level, WORD color)$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:void
set_console_attribs	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    WORD set_console_attribs(WORD attribs)$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:WORD
set_data	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  void set_data(const format_arg *args) { args_ = args; }$/;"	f	class:basic_format_args	typeref:typename:void
set_data	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  void set_data(const internal::value<Context> *values) { values_ = values; }$/;"	f	class:basic_format_args	typeref:typename:void
set_default_logger	vendor/spdlog/include/spdlog/details/registry.h	/^    void set_default_logger(std::shared_ptr<logger> new_default_logger)$/;"	f	class:spdlog::details::registry	typeref:typename:void
set_default_logger	vendor/spdlog/include/spdlog/spdlog.h	/^inline void set_default_logger(std::shared_ptr<spdlog::logger> default_logger)$/;"	f	namespace:spdlog	typeref:typename:void
set_delay	vendor/spdlog/tests/test_sink.h	/^    void set_delay(std::chrono::milliseconds delay)$/;"	f	class:spdlog::sinks::test_sink	typeref:typename:void
set_dynamic_spec	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void set_dynamic_spec($/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR void
set_error_handler	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_error_handler(spdlog::log_err_handler err_handler)$/;"	f	class:spdlog::logger	typeref:typename:void
set_error_handler	vendor/spdlog/include/spdlog/details/registry.h	/^    void set_error_handler(log_err_handler handler)$/;"	f	class:spdlog::details::registry	typeref:typename:void
set_error_handler	vendor/spdlog/include/spdlog/spdlog.h	/^inline void set_error_handler(log_err_handler handler)$/;"	f	namespace:spdlog	typeref:typename:void
set_formatter	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_formatter(std::unique_ptr<spdlog::formatter> f)$/;"	f	class:spdlog::logger	typeref:typename:void
set_formatter	vendor/spdlog/include/spdlog/details/registry.h	/^    void set_formatter(std::unique_ptr<formatter> formatter)$/;"	f	class:spdlog::details::registry	typeref:typename:void
set_formatter	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    void set_formatter(std::unique_ptr<spdlog::formatter> sink_formatter) override$/;"	f	class:spdlog::sinks::ansicolor_sink	typeref:typename:void
set_formatter	vendor/spdlog/include/spdlog/sinks/base_sink.h	/^    void set_formatter(std::unique_ptr<spdlog::formatter> sink_formatter) final$/;"	f	class:spdlog::sinks::base_sink	typeref:typename:void
set_formatter	vendor/spdlog/include/spdlog/sinks/stdout_sinks.h	/^    void set_formatter(std::unique_ptr<spdlog::formatter> sink_formatter) override$/;"	f	class:spdlog::sinks::stdout_sink	typeref:typename:void
set_formatter	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    void set_formatter(std::unique_ptr<spdlog::formatter> sink_formatter) override final$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:void
set_formatter	vendor/spdlog/include/spdlog/spdlog.h	/^inline void set_formatter(std::unique_ptr<spdlog::formatter> formatter)$/;"	f	namespace:spdlog	typeref:typename:void
set_formatter_	vendor/spdlog/include/spdlog/sinks/base_sink.h	/^    virtual void set_formatter_(std::unique_ptr<spdlog::formatter> sink_formatter)$/;"	f	class:spdlog::sinks::base_sink	typeref:typename:void
set_formatter_	vendor/spdlog/include/spdlog/sinks/dist_sink.h	/^    void set_formatter_(std::unique_ptr<spdlog::formatter> sink_formatter) override$/;"	f	class:spdlog::sinks::dist_sink	typeref:typename:void
set_level	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_level(spdlog::level::level_enum log_level)$/;"	f	class:spdlog::logger	typeref:typename:void
set_level	vendor/spdlog/include/spdlog/details/registry.h	/^    void set_level(level::level_enum log_level)$/;"	f	class:spdlog::details::registry	typeref:typename:void
set_level	vendor/spdlog/include/spdlog/sinks/sink.h	/^    void set_level(level::level_enum log_level)$/;"	f	class:spdlog::sinks::sink	typeref:typename:void
set_level	vendor/spdlog/include/spdlog/spdlog.h	/^inline void set_level(level::level_enum log_level)$/;"	f	namespace:spdlog	typeref:typename:void
set_pattern	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_pattern(std::string pattern, pattern_time_type time_type)$/;"	f	class:spdlog::logger	typeref:typename:void
set_pattern	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    void set_pattern(const std::string &pattern) final$/;"	f	class:spdlog::sinks::ansicolor_sink	typeref:typename:void
set_pattern	vendor/spdlog/include/spdlog/sinks/base_sink.h	/^    void set_pattern(const std::string &pattern) final$/;"	f	class:spdlog::sinks::base_sink	typeref:typename:void
set_pattern	vendor/spdlog/include/spdlog/sinks/stdout_sinks.h	/^    void set_pattern(const std::string &pattern) override$/;"	f	class:spdlog::sinks::stdout_sink	typeref:typename:void
set_pattern	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    void set_pattern(const std::string &pattern) override final$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:void
set_pattern	vendor/spdlog/include/spdlog/spdlog.h	/^inline void set_pattern(std::string pattern, pattern_time_type time_type = pattern_time_type::lo/;"	f	namespace:spdlog	typeref:typename:void
set_pattern_	vendor/spdlog/include/spdlog/sinks/base_sink.h	/^    virtual void set_pattern_(const std::string &pattern)$/;"	f	class:spdlog::sinks::base_sink	typeref:typename:void
set_pattern_	vendor/spdlog/include/spdlog/sinks/dist_sink.h	/^    void set_pattern_(const std::string &pattern) override$/;"	f	class:spdlog::sinks::dist_sink	typeref:typename:void
set_sinks	vendor/spdlog/include/spdlog/sinks/dist_sink.h	/^    void set_sinks(std::vector<std::shared_ptr<sink>> sinks)$/;"	f	class:spdlog::sinks::dist_sink	typeref:typename:void
set_tp	vendor/spdlog/include/spdlog/details/registry.h	/^    void set_tp(std::shared_ptr<thread_pool> tp)$/;"	f	class:spdlog::details::registry	typeref:typename:void
setter	dependencies/include/v8.h	/^  GenericNamedPropertySetterCallback setter;$/;"	m	struct:v8::NamedPropertyHandlerConfiguration	typeref:typename:GenericNamedPropertySetterCallback
setter	dependencies/include/v8.h	/^  IndexedPropertySetterCallback setter;$/;"	m	struct:v8::IndexedPropertyHandlerConfiguration	typeref:typename:IndexedPropertySetterCallback
sf	dependencies/include/SFML/Audio/AlResource.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/InputSoundFile.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/Listener.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/Music.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/OutputSoundFile.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/Sound.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/SoundBuffer.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/SoundBufferRecorder.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/SoundFileFactory.inl	/^namespace sf$/;"	n	file:
sf	dependencies/include/SFML/Audio/SoundFileReader.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/SoundFileWriter.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/SoundRecorder.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/SoundSource.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/SoundStream.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Config.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/BlendMode.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/CircleShape.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Color.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/ConvexShape.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Drawable.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Font.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Glsl.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Glyph.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Image.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Rect.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/RectangleShape.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/RenderStates.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/RenderTexture.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/RenderWindow.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Shader.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Shape.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Sprite.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Text.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Texture.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Transform.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Transformable.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Vertex.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/VertexArray.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/VertexBuffer.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/View.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Network/Ftp.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Network/Http.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Network/IpAddress.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Network/Packet.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Network/Socket.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Network/SocketHandle.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Network/SocketSelector.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Network/TcpListener.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Network/TcpSocket.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Network/UdpSocket.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/Clock.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/Err.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/FileInputStream.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/InputStream.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/Lock.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/MemoryInputStream.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/Mutex.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/NativeActivity.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/NonCopyable.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/Sleep.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/String.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/Thread.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/ThreadLocal.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/ThreadLocalPtr.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/ThreadLocalPtr.inl	/^namespace sf$/;"	n	file:
sf	dependencies/include/SFML/System/Time.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/Utf.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/Vector2.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/Vector3.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/Clipboard.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/Context.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/ContextSettings.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/Cursor.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/Event.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/GlResource.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/Joystick.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/Keyboard.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/Mouse.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/Sensor.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/Touch.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/VideoMode.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/Window.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/WindowHandle.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/WindowStyle.hpp	/^namespace sf$/;"	n
shader	dependencies/include/SFML/Graphics/RenderStates.hpp	/^    const Shader*  shader;    \/\/\/< Shader$/;"	m	class:sf::RenderStates	typeref:typename:const Shader *
shared_module_	dependencies/include/v8.h	/^    SharedModule shared_module_;$/;"	m	class:v8::WasmModuleObject::TransferrableModule	typeref:typename:SharedModule
shift	dependencies/include/SFML/Window/Event.hpp	/^        bool          shift;   \/\/\/< Is the Shift key pressed?$/;"	m	struct:sf::Event::KeyEvent	typeref:typename:bool
shortNames	vendor/spdlog/tests/catch.hpp	/^        std::vector<std::string> shortNames;$/;"	m	struct:Clara::OptionArgProperties	typeref:typename:std::vector<std::string>
short_level_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit short_level_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::short_level_formatter
short_level_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class short_level_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
short_level_names	vendor/spdlog/include/spdlog/common.h	/^static const char *short_level_names[]{"T", "D", "I", "W", "E", "C", "O"};$/;"	v	namespace:spdlog::level	typeref:typename:const char * []
shouldContinueOnFailure	vendor/spdlog/tests/catch.hpp	/^    inline bool shouldContinueOnFailure( int flags )    { return ( flags & ResultDisposition::Co/;"	f	namespace:Catch	typeref:typename:bool
shouldDebugBreak	vendor/spdlog/tests/catch.hpp	/^        bool shouldDebugBreak() const { return m_data.shouldDebugBreak; }$/;"	f	class:Catch::Config	typeref:typename:bool
shouldDebugBreak	vendor/spdlog/tests/catch.hpp	/^        bool shouldDebugBreak;$/;"	m	struct:Catch::ConfigData	typeref:typename:bool
shouldDebugBreak	vendor/spdlog/tests/catch.hpp	/^    bool ResultBuilder::shouldDebugBreak() const { return m_shouldDebugBreak; }$/;"	f	class:Catch::ResultBuilder	typeref:typename:bool
shouldRedirectStdOut	vendor/spdlog/tests/catch.hpp	/^        bool shouldRedirectStdOut;$/;"	m	struct:Catch::ReporterPreferences	typeref:typename:bool
shouldSuppressFailure	vendor/spdlog/tests/catch.hpp	/^    inline bool shouldSuppressFailure( int flags )      { return ( flags & ResultDisposition::Su/;"	f	namespace:Catch	typeref:typename:bool
should_do_colors_	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    bool should_do_colors_;$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:bool
should_flush_	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline bool spdlog::logger::should_flush_(const details::log_msg &msg)$/;"	f	class:spdlog::logger	typeref:typename:bool
should_log	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline bool spdlog::logger::should_log(spdlog::level::level_enum msg_level) const$/;"	f	class:spdlog::logger	typeref:typename:bool
should_log	vendor/spdlog/include/spdlog/sinks/sink.h	/^    bool should_log(level::level_enum msg_level) const$/;"	f	class:spdlog::sinks::sink	typeref:typename:bool
showDurations	vendor/spdlog/tests/catch.hpp	/^        ShowDurations::OrNot showDurations;$/;"	m	struct:Catch::ConfigData	typeref:typename:ShowDurations::OrNot
showDurations	vendor/spdlog/tests/catch.hpp	/^        virtual ShowDurations::OrNot showDurations() const { return m_data.showDurations; }$/;"	f	class:Catch::Config	typeref:typename:ShowDurations::OrNot
showHelp	vendor/spdlog/tests/catch.hpp	/^        bool showHelp() const { return m_data.showHelp; }$/;"	f	class:Catch::Config	typeref:typename:bool
showHelp	vendor/spdlog/tests/catch.hpp	/^        bool showHelp;$/;"	m	struct:Catch::ConfigData	typeref:typename:bool
showHelp	vendor/spdlog/tests/catch.hpp	/^        void showHelp( std::string const& processName ) {$/;"	f	class:Catch::Session	typeref:typename:void
showInvisibles	vendor/spdlog/tests/catch.hpp	/^        bool showInvisibles() const { return m_data.showInvisibles; }$/;"	f	class:Catch::Config	typeref:typename:bool
showInvisibles	vendor/spdlog/tests/catch.hpp	/^        bool showInvisibles;$/;"	m	struct:Catch::ConfigData	typeref:typename:bool
showSuccessfulTests	vendor/spdlog/tests/catch.hpp	/^        bool showSuccessfulTests;$/;"	m	struct:Catch::ConfigData	typeref:typename:bool
shutdown	vendor/spdlog/include/spdlog/details/registry.h	/^    void shutdown()$/;"	f	class:spdlog::details::registry	typeref:typename:void
shutdown	vendor/spdlog/include/spdlog/spdlog.h	/^inline void shutdown()$/;"	f	namespace:spdlog	typeref:typename:void
side_	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    const pad_side side_ = left;$/;"	m	struct:spdlog::details::padding_info	typeref:typename:const pad_side
sienna	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    sienna = 0xA0522D,                  \/\/ rgb(160,82,45)$/;"	e	enum:color
sign	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    char sign;$/;"	m	struct:basic_writer::double_writer	typeref:typename:char
sign	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    char sign;$/;"	m	struct:basic_writer::inf_or_nan_writer	typeref:typename:char
sign	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    char sign;$/;"	m	struct:basic_writer::write_double::write_inf_or_nan_t	typeref:typename:char
signalDefs	vendor/spdlog/tests/catch.hpp	/^    SignalDefs signalDefs[] = {$/;"	v	namespace:Catch	typeref:typename:SignalDefs[]
signbit	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline dummy_int signbit(...) { return dummy_int(); }$/;"	f	namespace:internal	typeref:typename:dummy_int
significand_size	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^  static FMT_CONSTEXPR_DECL const int significand_size =$/;"	m	class:internal::fp	typeref:typename:FMT_CONSTEXPR_DECL const int
significand_type	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^  typedef uint64_t significand_type;$/;"	t	class:internal::fp	typeref:typename:uint64_t
silver	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    silver = 0xC0C0C0,                  \/\/ rgb(192,192,192)$/;"	e	enum:color
sink	vendor/spdlog/include/spdlog/sinks/sink.h	/^    explicit sink(std::unique_ptr<spdlog::pattern_formatter> formatter)$/;"	f	class:spdlog::sinks::sink
sink	vendor/spdlog/include/spdlog/sinks/sink.h	/^    sink()$/;"	f	class:spdlog::sinks::sink
sink	vendor/spdlog/include/spdlog/sinks/sink.h	/^class sink$/;"	c	namespace:spdlog::sinks
sink_it_	vendor/spdlog/include/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::sink_it_(details::log_msg &msg)$/;"	f	class:spdlog::async_logger	typeref:typename:void
sink_it_	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::sink_it_(details::log_msg &msg)$/;"	f	class:spdlog::logger	typeref:typename:void
sink_it_	vendor/spdlog/include/spdlog/sinks/android_sink.h	/^    void sink_it_(const details::log_msg &msg) override$/;"	f	class:spdlog::sinks::android_sink	typeref:typename:void
sink_it_	vendor/spdlog/include/spdlog/sinks/basic_file_sink.h	/^    void sink_it_(const details::log_msg &msg) override$/;"	f	class:spdlog::sinks::basic_file_sink	typeref:typename:void
sink_it_	vendor/spdlog/include/spdlog/sinks/daily_file_sink.h	/^    void sink_it_(const details::log_msg &msg) override$/;"	f	class:spdlog::sinks::daily_file_sink	typeref:typename:void
sink_it_	vendor/spdlog/include/spdlog/sinks/dist_sink.h	/^    void sink_it_(const details::log_msg &msg) override$/;"	f	class:spdlog::sinks::dist_sink	typeref:typename:void
sink_it_	vendor/spdlog/include/spdlog/sinks/msvc_sink.h	/^    void sink_it_(const details::log_msg &msg) override$/;"	f	class:spdlog::sinks::msvc_sink	typeref:typename:void
sink_it_	vendor/spdlog/include/spdlog/sinks/null_sink.h	/^    void sink_it_(const details::log_msg &) override {}$/;"	f	class:spdlog::sinks::null_sink	typeref:typename:void
sink_it_	vendor/spdlog/include/spdlog/sinks/ostream_sink.h	/^    void sink_it_(const details::log_msg &msg) override$/;"	f	class:spdlog::sinks::ostream_sink	typeref:typename:void
sink_it_	vendor/spdlog/include/spdlog/sinks/rotating_file_sink.h	/^    void sink_it_(const details::log_msg &msg) override$/;"	f	class:spdlog::sinks::rotating_file_sink	typeref:typename:void
sink_it_	vendor/spdlog/include/spdlog/sinks/syslog_sink.h	/^    void sink_it_(const details::log_msg &msg) override$/;"	f	class:spdlog::sinks::syslog_sink	typeref:typename:void
sink_it_	vendor/spdlog/tests/test_errors.cpp	/^    void sink_it_(const spdlog::details::log_msg &) final$/;"	f	class:failing_sink	typeref:typename:void	file:
sink_it_	vendor/spdlog/tests/test_sink.h	/^    void sink_it_(const details::log_msg &) override$/;"	f	class:spdlog::sinks::test_sink	typeref:typename:void
sink_ptr	vendor/spdlog/include/spdlog/common.h	/^using sink_ptr = std::shared_ptr<sinks::sink>;$/;"	t	namespace:spdlog	typeref:typename:std::shared_ptr<sinks::sink>
sink_type	vendor/spdlog/tests/test_file_logging.cpp	/^    using sink_type = spdlog::sinks::daily_file_sink<std::mutex, custom_daily_file_name_calculat/;"	t	typeref:typename:spdlog::sinks::daily_file_sink<std::mutex,custom_daily_file_name_calculator>	file:
sink_type	vendor/spdlog/tests/test_file_logging.cpp	/^    using sink_type = spdlog::sinks::daily_file_sink<std::mutex, spdlog::sinks::daily_filename_c/;"	t	typeref:typename:spdlog::sinks::daily_file_sink<std::mutex,spdlog::sinks::daily_filename_calculator>	file:
sinks	vendor/spdlog/include/spdlog/common.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline const std::vector<spdlog::sink_ptr> &spdlog::logger::sinks() const$/;"	f	class:spdlog::logger	typeref:typename:const std::vector<spdlog::sink_ptr> &
sinks	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline std::vector<spdlog::sink_ptr> &spdlog::logger::sinks()$/;"	f	class:spdlog::logger	typeref:typename:std::vector<spdlog::sink_ptr> &
sinks	vendor/spdlog/include/spdlog/sinks/android_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	vendor/spdlog/include/spdlog/sinks/base_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	vendor/spdlog/include/spdlog/sinks/basic_file_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	vendor/spdlog/include/spdlog/sinks/daily_file_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	vendor/spdlog/include/spdlog/sinks/dist_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	vendor/spdlog/include/spdlog/sinks/msvc_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	vendor/spdlog/include/spdlog/sinks/null_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	vendor/spdlog/include/spdlog/sinks/ostream_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	vendor/spdlog/include/spdlog/sinks/rotating_file_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	vendor/spdlog/include/spdlog/sinks/sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	vendor/spdlog/include/spdlog/sinks/stdout_color_sinks.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	vendor/spdlog/include/spdlog/sinks/stdout_sinks.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	vendor/spdlog/include/spdlog/sinks/syslog_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	vendor/spdlog/tests/test_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks_	vendor/spdlog/include/spdlog/logger.h	/^    std::vector<sink_ptr> sinks_;$/;"	m	class:spdlog::logger	typeref:typename:std::vector<sink_ptr>
sinks_	vendor/spdlog/include/spdlog/sinks/dist_sink.h	/^    std::vector<std::shared_ptr<sink>> sinks_;$/;"	m	class:spdlog::sinks::dist_sink	typeref:typename:std::vector<std::shared_ptr<sink>>
sinks_init_list	vendor/spdlog/include/spdlog/common.h	/^using sinks_init_list = std::initializer_list<sink_ptr>;$/;"	t	namespace:spdlog	typeref:typename:std::initializer_list<sink_ptr>
size	dependencies/include/SFML/Window/Event.hpp	/^        SizeEvent             size;              \/\/\/< Size event parameters (Event::Resized)$/;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:SizeEvent
size	dependencies/include/libplatform/v8-tracing.h	/^  size_t size() const { return next_free_; }$/;"	f	class:v8::platform::tracing::TraceBufferChunk	typeref:typename:size_t
size	dependencies/include/nlohmann/json.hpp	/^    static constexpr std::size_t size() noexcept$/;"	f	struct:nlohmann::detail::index_sequence	typeref:typename:std::size_t
size	dependencies/include/v8-profiler.h	/^    size_t size;$/;"	m	struct:v8::AllocationProfile::Allocation	typeref:typename:size_t
size	dependencies/include/v8-profiler.h	/^    size_t size;$/;"	m	struct:v8::AllocationProfile::Sample	typeref:typename:size_t
size	dependencies/include/v8-profiler.h	/^  uint32_t size;  \/\/ New value of size field for the interval with this index.$/;"	m	struct:v8::HeapStatsUpdate	typeref:typename:uint32_t
size	dependencies/include/v8.h	/^    size_t size;$/;"	m	class:v8::WasmModuleObject	typeref:typename:size_t
size	dependencies/include/v8.h	/^  constexpr size_t size() const { return size_; }$/;"	f	class:v8::MemorySpan	typeref:typename:size_t
size	dependencies/include/v8.h	/^  size_t size = 0;$/;"	m	struct:v8::OwnedBuffer	typeref:typename:size_t
size	vendor/spdlog/include/spdlog/details/file_helper.h	/^    size_t size() const$/;"	f	class:spdlog::details::file_helper	typeref:typename:size_t
size	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    size_t size() const { return 0; }$/;"	f	struct:basic_string_view::type	typeref:typename:size_t
size	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR size_t size() const { return size_; }$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR size_t
size	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  std::size_t size() const FMT_NOEXCEPT { return size_; }$/;"	f	class:internal::basic_buffer	typeref:typename:std::size_t
size	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  std::size_t size;$/;"	m	struct:internal::string_value	typeref:typename:std::size_t
size	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^      unsigned size;$/;"	m	struct:basic_writer::int_writer::num_writer	typeref:typename:unsigned
size	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    std::size_t size;$/;"	m	struct:basic_writer::str_writer	typeref:typename:std::size_t
size	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  size_t size() const { return buffer_.size() - 1; }$/;"	f	class:internal::utf16_to_utf8	typeref:typename:size_t
size	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  size_t size() const { return buffer_.size() - 1; }$/;"	f	class:internal::utf8_to_utf16	typeref:typename:size_t
size	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  std::size_t size() const {$/;"	f	class:format_int	typeref:typename:std::size_t
size	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  std::size_t size;$/;"	m	struct:format_to_n_result	typeref:typename:std::size_t
size	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR std::size_t size() {$/;"	f	struct:internal::integer_sequence	typeref:typename:FMT_CONSTEXPR std::size_t
size	vendor/spdlog/tests/catch.hpp	/^        std::size_t size() const { return lines.size(); }$/;"	f	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	typeref:typename:std::size_t
size	vendor/spdlog/tests/catch.hpp	/^        std::size_t size() const { return lines.size(); }$/;"	f	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	typeref:typename:std::size_t
size	vendor/spdlog/tests/catch.hpp	/^    virtual std::size_t size() const {$/;"	f	class:Catch::BetweenGenerator	typeref:typename:std::size_t
size	vendor/spdlog/tests/catch.hpp	/^    virtual std::size_t size() const {$/;"	f	class:Catch::ValuesGenerator	typeref:typename:std::size_t
size_	dependencies/include/v8.h	/^  size_t size_ = 0;$/;"	m	class:v8::MemorySpan	typeref:typename:size_t
size_	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  size_t size_;$/;"	m	class:basic_string_view	typeref:typename:size_t
size_	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  std::size_t size_;$/;"	m	class:internal::basic_buffer	typeref:typename:std::size_t
size_	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  unsigned size_;$/;"	m	class:internal::arg_map	typeref:typename:unsigned
size_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typedef unsigned size_type;$/;"	t	class:basic_format_args	typeref:typename:unsigned
sizer	vendor/spdlog/tests/catch.hpp	/^        char sizer[1];$/;"	m	struct:Catch::TrueType	typeref:typename:char[1]
sizer	vendor/spdlog/tests/catch.hpp	/^        char sizer[2];$/;"	m	struct:Catch::FalseType	typeref:typename:char[2]
skipTest	vendor/spdlog/tests/catch.hpp	/^        virtual void skipTest( TestCaseInfo const& ) {$/;"	f	struct:Catch::StreamingReporterBase	typeref:typename:void
skipTest	vendor/spdlog/tests/catch.hpp	/^        virtual void skipTest( TestCaseInfo const& ) {}$/;"	f	struct:Catch::CumulativeReporterBase	typeref:typename:void
skipTest	vendor/spdlog/tests/catch.hpp	/^    void LegacyReporterAdapter::skipTest( TestCaseInfo const& ) {$/;"	f	class:Catch::LegacyReporterAdapter	typeref:typename:void
sky_blue	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    sky_blue = 0x87CEEB,                \/\/ rgb(135,206,235)$/;"	e	enum:color
slate_blue	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    slate_blue = 0x6A5ACD,              \/\/ rgb(106,90,205)$/;"	e	enum:color
slate_gray	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    slate_gray = 0x708090,              \/\/ rgb(112,128,144)$/;"	e	enum:color
sleep_for_millis	vendor/spdlog/include/spdlog/details/os.h	/^inline void sleep_for_millis(int milliseconds) SPDLOG_NOEXCEPT$/;"	f	namespace:spdlog::details::os	typeref:typename:void
snow	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    snow = 0xFFFAFA,                    \/\/ rgb(255,250,250)$/;"	e	enum:color
some	vendor/spdlog/tests/catch.hpp	/^        bool some() const { return nullableValue != NULL; }$/;"	f	class:Catch::Option	typeref:typename:bool
sortTests	vendor/spdlog/tests/catch.hpp	/^        static void sortTests( IConfig const& config, std::vector<TestCase>& matchingTestCases )/;"	f	class:Catch::TestRegistry	typeref:typename:void
source	vendor/spdlog/include/spdlog/details/log_msg.h	/^    source_loc source;$/;"	m	struct:spdlog::details::log_msg	typeref:typename:source_loc
source	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    source_loc source;$/;"	m	struct:spdlog::details::async_msg	typeref:typename:source_loc
source_dir	CMakeLists.txt	/^set (source_dir "${PROJECT_SOURCE_DIR}\/src\/")$/;"	v
source_filename_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit source_filename_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::source_filename_formatter
source_filename_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class source_filename_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
source_linenum_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit source_linenum_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::source_linenum_formatter
source_linenum_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class source_linenum_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
source_loc	vendor/spdlog/include/spdlog/common.h	/^    SPDLOG_CONSTEXPR source_loc()$/;"	f	struct:spdlog::source_loc	typeref:typename:SPDLOG_CONSTEXPR
source_loc	vendor/spdlog/include/spdlog/common.h	/^    SPDLOG_CONSTEXPR source_loc(const char *filename, int line)$/;"	f	struct:spdlog::source_loc	typeref:typename:SPDLOG_CONSTEXPR
source_loc	vendor/spdlog/include/spdlog/common.h	/^struct source_loc$/;"	s	namespace:spdlog
source_location_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit source_location_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::source_location_formatter
source_location_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class source_location_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
source_map_url	dependencies/include/v8.h	/^    Local<Value> source_map_url;$/;"	m	class:v8::ScriptCompiler::Source	typeref:typename:Local<Value>
source_map_url_	dependencies/include/v8.h	/^  Local<Value> source_map_url_;$/;"	m	class:v8::ScriptOrigin	typeref:typename:Local<Value>
source_string	dependencies/include/v8.h	/^    Local<String> source_string;$/;"	m	class:v8::ScriptCompiler::Source	typeref:typename:Local<String>
sp	dependencies/include/v8.h	/^  void* sp;  \/\/ Stack pointer.$/;"	m	struct:v8::RegisterState	typeref:typename:void *
spaces_	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    string_view_t spaces_{"                                                                "$/;"	m	class:spdlog::details::scoped_pad	typeref:typename:string_view_t
spdlog	vendor/spdlog/CMakeLists.txt	/^add_library(spdlog INTERFACE)$/;"	t
spdlog	vendor/spdlog/CMakeLists.txt	/^project(spdlog VERSION 1.3.0 LANGUAGES CXX)$/;"	p
spdlog	vendor/spdlog/README.md	/^# spdlog$/;"	c
spdlog	vendor/spdlog/include/spdlog/async.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/async_logger.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/common.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/details/circular_q.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/details/console_globals.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/details/file_helper.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/details/fmt_helper.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/details/log_msg.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/details/mpmc_blocking_q.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/details/null_mutex.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/details/os.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/details/periodic_worker.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/details/registry.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/details/thread_pool.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/fmt/bin_to_hex.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/formatter.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/logger.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/sinks/android_sink.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/sinks/base_sink.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/sinks/basic_file_sink.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/sinks/daily_file_sink.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/sinks/dist_sink.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/sinks/msvc_sink.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/sinks/null_sink.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/sinks/ostream_sink.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/sinks/rotating_file_sink.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/sinks/sink.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/sinks/stdout_color_sinks.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/sinks/stdout_sinks.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/sinks/syslog_sink.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/include/spdlog/spdlog.h	/^namespace spdlog {$/;"	n
spdlog	vendor/spdlog/tests/test_sink.h	/^namespace spdlog {$/;"	n
spdlog-utests	vendor/spdlog/tests/CMakeLists.txt	/^project(spdlog-utests CXX)$/;"	p
spdlog_ex	vendor/spdlog/include/spdlog/common.h	/^    explicit spdlog_ex(std::string msg)$/;"	f	class:spdlog::spdlog_ex
spdlog_ex	vendor/spdlog/include/spdlog/common.h	/^    spdlog_ex(const std::string &msg, int last_errno)$/;"	f	class:spdlog::spdlog_ex
spdlog_ex	vendor/spdlog/include/spdlog/common.h	/^class spdlog_ex : public std::exception$/;"	c	namespace:spdlog
spdlog_headers_for_ide	vendor/spdlog/CMakeLists.txt	/^add_custom_target(spdlog_headers_for_ide SOURCES ${spdlog_include_SRCS})$/;"	t
spec	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    const Spec &spec;$/;"	m	struct:basic_writer::int_writer	typeref:typename:const Spec &
spec	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    format_specs spec;$/;"	m	struct:basic_writer::write_double::write_inf_or_nan_t	typeref:typename:format_specs
spec	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  format_specs *spec() { return specs_; }$/;"	f	class:internal::arg_formatter_base	typeref:typename:format_specs *
spec_	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  format_specs &spec_;$/;"	m	class:internal::printf_width_handler	typeref:typename:format_specs &
specs_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  basic_format_specs<Char> &specs_;$/;"	m	class:internal::specs_setter	typeref:typename:basic_format_specs<Char> &
specs_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  dynamic_format_specs<char_type> &specs_;$/;"	m	class:internal::dynamic_specs_handler	typeref:typename:dynamic_format_specs<char_type> &
specs_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  format_specs *specs_;$/;"	m	class:internal::arg_formatter_base	typeref:typename:format_specs *
specs_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  internal::dynamic_format_specs<Char> specs_;$/;"	m	class:dynamic_formatter	typeref:typename:internal::dynamic_format_specs<Char>
specs_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  internal::dynamic_format_specs<Char> specs_;$/;"	m	struct:formatter	typeref:typename:internal::dynamic_format_specs<Char>
specs_checker	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR specs_checker(const Handler& handler, internal::type arg_type)$/;"	f	class:internal::specs_checker	typeref:typename:FMT_CONSTEXPR
specs_checker	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR specs_checker(const specs_checker &other)$/;"	f	class:internal::specs_checker	typeref:typename:FMT_CONSTEXPR
specs_checker	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class specs_checker : public Handler {$/;"	c	namespace:internal
specs_handler	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR specs_handler($/;"	f	class:internal::specs_handler	typeref:typename:FMT_CONSTEXPR
specs_handler	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class specs_handler: public specs_setter<typename Context::char_type> {$/;"	c	namespace:internal
specs_setter	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR specs_setter(const specs_setter &other) : specs_(other.specs_) {}$/;"	f	class:internal::specs_setter	typeref:typename:FMT_CONSTEXPR
specs_setter	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit FMT_CONSTEXPR specs_setter(basic_format_specs<Char> &specs):$/;"	f	class:internal::specs_setter	typeref:typename:FMT_CONSTEXPR
specs_setter	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class specs_setter {$/;"	c	namespace:internal
spellings	vendor/spdlog/tests/catch.hpp	/^        std::set<std::string> spellings;$/;"	m	struct:Catch::TagInfo	typeref:typename:std::set<std::string>
spliceLine	vendor/spdlog/tests/catch.hpp	/^        void spliceLine( std::size_t _indent, std::string& _remainder, std::size_t _pos ) {$/;"	f	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	typeref:typename:void
spliceLine	vendor/spdlog/tests/catch.hpp	/^        void spliceLine( std::size_t _indent, std::string& _remainder, std::size_t _pos ) {$/;"	f	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	typeref:typename:void
split_by_extenstion	vendor/spdlog/include/spdlog/details/file_helper.h	/^    static std::tuple<filename_t, filename_t> split_by_extenstion(const spdlog::filename_t &fnam/;"	f	class:spdlog::details::file_helper	typeref:typename:std::tuple<filename_t,filename_t>
spring_green	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    spring_green = 0x00FF7F,            \/\/ rgb(0,255,127)$/;"	e	enum:color
sprintf	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^inline std::string sprintf(string_view format_str, const Args & ... args) {$/;"	f	typeref:typename:std::string
sprintf	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^inline std::wstring sprintf(wstring_view format_str, const Args & ... args) {$/;"	f	typeref:typename:std::wstring
sstring	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    string_value<signed char> sstring;$/;"	m	union:internal::value::__anonbb24b047030a	typeref:typename:string_value<signed char>
stack	dependencies/include/v8-profiler.h	/^  std::vector<CpuProfileDeoptFrame> stack;$/;"	m	struct:v8::CpuProfileDeoptInfo	typeref:typename:std::vector<CpuProfileDeoptFrame>
stack	dependencies/include/v8-profiler.h	/^  void* stack[kMaxFramesCount];                 \/\/ Call stack.$/;"	m	struct:v8::TickSample	typeref:typename:void * []
start	dependencies/include/v8.h	/^    const uint8_t* start;$/;"	m	class:v8::WasmModuleObject	typeref:typename:const uint8_t *
start	dependencies/include/v8.h	/^  const void* start = nullptr;$/;"	m	struct:v8::MemoryRange	typeref:typename:const void *
start	vendor/spdlog/tests/catch.hpp	/^    void Timer::start() {$/;"	f	class:Catch::Timer	typeref:typename:void
start	vendor/spdlog/tests/test_mpmc_q.cpp	/^    auto start = test_clock::now();$/;"	v	typeref:typename:auto
startElement	vendor/spdlog/tests/catch.hpp	/^        XmlWriter& startElement( std::string const& name ) {$/;"	f	class:Catch::XmlWriter	typeref:typename:XmlWriter &
startNewMode	vendor/spdlog/tests/catch.hpp	/^        void startNewMode( Mode mode, std::size_t start ) {$/;"	f	class:Catch::TestSpecParser	typeref:typename:void
startRepeatingTimer	dependencies/include/v8-inspector.h	/^  virtual void startRepeatingTimer(double, TimerCallback, void* data) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
start_position	dependencies/include/v8-profiler.h	/^    int start_position;$/;"	m	struct:v8::AllocationProfile::Node	typeref:typename:int
startsWith	vendor/spdlog/tests/catch.hpp	/^        inline bool startsWith( std::string const& str, std::string const& prefix ) {$/;"	f	namespace:Clara::Detail	typeref:typename:bool
startsWith	vendor/spdlog/tests/catch.hpp	/^    bool startsWith( std::string const& s, std::string const& prefix ) {$/;"	f	namespace:Catch	typeref:typename:bool
state	dependencies/include/v8-profiler.h	/^  StateTag state;  \/\/ The state of the VM.$/;"	m	struct:v8::TickSample	typeref:typename:StateTag
static_const	dependencies/include/nlohmann/json.hpp	/^struct static_const$/;"	s	namespace:nlohmann::detail
stats	vendor/spdlog/tests/catch.hpp	/^            AssertionStats const& stats;$/;"	m	class:Catch::CompactReporter::AssertionPrinter	typeref:typename:AssertionStats const &
stats	vendor/spdlog/tests/catch.hpp	/^            AssertionStats const& stats;$/;"	m	class:Catch::ConsoleReporter::AssertionPrinter	typeref:typename:AssertionStats const &
stats	vendor/spdlog/tests/catch.hpp	/^            SectionStats stats;$/;"	m	struct:Catch::CumulativeReporterBase::SectionNode	typeref:typename:SectionStats
std	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^namespace std {$/;"	n
stdErr	vendor/spdlog/tests/catch.hpp	/^            std::string stdErr;$/;"	m	struct:Catch::CumulativeReporterBase::SectionNode	typeref:typename:std::string
stdErr	vendor/spdlog/tests/catch.hpp	/^        std::string stdErr;$/;"	m	struct:Catch::TestCaseStats	typeref:typename:std::string
stdErrForSuite	vendor/spdlog/tests/catch.hpp	/^        std::ostringstream stdErrForSuite;$/;"	m	class:Catch::JunitReporter	typeref:typename:std::ostringstream
stdOut	vendor/spdlog/tests/catch.hpp	/^            std::string stdOut;$/;"	m	struct:Catch::CumulativeReporterBase::SectionNode	typeref:typename:std::string
stdOut	vendor/spdlog/tests/catch.hpp	/^        std::string stdOut;$/;"	m	struct:Catch::TestCaseStats	typeref:typename:std::string
stdOutForSuite	vendor/spdlog/tests/catch.hpp	/^        std::ostringstream stdOutForSuite;$/;"	m	class:Catch::JunitReporter	typeref:typename:std::ostringstream
stderr_color_mt	vendor/spdlog/include/spdlog/sinks/stdout_color_sinks.h	/^inline std::shared_ptr<logger> stderr_color_mt(const std::string &logger_name)$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
stderr_color_sink_mt	vendor/spdlog/include/spdlog/sinks/stdout_color_sinks.h	/^using stderr_color_sink_mt = wincolor_stderr_sink_mt;$/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_stderr_sink_mt
stderr_color_sink_st	vendor/spdlog/include/spdlog/sinks/stdout_color_sinks.h	/^using stderr_color_sink_st = wincolor_stderr_sink_st;$/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_stderr_sink_st
stderr_color_st	vendor/spdlog/include/spdlog/sinks/stdout_color_sinks.h	/^inline std::shared_ptr<logger> stderr_color_st(const std::string &logger_name)$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
stderr_logger_mt	vendor/spdlog/include/spdlog/sinks/stdout_sinks.h	/^inline std::shared_ptr<logger> stderr_logger_mt(const std::string &logger_name)$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
stderr_logger_st	vendor/spdlog/include/spdlog/sinks/stdout_sinks.h	/^inline std::shared_ptr<logger> stderr_logger_st(const std::string &logger_name)$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
stderr_sink_mt	vendor/spdlog/include/spdlog/sinks/stdout_sinks.h	/^using stderr_sink_mt = stdout_sink<details::console_stderr, details::console_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:stdout_sink<details::console_stderr,details::console_mutex>
stderr_sink_st	vendor/spdlog/include/spdlog/sinks/stdout_sinks.h	/^using stderr_sink_st = stdout_sink<details::console_stderr, details::console_nullmutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:stdout_sink<details::console_stderr,details::console_nullmutex>
stdoutHandle	vendor/spdlog/tests/catch.hpp	/^        HANDLE stdoutHandle;$/;"	m	class:Catch::__anon368216750910::Win32ColourImpl	typeref:typename:HANDLE
stdout_color_mt	vendor/spdlog/include/spdlog/sinks/stdout_color_sinks.h	/^inline std::shared_ptr<logger> stdout_color_mt(const std::string &logger_name)$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
stdout_color_sink_mt	vendor/spdlog/include/spdlog/sinks/stdout_color_sinks.h	/^using stdout_color_sink_mt = wincolor_stdout_sink_mt;$/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_stdout_sink_mt
stdout_color_sink_st	vendor/spdlog/include/spdlog/sinks/stdout_color_sinks.h	/^using stdout_color_sink_st = wincolor_stdout_sink_st;$/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_stdout_sink_st
stdout_color_st	vendor/spdlog/include/spdlog/sinks/stdout_color_sinks.h	/^inline std::shared_ptr<logger> stdout_color_st(const std::string &logger_name)$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
stdout_logger_example	vendor/spdlog/example/example.cpp	/^void stdout_logger_example()$/;"	f	typeref:typename:void
stdout_logger_mt	vendor/spdlog/include/spdlog/sinks/stdout_sinks.h	/^inline std::shared_ptr<logger> stdout_logger_mt(const std::string &logger_name)$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
stdout_logger_st	vendor/spdlog/include/spdlog/sinks/stdout_sinks.h	/^inline std::shared_ptr<logger> stdout_logger_st(const std::string &logger_name)$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
stdout_sink	vendor/spdlog/include/spdlog/sinks/stdout_sinks.h	/^    stdout_sink()$/;"	f	class:spdlog::sinks::stdout_sink
stdout_sink	vendor/spdlog/include/spdlog/sinks/stdout_sinks.h	/^class stdout_sink final : public sink$/;"	c	namespace:spdlog::sinks
stdout_sink_mt	vendor/spdlog/include/spdlog/sinks/stdout_sinks.h	/^using stdout_sink_mt = stdout_sink<details::console_stdout, details::console_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:stdout_sink<details::console_stdout,details::console_mutex>
stdout_sink_st	vendor/spdlog/include/spdlog/sinks/stdout_sinks.h	/^using stdout_sink_st = stdout_sink<details::console_stdout, details::console_nullmutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:stdout_sink<details::console_stdout,details::console_nullmutex>
steel_blue	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    steel_blue = 0x4682B4,              \/\/ rgb(70,130,180)$/;"	e	enum:color
stencilBits	dependencies/include/SFML/Window/ContextSettings.hpp	/^    unsigned int stencilBits;       \/\/\/< Bits of the stencil buffer$/;"	m	struct:sf::ContextSettings	typeref:typename:unsigned int
storage	vendor/spdlog/tests/catch.hpp	/^        char storage[sizeof(T)];$/;"	m	class:Catch::Option	typeref:typename:char[]
store	vendor/spdlog/include/spdlog/details/null_mutex.h	/^    void store(int val)$/;"	f	struct:spdlog::details::null_atomic_int	typeref:typename:void
store_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  T store_[SIZE];$/;"	m	class:basic_memory_buffer	typeref:typename:T[]
str	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    const char *str;$/;"	m	struct:basic_writer::inf_or_nan_writer	typeref:typename:const char *
str	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  const Char *str;$/;"	m	struct:internal::udl_arg	typeref:typename:const Char *
str	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  std::string str() const { return std::string(&buffer_[0], size()); }$/;"	f	class:internal::utf16_to_utf8	typeref:typename:std::string
str	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  std::string str() const { return std::string(str_, size()); }$/;"	f	class:format_int	typeref:typename:std::string
str	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  std::wstring str() const { return std::wstring(&buffer_[0], size()); }$/;"	f	class:internal::utf8_to_utf16	typeref:typename:std::wstring
str	vendor/spdlog/tests/catch.hpp	/^        std::string str;$/;"	m	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	typeref:typename:std::string
str	vendor/spdlog/tests/catch.hpp	/^        std::string str;$/;"	m	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text	typeref:typename:std::string
str_	dependencies/include/v8.h	/^    char* str_;$/;"	m	class:v8::String::Utf8Value	typeref:typename:char *
str_	dependencies/include/v8.h	/^    uint16_t* str_;$/;"	m	class:v8::String::Value	typeref:typename:uint16_t *
str_	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    std::string str_;$/;"	m	class:spdlog::details::aggregate_formatter	typeref:typename:std::string
str_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  char *str_;$/;"	m	class:format_int	typeref:typename:char *
str_writer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  struct str_writer {$/;"	s	class:basic_writer
stream	vendor/spdlog/include/spdlog/details/console_globals.h	/^    static std::FILE *stream()$/;"	f	struct:spdlog::details::console_stderr	typeref:typename:std::FILE *
stream	vendor/spdlog/include/spdlog/details/console_globals.h	/^    static std::FILE *stream()$/;"	f	struct:spdlog::details::console_stdout	typeref:typename:std::FILE *
stream	vendor/spdlog/tests/catch.hpp	/^            std::ostream& stream;$/;"	m	class:Catch::CompactReporter::AssertionPrinter	typeref:typename:std::ostream &
stream	vendor/spdlog/tests/catch.hpp	/^            std::ostream& stream;$/;"	m	class:Catch::ConsoleReporter::AssertionPrinter	typeref:typename:std::ostream &
stream	vendor/spdlog/tests/catch.hpp	/^        std::ostream& stream() const    { return *m_stream; }$/;"	f	struct:Catch::ReporterConfig	typeref:typename:std::ostream &
stream	vendor/spdlog/tests/catch.hpp	/^        std::ostream& stream() {$/;"	f	class:Catch::XmlWriter	typeref:typename:std::ostream &
stream	vendor/spdlog/tests/catch.hpp	/^        std::ostream& stream;$/;"	m	struct:Catch::CumulativeReporterBase	typeref:typename:std::ostream &
stream	vendor/spdlog/tests/catch.hpp	/^        std::ostream& stream;$/;"	m	struct:Catch::StreamingReporterBase	typeref:typename:std::ostream &
stream	vendor/spdlog/tests/catch.hpp	/^        virtual std::ostream& stream() const    { return m_os; }$/;"	f	class:Catch::Config	typeref:typename:std::ostream &
streamBuf	vendor/spdlog/tests/catch.hpp	/^        std::streambuf* streamBuf;$/;"	m	class:Catch::Stream	typeref:typename:std::streambuf *
streaming_decoder_	dependencies/include/v8.h	/^  std::shared_ptr<internal::wasm::StreamingDecoder> streaming_decoder_;$/;"	m	class:v8::WasmModuleObjectBuilderStreaming	typeref:typename:std::shared_ptr<internal::wasm::StreamingDecoder>
strerror_r	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^inline fmt::internal::null<> strerror_r(int, char *, ...) {$/;"	f	typeref:typename:fmt::internal::null<>
strerror_s	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^inline fmt::internal::null<> strerror_s(char *, std::size_t, ...) {$/;"	f	typeref:typename:fmt::internal::null<>
strftime	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^inline std::size_t strftime(char *str, std::size_t count, const char *format,$/;"	f	namespace:internal	typeref:typename:std::size_t
strftime	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^inline std::size_t strftime(wchar_t *str, std::size_t count,$/;"	f	namespace:internal	typeref:typename:std::size_t
string	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    string_value<char_type> string;$/;"	m	union:internal::value::__anonbb24b047030a	typeref:typename:string_value<char_type>
string_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  cstring_type, string_type, pointer_type, custom_type$/;"	e	enum:internal::type
string_value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct string_value {$/;"	s	namespace:internal
string_view	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^typedef basic_string_view<char> string_view;$/;"	t	typeref:typename:basic_string_view<char>
string_view_t	vendor/spdlog/include/spdlog/common.h	/^using string_view_t = fmt::string_view;$/;"	t	namespace:spdlog	typeref:typename:fmt::string_view
string_view_t	vendor/spdlog/include/spdlog/common.h	/^using string_view_t = std::string_view;$/;"	t	namespace:spdlog	typeref:typename:std::string_view
strtod	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  double strtod(const char *&str) const {$/;"	f	class:Locale	typeref:typename:double
strtod_l	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  static double strtod_l(const char *nptr, char **endptr, _locale_t locale) {$/;"	f	class:Locale	typeref:typename:double
subString	vendor/spdlog/tests/catch.hpp	/^        std::string subString() const { return m_arg.substr( m_start, m_pos - m_start ); }$/;"	f	class:Catch::TestSpecParser	typeref:typename:std::string
succeeded	vendor/spdlog/tests/catch.hpp	/^    bool AssertionResult::succeeded() const {$/;"	f	class:Catch::AssertionResult	typeref:typename:bool
suiteTimer	vendor/spdlog/tests/catch.hpp	/^        Timer suiteTimer;$/;"	m	class:Catch::JunitReporter	typeref:typename:Timer
swap	vendor/spdlog/tests/catch.hpp	/^        void swap( Ptr& other ) { std::swap( m_p, other.m_p ); }$/;"	f	class:Catch::Ptr	typeref:typename:void
swap	vendor/spdlog/tests/catch.hpp	/^    void TestCase::swap( TestCase& other ) {$/;"	f	class:Catch::TestCase	typeref:typename:void
sync	vendor/spdlog/tests/catch.hpp	/^        int sync() {$/;"	f	class:Catch::StreamBufImpl	typeref:typename:int
synchronous_factory	vendor/spdlog/include/spdlog/spdlog.h	/^struct synchronous_factory$/;"	s	namespace:spdlog
syslog	vendor/spdlog/README.md	/^#### syslog $/;"	t
syslog_example	vendor/spdlog/example/example.cpp	/^void syslog_example()$/;"	f	typeref:typename:void
syslog_example	vendor/spdlog/example/jni/example.cpp	/^void syslog_example()$/;"	f	typeref:typename:void
syslog_logger_mt	vendor/spdlog/include/spdlog/sinks/syslog_sink.h	/^inline std::shared_ptr<logger> syslog_logger_mt($/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
syslog_logger_st	vendor/spdlog/include/spdlog/sinks/syslog_sink.h	/^inline std::shared_ptr<logger> syslog_logger_st($/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
syslog_prio_from_level	vendor/spdlog/include/spdlog/sinks/syslog_sink.h	/^    int syslog_prio_from_level(const details::log_msg &msg) const$/;"	f	class:spdlog::sinks::syslog_sink	typeref:typename:int
syslog_sink	vendor/spdlog/include/spdlog/sinks/syslog_sink.h	/^    explicit syslog_sink(std::string ident = "", int syslog_option = 0, int syslog_facility = LO/;"	f	class:spdlog::sinks::syslog_sink
syslog_sink	vendor/spdlog/include/spdlog/sinks/syslog_sink.h	/^class syslog_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
syslog_sink_mt	vendor/spdlog/include/spdlog/sinks/syslog_sink.h	/^using syslog_sink_mt = syslog_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:syslog_sink<std::mutex>
syslog_sink_st	vendor/spdlog/include/spdlog/sinks/syslog_sink.h	/^using syslog_sink_st = syslog_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:syslog_sink<details::null_mutex>
system	dependencies/include/SFML/Window/Event.hpp	/^        bool          system;  \/\/\/< Is the System key pressed?$/;"	m	struct:sf::Event::KeyEvent	typeref:typename:bool
system_error	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  system_error() : std::runtime_error("") {}$/;"	f	class:system_error
system_error	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  system_error(int error_code, string_view message, const Args & ... args)$/;"	f	class:system_error
system_error	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class system_error : public std::runtime_error {$/;"	c
t	vendor/spdlog/tests/catch.hpp	/^        static T  const&t;$/;"	m	struct:Catch::Detail::IsStreamInsertable	typeref:typename:T const &
t	vendor/spdlog/tests/test_async.cpp	/^        for (auto &t : threads)$/;"	v	typeref:typename:auto &
t_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit t_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::t_formatter
t_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class t_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
tabChar	vendor/spdlog/tests/catch.hpp	/^        char tabChar;               \/\/ If this char is seen the indent is changed to current p/;"	m	struct:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes	typeref:typename:char
tabChar	vendor/spdlog/tests/catch.hpp	/^        char tabChar;               \/\/ If this char is seen the indent is changed to current p/;"	m	struct:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes	typeref:typename:char
tag	vendor/spdlog/tests/catch.hpp	/^        std::string tag;$/;"	m	struct:Catch::TagAlias	typeref:typename:std::string
tag_	vendor/spdlog/include/spdlog/sinks/android_sink.h	/^    std::string tag_;$/;"	m	class:spdlog::sinks::android_sink	typeref:typename:std::string
tags	vendor/spdlog/tests/catch.hpp	/^        std::set<std::string> tags;$/;"	m	struct:Catch::TestCaseInfo	typeref:typename:std::set<std::string>
tagsAsString	vendor/spdlog/tests/catch.hpp	/^        std::string tagsAsString;$/;"	m	struct:Catch::TestCaseInfo	typeref:typename:std::string
tail_	vendor/spdlog/include/spdlog/details/circular_q.h	/^    typename std::vector<T>::size_type tail_ = 0;$/;"	m	class:spdlog::details::circular_q	typeref:typename:std::vector<T>::size_type
takesArg	vendor/spdlog/tests/catch.hpp	/^            bool takesArg() const { return functionObj->takesArg(); }$/;"	f	class:Clara::Detail::BoundArgFunction	typeref:typename:bool
takesArg	vendor/spdlog/tests/catch.hpp	/^            virtual bool takesArg() const { return !IsBool<M>::value; }$/;"	f	struct:Clara::Detail::BoundDataMember	typeref:typename:bool
takesArg	vendor/spdlog/tests/catch.hpp	/^            virtual bool takesArg() const { return !IsBool<M>::value; }$/;"	f	struct:Clara::Detail::BoundUnaryMethod	typeref:typename:bool
takesArg	vendor/spdlog/tests/catch.hpp	/^            virtual bool takesArg() const { return !IsBool<T>::value; }$/;"	f	struct:Clara::Detail::BoundBinaryFunction	typeref:typename:bool
takesArg	vendor/spdlog/tests/catch.hpp	/^            virtual bool takesArg() const { return false; }$/;"	f	struct:Clara::Detail::BoundNullaryMethod	typeref:typename:bool
takesArg	vendor/spdlog/tests/catch.hpp	/^            virtual bool takesArg() const { return false; }$/;"	f	struct:Clara::Detail::BoundUnaryFunction	typeref:typename:bool
takesArg	vendor/spdlog/tests/catch.hpp	/^            virtual bool takesArg() const { return true; }$/;"	f	struct:Clara::Detail::NullBinder	typeref:typename:bool
takesArg	vendor/spdlog/tests/catch.hpp	/^        bool takesArg() const {$/;"	f	struct:Clara::CommonArgProperties	typeref:typename:bool
tan	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    tan = 0xD2B48C,                     \/\/ rgb(210,180,140)$/;"	e	enum:color
target_file_	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    FILE *target_file_;$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:FILE *
target_filename	vendor/spdlog/tests/test_file_helper.cpp	/^static const std::string target_filename = "logs\/file_helper_test.txt";$/;"	v	typeref:typename:const std::string	file:
targets_config	vendor/spdlog/CMakeLists.txt	/^set(targets_config "${PROJECT_NAME}Targets.cmake")$/;"	v
targets_export_name	vendor/spdlog/CMakeLists.txt	/^set(targets_export_name "${PROJECT_NAME}Targets")$/;"	v
teal	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    teal = 0x008080,                    \/\/ rgb(0,128,128)$/;"	e	enum:color
terminate	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    terminate$/;"	e	enum:spdlog::details::async_msg_type
test	vendor/spdlog/tests/catch.hpp	/^        Ptr<ITestCase> test;$/;"	m	class:Catch::TestCase	typeref:typename:Ptr<ITestCase>
testCaseEnded	vendor/spdlog/tests/catch.hpp	/^        virtual void testCaseEnded( TestCaseStats const& \/* _testCaseStats *\/ ) {$/;"	f	struct:Catch::StreamingReporterBase	typeref:typename:void
testCaseEnded	vendor/spdlog/tests/catch.hpp	/^        virtual void testCaseEnded( TestCaseStats const& _testCaseStats ) {$/;"	f	struct:Catch::ConsoleReporter	typeref:typename:void
testCaseEnded	vendor/spdlog/tests/catch.hpp	/^        virtual void testCaseEnded( TestCaseStats const& testCaseStats ) {$/;"	f	class:Catch::JunitReporter	typeref:typename:void
testCaseEnded	vendor/spdlog/tests/catch.hpp	/^        virtual void testCaseEnded( TestCaseStats const& testCaseStats ) {$/;"	f	class:Catch::XmlReporter	typeref:typename:void
testCaseEnded	vendor/spdlog/tests/catch.hpp	/^        virtual void testCaseEnded( TestCaseStats const& testCaseStats ) {$/;"	f	struct:Catch::CumulativeReporterBase	typeref:typename:void
testCaseEnded	vendor/spdlog/tests/catch.hpp	/^    void LegacyReporterAdapter::testCaseEnded( TestCaseStats const& testCaseStats ) {$/;"	f	class:Catch::LegacyReporterAdapter	typeref:typename:void
testCaseStarting	vendor/spdlog/tests/catch.hpp	/^        virtual void testCaseStarting( TestCaseInfo const& ) {}$/;"	f	struct:Catch::CumulativeReporterBase	typeref:typename:void
testCaseStarting	vendor/spdlog/tests/catch.hpp	/^        virtual void testCaseStarting( TestCaseInfo const& _testInfo ) {$/;"	f	struct:Catch::StreamingReporterBase	typeref:typename:void
testCaseStarting	vendor/spdlog/tests/catch.hpp	/^        virtual void testCaseStarting( TestCaseInfo const& testInfo ) {$/;"	f	class:Catch::XmlReporter	typeref:typename:void
testCaseStarting	vendor/spdlog/tests/catch.hpp	/^    void LegacyReporterAdapter::testCaseStarting( TestCaseInfo const& testInfo ) {$/;"	f	class:Catch::LegacyReporterAdapter	typeref:typename:void
testCases	vendor/spdlog/tests/catch.hpp	/^        Counts testCases;$/;"	m	struct:Catch::Totals	typeref:typename:Counts
testFalse	vendor/spdlog/tests/catch.hpp	/^            bool testFalse;$/;"	m	struct:Catch::ResultBuilder::ExprComponents	typeref:typename:bool
testForMissingAssertions	vendor/spdlog/tests/catch.hpp	/^        bool testForMissingAssertions( Counts& assertions ) {$/;"	f	class:Catch::RunContext	typeref:typename:bool
testGroupEnded	vendor/spdlog/tests/catch.hpp	/^        virtual void testGroupEnded( TestGroupStats const& \/* _testGroupStats *\/ ) {$/;"	f	struct:Catch::StreamingReporterBase	typeref:typename:void
testGroupEnded	vendor/spdlog/tests/catch.hpp	/^        virtual void testGroupEnded( TestGroupStats const& _testGroupStats ) {$/;"	f	struct:Catch::ConsoleReporter	typeref:typename:void
testGroupEnded	vendor/spdlog/tests/catch.hpp	/^        virtual void testGroupEnded( TestGroupStats const& testGroupStats ) {$/;"	f	class:Catch::JunitReporter	typeref:typename:void
testGroupEnded	vendor/spdlog/tests/catch.hpp	/^        virtual void testGroupEnded( TestGroupStats const& testGroupStats ) {$/;"	f	class:Catch::XmlReporter	typeref:typename:void
testGroupEnded	vendor/spdlog/tests/catch.hpp	/^        virtual void testGroupEnded( TestGroupStats const& testGroupStats ) {$/;"	f	struct:Catch::CumulativeReporterBase	typeref:typename:void
testGroupEnded	vendor/spdlog/tests/catch.hpp	/^        void testGroupEnded( std::string const& testSpec, Totals const& totals, std::size_t grou/;"	f	class:Catch::RunContext	typeref:typename:void
testGroupEnded	vendor/spdlog/tests/catch.hpp	/^    void LegacyReporterAdapter::testGroupEnded( TestGroupStats const& testGroupStats ) {$/;"	f	class:Catch::LegacyReporterAdapter	typeref:typename:void
testGroupStarting	vendor/spdlog/tests/catch.hpp	/^        virtual void testGroupStarting( GroupInfo const& ) {}$/;"	f	struct:Catch::CumulativeReporterBase	typeref:typename:void
testGroupStarting	vendor/spdlog/tests/catch.hpp	/^        virtual void testGroupStarting( GroupInfo const& _groupInfo ) {$/;"	f	struct:Catch::StreamingReporterBase	typeref:typename:void
testGroupStarting	vendor/spdlog/tests/catch.hpp	/^        virtual void testGroupStarting( GroupInfo const& groupInfo ) {$/;"	f	class:Catch::JunitReporter	typeref:typename:void
testGroupStarting	vendor/spdlog/tests/catch.hpp	/^        virtual void testGroupStarting( GroupInfo const& groupInfo ) {$/;"	f	class:Catch::XmlReporter	typeref:typename:void
testGroupStarting	vendor/spdlog/tests/catch.hpp	/^        void testGroupStarting( std::string const& testSpec, std::size_t groupIndex, std::size_t/;"	f	class:Catch::RunContext	typeref:typename:void
testGroupStarting	vendor/spdlog/tests/catch.hpp	/^    void LegacyReporterAdapter::testGroupStarting( GroupInfo const& groupInfo ) {$/;"	f	class:Catch::LegacyReporterAdapter	typeref:typename:void
testInfo	vendor/spdlog/tests/catch.hpp	/^        TestCaseInfo testInfo;$/;"	m	struct:Catch::TestCaseStats	typeref:typename:TestCaseInfo
testRunEnded	vendor/spdlog/tests/catch.hpp	/^        virtual void testRunEnded( TestRunStats const& \/* _testRunStats *\/ ) {$/;"	f	struct:Catch::StreamingReporterBase	typeref:typename:void
testRunEnded	vendor/spdlog/tests/catch.hpp	/^        virtual void testRunEnded( TestRunStats const& _testRunStats ) {$/;"	f	struct:Catch::CompactReporter	typeref:typename:void
testRunEnded	vendor/spdlog/tests/catch.hpp	/^        virtual void testRunEnded( TestRunStats const& _testRunStats ) {$/;"	f	struct:Catch::ConsoleReporter	typeref:typename:void
testRunEnded	vendor/spdlog/tests/catch.hpp	/^        virtual void testRunEnded( TestRunStats const& testRunStats ) {$/;"	f	class:Catch::XmlReporter	typeref:typename:void
testRunEnded	vendor/spdlog/tests/catch.hpp	/^        virtual void testRunEnded( TestRunStats const& testRunStats ) {$/;"	f	struct:Catch::CumulativeReporterBase	typeref:typename:void
testRunEnded	vendor/spdlog/tests/catch.hpp	/^    void LegacyReporterAdapter::testRunEnded( TestRunStats const& testRunStats ) {$/;"	f	class:Catch::LegacyReporterAdapter	typeref:typename:void
testRunEndedCumulative	vendor/spdlog/tests/catch.hpp	/^        virtual void testRunEndedCumulative() {$/;"	f	class:Catch::JunitReporter	typeref:typename:void
testRunStarting	vendor/spdlog/tests/catch.hpp	/^        virtual void testRunStarting( TestRunInfo const& ) {}$/;"	f	struct:Catch::CumulativeReporterBase	typeref:typename:void
testRunStarting	vendor/spdlog/tests/catch.hpp	/^        virtual void testRunStarting( TestRunInfo const& _testRunInfo ) {$/;"	f	struct:Catch::StreamingReporterBase	typeref:typename:void
testRunStarting	vendor/spdlog/tests/catch.hpp	/^        virtual void testRunStarting( TestRunInfo const& runInfo ) {$/;"	f	class:Catch::JunitReporter	typeref:typename:void
testRunStarting	vendor/spdlog/tests/catch.hpp	/^        virtual void testRunStarting( TestRunInfo const& testInfo ) {$/;"	f	class:Catch::XmlReporter	typeref:typename:void
testRunStarting	vendor/spdlog/tests/catch.hpp	/^    void LegacyReporterAdapter::testRunStarting( TestRunInfo const& ) {$/;"	f	class:Catch::LegacyReporterAdapter	typeref:typename:void
testSpec	vendor/spdlog/tests/catch.hpp	/^        TestSpec const& testSpec() const { return m_testSpec; }$/;"	f	class:Catch::Config	typeref:typename:TestSpec const &
testSpec	vendor/spdlog/tests/catch.hpp	/^        TestSpec testSpec() {$/;"	f	class:Catch::TestSpecParser	typeref:typename:TestSpec
test_clock	vendor/spdlog/tests/test_mpmc_q.cpp	/^using test_clock = std::chrono::high_resolution_clock;$/;"	t	typeref:typename:std::chrono::high_resolution_clock	file:
test_pad2	vendor/spdlog/tests/test_fmt_helper.cpp	/^void test_pad2(int n, const char *expected)$/;"	f	typeref:typename:void
test_pad3	vendor/spdlog/tests/test_fmt_helper.cpp	/^void test_pad3(uint32_t n, const char *expected)$/;"	f	typeref:typename:void
test_pad6	vendor/spdlog/tests/test_fmt_helper.cpp	/^void test_pad6(std::size_t n, const char *expected)$/;"	f	typeref:typename:void
test_pad9	vendor/spdlog/tests/test_fmt_helper.cpp	/^void test_pad9(std::size_t n, const char *expected)$/;"	f	typeref:typename:void
test_sink	vendor/spdlog/tests/test_async.cpp	/^    auto test_sink = std::make_shared<sinks::test_sink_mt>();$/;"	v	typeref:typename:auto
test_sink	vendor/spdlog/tests/test_async.cpp	/^    auto test_sink = std::static_pointer_cast<sinks::test_sink_mt>(logger->sinks()[0]);$/;"	v	typeref:typename:auto
test_sink	vendor/spdlog/tests/test_misc.cpp	/^    auto test_sink = std::static_pointer_cast<sinks::test_sink_mt>(cloned->sinks()[0]);$/;"	v	typeref:typename:auto
test_sink	vendor/spdlog/tests/test_misc.cpp	/^    auto test_sink = std::static_pointer_cast<sinks::test_sink_mt>(logger->sinks()[0]);$/;"	v	typeref:typename:auto
test_sink	vendor/spdlog/tests/test_sink.h	/^class test_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
test_sink_mt	vendor/spdlog/tests/test_sink.h	/^using test_sink_mt = test_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:test_sink<std::mutex>
test_sink_st	vendor/spdlog/tests/test_sink.h	/^using test_sink_st = test_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:test_sink<details::null_mutex>
test_split_ext	vendor/spdlog/tests/test_file_helper.cpp	/^static void test_split_ext(const char *fname, const char *expect_base, const char *expect_ext)$/;"	f	typeref:typename:void	file:
test_stream	vendor/spdlog/include/spdlog/fmt/bundled/ostream.h	/^struct test_stream : std::basic_ostream<Char> {$/;"	s	namespace:internal
tested_logger_name	vendor/spdlog/tests/test_registry.cpp	/^static const char *tested_logger_name = "null_logger";$/;"	v	typeref:typename:const char *	file:
tested_logger_name2	vendor/spdlog/tests/test_registry.cpp	/^static const char *tested_logger_name2 = "null_logger2";$/;"	v	typeref:typename:const char *	file:
tests	vendor/spdlog/tests/Makefile	/^tests: $(OBJ_FILES)    $/;"	t
testsOrTags	vendor/spdlog/tests/catch.hpp	/^        std::vector<std::string> testsOrTags;$/;"	m	struct:Catch::ConfigData	typeref:typename:std::vector<std::string>
texCoords	dependencies/include/SFML/Graphics/Vertex.hpp	/^    Vector2f  texCoords; \/\/\/< Coordinates of the texture's pixel to map to the vertex$/;"	m	class:sf::Vertex	typeref:typename:Vector2f
texCoordsArrayEnabled	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^        bool      texCoordsArrayEnabled; \/\/\/< Is GL_TEXTURE_COORD_ARRAY client state enabled?$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:bool
text	dependencies/include/SFML/Window/Event.hpp	/^        TextEvent             text;              \/\/\/< Text event parameters (Event::TextEnter/;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:TextEvent
texture	dependencies/include/SFML/Graphics/Font.hpp	/^        Texture          texture; \/\/\/< Texture containing the pixels of the glyphs$/;"	m	struct:sf::Font::Page	typeref:typename:Texture
texture	dependencies/include/SFML/Graphics/RenderStates.hpp	/^    const Texture* texture;   \/\/\/< Texture$/;"	m	class:sf::RenderStates	typeref:typename:const Texture *
textureRect	dependencies/include/SFML/Graphics/Glyph.hpp	/^    IntRect   textureRect; \/\/\/< Texture coordinates of the glyph inside the font's texture$/;"	m	class:sf::Glyph	typeref:typename:IntRect
then	vendor/spdlog/tests/catch.hpp	/^    CompositeGenerator& then( CompositeGenerator& other ) {$/;"	f	class:Catch::CompositeGenerator	typeref:typename:CompositeGenerator &
then	vendor/spdlog/tests/catch.hpp	/^    CompositeGenerator& then( T value ) {$/;"	f	class:Catch::CompositeGenerator	typeref:typename:CompositeGenerator &
thistle	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    thistle = 0xD8BFD8,                 \/\/ rgb(216,191,216)$/;"	e	enum:color
thousands_sep	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC Char internal::thousands_sep(locale_provider *lp) {$/;"	f	class:internal	typeref:typename:FMT_FUNC Char
thread_fun	vendor/spdlog/bench/async_bench.cpp	/^void thread_fun(std::shared_ptr<spdlog::logger> logger, int howmany)$/;"	f	typeref:typename:void
thread_id	vendor/spdlog/include/spdlog/details/log_msg.h	/^    size_t thread_id{0};$/;"	m	struct:spdlog::details::log_msg	typeref:typename:size_t
thread_id	vendor/spdlog/include/spdlog/details/os.h	/^inline size_t thread_id() SPDLOG_NOEXCEPT$/;"	f	namespace:spdlog::details::os	typeref:typename:size_t
thread_id	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    size_t thread_id;$/;"	m	struct:spdlog::details::async_msg	typeref:typename:size_t
thread_pool	vendor/spdlog/include/spdlog/async.h	/^inline std::shared_ptr<spdlog::details::thread_pool> thread_pool()$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<spdlog::details::thread_pool>
thread_pool	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    thread_pool(size_t q_max_items, size_t threads_n)$/;"	f	class:spdlog::details::thread_pool
thread_pool	vendor/spdlog/include/spdlog/details/thread_pool.h	/^class thread_pool$/;"	c	namespace:spdlog::details
thread_pool_	vendor/spdlog/include/spdlog/async_logger.h	/^    std::weak_ptr<details::thread_pool> thread_pool_;$/;"	m	class:spdlog::async_logger	typeref:typename:std::weak_ptr<details::thread_pool>
threads	vendor/spdlog/tests/test_async.cpp	/^        std::vector<std::thread> threads;$/;"	v	typeref:typename:std::vector<std::thread>
threads_	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    std::vector<std::thread> threads_;$/;"	m	class:spdlog::details::thread_pool	typeref:typename:std::vector<std::thread>
throwLogicError	vendor/spdlog/tests/catch.hpp	/^    void throwLogicError( std::string const& message, SourceLineInfo const& locationInfo ) {$/;"	f	namespace:Catch	typeref:typename:void
throw_if_exists_	vendor/spdlog/include/spdlog/details/registry.h	/^    void throw_if_exists_(const std::string &logger_name)$/;"	f	class:spdlog::details::registry	typeref:typename:void
throws	vendor/spdlog/tests/catch.hpp	/^    bool TestCaseInfo::throws() const {$/;"	f	class:Catch::TestCaseInfo	typeref:typename:bool
tid	dependencies/include/libplatform/v8-tracing.h	/^  int tid() const { return tid_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:int
tid_	dependencies/include/libplatform/v8-tracing.h	/^  int tid_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:int
time	vendor/spdlog/include/spdlog/details/log_msg.h	/^    log_clock::time_point time;$/;"	m	struct:spdlog::details::log_msg	typeref:typename:log_clock::time_point
time	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    log_clock::time_point time;$/;"	m	struct:spdlog::details::async_msg	typeref:typename:log_clock::time_point
time_	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^    std::time_t time_;$/;"	m	struct:gmtime::dispatcher	typeref:typename:std::time_t
time_	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^    std::time_t time_;$/;"	m	struct:localtime::dispatcher	typeref:typename:std::time_t
time_fraction	vendor/spdlog/include/spdlog/details/fmt_helper.h	/^inline ToDuration time_fraction(const log_clock::time_point &tp)$/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:ToDuration
tm	vendor/spdlog/tests/test_file_logging.cpp	/^    std::tm tm = spdlog::details::os::localtime();$/;"	v	typeref:typename:std::tm
tm_	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^    std::tm tm_;$/;"	m	struct:gmtime::dispatcher	typeref:typename:std::tm
tm_	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^    std::tm tm_;$/;"	m	struct:localtime::dispatcher	typeref:typename:std::tm
tm_format	vendor/spdlog/include/spdlog/fmt/bundled/time.h	/^  basic_memory_buffer<Char> tm_format;$/;"	m	struct:formatter	typeref:typename:basic_memory_buffer<Char>
to12h	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^static int to12h(const tm &t)$/;"	f	namespace:spdlog::details	typeref:typename:int
toAnsi	dependencies/include/SFML/System/Utf.inl	/^Out Utf<16>::toAnsi(In begin, In end, Out output, char replacement, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
toAnsi	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::toAnsi(In begin, In end, Out output, char replacement, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
toAnsi	dependencies/include/SFML/System/Utf.inl	/^Out Utf<8>::toAnsi(In begin, In end, Out output, char replacement, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
toLatin1	dependencies/include/SFML/System/Utf.inl	/^Out Utf<16>::toLatin1(In begin, In end, Out output, char replacement)$/;"	f	class:Utf	typeref:typename:Out
toLatin1	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::toLatin1(In begin, In end, Out output, char replacement)$/;"	f	class:Utf	typeref:typename:Out
toLatin1	dependencies/include/SFML/System/Utf.inl	/^Out Utf<8>::toLatin1(In begin, In end, Out output, char replacement)$/;"	f	class:Utf	typeref:typename:Out
toLower	vendor/spdlog/tests/catch.hpp	/^    std::string toLower( std::string const& s ) {$/;"	f	namespace:Catch	typeref:typename:std::string
toLowerInPlace	vendor/spdlog/tests/catch.hpp	/^    void toLowerInPlace( std::string& s ) {$/;"	f	namespace:Catch	typeref:typename:void
toString	vendor/spdlog/tests/catch.hpp	/^                virtual std::string toString() const {$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::Contains	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^                virtual std::string toString() const {$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::EndsWith	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^                virtual std::string toString() const {$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::Equals	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^                virtual std::string toString() const {$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::StartsWith	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^            virtual std::string toString() const {$/;"	f	class:Catch::Matchers::Impl::Generic::AllOf	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^            virtual std::string toString() const {$/;"	f	class:Catch::Matchers::Impl::Generic::AnyOf	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^            virtual std::string toString() const {$/;"	f	struct:Catch::Matchers::Impl::StdString::Contains	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^            virtual std::string toString() const {$/;"	f	struct:Catch::Matchers::Impl::StdString::EndsWith	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^            virtual std::string toString() const {$/;"	f	struct:Catch::Matchers::Impl::StdString::Equals	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^            virtual std::string toString() const {$/;"	f	struct:Catch::Matchers::Impl::StdString::StartsWith	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^        std::string toString() const {$/;"	f	class:Catch::Detail::Approx	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^    std::string toString( NSObject* const& nsObject ) {$/;"	f	namespace:Catch	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^    std::string toString( NSString * CATCH_ARC_STRONG const& nsstring ) {$/;"	f	namespace:Catch	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^    std::string toString( NSString const * const& nsstring ) {$/;"	f	namespace:Catch	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^std::string toString( T const& value ) {$/;"	f	namespace:Catch	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^std::string toString( bool value ) {$/;"	f	namespace:Catch	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^std::string toString( char value ) {$/;"	f	namespace:Catch	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^std::string toString( char* const value ) {$/;"	f	namespace:Catch	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^std::string toString( const char* const value ) {$/;"	f	namespace:Catch	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^std::string toString( const double value ) {$/;"	f	namespace:Catch	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^std::string toString( const float value ) {$/;"	f	namespace:Catch	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^std::string toString( const wchar_t* const value )$/;"	f	namespace:Catch	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^std::string toString( int value ) {$/;"	f	namespace:Catch	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^std::string toString( signed char value ) {$/;"	f	namespace:Catch	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^std::string toString( std::nullptr_t ) {$/;"	f	namespace:Catch	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^std::string toString( std::string const& value ) {$/;"	f	namespace:Catch	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^std::string toString( std::vector<T,Allocator> const& v ) {$/;"	f	namespace:Catch	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^std::string toString( std::wstring const& value ) {$/;"	f	namespace:Catch	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^std::string toString( unsigned char value ) {$/;"	f	namespace:Catch	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^std::string toString( unsigned int value ) {$/;"	f	namespace:Catch	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^std::string toString( unsigned long value ) {$/;"	f	namespace:Catch	typeref:typename:std::string
toString	vendor/spdlog/tests/catch.hpp	/^std::string toString( wchar_t* const value )$/;"	f	namespace:Catch	typeref:typename:std::string
toUtf16	dependencies/include/SFML/System/Utf.inl	/^Out Utf<16>::toUtf16(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf16	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::toUtf16(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf16	dependencies/include/SFML/System/Utf.inl	/^Out Utf<8>::toUtf16(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf32	dependencies/include/SFML/System/Utf.inl	/^Out Utf<16>::toUtf32(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf32	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::toUtf32(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf32	dependencies/include/SFML/System/Utf.inl	/^Out Utf<8>::toUtf32(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf8	dependencies/include/SFML/System/Utf.inl	/^Out Utf<16>::toUtf8(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf8	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::toUtf8(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf8	dependencies/include/SFML/System/Utf.inl	/^Out Utf<8>::toUtf8(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toWide	dependencies/include/SFML/System/Utf.inl	/^Out Utf<16>::toWide(In begin, In end, Out output, wchar_t replacement)$/;"	f	class:Utf	typeref:typename:Out
toWide	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::toWide(In begin, In end, Out output, wchar_t replacement)$/;"	f	class:Utf	typeref:typename:Out
toWide	dependencies/include/SFML/System/Utf.inl	/^Out Utf<8>::toWide(In begin, In end, Out output, wchar_t replacement)$/;"	f	class:Utf	typeref:typename:Out
to_esc	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^FMT_CONSTEXPR inline void to_esc(uint8_t c, char out[], int offset)$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR void
to_hex	vendor/spdlog/include/spdlog/fmt/bin_to_hex.h	/^inline details::bytes_range<It> to_hex(const It range_begin, const It range_end)$/;"	f	namespace:spdlog	typeref:typename:details::bytes_range<It>
to_hex	vendor/spdlog/include/spdlog/fmt/bin_to_hex.h	/^inline details::bytes_range<typename Container::const_iterator> to_hex(const Container &containe/;"	f	namespace:spdlog	typeref:typename:details::bytes_range<typename Container::const_iterator>
to_log_msg	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    log_msg to_log_msg()$/;"	f	struct:spdlog::details::async_msg	typeref:typename:log_msg
to_short_c_str	vendor/spdlog/include/spdlog/common.h	/^inline const char *to_short_c_str(spdlog::level::level_enum l) SPDLOG_NOEXCEPT$/;"	f	namespace:spdlog::level	typeref:typename:const char *
to_string	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^std::basic_string<Char> to_string(const basic_memory_buffer<Char, SIZE> &buf) {$/;"	f	typeref:typename:std::basic_string<Char>
to_string	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^std::string to_string(const T &value) {$/;"	f	typeref:typename:std::string
to_string_view	vendor/spdlog/include/spdlog/common.h	/^inline string_view_t &to_string_view(spdlog::level::level_enum l) SPDLOG_NOEXCEPT$/;"	f	namespace:spdlog::level	typeref:typename:string_view_t &
to_string_view	vendor/spdlog/include/spdlog/details/fmt_helper.h	/^inline spdlog::string_view_t to_string_view(const fmt::basic_memory_buffer<char, Buffer_Size> &b/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:spdlog::string_view_t
to_unsigned	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR typename std::make_unsigned<Int>::type to_unsigned(Int value) {$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR typename std::make_unsigned<Int>::type
to_wstring	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^std::wstring to_wstring(const T &value) {$/;"	f	typeref:typename:std::wstring
tolerance_wait	vendor/spdlog/tests/test_mpmc_q.cpp	/^    milliseconds tolerance_wait(10);$/;"	v	typeref:typename:milliseconds
tolerance_wait	vendor/spdlog/tests/test_mpmc_q.cpp	/^    milliseconds tolerance_wait(50);$/;"	v	typeref:typename:milliseconds
tomato	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    tomato = 0xFF6347,                  \/\/ rgb(255,99,71)$/;"	e	enum:color
top	dependencies/include/SFML/Graphics/Font.hpp	/^        unsigned int top;    \/\/\/< Y position of the row into the texture$/;"	m	struct:sf::Font::Row	typeref:typename:unsigned int
top	dependencies/include/SFML/Graphics/Rect.hpp	/^    T top;    \/\/\/< Top coordinate of the rectangle$/;"	m	class:sf::Rect	typeref:typename:T
tos	dependencies/include/v8-profiler.h	/^    void* tos;  \/\/ Top stack value (*sp).$/;"	m	union:v8::TickSample::__anon2dc9d442010a	typeref:typename:void *
total	vendor/spdlog/tests/catch.hpp	/^        std::size_t total() const {$/;"	f	struct:Catch::Counts	typeref:typename:std::size_t
total_pad_	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    size_t total_pad_;$/;"	m	class:spdlog::details::scoped_pad	typeref:typename:size_t
totals	vendor/spdlog/tests/catch.hpp	/^        Totals totals;$/;"	m	struct:Catch::AssertionStats	typeref:typename:Totals
totals	vendor/spdlog/tests/catch.hpp	/^        Totals totals;$/;"	m	struct:Catch::TestCaseStats	typeref:typename:Totals
totals	vendor/spdlog/tests/catch.hpp	/^        Totals totals;$/;"	m	struct:Catch::TestGroupStats	typeref:typename:Totals
totals	vendor/spdlog/tests/catch.hpp	/^        Totals totals;$/;"	m	struct:Catch::TestRunStats	typeref:typename:Totals
touch	dependencies/include/SFML/Window/Event.hpp	/^        TouchEvent            touch;             \/\/\/< Touch events parameters (Event::TouchBe/;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:TouchEvent
tp	vendor/spdlog/tests/test_async.cpp	/^        auto tp = std::make_shared<details::thread_pool>(queue_size, 1);$/;"	v	typeref:typename:auto
tp	vendor/spdlog/tests/test_async.cpp	/^        auto tp = std::make_shared<spdlog::details::thread_pool>(messages, tp_threads);$/;"	v	typeref:typename:auto
tp	vendor/spdlog/tests/test_async.cpp	/^    auto tp = std::make_shared<details::thread_pool>(messages, 2);$/;"	v	typeref:typename:auto
tp	vendor/spdlog/tests/test_async.cpp	/^    auto tp = std::make_shared<details::thread_pool>(queue_size, 1);$/;"	v	typeref:typename:auto
tp_	vendor/spdlog/include/spdlog/details/registry.h	/^    std::shared_ptr<thread_pool> tp_;$/;"	m	class:spdlog::details::registry	typeref:typename:std::shared_ptr<thread_pool>
tp_mutex	vendor/spdlog/include/spdlog/details/registry.h	/^    std::recursive_mutex &tp_mutex()$/;"	f	class:spdlog::details::registry	typeref:typename:std::recursive_mutex &
tp_mutex_	vendor/spdlog/include/spdlog/details/registry.h	/^    std::recursive_mutex tp_mutex_;$/;"	m	class:spdlog::details::registry	typeref:typename:std::recursive_mutex
tp_threads	vendor/spdlog/tests/test_async.cpp	/^    size_t tp_threads = 10;$/;"	v	typeref:typename:size_t
tp_threads	vendor/spdlog/tests/test_async.cpp	/^    size_t tp_threads = 1;$/;"	v	typeref:typename:size_t
trace	vendor/spdlog/include/spdlog/common.h	/^    trace = SPDLOG_LEVEL_TRACE,$/;"	e	enum:spdlog::level::level_enum
trace	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::trace(const T &msg)$/;"	f	class:spdlog::logger	typeref:typename:void
trace	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::trace(const char *fmt, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
trace	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::trace(const wchar_t *fmt, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
trace	vendor/spdlog/include/spdlog/spdlog.h	/^inline void trace(const T &msg)$/;"	f	namespace:spdlog	typeref:typename:void
trace	vendor/spdlog/include/spdlog/spdlog.h	/^inline void trace(const char *fmt, const Args &... args)$/;"	f	namespace:spdlog	typeref:typename:void
trace	vendor/spdlog/include/spdlog/spdlog.h	/^inline void trace(const wchar_t *fmt, const Args &... args)$/;"	f	namespace:spdlog	typeref:typename:void
trace_buffer_	dependencies/include/libplatform/v8-tracing.h	/^  std::unique_ptr<TraceBuffer> trace_buffer_;$/;"	m	class:v8::platform::tracing::TracingController	typeref:typename:std::unique_ptr<TraceBuffer>
trace_config_	dependencies/include/libplatform/v8-tracing.h	/^  std::unique_ptr<TraceConfig> trace_config_;$/;"	m	class:v8::platform::tracing::TracingController	typeref:typename:std::unique_ptr<TraceConfig>
trace_example	vendor/spdlog/example/example.cpp	/^void trace_example()$/;"	f	typeref:typename:void
tracing	dependencies/include/libplatform/v8-tracing.h	/^namespace tracing {$/;"	n	namespace:v8::platform
traits	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef std::iterator_traits<OutputIt> traits;$/;"	t	class:internal::truncating_iterator	typeref:typename:std::iterator_traits<OutputIt>
traits_type	vendor/spdlog/include/spdlog/fmt/bundled/ostream.h	/^  typedef typename std::basic_streambuf<Char>::traits_type traits_type;$/;"	t	class:internal::formatbuf	typeref:typename:std::basic_streambuf<Char>::traits_type
transform	dependencies/include/SFML/Graphics/RenderStates.hpp	/^    Transform      transform; \/\/\/< Transform$/;"	m	class:sf::RenderStates	typeref:typename:Transform
translate	vendor/spdlog/tests/catch.hpp	/^            virtual std::string translate() const {$/;"	f	class:Catch::ExceptionTranslatorRegistrar::ExceptionTranslator	typeref:typename:std::string
translateActiveException	vendor/spdlog/tests/catch.hpp	/^        virtual std::string translateActiveException() const {$/;"	f	class:Catch::ExceptionTranslatorRegistry	typeref:typename:std::string
translateActiveException	vendor/spdlog/tests/catch.hpp	/^    std::string translateActiveException() {$/;"	f	namespace:Catch	typeref:typename:std::string
trim	vendor/spdlog/tests/catch.hpp	/^    std::string trim( std::string const& str ) {$/;"	f	namespace:Catch	typeref:typename:std::string
trueValue	vendor/spdlog/tests/catch.hpp	/^        void trueValue() const {}$/;"	f	class:Catch::SafeBool	typeref:typename:void
truncate_	vendor/spdlog/include/spdlog/sinks/daily_file_sink.h	/^    bool truncate_;$/;"	m	class:spdlog::sinks::daily_file_sink	typeref:typename:bool
truncating_iterator	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  truncating_iterator(OutputIt out, std::size_t limit)$/;"	f	class:internal::truncating_iterator
truncating_iterator	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class truncating_iterator {$/;"	c	namespace:internal
tryTranslators	vendor/spdlog/tests/catch.hpp	/^        std::string tryTranslators( std::vector<const IExceptionTranslator*>::const_iterator it /;"	f	class:Catch::ExceptionTranslatorRegistry	typeref:typename:std::string
try_lock	vendor/spdlog/include/spdlog/details/null_mutex.h	/^    bool try_lock()$/;"	f	struct:spdlog::details::null_mutex	typeref:typename:bool
ts	dependencies/include/libplatform/v8-tracing.h	/^  int64_t ts() { return ts_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:int64_t
ts_	dependencies/include/libplatform/v8-tracing.h	/^  int64_t ts_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:int64_t
tts	dependencies/include/libplatform/v8-tracing.h	/^  int64_t tts() { return tts_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:int64_t
tts_	dependencies/include/libplatform/v8-tracing.h	/^  int64_t tts_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:int64_t
turquoise	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    turquoise = 0x40E0D0,               \/\/ rgb(64,224,208)$/;"	e	enum:color
type	dependencies/include/SFML/Window/Event.hpp	/^        Sensor::Type type; \/\/\/< Type of the sensor$/;"	m	struct:sf::Event::SensorEvent	typeref:typename:Sensor::Type
type	dependencies/include/SFML/Window/Event.hpp	/^    EventType type; \/\/\/< Type of the event$/;"	m	class:sf::Event	typeref:typename:EventType
type	dependencies/include/nlohmann/json.hpp	/^    using type = Default;$/;"	t	struct:nlohmann::detail::detector	typeref:typename:Default
type	dependencies/include/nlohmann/json.hpp	/^    using type = Op<Args...>;$/;"	v	namespace:nlohmann::detail	typeref:struct:detector using
type	dependencies/include/nlohmann/json.hpp	/^    using type = index_sequence;$/;"	t	struct:nlohmann::detail::index_sequence	typeref:typename:index_sequence
type	dependencies/include/nlohmann/json.hpp	/^    using type = void;$/;"	t	struct:nlohmann::detail::make_void	typeref:typename:void
type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    std::back_insert_iterator<internal::basic_buffer<Char>>, Char> type;$/;"	t	struct:buffer_context	typeref:typename:basic_format_context<std::back_insert_iterator<internal::basic_buffer<Char>>,Char>
type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    typename std::remove_reference<F>::type(Args...)>::type type;$/;"	t	struct:internal::result_of
type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  internal::type type() const { return type_; }$/;"	f	class:basic_format_arg	typeref:typename:internal::type
type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  struct formatter_type { typedef formatter<T, char_type> type; };$/;"	t	struct:basic_format_context::formatter_type	typeref:typename:formatter<T,char_type>
type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  struct type {$/;"	s	class:basic_string_view
type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typedef std::basic_string_view<Char> type;$/;"	t	class:basic_string_view	typeref:typename:std::basic_string_view<Char>
type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typedef std::experimental::basic_string_view<Char> type;$/;"	t	class:basic_string_view	typeref:typename:std::experimental::basic_string_view<Char>
type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typename internal::type type(unsigned index) const {$/;"	f	class:basic_format_args	typeref:typename:internal::type
type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^enum type {$/;"	g	namespace:internal
type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    typename format_context_t<OutputIt, Char>::type> type;$/;"	t	struct:format_args_t	typeref:typename:basic_format_args<typename format_context_t<OutputIt,Char>::type>
type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  Char type;$/;"	m	struct:float_spec_handler	typeref:typename:Char
type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR Char type() const { return type_; }$/;"	f	class:basic_format_specs	typeref:typename:FMT_CONSTEXPR Char
type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  struct result { typedef Result type; };$/;"	t	struct:internal::function::result	typeref:typename:Result
type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct checked { typedef stdext::checked_array_iterator<T*> type; };$/;"	t	struct:internal::checked	typeref:typename:stdext::checked_array_iterator<T * >
type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct format_context_t { typedef basic_format_context<OutputIt, Char> type; };$/;"	t	struct:format_context_t	typeref:typename:basic_format_context<OutputIt,Char>
type	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^    std::back_insert_iterator<Buffer>, typename Buffer::value_type> type;$/;"	t	struct:printf_context	typeref:typename:basic_printf_context<std::back_insert_iterator<Buffer>,typename Buffer::value_type>
type	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  struct formatter_type { typedef printf_formatter<T> type; };$/;"	t	struct:basic_printf_context::formatter_type	typeref:typename:printf_formatter<T>
type	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  typedef bool type;$/;"	t	struct:internal::make_unsigned_or_bool	typeref:typename:bool
type	vendor/spdlog/tests/catch.hpp	/^            Type type;$/;"	m	struct:Clara::Parser::Token	typeref:typename:Type
type	vendor/spdlog/tests/catch.hpp	/^        ResultWas::OfType type;$/;"	m	struct:Catch::MessageInfo	typeref:typename:ResultWas::OfType
type	vendor/spdlog/tests/catch.hpp	/^        template<typename T> struct RemoveConstRef<T const&>{ typedef T type; };$/;"	t	struct:Clara::Detail::RemoveConstRef	typeref:typename:T
type	vendor/spdlog/tests/catch.hpp	/^        template<typename T> struct RemoveConstRef<T const>{ typedef T type; };$/;"	t	struct:Clara::Detail::RemoveConstRef	typeref:typename:T
type	vendor/spdlog/tests/catch.hpp	/^        template<typename T> struct RemoveConstRef<T&>{ typedef T type; };$/;"	t	struct:Clara::Detail::RemoveConstRef	typeref:typename:T
type	vendor/spdlog/tests/catch.hpp	/^        template<typename T> struct RemoveConstRef{ typedef T type; };$/;"	t	struct:Clara::Detail::RemoveConstRef	typeref:typename:T
type	vendor/spdlog/tests/catch.hpp	/^        typedef SizedIf<sizeof(dummy((T*)0))> type;$/;"	t	class:Catch::Detail::IsStreamInsertableHelper
type	vendor/spdlog/tests/catch.hpp	/^        typedef void (SafeBool::*type)() const;$/;"	t	class:Catch::SafeBool	typeref:typename:void (SafeBool::*)()const
type_	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  internal::type type_;$/;"	m	class:basic_format_arg	typeref:typename:internal::type
type_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  Char type_;$/;"	m	class:basic_format_specs	typeref:typename:Char
type_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  CharType type_;$/;"	m	class:internal::char_specs_checker	typeref:typename:CharType
type_	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  typename Context::char_type type_;$/;"	m	class:internal::arg_converter	typeref:typename:Context::char_type
type_spec	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef format_spec<char, type_tag> type_spec;$/;"	t	typeref:typename:format_spec<char,type_tag>
type_tag	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  static const type type_tag = TYPE;$/;"	m	struct:internal::init	typeref:typename:const type
type_tag	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^enum format_spec_tag {fill_tag, align_tag, width_tag, type_tag};$/;"	e	enum:format_spec_tag
types_	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  unsigned long long types_;$/;"	m	class:basic_format_args	typeref:typename:unsigned long long
u8string_view	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  u8string_view(const char *s)$/;"	f	class:u8string_view
u8string_view	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  u8string_view(const char *s, size_t count) FMT_NOEXCEPT$/;"	f	class:u8string_view
u8string_view	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class u8string_view : public basic_string_view<char8_t> {$/;"	c
udl_arg	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct udl_arg {$/;"	s	namespace:internal
udl_formatter	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class udl_formatter {$/;"	c	namespace:internal
uint64_t	vendor/spdlog/tests/catch.hpp	/^typedef unsigned long long uint64_t;$/;"	t	typeref:typename:unsigned long long
uint_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  int_type, uint_type, long_long_type, ulong_long_type, bool_type, char_type,$/;"	e	enum:internal::type
uint_value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    unsigned uint_value;$/;"	m	union:internal::value::__anonbb24b047030a	typeref:typename:unsigned
ulong_long_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  int_type, uint_type, long_long_type, ulong_long_type, bool_type, char_type,$/;"	e	enum:internal::type
ulong_long_value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    unsigned long long ulong_long_value;$/;"	m	union:internal::value::__anonbb24b047030a	typeref:typename:unsigned long long
ulong_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^                         unsigned, unsigned long long>::type ulong_type;$/;"	t	namespace:internal
uncvref_t	dependencies/include/nlohmann/json.hpp	/^using uncvref_t = typename std::remove_cv<typename std::remove_reference<T>::type>::type;$/;"	t	namespace:nlohmann::detail	typeref:typename:std::remove_cv<typename std::remove_reference<T>::type>::type
underline	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string underline = "\\033[4m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
unexpectedExceptions	vendor/spdlog/tests/catch.hpp	/^        unsigned int unexpectedExceptions;$/;"	m	class:Catch::JunitReporter	typeref:typename:unsigned int
unicode	dependencies/include/SFML/Window/Event.hpp	/^        Uint32 unicode; \/\/\/< UTF-32 Unicode value of the character$/;"	m	struct:sf::Event::TextEvent	typeref:typename:Uint32
unlock	vendor/spdlog/include/spdlog/details/null_mutex.h	/^    void unlock() {}$/;"	f	struct:spdlog::details::null_mutex	typeref:typename:void
unmuteMetrics	dependencies/include/v8-inspector.h	/^  virtual void unmuteMetrics(int contextGroupId) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
unprintableString	vendor/spdlog/tests/catch.hpp	/^    std::string unprintableString = "{?}";$/;"	v	namespace:Catch::Detail	typeref:typename:std::string
unregisterReader	dependencies/include/SFML/Audio/SoundFileFactory.inl	/^void SoundFileFactory::unregisterReader()$/;"	f	class:sf::SoundFileFactory	typeref:typename:void
unregisterWriter	dependencies/include/SFML/Audio/SoundFileFactory.inl	/^void SoundFileFactory::unregisterWriter()$/;"	f	class:sf::SoundFileFactory	typeref:typename:void
unsigned_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    typedef typename internal::int_traits<Int>::main_type unsigned_type;$/;"	t	struct:basic_writer::int_writer	typeref:typename:internal::int_traits<Int>::main_type
unusedTokens	vendor/spdlog/tests/catch.hpp	/^        std::vector<Clara::Parser::Token> const& unusedTokens() const {$/;"	f	class:Catch::Session	typeref:typename:std::vector<Clara::Parser::Token> const &
update	src/Game.cpp	/^void Game::update(){$/;"	f	class:Game	typeref:typename:void
update_stats	dependencies/include/v8-profiler.h	/^  bool update_stats : 1;  \/\/ Whether the sample should update aggregated stats.$/;"	m	struct:v8::TickSample	typeref:typename:bool:1
upper	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  bool upper;$/;"	m	struct:float_spec_handler	typeref:typename:bool
usage	vendor/spdlog/tests/catch.hpp	/^        std::string usage( std::string const& procName ) const {$/;"	f	class:Clara::CommandLine	typeref:typename:std::string
usage	vendor/spdlog/tests/catch.hpp	/^        void usage( std::ostream& os, std::string const& procName ) const {$/;"	f	class:Clara::CommandLine	typeref:typename:void
use	vendor/spdlog/tests/catch.hpp	/^            void use( Colour::Code ) {}$/;"	f	struct:Catch::__anon368216750810::NoColourImpl	typeref:typename:void
use	vendor/spdlog/tests/catch.hpp	/^        virtual void use( Colour::Code _colourCode ) {$/;"	f	class:Catch::__anon368216750910::Win32ColourImpl	typeref:typename:void
use	vendor/spdlog/tests/catch.hpp	/^        virtual void use( Colour::Code _colourCode ) {$/;"	f	class:Catch::__anon368216750a10::PosixColourImpl	typeref:typename:void
use	vendor/spdlog/tests/catch.hpp	/^    void Colour::use( Code _colourCode ) {$/;"	f	class:Catch::Colour	typeref:typename:void
useActiveException	vendor/spdlog/tests/catch.hpp	/^    void ResultBuilder::useActiveException( ResultDisposition::Flags resultDisposition ) {$/;"	f	class:Catch::ResultBuilder	typeref:typename:void
useConfigData	vendor/spdlog/tests/catch.hpp	/^        void useConfigData( ConfigData const& _configData ) {$/;"	f	class:Catch::Session	typeref:typename:void
useStream	vendor/spdlog/tests/catch.hpp	/^        void useStream( std::string const& streamName ) {$/;"	f	class:Catch::Config	typeref:typename:void
useVertexCache	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^        bool      useVertexCache; \/\/\/< Did we previously use the vertex cache?$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:bool
use_grisu	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline bool use_grisu() {$/;"	f	namespace:internal	typeref:typename:bool
use_raw_msg_	vendor/spdlog/include/spdlog/sinks/android_sink.h	/^    bool use_raw_msg_;$/;"	m	class:spdlog::sinks::android_sink	typeref:typename:bool
used	vendor/spdlog/tests/catch.hpp	/^        bool used;$/;"	m	struct:Catch::LazyStat	typeref:typename:bool
user_defined_example	vendor/spdlog/example/example.cpp	/^void user_defined_example()$/;"	f	typeref:typename:void
user_defined_example	vendor/spdlog/example/jni/example.cpp	/^void user_defined_example()$/;"	f	typeref:typename:void
ustring	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    string_value<unsigned char> ustring;$/;"	m	union:internal::value::__anonbb24b047030a	typeref:typename:string_value<unsigned char>
utc	vendor/spdlog/include/spdlog/common.h	/^    utc    \/\/ log utc$/;"	e	enum:spdlog::pattern_time_type
utc_minutes_offset	vendor/spdlog/include/spdlog/details/os.h	/^inline int utc_minutes_offset(const std::tm &tm = details::os::localtime())$/;"	f	namespace:spdlog::details::os	typeref:typename:int
utf16_to_utf8	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC internal::utf16_to_utf8::utf16_to_utf8(wstring_view s) {$/;"	f	class:internal::utf16_to_utf8	typeref:typename:FMT_FUNC
utf16_to_utf8	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  utf16_to_utf8() {}$/;"	f	class:internal::utf16_to_utf8
utf16_to_utf8	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class utf16_to_utf8 {$/;"	c	namespace:internal
utf8_to_utf16	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC internal::utf8_to_utf16::utf8_to_utf16(string_view s) {$/;"	f	class:internal::utf8_to_utf16	typeref:typename:FMT_FUNC
utf8_to_utf16	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class utf8_to_utf16 {$/;"	c	namespace:internal
utils	vendor/spdlog/bench/utils.h	/^namespace utils {$/;"	n
utils	vendor/spdlog/example/utils.h	/^namespace utils {$/;"	n
v	vendor/spdlog/tests/test_misc.cpp	/^    std::vector<unsigned char> v{9, 0xa, 0xb, 0xc, 0xff, 0xff};$/;"	v	typeref:typename:std::vector<unsigned char>
v8	dependencies/include/libplatform/libplatform.h	/^namespace v8 {$/;"	n
v8	dependencies/include/libplatform/v8-tracing.h	/^namespace v8 {$/;"	n
v8	dependencies/include/v8-internal.h	/^namespace v8 {$/;"	n
v8	dependencies/include/v8-platform.h	/^namespace v8 {$/;"	n
v8	dependencies/include/v8-profiler.h	/^namespace v8 {$/;"	n
v8	dependencies/include/v8-testing.h	/^namespace v8 {$/;"	n
v8	dependencies/include/v8-util.h	/^namespace v8 {$/;"	n
v8	dependencies/include/v8-value-serializer-version.h	/^namespace v8 {$/;"	n
v8	dependencies/include/v8-wasm-trap-handler-posix.h	/^namespace v8 {$/;"	n
v8	dependencies/include/v8-wasm-trap-handler-win.h	/^namespace v8 {$/;"	n
v8	dependencies/include/v8.h	/^namespace v8 {$/;"	n
v8_inspector	dependencies/include/v8-inspector.h	/^namespace v8_inspector {$/;"	n
v_	vendor/spdlog/include/spdlog/details/circular_q.h	/^    std::vector<T> v_;$/;"	m	class:spdlog::details::circular_q	typeref:typename:std::vector<T>
v_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit v_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::v_formatter
v_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class v_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
val	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  T val;$/;"	m	struct:internal::init	typeref:typename:T
val_	dependencies/include/v8.h	/^  T* val_;$/;"	m	class:v8::Eternal	typeref:typename:T *
val_	dependencies/include/v8.h	/^  T* val_;$/;"	m	class:v8::Local	typeref:typename:T *
val_	dependencies/include/v8.h	/^  T* val_;$/;"	m	class:v8::MaybeLocal	typeref:typename:T *
val_	dependencies/include/v8.h	/^  T* val_;$/;"	m	class:v8::PersistentBase	typeref:typename:T *
validate	vendor/spdlog/tests/catch.hpp	/^        void validate() const {$/;"	f	struct:Clara::CommonArgProperties	typeref:typename:void
validate	vendor/spdlog/tests/catch.hpp	/^        void validate() const$/;"	f	class:Clara::CommandLine	typeref:typename:void
value	dependencies/include/nlohmann/json.hpp	/^    static constexpr T value{};$/;"	m	struct:nlohmann::detail::static_const	typeref:typename:T
value	dependencies/include/nlohmann/json.hpp	/^constexpr T static_const<T>::value;$/;"	m	class:nlohmann::detail::static_const<T>	typeref:typename:T
value	vendor/spdlog/include/spdlog/details/null_mutex.h	/^    int value;$/;"	m	struct:spdlog::details::null_atomic_int	typeref:typename:int
value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    value = !std::is_arithmetic<T>::value && std::is_convertible<T, int>::value$/;"	e	enum:convert_to_int::__anonbb24b0470103
value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR value(int val = 0) : int_value(val) {}$/;"	f	class:internal::value	typeref:typename:FMT_CONSTEXPR
value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  const Char *value;$/;"	m	struct:internal::string_value	typeref:typename:const Char *
value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  const T &value;$/;"	m	struct:internal::named_arg	typeref:typename:const T &
value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  const void *value;$/;"	m	struct:internal::custom_value	typeref:typename:const void *
value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  explicit value(const T &val) {$/;"	f	class:internal::value
value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  static const type value = value_type::type_tag;$/;"	m	struct:internal::get_type	typeref:typename:const type
value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  value(basic_string_view<char_type> val) {$/;"	f	class:internal::value
value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  value(const char_type *val) { string.value = val; }$/;"	f	class:internal::value
value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  value(const signed char *val) {$/;"	f	class:internal::value
value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  value(const unsigned char *val) {$/;"	f	class:internal::value
value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  value(const void *val) { pointer = val; }$/;"	f	class:internal::value
value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  value(double val) { double_value = val; }$/;"	f	class:internal::value
value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  value(long double val) { long_double_value = val; }$/;"	f	class:internal::value
value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  value(long long val) { long_long_value = val; }$/;"	f	class:internal::value
value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  value(unsigned long long val) { ulong_long_value = val; }$/;"	f	class:internal::value
value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  value(unsigned val) { uint_value = val; }$/;"	f	class:internal::value
value	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^class value {$/;"	c	namespace:internal
value	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    char_type value;$/;"	m	struct:internal::arg_formatter_base::char_spec_handler	typeref:typename:char_type
value	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    char_type value;$/;"	m	struct:internal::arg_formatter_base::char_writer	typeref:typename:char_type
value	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    const char_type *value;$/;"	m	struct:internal::arg_formatter_base::cstring_spec_handler	typeref:typename:const char_type *
value	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    value = std::is_integral<T>::value && !std::is_same<T, bool>::value &&$/;"	e	enum:internal::is_integer::__anondc8451670303
value	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  T value() const { return value_; }$/;"	f	class:format_spec	typeref:typename:T
value	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  char value;$/;"	m	struct:char8_t	typeref:typename:char
value	vendor/spdlog/include/spdlog/fmt/bundled/ostream.h	/^  static const bool value = result::value;$/;"	m	class:internal::is_streamable	typeref:typename:const bool
value	vendor/spdlog/include/spdlog/fmt/bundled/ostream.h	/^  static const bool value =$/;"	m	struct:convert_to_int	typeref:typename:const bool
value	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool value =$/;"	m	class:internal::is_like_std_string	typeref:typename:FMT_CONSTEXPR_DECL const bool
value	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool value =$/;"	m	class:internal::is_tuple_like_	typeref:typename:FMT_CONSTEXPR_DECL const bool
value	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool value =$/;"	m	struct:is_range	typeref:typename:FMT_CONSTEXPR_DECL const bool
value	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool value =$/;"	m	struct:is_tuple_like	typeref:typename:FMT_CONSTEXPR_DECL const bool
value	vendor/spdlog/tests/catch.hpp	/^            T value;$/;"	m	struct:Catch::CumulativeReporterBase::Node	typeref:typename:T
value	vendor/spdlog/tests/catch.hpp	/^        enum { value = sizeof( testStreamable(s << t) ) == sizeof( TrueType ) };$/;"	e	enum:Catch::Detail::IsStreamInsertable::__anon368216750103
value	vendor/spdlog/tests/catch.hpp	/^        static const bool value = false;$/;"	m	struct:Catch::FalseType	typeref:typename:const bool
value	vendor/spdlog/tests/catch.hpp	/^        static const bool value = true;$/;"	m	struct:Catch::TrueType	typeref:typename:const bool
value	vendor/spdlog/tests/catch.hpp	/^        template<>              struct IsBool<bool> { static const bool value = true; };$/;"	m	struct:Clara::Detail::IsBool	typeref:typename:const bool
value	vendor/spdlog/tests/catch.hpp	/^        template<typename T>    struct IsBool       { static const bool value = false; };$/;"	m	struct:Clara::Detail::IsBool	typeref:typename:const bool
valueOr	vendor/spdlog/tests/catch.hpp	/^        T valueOr( T const& defaultValue ) const {$/;"	f	class:Catch::Option	typeref:typename:T
valueSubtype	dependencies/include/v8-inspector.h	/^  virtual std::unique_ptr<StringBuffer> valueSubtype(v8::Local<v8::Value>) {$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:std::unique_ptr<StringBuffer>
value_	dependencies/include/v8-util.h	/^    PersistentContainerValue value_;$/;"	m	class:v8::PersistentValueMapBase::PersistentValueReference	typeref:typename:PersistentContainerValue
value_	dependencies/include/v8.h	/^  internal::Address* value_;$/;"	m	class:v8::ReturnValue	typeref:typename:internal::Address *
value_	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  internal::value<Context> value_;$/;"	m	class:basic_format_arg	typeref:typename:internal::value<Context>
value_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  T value_;$/;"	m	class:format_spec	typeref:typename:T
value_	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  int value_;$/;"	m	class:error_code	typeref:typename:int
value_t	dependencies/include/nlohmann/json.hpp	/^    using value_t = std::false_type;$/;"	t	struct:nlohmann::detail::detector	typeref:typename:std::false_type
value_type	dependencies/include/nlohmann/json.hpp	/^    using value_type = std::size_t;$/;"	t	struct:nlohmann::detail::index_sequence	typeref:typename:std::size_t
value_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^        declval<typename std::decay<T>::type&>())) value_type;$/;"	t	struct:internal::get_type
value_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    internal::value<Context>, basic_format_arg<Context>>::type value_type;$/;"	t	class:format_arg_store	typeref:typename:std::conditional<IS_PACKED,internal::value<Context>,basic_format_arg<Context>>::type
value_type	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  typedef T value_type;$/;"	t	class:internal::basic_buffer	typeref:typename:T
value_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef Char value_type;$/;"	t	class:internal::null_terminating_iterator	typeref:typename:Char
value_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef T value_type;$/;"	t	class:format_spec	typeref:typename:T
value_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef T value_type;$/;"	t	class:internal::counting_iterator	typeref:typename:T
value_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef T value_type;$/;"	t	class:output_range	typeref:typename:T
value_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef typename Container::value_type value_type;$/;"	t	class:back_insert_range	typeref:typename:Container::value_type
value_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef typename traits::value_type value_type;$/;"	t	class:internal::truncating_iterator	typeref:typename:traits::value_type
value_type	vendor/spdlog/include/spdlog/fmt/bundled/ranges.h	/^  typedef T value_type;$/;"	t	struct:internal::integer_sequence	typeref:typename:T
values	vendor/spdlog/tests/catch.hpp	/^    CompositeGenerator<T> values( T val1, T val2 ) {$/;"	f	namespace:Catch::Generators	typeref:typename:CompositeGenerator<T>
values	vendor/spdlog/tests/catch.hpp	/^    CompositeGenerator<T> values( T val1, T val2, T val3 ){$/;"	f	namespace:Catch::Generators	typeref:typename:CompositeGenerator<T>
values	vendor/spdlog/tests/catch.hpp	/^    CompositeGenerator<T> values( T val1, T val2, T val3, T val4 ) {$/;"	f	namespace:Catch::Generators	typeref:typename:CompositeGenerator<T>
values_	dependencies/include/v8.h	/^  internal::Address* values_;$/;"	m	class:v8::FunctionCallbackInfo	typeref:typename:internal::Address *
values_	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    const internal::value<Context> *values_;$/;"	m	union:basic_format_args::__anonbb24b047050a	typeref:typename:const internal::value<Context> *
vector	dependencies/include/v8-profiler.h	/^template class V8_EXPORT std::vector<v8::CpuProfileDeoptFrame>;$/;"	m	class:std	typeref:class:V8_EXPORT
vector	dependencies/include/v8-profiler.h	/^template class V8_EXPORT std::vector<v8::CpuProfileDeoptInfo>;$/;"	m	class:std	typeref:class:V8_EXPORT
vendorId	dependencies/include/SFML/Window/Joystick.hpp	/^        unsigned int vendorId;  \/\/\/< Manufacturer identifier$/;"	m	struct:sf::Joystick::Identification	typeref:typename:unsigned int
verbosity	vendor/spdlog/tests/catch.hpp	/^        Verbosity::Level verbosity;$/;"	m	struct:Catch::ConfigData	typeref:typename:Verbosity::Level
version_config	vendor/spdlog/CMakeLists.txt	/^set(version_config "${CMAKE_BINARY_DIR}\/${PROJECT_NAME}ConfigVersion.cmake")$/;"	v
vertexCache	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^        Vertex    vertexCache[VertexCacheSize]; \/\/\/< Pre-transformed vertices cache$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:Vertex[]
vformat	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^inline std::basic_string<Char> vformat($/;"	f	typeref:typename:std::basic_string<Char>
vformat	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline std::basic_string<Char> internal::vformat($/;"	f	class:internal	typeref:typename:std::basic_string<Char>
vformat_to	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    vformat_to(std::back_insert_iterator<Container> out,$/;"	f	typeref:typename:std::enable_if<is_contiguous<Container>::value,std::back_insert_iterator<Container>>::type
vformat_to	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  vformat_to(std::back_insert_iterator<Container> out,$/;"	f	typeref:typename:std::enable_if<is_contiguous<Container>::value,std::back_insert_iterator<Container>>::type
vformat_to	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline OutputIt vformat_to($/;"	f	typeref:typename:OutputIt
vformat_to	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline OutputIt vformat_to(OutputIt out, string_view format_str,$/;"	f	typeref:typename:OutputIt
vformat_to	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline format_context::iterator vformat_to($/;"	f	typeref:typename:format_context::iterator
vformat_to	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline wformat_context::iterator vformat_to($/;"	f	typeref:typename:wformat_context::iterator
vformat_to	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^typename Context::iterator vformat_to(typename ArgFormatter::range out,$/;"	f	typeref:typename:Context::iterator
vformat_to_n	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^inline format_to_n_result<OutputIt> vformat_to_n($/;"	f	typeref:typename:format_to_n_result<OutputIt>
vfprintf	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^inline int vfprintf(std::FILE *f, basic_string_view<Char> format,$/;"	f	typeref:typename:int
vfprintf	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^inline int vfprintf(std::ostream &os, string_view format_str,$/;"	f	typeref:typename:int
vfprintf	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^inline int vfprintf(std::wostream &os, wstring_view format_str,$/;"	f	typeref:typename:int
viewChanged	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^        bool      viewChanged;    \/\/\/< Has the current view changed since last draw?$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:bool
violet	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    violet = 0xEE82EE,                  \/\/ rgb(238,130,238)$/;"	e	enum:color
visit	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^    visit(Visitor &&vis, const basic_format_arg<Context> &arg) {$/;"	f	typeref:typename:FMT_CONSTEXPR typename internal::result_of<Visitor (int)>::type
visitChar	vendor/spdlog/tests/catch.hpp	/^        void visitChar( char c ) {$/;"	f	class:Catch::TestSpecParser	typeref:typename:void
vm_state	dependencies/include/v8.h	/^  StateTag vm_state;              \/\/ Current VM state.$/;"	m	struct:v8::SampleInfo	typeref:typename:StateTag
void_t	dependencies/include/nlohmann/json.hpp	/^template <typename ...Ts> using void_t = typename make_void<Ts...>::type;$/;"	t	namespace:nlohmann::detail	typeref:typename:make_void<Ts...>::type
volatile	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^# define volatile$/;"	d	file:
vprint	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void vprint(std::FILE *f, string_view format_str, format_args args) {$/;"	f	typeref:typename:FMT_FUNC void
vprint	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void vprint(std::FILE *f, wstring_view format_str, wformat_args args) {$/;"	f	typeref:typename:FMT_FUNC void
vprint	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void vprint(string_view format_str, format_args args) {$/;"	f	typeref:typename:FMT_FUNC void
vprint	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void vprint(wstring_view format_str, wformat_args args) {$/;"	f	typeref:typename:FMT_FUNC void
vprint	vendor/spdlog/include/spdlog/fmt/bundled/ostream.h	/^inline void vprint(std::basic_ostream<Char> &os,$/;"	f	typeref:typename:void
vprint	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  void vprint(string_view format_str, format_args args) {$/;"	f	class:buffered_file	typeref:typename:void
vprint_rgb	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^FMT_FUNC void vprint_rgb(rgb fd, rgb bg, string_view format, format_args args)$/;"	f	typeref:typename:FMT_FUNC void
vprint_rgb	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^FMT_FUNC void vprint_rgb(rgb fd, string_view format, format_args args)$/;"	f	typeref:typename:FMT_FUNC void
vprintf	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^inline int vprintf(string_view format, printf_args args) {$/;"	f	typeref:typename:int
vprintf	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^inline int vprintf(wstring_view format, wprintf_args args) {$/;"	f	typeref:typename:int
vsprintf	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^inline std::string vsprintf(string_view format, printf_args args) {$/;"	f	typeref:typename:std::string
vsprintf	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^inline std::wstring vsprintf(wstring_view format, wprintf_args args) {$/;"	f	typeref:typename:std::wstring
w	dependencies/include/SFML/Graphics/Glsl.inl	/^    T w; \/\/\/< 4th component (W) of the 4D vector$/;"	m	struct:Vector4	typeref:typename:T	file:
w	vendor/spdlog/tests/test_file_logging.cpp	/^    fmt::memory_buffer w;$/;"	v	typeref:typename:fmt::memory_buffer
wait_ms	vendor/spdlog/tests/test_mpmc_q.cpp	/^    milliseconds wait_ms(250);$/;"	v	typeref:typename:milliseconds
warn	vendor/spdlog/include/spdlog/common.h	/^    warn = SPDLOG_LEVEL_WARN,$/;"	e	enum:spdlog::level::level_enum
warn	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::warn(const T &msg)$/;"	f	class:spdlog::logger	typeref:typename:void
warn	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::warn(const char *fmt, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
warn	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::warn(const wchar_t *fmt, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
warn	vendor/spdlog/include/spdlog/spdlog.h	/^inline void warn(const T &msg)$/;"	f	namespace:spdlog	typeref:typename:void
warn	vendor/spdlog/include/spdlog/spdlog.h	/^inline void warn(const char *fmt, const Args &... args)$/;"	f	namespace:spdlog	typeref:typename:void
warn	vendor/spdlog/include/spdlog/spdlog.h	/^inline void warn(const wchar_t *fmt, const Args &... args)$/;"	f	namespace:spdlog	typeref:typename:void
warnAboutMissingAssertions	vendor/spdlog/tests/catch.hpp	/^        virtual bool warnAboutMissingAssertions() const { return m_data.warnings & WarnAbout::No/;"	f	class:Catch::Config	typeref:typename:bool
warnings	vendor/spdlog/tests/catch.hpp	/^        WarnAbout::What warnings;$/;"	m	struct:Catch::ConfigData	typeref:typename:WarnAbout::What
wasm	dependencies/include/v8.h	/^namespace wasm {$/;"	n	namespace:v8::internal
wbuf_to_utf8buf	vendor/spdlog/include/spdlog/details/logger_impl.h	/^inline void wbuf_to_utf8buf(const fmt::wmemory_buffer &wbuf, fmt::memory_buffer &target)$/;"	f	typeref:typename:void
wbuffer	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^typedef basic_buffer<wchar_t> wbuffer;$/;"	t	namespace:internal	typeref:typename:basic_buffer<wchar_t>
wcstring_view	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^typedef basic_cstring_view<wchar_t> wcstring_view;$/;"	t	typeref:typename:basic_cstring_view<wchar_t>
wformat_args	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  wformat_args(Args && ... arg)$/;"	f	struct:wformat_args
wformat_args	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^struct wformat_args : basic_format_args<wformat_context> {$/;"	s
wformat_context	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^typedef buffer_context<wchar_t>::type wformat_context;$/;"	t	typeref:typename:buffer_context<wchar_t>::type
what	vendor/spdlog/include/spdlog/common.h	/^    const char *what() const SPDLOG_NOEXCEPT override$/;"	f	class:spdlog::spdlog_ex	typeref:typename:const char *
what	vendor/spdlog/tests/catch.hpp	/^    const char* NotImplementedException::what() const CATCH_NOEXCEPT {$/;"	f	class:Catch::NotImplementedException	typeref:typename:const char *
wheat	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    wheat = 0xF5DEB3,                   \/\/ rgb(245,222,179)$/;"	e	enum:color
wheel	dependencies/include/SFML/Window/Event.hpp	/^        Mouse::Wheel wheel; \/\/\/< Which wheel (for mice with multiple ones)$/;"	m	struct:sf::Event::MouseWheelScrollEvent	typeref:typename:Mouse::Wheel
which	vendor/spdlog/tests/catch.hpp	/^            static Arch which() {$/;"	f	struct:Catch::Detail::__anon368216750c10::Endianness	typeref:typename:Arch
white	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    white = 0xFFFFFF,                   \/\/ rgb(255,255,255)$/;"	e	enum:color
white	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string white = "\\033[37m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
white_smoke	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    white_smoke = 0xF5F5F5,             \/\/ rgb(245,245,245)$/;"	e	enum:color
width	dependencies/include/SFML/Graphics/Font.hpp	/^        unsigned int width;  \/\/\/< Current width of the row$/;"	m	struct:sf::Font::Row	typeref:typename:unsigned int
width	dependencies/include/SFML/Graphics/Rect.hpp	/^    T width;  \/\/\/< Width of the rectangle$/;"	m	class:sf::Rect	typeref:typename:T
width	dependencies/include/SFML/Window/Event.hpp	/^        unsigned int width;  \/\/\/< New width, in pixels$/;"	m	struct:sf::Event::SizeEvent	typeref:typename:unsigned int
width	dependencies/include/SFML/Window/VideoMode.hpp	/^    unsigned int width;        \/\/\/< Video mode width, in pixels$/;"	m	class:sf::VideoMode	typeref:typename:unsigned int
width	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR unsigned width() const { return width_; }$/;"	f	struct:align_spec	typeref:typename:FMT_CONSTEXPR unsigned
width	vendor/spdlog/tests/catch.hpp	/^        std::size_t width;          \/\/ maximum width of text, including indent. Longer text wi/;"	m	struct:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes	typeref:typename:std::size_t
width	vendor/spdlog/tests/catch.hpp	/^        std::size_t width;          \/\/ maximum width of text, including indent. Longer text wi/;"	m	struct:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes	typeref:typename:std::size_t
width_	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    const size_t width_ = 0;$/;"	m	struct:spdlog::details::padding_info	typeref:typename:const size_t
width_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  unsigned width_;$/;"	m	struct:align_spec	typeref:typename:unsigned
width_adapter	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit FMT_CONSTEXPR width_adapter(SpecHandler &h) : handler(h) {}$/;"	f	struct:internal::width_adapter	typeref:typename:FMT_CONSTEXPR
width_adapter	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^struct width_adapter {$/;"	s	namespace:internal
width_checker	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  explicit FMT_CONSTEXPR width_checker(ErrorHandler &eh) : handler_(eh) {}$/;"	f	class:internal::width_checker	typeref:typename:FMT_CONSTEXPR
width_checker	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class width_checker: public function<unsigned long long> {$/;"	c	namespace:internal
width_ref	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  arg_ref<Char> width_ref;$/;"	m	struct:internal::dynamic_format_specs	typeref:typename:arg_ref<Char>
width_spec	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef format_spec<unsigned, width_tag> width_spec;$/;"	t	typeref:typename:format_spec<unsigned,width_tag>
width_tag	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^enum format_spec_tag {fill_tag, align_tag, width_tag, type_tag};$/;"	e	enum:format_spec_tag
wincolor_sink	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    wincolor_sink()$/;"	f	class:spdlog::sinks::wincolor_sink
wincolor_sink	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^class wincolor_sink : public sink$/;"	c	namespace:spdlog::sinks
wincolor_stderr_sink_mt	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^using wincolor_stderr_sink_mt = wincolor_sink<details::console_stderr, details::console_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_sink<details::console_stderr,details::console_mutex>
wincolor_stderr_sink_st	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^using wincolor_stderr_sink_st = wincolor_sink<details::console_stderr, details::console_nullmute/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_sink<details::console_stderr,details::console_nullmutex>
wincolor_stdout_sink_mt	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^using wincolor_stdout_sink_mt = wincolor_sink<details::console_stdout, details::console_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_sink<details::console_stdout,details::console_mutex>
wincolor_stdout_sink_st	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^using wincolor_stdout_sink_st = wincolor_sink<details::console_stdout, details::console_nullmute/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_sink<details::console_stdout,details::console_nullmutex>
windebug_sink_mt	vendor/spdlog/include/spdlog/sinks/msvc_sink.h	/^using windebug_sink_mt = msvc_sink_mt;$/;"	t	namespace:spdlog::sinks	typeref:typename:msvc_sink_mt
windebug_sink_st	vendor/spdlog/include/spdlog/sinks/msvc_sink.h	/^using windebug_sink_st = msvc_sink_st;$/;"	t	namespace:spdlog::sinks	typeref:typename:msvc_sink_st
window	src/Game.hpp	/^  SDL_Window *window;$/;"	m	class:Game	typeref:typename:SDL_Window *
windows_error	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  windows_error(int error_code, string_view message, const Args & ... args) {$/;"	f	class:windows_error
windows_error	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^class windows_error : public system_error {$/;"	c
withName	vendor/spdlog/tests/catch.hpp	/^    TestCase TestCase::withName( std::string const& _newName ) const {$/;"	f	class:Catch::TestCase	typeref:typename:TestCase
wmemory_buffer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef basic_memory_buffer<wchar_t> wmemory_buffer;$/;"	t	typeref:typename:basic_memory_buffer<wchar_t>
worker_loop_	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    void worker_loop_()$/;"	f	class:spdlog::details::thread_pool	typeref:typename:void
worker_ptr	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    async_logger_ptr worker_ptr;$/;"	m	struct:spdlog::details::async_msg	typeref:typename:async_logger_ptr
worker_thread_	vendor/spdlog/include/spdlog/details/periodic_worker.h	/^    std::thread worker_thread_;$/;"	m	class:spdlog::details::periodic_worker	typeref:typename:std::thread
wparse_context	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^typedef basic_parse_context<wchar_t> wparse_context;$/;"	t	typeref:typename:basic_parse_context<wchar_t>
wprintf_args	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^typedef basic_format_args<printf_context<internal::wbuffer>::type> wprintf_args;$/;"	t	typeref:typename:basic_format_args<printf_context<internal::wbuffer>::type>
write	vendor/spdlog/include/spdlog/details/file_helper.h	/^    void write(const fmt::memory_buffer &buf)$/;"	f	class:spdlog::details::file_helper	typeref:typename:void
write	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^      write(T value, FormatSpec spec, FormatSpecs... specs) {$/;"	f	class:basic_writer	typeref:typename:std::enable_if<std::is_integral<T>::value,void>::type
write	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^      write(const T *p) {$/;"	f	class:basic_writer	typeref:typename:std::enable_if<std::is_same<T,void>::value>::type
write	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void write(basic_string_view<char_type> str, FormatSpecs... specs) {$/;"	f	class:basic_writer	typeref:typename:void
write	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void write(bool value) {$/;"	f	class:internal::arg_formatter_base	typeref:typename:void
write	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void write(char value) {$/;"	f	class:basic_writer	typeref:typename:void
write	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void write(const char_type *value) {$/;"	f	class:internal::arg_formatter_base	typeref:typename:void
write	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void write(double value) {$/;"	f	class:basic_writer	typeref:typename:void
write	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void write(int value) { write_decimal(value); }$/;"	f	class:basic_writer	typeref:typename:void
write	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void write(long double value) {$/;"	f	class:basic_writer	typeref:typename:void
write	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void write(long long value) { write_decimal(value); }$/;"	f	class:basic_writer	typeref:typename:void
write	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void write(long value) { write_decimal(value); }$/;"	f	class:basic_writer	typeref:typename:void
write	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void write(string_view value) {$/;"	f	class:basic_writer	typeref:typename:void
write	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void write(unsigned long long value) { write_decimal(value); }$/;"	f	class:basic_writer	typeref:typename:void
write	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void write(unsigned long value) { write_decimal(value); }$/;"	f	class:basic_writer	typeref:typename:void
write	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void write(unsigned value) { write_decimal(value); }$/;"	f	class:basic_writer	typeref:typename:void
write	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void write(wchar_t value) {$/;"	f	class:basic_writer	typeref:typename:void
write	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void write(wstring_view value) {$/;"	f	class:basic_writer	typeref:typename:void
write	vendor/spdlog/include/spdlog/fmt/bundled/ostream.h	/^void write(std::basic_ostream<Char> &os, basic_buffer<Char> &buf) {$/;"	f	namespace:internal	typeref:typename:void
writeAssertion	vendor/spdlog/tests/catch.hpp	/^        void writeAssertion( AssertionStats const& stats ) {$/;"	f	class:Catch::JunitReporter	typeref:typename:void
writeAssertions	vendor/spdlog/tests/catch.hpp	/^        void writeAssertions( SectionNode const& sectionNode ) {$/;"	f	class:Catch::JunitReporter	typeref:typename:void
writeAttribute	vendor/spdlog/tests/catch.hpp	/^            ScopedElement& writeAttribute( std::string const& name, T const& attribute ) {$/;"	f	class:Catch::XmlWriter::ScopedElement	typeref:typename:ScopedElement &
writeAttribute	vendor/spdlog/tests/catch.hpp	/^        XmlWriter& writeAttribute( std::string const& name, T const& attribute ) {$/;"	f	class:Catch::XmlWriter	typeref:typename:XmlWriter &
writeAttribute	vendor/spdlog/tests/catch.hpp	/^        XmlWriter& writeAttribute( std::string const& name, bool attribute ) {$/;"	f	class:Catch::XmlWriter	typeref:typename:XmlWriter &
writeAttribute	vendor/spdlog/tests/catch.hpp	/^        XmlWriter& writeAttribute( std::string const& name, std::string const& attribute ) {$/;"	f	class:Catch::XmlWriter	typeref:typename:XmlWriter &
writeBlankLine	vendor/spdlog/tests/catch.hpp	/^        XmlWriter& writeBlankLine() {$/;"	f	class:Catch::XmlWriter	typeref:typename:XmlWriter &
writeComment	vendor/spdlog/tests/catch.hpp	/^        XmlWriter& writeComment( std::string const& text ) {$/;"	f	class:Catch::XmlWriter	typeref:typename:XmlWriter &
writeEncodedText	vendor/spdlog/tests/catch.hpp	/^        void writeEncodedText( std::string const& text ) {$/;"	f	class:Catch::XmlWriter	typeref:typename:void
writeGroup	vendor/spdlog/tests/catch.hpp	/^        void writeGroup( TestGroupNode const& groupNode, double suiteTime ) {$/;"	f	class:Catch::JunitReporter	typeref:typename:void
writeSection	vendor/spdlog/tests/catch.hpp	/^        void writeSection(  std::string const& className,$/;"	f	class:Catch::JunitReporter	typeref:typename:void
writeTestCase	vendor/spdlog/tests/catch.hpp	/^        void writeTestCase( TestCaseNode const& testCaseNode ) {$/;"	f	class:Catch::JunitReporter	typeref:typename:void
writeText	vendor/spdlog/tests/catch.hpp	/^            ScopedElement& writeText( std::string const& text, bool indent = true ) {$/;"	f	class:Catch::XmlWriter::ScopedElement	typeref:typename:ScopedElement &
writeText	vendor/spdlog/tests/catch.hpp	/^        XmlWriter& writeText( std::string const& text, bool indent = true ) {$/;"	f	class:Catch::XmlWriter	typeref:typename:XmlWriter &
writeToDebugConsole	vendor/spdlog/tests/catch.hpp	/^        void writeToDebugConsole( std::string const& text ) {$/;"	f	namespace:Catch	typeref:typename:void
write_char	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void write_char(char_type value) {$/;"	f	class:internal::arg_formatter_base	typeref:typename:void
write_decimal	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void write_decimal(Int value) {$/;"	f	class:basic_writer	typeref:typename:void
write_double	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^void basic_writer<Range>::write_double(T value, const format_specs &spec) {$/;"	f	class:basic_writer	typeref:typename:void
write_double_sprintf	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^void basic_writer<Range>::write_double_sprintf($/;"	f	class:basic_writer	typeref:typename:void
write_exponent	vendor/spdlog/include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC char *write_exponent(char *buffer, int exp) {$/;"	f	namespace:internal	typeref:typename:FMT_FUNC char *
write_inf_or_nan_t	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  struct write_inf_or_nan_t {$/;"	s	function:basic_writer::write_double
write_int	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void write_int(T value, const Spec &spec) {$/;"	f	class:basic_writer	typeref:typename:void
write_int	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void write_int(unsigned num_digits, string_view prefix,$/;"	f	class:basic_writer	typeref:typename:void
write_null_pointer	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  void write_null_pointer(char) {$/;"	f	class:printf_arg_formatter	typeref:typename:void
write_null_pointer	vendor/spdlog/include/spdlog/fmt/bundled/printf.h	/^  void write_null_pointer(wchar_t) {$/;"	f	class:printf_arg_formatter	typeref:typename:void
write_padded	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^void basic_writer<Range>::write_padded($/;"	f	class:basic_writer	typeref:typename:void
write_pair	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void write_pair(unsigned N, uint32_t index) {$/;"	f	class:internal::decimal_formatter	typeref:typename:void
write_pointer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void write_pointer(const void *p) {$/;"	f	class:internal::arg_formatter_base	typeref:typename:void
write_str	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  void write_str(const Char *s, std::size_t size, const align_spec &spec) {$/;"	f	class:basic_writer	typeref:typename:void
write_str	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^void basic_writer<Range>::write_str($/;"	f	class:basic_writer	typeref:typename:void
write_with_helper	vendor/spdlog/tests/test_file_helper.cpp	/^static void write_with_helper(file_helper &helper, size_t howmany)$/;"	f	typeref:typename:void	file:
writer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    basic_writer &writer;$/;"	m	struct:basic_writer::write_double::write_inf_or_nan_t	typeref:typename:basic_writer &
writer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^    basic_writer<Range> &writer;$/;"	m	struct:basic_writer::int_writer	typeref:typename:basic_writer<Range> &
writer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  struct writer {$/;"	s	function:internal::parse_format_string
writer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  writer_type &writer() { return writer_; }$/;"	f	class:internal::arg_formatter_base	typeref:typename:writer_type &
writer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef basic_writer<back_insert_range<internal::buffer>> writer;$/;"	t	typeref:typename:basic_writer<back_insert_range<internal::buffer>>
writer_	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  writer_type writer_;$/;"	m	class:internal::arg_formatter_base	typeref:typename:writer_type
writer_type	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  typedef basic_writer<Range> writer_type;$/;"	t	class:internal::arg_formatter_base	typeref:typename:basic_writer<Range>
wstring_view	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^typedef basic_string_view<wchar_t> wstring_view;$/;"	t	typeref:typename:basic_string_view<wchar_t>
wwriter	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef basic_writer<back_insert_range<internal::wbuffer>> wwriter;$/;"	t	typeref:typename:basic_writer<back_insert_range<internal::wbuffer>>
x	dependencies/include/SFML/Graphics/Glsl.inl	/^    T x; \/\/\/< 1st component (X) of the 4D vector$/;"	m	struct:Vector4	typeref:typename:T	file:
x	dependencies/include/SFML/System/Vector2.hpp	/^    T x; \/\/\/< X coordinate of the vector$/;"	m	class:sf::Vector2	typeref:typename:T
x	dependencies/include/SFML/System/Vector3.hpp	/^    T x; \/\/\/< X coordinate of the vector$/;"	m	class:sf::Vector3	typeref:typename:T
x	dependencies/include/SFML/Window/Event.hpp	/^        float x;           \/\/\/< Current value of the sensor on X axis$/;"	m	struct:sf::Event::SensorEvent	typeref:typename:float
x	dependencies/include/SFML/Window/Event.hpp	/^        int           x;      \/\/\/< X position of the mouse pointer, relative to the left of t/;"	m	struct:sf::Event::MouseButtonEvent	typeref:typename:int
x	dependencies/include/SFML/Window/Event.hpp	/^        int          x;     \/\/\/< X position of the mouse pointer, relative to the left of the/;"	m	struct:sf::Event::MouseWheelScrollEvent	typeref:typename:int
x	dependencies/include/SFML/Window/Event.hpp	/^        int x;               \/\/\/< X position of the touch, relative to the left of the owner /;"	m	struct:sf::Event::TouchEvent	typeref:typename:int
x	dependencies/include/SFML/Window/Event.hpp	/^        int x;     \/\/\/< X position of the mouse pointer, relative to the left of the owner wi/;"	m	struct:sf::Event::MouseWheelEvent	typeref:typename:int
x	dependencies/include/SFML/Window/Event.hpp	/^        int x; \/\/\/< X position of the mouse pointer, relative to the left of the owner window$/;"	m	struct:sf::Event::MouseMoveEvent	typeref:typename:int
xml	vendor/spdlog/tests/catch.hpp	/^        XmlWriter xml;$/;"	m	class:Catch::JunitReporter	typeref:typename:XmlWriter
xsputn	vendor/spdlog/include/spdlog/fmt/bundled/ostream.h	/^  std::streamsize xsputn(const Char *s, std::streamsize count) FMT_OVERRIDE {$/;"	f	class:internal::formatbuf	typeref:typename:std::streamsize
y	dependencies/include/SFML/Graphics/Glsl.inl	/^    T y; \/\/\/< 2nd component (Y) of the 4D vector$/;"	m	struct:Vector4	typeref:typename:T	file:
y	dependencies/include/SFML/System/Vector2.hpp	/^    T y; \/\/\/< Y coordinate of the vector$/;"	m	class:sf::Vector2	typeref:typename:T
y	dependencies/include/SFML/System/Vector3.hpp	/^    T y; \/\/\/< Y coordinate of the vector$/;"	m	class:sf::Vector3	typeref:typename:T
y	dependencies/include/SFML/Window/Event.hpp	/^        float y;           \/\/\/< Current value of the sensor on Y axis$/;"	m	struct:sf::Event::SensorEvent	typeref:typename:float
y	dependencies/include/SFML/Window/Event.hpp	/^        int           y;      \/\/\/< Y position of the mouse pointer, relative to the top of th/;"	m	struct:sf::Event::MouseButtonEvent	typeref:typename:int
y	dependencies/include/SFML/Window/Event.hpp	/^        int          y;     \/\/\/< Y position of the mouse pointer, relative to the top of the /;"	m	struct:sf::Event::MouseWheelScrollEvent	typeref:typename:int
y	dependencies/include/SFML/Window/Event.hpp	/^        int y;               \/\/\/< Y position of the touch, relative to the top of the owner w/;"	m	struct:sf::Event::TouchEvent	typeref:typename:int
y	dependencies/include/SFML/Window/Event.hpp	/^        int y;     \/\/\/< Y position of the mouse pointer, relative to the top of the owner win/;"	m	struct:sf::Event::MouseWheelEvent	typeref:typename:int
y	dependencies/include/SFML/Window/Event.hpp	/^        int y; \/\/\/< Y position of the mouse pointer, relative to the top of the owner window$/;"	m	struct:sf::Event::MouseMoveEvent	typeref:typename:int
yellow	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    yellow = 0xFFFF00,                  \/\/ rgb(255,255,0)$/;"	e	enum:color
yellow	vendor/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string yellow = "\\033[33m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
yellow_green	vendor/spdlog/include/spdlog/fmt/bundled/colors.h	/^    yellow_green = 0x9ACD32,            \/\/ rgb(154,205,50)$/;"	e	enum:color
z	dependencies/include/SFML/Graphics/Glsl.inl	/^    T z; \/\/\/< 3rd component (Z) of the 4D vector$/;"	m	struct:Vector4	typeref:typename:T	file:
z	dependencies/include/SFML/System/Vector3.hpp	/^    T z; \/\/\/< Z coordinate of the vector$/;"	m	class:sf::Vector3	typeref:typename:T
z	dependencies/include/SFML/Window/Event.hpp	/^        float z;           \/\/\/< Current value of the sensor on Z axis$/;"	m	struct:sf::Event::SensorEvent	typeref:typename:float
z_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    explicit z_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::z_formatter
z_formatter	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^class z_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
~AssertionResult	vendor/spdlog/tests/catch.hpp	/^    AssertionResult::~AssertionResult() {}$/;"	f	class:Catch::AssertionResult
~AssertionStats	vendor/spdlog/tests/catch.hpp	/^    AssertionStats::~AssertionStats() {}$/;"	f	class:Catch::AssertionStats
~AutoReg	vendor/spdlog/tests/catch.hpp	/^    AutoReg::~AutoReg() {}$/;"	f	class:Catch::AutoReg
~BoundArgFunction	vendor/spdlog/tests/catch.hpp	/^            ~BoundArgFunction() { delete functionObj; }$/;"	f	class:Clara::Detail::BoundArgFunction
~Colour	vendor/spdlog/tests/catch.hpp	/^    Colour::~Colour(){ if( !m_moved ) use( None ); }$/;"	f	class:Catch::Colour
~CompactReporter	vendor/spdlog/tests/catch.hpp	/^    CompactReporter::~CompactReporter() {}$/;"	f	class:Catch::CompactReporter
~CompositeGenerator	vendor/spdlog/tests/catch.hpp	/^    ~CompositeGenerator() {$/;"	f	class:Catch::CompositeGenerator
~Config	vendor/spdlog/tests/catch.hpp	/^        virtual ~Config() {$/;"	f	class:Catch::Config
~ConsoleReporter	vendor/spdlog/tests/catch.hpp	/^    ConsoleReporter::~ConsoleReporter() {}$/;"	f	class:Catch::ConsoleReporter
~Contains	vendor/spdlog/tests/catch.hpp	/^    Matchers::Impl::StdString::Contains::~Contains() {}$/;"	f	class:Catch::Matchers::Impl::StdString::Contains
~CumulativeReporterBase	vendor/spdlog/tests/catch.hpp	/^    CumulativeReporterBase::~CumulativeReporterBase() {}$/;"	f	class:Catch::CumulativeReporterBase
~Drawable	dependencies/include/SFML/Graphics/Drawable.hpp	/^    virtual ~Drawable() {}$/;"	f	class:sf::Drawable
~EndsWith	vendor/spdlog/tests/catch.hpp	/^    Matchers::Impl::StdString::EndsWith::~EndsWith() {}$/;"	f	class:Catch::Matchers::Impl::StdString::EndsWith
~Equals	vendor/spdlog/tests/catch.hpp	/^    Matchers::Impl::StdString::Equals::~Equals() {}$/;"	f	class:Catch::Matchers::Impl::StdString::Equals
~ExceptionTranslatorRegistry	vendor/spdlog/tests/catch.hpp	/^        ~ExceptionTranslatorRegistry() {$/;"	f	class:Catch::ExceptionTranslatorRegistry
~ExcludedPattern	vendor/spdlog/tests/catch.hpp	/^    TestSpec::ExcludedPattern::~ExcludedPattern() {}$/;"	f	class:Catch::TestSpec::ExcludedPattern
~FatalConditionHandler	vendor/spdlog/tests/catch.hpp	/^        ~FatalConditionHandler() {$/;"	f	struct:Catch::FatalConditionHandler
~FreeFunctionTestCase	vendor/spdlog/tests/catch.hpp	/^    FreeFunctionTestCase::~FreeFunctionTestCase() {}$/;"	f	class:Catch::FreeFunctionTestCase
~Game	src/Game.cpp	/^Game::~Game(){$/;"	f	class:Game
~GeneratorsForTest	vendor/spdlog/tests/catch.hpp	/^        ~GeneratorsForTest() {$/;"	f	class:Catch::GeneratorsForTest
~Global	dependencies/include/v8.h	/^  V8_INLINE ~Global() { this->Reset(); }$/;"	f	class:v8::Global	typeref:typename:V8_INLINE
~Guard	vendor/spdlog/tests/catch.hpp	/^            ~Guard() {$/;"	f	class:Catch::SectionTracking::TestCaseTracker::Guard
~IArgFunction	vendor/spdlog/tests/catch.hpp	/^            virtual ~IArgFunction() {}$/;"	f	struct:Clara::Detail::IArgFunction
~IColourImpl	vendor/spdlog/tests/catch.hpp	/^            virtual ~IColourImpl() {}$/;"	f	struct:Catch::__anon368216750810::IColourImpl
~IConfig	vendor/spdlog/tests/catch.hpp	/^    IConfig::~IConfig() {}$/;"	f	class:Catch::IConfig
~IContext	vendor/spdlog/tests/catch.hpp	/^    IContext::~IContext() {}$/;"	f	class:Catch::IContext
~IExceptionTranslator	vendor/spdlog/tests/catch.hpp	/^    IExceptionTranslator::~IExceptionTranslator() {}$/;"	f	class:Catch::IExceptionTranslator
~IExceptionTranslatorRegistry	vendor/spdlog/tests/catch.hpp	/^    IExceptionTranslatorRegistry::~IExceptionTranslatorRegistry() {}$/;"	f	class:Catch::IExceptionTranslatorRegistry
~IGenerator	vendor/spdlog/tests/catch.hpp	/^    virtual ~IGenerator() {}$/;"	f	struct:Catch::IGenerator
~IGeneratorInfo	vendor/spdlog/tests/catch.hpp	/^    IGeneratorInfo::~IGeneratorInfo() {}$/;"	f	class:Catch::IGeneratorInfo
~IGeneratorsForTest	vendor/spdlog/tests/catch.hpp	/^    IGeneratorsForTest::~IGeneratorsForTest() {}$/;"	f	class:Catch::IGeneratorsForTest
~IMutableContext	vendor/spdlog/tests/catch.hpp	/^    IMutableContext::~IMutableContext() {}$/;"	f	class:Catch::IMutableContext
~IMutableRegistryHub	vendor/spdlog/tests/catch.hpp	/^    IMutableRegistryHub::~IMutableRegistryHub() {}$/;"	f	class:Catch::IMutableRegistryHub
~IRegistryHub	vendor/spdlog/tests/catch.hpp	/^    IRegistryHub::~IRegistryHub() {}$/;"	f	class:Catch::IRegistryHub
~IReporter	vendor/spdlog/tests/catch.hpp	/^    IReporter::~IReporter() {}$/;"	f	class:Catch::IReporter
~IReporterFactory	vendor/spdlog/tests/catch.hpp	/^    IReporterFactory::~IReporterFactory() {}$/;"	f	class:Catch::IReporterFactory
~IReporterRegistry	vendor/spdlog/tests/catch.hpp	/^    IReporterRegistry::~IReporterRegistry() {}$/;"	f	class:Catch::IReporterRegistry
~IResultCapture	vendor/spdlog/tests/catch.hpp	/^    IResultCapture::~IResultCapture() {}$/;"	f	class:Catch::IResultCapture
~IRunner	vendor/spdlog/tests/catch.hpp	/^    IRunner::~IRunner() {}$/;"	f	class:Catch::IRunner
~IShared	vendor/spdlog/tests/catch.hpp	/^    IShared::~IShared() {}$/;"	f	class:Catch::IShared
~IStreamingReporter	vendor/spdlog/tests/catch.hpp	/^    IStreamingReporter::~IStreamingReporter() {}$/;"	f	class:Catch::IStreamingReporter
~ITagAliasRegistry	vendor/spdlog/tests/catch.hpp	/^    ITagAliasRegistry::~ITagAliasRegistry() {}$/;"	f	class:Catch::ITagAliasRegistry
~ITestCase	vendor/spdlog/tests/catch.hpp	/^    ITestCase::~ITestCase() {}$/;"	f	class:Catch::ITestCase
~ITestCaseRegistry	vendor/spdlog/tests/catch.hpp	/^    ITestCaseRegistry::~ITestCaseRegistry() {}$/;"	f	class:Catch::ITestCaseRegistry
~InputStream	dependencies/include/SFML/System/InputStream.hpp	/^    virtual ~InputStream() {}$/;"	f	class:sf::InputStream
~JunitReporter	vendor/spdlog/tests/catch.hpp	/^    JunitReporter::~JunitReporter() {}$/;"	f	class:Catch::JunitReporter
~LegacyReporterAdapter	vendor/spdlog/tests/catch.hpp	/^    LegacyReporterAdapter::~LegacyReporterAdapter() {}$/;"	f	class:Catch::LegacyReporterAdapter
~Locale	vendor/spdlog/include/spdlog/fmt/bundled/posix.h	/^  ~Locale() { freelocale(locale_); }$/;"	f	class:Locale
~Matcher	vendor/spdlog/tests/catch.hpp	/^        virtual ~Matcher() {}$/;"	f	struct:Catch::Matchers::Impl::Matcher
~MethodTestCase	vendor/spdlog/tests/catch.hpp	/^    virtual ~MethodTestCase() {}$/;"	f	class:Catch::MethodTestCase
~NamePattern	vendor/spdlog/tests/catch.hpp	/^    TestSpec::NamePattern::~NamePattern() {}$/;"	f	class:Catch::TestSpec::NamePattern
~Node	vendor/spdlog/tests/catch.hpp	/^            virtual ~Node() {}$/;"	f	struct:Catch::CumulativeReporterBase::Node
~NonCopyable	dependencies/include/SFML/System/NonCopyable.hpp	/^    ~NonCopyable() {}$/;"	f	class:sf::NonCopyable
~NonCopyable	vendor/spdlog/tests/catch.hpp	/^    NonCopyable::~NonCopyable() {}$/;"	f	class:Catch::NonCopyable
~NotImplementedException	vendor/spdlog/tests/catch.hpp	/^        virtual ~NotImplementedException() CATCH_NOEXCEPT {}$/;"	f	class:Catch::NotImplementedException
~OcMethod	vendor/spdlog/tests/catch.hpp	/^        virtual ~OcMethod() {}$/;"	f	class:Catch::OcMethod
~Option	vendor/spdlog/tests/catch.hpp	/^        ~Option() {$/;"	f	class:Catch::Option
~Pattern	vendor/spdlog/tests/catch.hpp	/^    TestSpec::Pattern::~Pattern() {}$/;"	f	class:Catch::TestSpec::Pattern
~Persistent	dependencies/include/v8.h	/^  V8_INLINE ~Persistent() {$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE
~PersistentValueMapBase	dependencies/include/v8-util.h	/^  ~PersistentValueMapBase() { Clear(); }$/;"	f	class:v8::PersistentValueMapBase
~PersistentValueVector	dependencies/include/v8-util.h	/^  ~PersistentValueVector() {$/;"	f	class:v8::PersistentValueVector
~Ptr	vendor/spdlog/tests/catch.hpp	/^        ~Ptr(){$/;"	f	class:Catch::Ptr
~ReporterRegistry	vendor/spdlog/tests/catch.hpp	/^        virtual ~ReporterRegistry() {$/;"	f	class:Catch::ReporterRegistry
~RunContext	vendor/spdlog/tests/catch.hpp	/^        virtual ~RunContext() {$/;"	f	class:Catch::RunContext
~ScopedElement	vendor/spdlog/tests/catch.hpp	/^            ~ScopedElement() {$/;"	f	class:Catch::XmlWriter::ScopedElement
~ScopedMessage	vendor/spdlog/tests/catch.hpp	/^    ScopedMessage::~ScopedMessage() {$/;"	f	class:Catch::ScopedMessage
~Section	vendor/spdlog/tests/catch.hpp	/^    Section::~Section() {$/;"	f	class:Catch::Section
~SectionNode	vendor/spdlog/tests/catch.hpp	/^    CumulativeReporterBase::SectionNode::~SectionNode() {}$/;"	f	class:Catch::CumulativeReporterBase::SectionNode
~SectionStats	vendor/spdlog/tests/catch.hpp	/^    SectionStats::~SectionStats() {}$/;"	f	class:Catch::SectionStats
~Session	vendor/spdlog/tests/catch.hpp	/^        ~Session() {$/;"	f	class:Catch::Session
~SoundFileReader	dependencies/include/SFML/Audio/SoundFileReader.hpp	/^    virtual ~SoundFileReader() {}$/;"	f	class:sf::SoundFileReader
~SoundFileWriter	dependencies/include/SFML/Audio/SoundFileWriter.hpp	/^    virtual ~SoundFileWriter() {}$/;"	f	class:sf::SoundFileWriter
~StartsWith	vendor/spdlog/tests/catch.hpp	/^    Matchers::Impl::StdString::StartsWith::~StartsWith() {}$/;"	f	class:Catch::Matchers::Impl::StdString::StartsWith
~StreamBufBase	vendor/spdlog/tests/catch.hpp	/^    StreamBufBase::~StreamBufBase() CATCH_NOEXCEPT {}$/;"	f	class:Catch::StreamBufBase
~StreamBufImpl	vendor/spdlog/tests/catch.hpp	/^        ~StreamBufImpl() CATCH_NOEXCEPT {$/;"	f	class:Catch::StreamBufImpl
~StreamRedirect	vendor/spdlog/tests/catch.hpp	/^        ~StreamRedirect() {$/;"	f	class:Catch::StreamRedirect
~StreamingReporterBase	vendor/spdlog/tests/catch.hpp	/^    StreamingReporterBase::~StreamingReporterBase() {}$/;"	f	class:Catch::StreamingReporterBase
~TagAliasRegistry	vendor/spdlog/tests/catch.hpp	/^    TagAliasRegistry::~TagAliasRegistry() {}$/;"	f	class:Catch::TagAliasRegistry
~TagPattern	vendor/spdlog/tests/catch.hpp	/^    TestSpec::TagPattern::~TagPattern() {}$/;"	f	class:Catch::TestSpec::TagPattern
~TestCaseStats	vendor/spdlog/tests/catch.hpp	/^    TestCaseStats::~TestCaseStats() {}$/;"	f	class:Catch::TestCaseStats
~TestGroupStats	vendor/spdlog/tests/catch.hpp	/^    TestGroupStats::~TestGroupStats() {}$/;"	f	class:Catch::TestGroupStats
~TestRegistry	vendor/spdlog/tests/catch.hpp	/^    TestRegistry::~TestRegistry() {}$/;"	f	class:Catch::TestRegistry
~TestRunStats	vendor/spdlog/tests/catch.hpp	/^    TestRunStats::~TestRunStats() {}$/;"	f	class:Catch::TestRunStats
~ThreadFunc	dependencies/include/SFML/System/Thread.inl	/^    virtual ~ThreadFunc() {}$/;"	f	struct:priv::ThreadFunc	file:
~XmlReporter	vendor/spdlog/tests/catch.hpp	/^    XmlReporter::~XmlReporter() {}$/;"	f	class:Catch::XmlReporter
~XmlWriter	vendor/spdlog/tests/catch.hpp	/^        ~XmlWriter() {$/;"	f	class:Catch::XmlWriter
~arg_map	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  ~arg_map() { delete [] map_; }$/;"	f	class:internal::arg_map
~basic_buffer	vendor/spdlog/include/spdlog/fmt/bundled/core.h	/^  virtual ~basic_buffer() {}$/;"	f	class:internal::basic_buffer
~basic_memory_buffer	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  ~basic_memory_buffer() { deallocate(); }$/;"	f	class:basic_memory_buffer
~file_helper	vendor/spdlog/include/spdlog/details/file_helper.h	/^    ~file_helper()$/;"	f	class:spdlog::details::file_helper
~locale_provider	vendor/spdlog/include/spdlog/fmt/bundled/format.h	/^  virtual ~locale_provider() {}$/;"	f	class:locale_provider
~periodic_worker	vendor/spdlog/include/spdlog/details/periodic_worker.h	/^    ~periodic_worker()$/;"	f	class:spdlog::details::periodic_worker
~scoped_pad	vendor/spdlog/include/spdlog/details/pattern_formatter.h	/^    ~scoped_pad()$/;"	f	class:spdlog::details::scoped_pad
~syslog_sink	vendor/spdlog/include/spdlog/sinks/syslog_sink.h	/^    ~syslog_sink() override$/;"	f	class:spdlog::sinks::syslog_sink
~thread_pool	vendor/spdlog/include/spdlog/details/thread_pool.h	/^    ~thread_pool()$/;"	f	class:spdlog::details::thread_pool
~wincolor_sink	vendor/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    ~wincolor_sink() override$/;"	f	class:spdlog::sinks::wincolor_sink
