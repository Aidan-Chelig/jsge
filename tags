!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/1620c633/
A	dependencies/include/SFML/Window/Keyboard.hpp	/^        A = 0,        \/\/\/< The A key$/;"	e	enum:sf::Keyboard::Key
A	dependencies/include/v8-internal.h	/^    typedef internal::Address A;$/;"	t	function:v8::internal::Internals::GetInstanceType	typeref:typename:internal::Address
A	dependencies/include/v8-internal.h	/^    typedef internal::Address A;$/;"	t	function:v8::internal::Internals::ReadEmbedderData	typeref:typename:internal::Address
ACCESS_DELETE	dependencies/include/v8.h	/^  ACCESS_DELETE,$/;"	e	enum:v8::AccessType
ACCESS_GET	dependencies/include/v8.h	/^  ACCESS_GET,$/;"	e	enum:v8::AccessType
ACCESS_HAS	dependencies/include/v8.h	/^  ACCESS_HAS,$/;"	e	enum:v8::AccessType
ACCESS_KEYS	dependencies/include/v8.h	/^  ACCESS_KEYS$/;"	e	enum:v8::AccessType
ACCESS_SET	dependencies/include/v8.h	/^  ACCESS_SET,$/;"	e	enum:v8::AccessType
ALL_CAN_READ	dependencies/include/v8.h	/^  ALL_CAN_READ          = 1,$/;"	e	enum:v8::AccessControl
ALL_CAN_WRITE	dependencies/include/v8.h	/^  ALL_CAN_WRITE         = 1 << 1,$/;"	e	enum:v8::AccessControl
ALL_PROPERTIES	dependencies/include/v8.h	/^  ALL_PROPERTIES = 0,$/;"	e	enum:v8::PropertyFilter
API	dependencies/include/v8-inspector.h	/^namespace API {$/;"	n	namespace:v8_inspector::protocol::Debugger
API	dependencies/include/v8-inspector.h	/^namespace API {$/;"	n	namespace:v8_inspector::protocol::Runtime
API	dependencies/include/v8-inspector.h	/^namespace API {$/;"	n	namespace:v8_inspector::protocol::Schema
ARCHITECTURE_ID	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	file:
Accelerometer	dependencies/include/SFML/Window/Sensor.hpp	/^        Accelerometer,    \/\/\/< Measures the raw acceleration (m\/s^2)$/;"	e	enum:sf::Sensor::Type
Accepted	dependencies/include/SFML/Network/Http.hpp	/^            Accepted       = 202, \/\/\/< The request has been accepted, but will be processed l/;"	e	enum:sf::Http::Response::Status
AccessCheckCallback	dependencies/include/v8.h	/^typedef bool (*AccessCheckCallback)(Local<Context> accessing_context,$/;"	t	namespace:v8	typeref:typename:bool (*)(Local<Context> accessing_context,Local<Object> accessed_object,Local<Value> data)
AccessControl	dependencies/include/v8.h	/^enum AccessControl {$/;"	g	namespace:v8
AccessType	dependencies/include/v8.h	/^enum AccessType {$/;"	g	namespace:v8
AccessorGetterCallback	dependencies/include/v8.h	/^typedef void (*AccessorGetterCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(Local<String> property,const PropertyCallbackInfo<Value> & info)
AccessorNameGetterCallback	dependencies/include/v8.h	/^typedef void (*AccessorNameGetterCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(Local<Name> property,const PropertyCallbackInfo<Value> & info)
AccessorNameSetterCallback	dependencies/include/v8.h	/^typedef void (*AccessorNameSetterCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(Local<Name> property,Local<Value> value,const PropertyCallbackInfo<void> & info)
AccessorSetterCallback	dependencies/include/v8.h	/^typedef void (*AccessorSetterCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(Local<String> property,Local<Value> value,const PropertyCallbackInfo<void> & info)
AccessorSignature	dependencies/include/v8.h	/^class V8_EXPORT AccessorSignature : public Data {$/;"	c	namespace:v8
ActivityControl	dependencies/include/v8-profiler.h	/^class V8_EXPORT ActivityControl {  \/\/ NOLINT$/;"	c	namespace:v8
Add	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        Add,            \/\/\/< Pixel = Src * SrcFactor + Dst * DstFactor$/;"	e	enum:sf::BlendMode::Equation
Add	dependencies/include/SFML/Window/Keyboard.hpp	/^        Add,          \/\/\/< The + key$/;"	e	enum:sf::Keyboard::Key
AddTraceEvent	dependencies/include/v8-platform.h	/^  virtual uint64_t AddTraceEvent($/;"	f	class:v8::TracingController	typeref:typename:uint64_t
AddTraceEventWithTimestamp	dependencies/include/v8-platform.h	/^  virtual uint64_t AddTraceEventWithTimestamp($/;"	f	class:v8::TracingController	typeref:typename:uint64_t
AddTraceStateObserver	dependencies/include/v8-platform.h	/^  virtual void AddTraceStateObserver(TraceStateObserver*) {}$/;"	f	class:v8::TracingController	typeref:typename:void
Address	dependencies/include/v8-internal.h	/^typedef uintptr_t Address;$/;"	t	namespace:v8::internal	typeref:typename:uintptr_t
AlResource	dependencies/include/SFML/Audio/AlResource.hpp	/^class SFML_AUDIO_API AlResource$/;"	c	namespace:sf
Allocation	dependencies/include/v8-profiler.h	/^  struct Allocation {$/;"	s	class:v8::AllocationProfile
AllocationBase	dependencies/include/v8.h	/^    void* AllocationBase() const { return allocation_base_; }$/;"	f	class:v8::ArrayBuffer::Contents	typeref:typename:void *
AllocationBase	dependencies/include/v8.h	/^    void* AllocationBase() const { return allocation_base_; }$/;"	f	class:v8::SharedArrayBuffer::Contents	typeref:typename:void *
AllocationLength	dependencies/include/v8.h	/^    size_t AllocationLength() const { return allocation_length_; }$/;"	f	class:v8::ArrayBuffer::Contents	typeref:typename:size_t
AllocationLength	dependencies/include/v8.h	/^    size_t AllocationLength() const { return allocation_length_; }$/;"	f	class:v8::SharedArrayBuffer::Contents	typeref:typename:size_t
AllocationMode	dependencies/include/v8.h	/^    Allocator::AllocationMode AllocationMode() const {$/;"	f	class:v8::ArrayBuffer::Contents	typeref:typename:Allocator::AllocationMode
AllocationMode	dependencies/include/v8.h	/^    Allocator::AllocationMode AllocationMode() const {$/;"	f	class:v8::SharedArrayBuffer::Contents	typeref:typename:Allocator::AllocationMode
AllocationMode	dependencies/include/v8.h	/^    enum class AllocationMode { kNormal, kReservation };$/;"	g	class:v8::ArrayBuffer::Allocator
AllocationProfile	dependencies/include/v8-profiler.h	/^class V8_EXPORT AllocationProfile {$/;"	c	namespace:v8
Allocator	dependencies/include/v8.h	/^    using Allocator = v8::ArrayBuffer::Allocator;$/;"	t	class:v8::SharedArrayBuffer::Contents	typeref:typename:v8::ArrayBuffer::Allocator
Allocator	dependencies/include/v8.h	/^  class V8_EXPORT Allocator { \/\/ NOLINT$/;"	c	class:v8::ArrayBuffer
AllocatorTraits	dependencies/include/nlohmann/json.hpp	/^        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;$/;"	t	function:nlohmann::basic_json::create	typeref:typename:std::allocator_traits<AllocatorType<T>>
AnnotateStrongRetainer	dependencies/include/v8-util.h	/^  void AnnotateStrongRetainer(Global<V>* persistent) {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:void
Any	dependencies/include/SFML/Network/IpAddress.hpp	/^    static const IpAddress Any;       \/\/\/< Value representing any address (0.0.0.0)$/;"	m	class:sf::IpAddress	typeref:typename:const IpAddress
AnyPort	dependencies/include/SFML/Network/Socket.hpp	/^        AnyPort = 0 \/\/\/< Special value that tells the system to pick any available port$/;"	e	enum:sf::Socket::__anonccec14c70103
Append	dependencies/include/v8-util.h	/^  static void Append(Impl* impl, PersistentContainerValue value) {$/;"	f	class:v8::DefaultPersistentValueVectorTraits	typeref:typename:void
Append	dependencies/include/v8-util.h	/^  void Append(Global<V> persistent) {$/;"	f	class:v8::PersistentValueVector	typeref:typename:void
Append	dependencies/include/v8-util.h	/^  void Append(Local<V> value) {$/;"	f	class:v8::PersistentValueVector	typeref:typename:void
ArgValue	dependencies/include/libplatform/v8-tracing.h	/^  union ArgValue {$/;"	u	class:v8::platform::tracing::TraceObject
Array	dependencies/include/v8.h	/^class V8_EXPORT Array : public Object {$/;"	c	namespace:v8
ArrayBuffer	dependencies/include/v8.h	/^class V8_EXPORT ArrayBuffer : public Object {$/;"	c	namespace:v8
ArrayBufferCreationMode	dependencies/include/v8.h	/^enum class ArrayBufferCreationMode { kInternalized, kExternalized };$/;"	g	namespace:v8
ArrayBufferView	dependencies/include/v8.h	/^class V8_EXPORT ArrayBufferView : public Object {$/;"	c	namespace:v8
Arrow	dependencies/include/SFML/Window/Cursor.hpp	/^        Arrow,                  \/\/\/< Arrow cursor (default)$/;"	e	enum:sf::Cursor::Type
ArrowWait	dependencies/include/SFML/Window/Cursor.hpp	/^        ArrowWait,              \/\/\/< Busy arrow cursor$/;"	e	enum:sf::Cursor::Type
As	dependencies/include/v8.h	/^  V8_INLINE Local<S> As() const {$/;"	f	class:v8::Local	typeref:typename:V8_INLINE Local<S>
As	dependencies/include/v8.h	/^  V8_INLINE Persistent<S>& As() const {  \/\/ NOLINT$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE Persistent<S> &
AsReference	dependencies/include/v8.h	/^  static MemorySpan<const uint8_t> AsReference(const OwnedBuffer& buff) {$/;"	f	class:v8::WasmModuleObject	typeref:typename:MemorySpan<const uint8_t>
Ascii	dependencies/include/SFML/Network/Ftp.hpp	/^        Ascii,  \/\/\/< Text mode using ASCII encoding$/;"	e	enum:sf::Ftp::TransferMode
Attribute	dependencies/include/SFML/Window/ContextSettings.hpp	/^    enum Attribute$/;"	g	struct:sf::ContextSettings
Axis	dependencies/include/SFML/Window/Joystick.hpp	/^    enum Axis$/;"	g	class:sf::Joystick
AxisCount	dependencies/include/SFML/Window/Joystick.hpp	/^        AxisCount   = 8   \/\/\/< Maximum number of supported axes$/;"	e	enum:sf::Joystick::__anon1e23a3bc0103
B	dependencies/include/SFML/Window/Keyboard.hpp	/^        B,            \/\/\/< The B key$/;"	e	enum:sf::Keyboard::Key
BYTECODE_COMPILER	dependencies/include/v8.h	/^  BYTECODE_COMPILER,$/;"	e	enum:v8::StateTag
BackSlash	dependencies/include/SFML/Window/Keyboard.hpp	/^        BackSlash = Backslash,    \/\/\/< \\deprecated Use Backslash instead$/;"	e	enum:sf::Keyboard::Key
BackSpace	dependencies/include/SFML/Window/Keyboard.hpp	/^        BackSpace = Backspace,    \/\/\/< \\deprecated Use Backspace instead$/;"	e	enum:sf::Keyboard::Key
Backslash	dependencies/include/SFML/Window/Keyboard.hpp	/^        Backslash,    \/\/\/< The \\ key$/;"	e	enum:sf::Keyboard::Key
Backspace	dependencies/include/SFML/Window/Keyboard.hpp	/^        Backspace,    \/\/\/< The Backspace key$/;"	e	enum:sf::Keyboard::Key
BadCommandSequence	dependencies/include/SFML/Network/Ftp.hpp	/^            BadCommandSequence      = 503, \/\/\/< Bad sequence of commands$/;"	e	enum:sf::Ftp::Response::Status
BadGateway	dependencies/include/SFML/Network/Http.hpp	/^            BadGateway          = 502, \/\/\/< The gateway server has received an error from the/;"	e	enum:sf::Http::Response::Status
BadRequest	dependencies/include/SFML/Network/Http.hpp	/^            BadRequest          = 400, \/\/\/< The server couldn't understand the request (synta/;"	e	enum:sf::Http::Response::Status
BasicJsonType	dependencies/include/nlohmann/json.hpp	/^    friend BasicJsonType;$/;"	m	class:nlohmann::detail::iter_impl
Begin	dependencies/include/v8-util.h	/^  static Iterator Begin(Impl* impl) { return impl->begin(); }$/;"	f	class:v8::StdMapTraits	typeref:typename:Iterator
BigInt	dependencies/include/v8.h	/^class V8_EXPORT BigInt : public Primitive {$/;"	c	namespace:v8
BigInt64Array	dependencies/include/v8.h	/^class V8_EXPORT BigInt64Array : public TypedArray {$/;"	c	namespace:v8
BigIntObject	dependencies/include/v8.h	/^class V8_EXPORT BigIntObject : public Object {$/;"	c	namespace:v8
BigUint64Array	dependencies/include/v8.h	/^class V8_EXPORT BigUint64Array : public TypedArray {$/;"	c	namespace:v8
Binary	dependencies/include/SFML/Network/Ftp.hpp	/^        Binary, \/\/\/< Binary mode (file is transfered as a sequence of bytes)$/;"	e	enum:sf::Ftp::TransferMode
Black	dependencies/include/SFML/Graphics/Color.hpp	/^    static const Color Black;       \/\/\/< Black predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
BlendMode	dependencies/include/SFML/Graphics/BlendMode.hpp	/^struct SFML_GRAPHICS_API BlendMode$/;"	s	namespace:sf
Blue	dependencies/include/SFML/Graphics/Color.hpp	/^    static const Color Blue;        \/\/\/< Blue predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
Bold	dependencies/include/SFML/Graphics/Text.hpp	/^        Bold          = 1 << 0, \/\/\/< Bold characters$/;"	e	enum:sf::Text::Style
BoolType	dependencies/include/SFML/Network/Packet.hpp	/^    typedef bool (Packet::*BoolType)(std::size_t);$/;"	t	class:sf::Packet	typeref:typename:bool (Packet::*)(std::size_t)
Boolean	dependencies/include/v8.h	/^class V8_EXPORT Boolean : public Primitive {$/;"	c	namespace:v8
BooleanObject	dependencies/include/v8.h	/^class V8_EXPORT BooleanObject : public Object {$/;"	c	namespace:v8
Broadcast	dependencies/include/SFML/Network/IpAddress.hpp	/^    static const IpAddress Broadcast; \/\/\/< The "broadcast" address (for sending UDP messages /;"	m	class:sf::IpAddress	typeref:typename:const IpAddress
BufferCount	dependencies/include/SFML/Audio/SoundStream.hpp	/^        BufferCount = 3,    \/\/\/< Number of audio buffers used by the streaming loop$/;"	e	enum:sf::SoundStream::__anon941a085b0203
BufferNotOwned	dependencies/include/v8.h	/^      BufferNotOwned,$/;"	e	enum:v8::ScriptCompiler::CachedData::BufferPolicy
BufferOwned	dependencies/include/v8.h	/^      BufferOwned$/;"	e	enum:v8::ScriptCompiler::CachedData::BufferPolicy
BufferPolicy	dependencies/include/v8.h	/^    enum BufferPolicy {$/;"	g	struct:v8::ScriptCompiler::CachedData
BufferReference	dependencies/include/v8.h	/^    BufferReference(MemorySpan<const uint8_t> span)  \/\/ NOLINT(runtime\/explicit)$/;"	f	class:v8::WasmModuleObject
BufferReference	dependencies/include/v8.h	/^    BufferReference(const uint8_t* start, size_t size)$/;"	f	class:v8::WasmModuleObject
BufferRetries	dependencies/include/SFML/Audio/SoundStream.hpp	/^        BufferRetries = 2   \/\/\/< Number of retries (excluding initial try) for onGetData()$/;"	e	enum:sf::SoundStream::__anon941a085b0203
BuildEmbedderGraphCallback	dependencies/include/v8-profiler.h	/^  typedef void (*BuildEmbedderGraphCallback)(v8::Isolate* isolate,$/;"	t	class:v8::HeapProfiler	typeref:typename:void (*)(v8::Isolate * isolate,v8::EmbedderGraph * graph,void * data)
Button	dependencies/include/SFML/Window/Mouse.hpp	/^    enum Button$/;"	g	class:sf::Mouse
ButtonCount	dependencies/include/SFML/Window/Joystick.hpp	/^        ButtonCount = 32, \/\/\/< Maximum number of supported buttons$/;"	e	enum:sf::Joystick::__anon1e23a3bc0103
ButtonCount	dependencies/include/SFML/Window/Mouse.hpp	/^        ButtonCount \/\/\/< Keep last -- the total number of mouse buttons$/;"	e	enum:sf::Mouse::Button
Bvec2	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef Vector2<bool> Bvec2;$/;"	t	namespace:sf::Glsl	typeref:typename:Vector2<bool>
Bvec3	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef Vector3<bool> Bvec3;$/;"	t	namespace:sf::Glsl	typeref:typename:Vector3<bool>
Bvec4	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef implementation-defined Bvec4;$/;"	t	namespace:sf::Glsl	typeref:typename:implementation-defined
Bvec4	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef priv::Vector4<bool> Bvec4;$/;"	t	namespace:sf::Glsl	typeref:typename:priv::Vector4<bool>
ByteLength	dependencies/include/v8.h	/^    size_t ByteLength() const { return byte_length_; }$/;"	f	class:v8::ArrayBuffer::Contents	typeref:typename:size_t
ByteLength	dependencies/include/v8.h	/^    size_t ByteLength() const { return byte_length_; }$/;"	f	class:v8::SharedArrayBuffer::Contents	typeref:typename:size_t
C	dependencies/include/SFML/System/Thread.inl	/^    void(C::*m_function)();$/;"	m	struct:priv::ThreadMemberFunc	typeref:typename:void (::* m_function)()	file:
C	dependencies/include/SFML/Window/Keyboard.hpp	/^        C,            \/\/\/< The C key$/;"	e	enum:sf::Keyboard::Key
CODE_EVENTS_LIST	dependencies/include/v8-profiler.h	/^#define CODE_EVENTS_LIST(/;"	d
COMPILER	dependencies/include/v8.h	/^  COMPILER,$/;"	e	enum:v8::StateTag
COMPILER_ID	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_VERSION_INTERNAL	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_MAJOR	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MINOR	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_PATCH	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_TWEAK	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
CXX_STD	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define CXX_STD /;"	d	file:
C_DIALECT	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT /;"	d	file:
C_DIALECT	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT$/;"	d	file:
C_DIALECT	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^# define C_DIALECT /;"	d	file:
CachedData	dependencies/include/v8.h	/^    CachedData()$/;"	f	struct:v8::ScriptCompiler::CachedData
CachedData	dependencies/include/v8.h	/^  struct V8_EXPORT CachedData {$/;"	s	class:v8::ScriptCompiler
CallBlockingTaskOnWorkerThread	dependencies/include/v8-platform.h	/^  virtual void CallBlockingTaskOnWorkerThread(std::unique_ptr<Task> task) {$/;"	f	class:v8::Platform	typeref:typename:void
CallIdleOnForegroundThread	dependencies/include/v8-platform.h	/^      virtual void CallIdleOnForegroundThread(Isolate* isolate,$/;"	f	class:v8::Platform	typeref:typename:V8_DEPRECATE_SOON ("",virtual void)
Callback	dependencies/include/v8.h	/^  typedef void (*Callback)(const WeakCallbackInfo<T>& data);$/;"	t	class:v8::WeakCallbackInfo	typeref:typename:void (*)(const WeakCallbackInfo<T> & data)
Cast	dependencies/include/v8.h	/^  V8_INLINE static Persistent<T>& Cast(const Persistent<S>& that) {  \/\/ NOLINT$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE Persistent<T> &
Cast	dependencies/include/v8.h	/^  template <class S> V8_INLINE static Local<T> Cast(Local<S> that) {$/;"	f	class:v8::Local	typeref:typename:V8_INLINE Local<T>
CastCheck	dependencies/include/v8-internal.h	/^struct CastCheck {$/;"	s	namespace:v8::internal
CategoryGroupEnabledFlags	dependencies/include/libplatform/v8-tracing.h	/^  enum CategoryGroupEnabledFlags {$/;"	g	class:v8::platform::tracing::TracingController
Channel	dependencies/include/v8-inspector.h	/^  class V8_EXPORT Channel {$/;"	c	class:v8_inspector::V8Inspector
CheckInitialized	dependencies/include/v8-internal.h	/^  V8_INLINE static void CheckInitialized(v8::Isolate* isolate) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE void
Chunk	dependencies/include/SFML/Audio/SoundStream.hpp	/^    struct Chunk$/;"	s	class:sf::SoundStream
CircleShape	dependencies/include/SFML/Graphics/CircleShape.hpp	/^class SFML_GRAPHICS_API CircleShape : public Shape$/;"	c	namespace:sf
Clear	dependencies/include/v8-util.h	/^  static void Clear(Impl* impl) {$/;"	f	class:v8::DefaultPersistentValueVectorTraits	typeref:typename:void
Clear	dependencies/include/v8-util.h	/^  void Clear() {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:void
Clear	dependencies/include/v8-util.h	/^  void Clear() {$/;"	f	class:v8::PersistentValueVector	typeref:typename:void
Clear	dependencies/include/v8.h	/^  V8_INLINE void Clear() { val_ = nullptr; }$/;"	f	class:v8::Local	typeref:typename:V8_INLINE void
ClearAndLeak	dependencies/include/v8-util.h	/^  static PersistentContainerValue ClearAndLeak(Global<V>* persistent) {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:PersistentContainerValue
ClearAndLeak	dependencies/include/v8-util.h	/^  static PersistentContainerValue ClearAndLeak(Global<V>* persistent) {$/;"	f	class:v8::PersistentValueVector	typeref:typename:PersistentContainerValue
ClearWeak	dependencies/include/v8.h	/^  V8_INLINE void ClearWeak() { ClearWeak<void>(); }$/;"	f	class:v8::PersistentBase	typeref:typename:V8_INLINE void
Client	dependencies/include/v8.h	/^  class Client {$/;"	c	class:v8::WasmStreaming
Clipboard	dependencies/include/SFML/Window/Clipboard.hpp	/^class SFML_WINDOW_API Clipboard$/;"	c	namespace:sf
Clock	dependencies/include/SFML/System/Clock.hpp	/^class SFML_SYSTEM_API Clock$/;"	c	namespace:sf
Close	dependencies/include/SFML/Window/WindowStyle.hpp	/^        Close      = 1 << 2, \/\/\/< Title bar + close button$/;"	e	enum:sf::Style::__anonc2dbfd350103
Closed	dependencies/include/SFML/Window/Event.hpp	/^        Closed,                 \/\/\/< The window requested to be closed (no data)$/;"	e	enum:sf::Event::EventType
ClosingConnection	dependencies/include/SFML/Network/Ftp.hpp	/^            ClosingConnection     = 221, \/\/\/< Service closing control connection$/;"	e	enum:sf::Ftp::Response::Status
ClosingDataConnection	dependencies/include/SFML/Network/Ftp.hpp	/^            ClosingDataConnection = 226, \/\/\/< Closing data connection, requested file action /;"	e	enum:sf::Ftp::Response::Status
CodeEvent	dependencies/include/v8-profiler.h	/^class V8_EXPORT CodeEvent {$/;"	c	namespace:v8
CodeEventHandler	dependencies/include/v8-profiler.h	/^class V8_EXPORT CodeEventHandler {$/;"	c	namespace:v8
CodeEventType	dependencies/include/v8-profiler.h	/^enum CodeEventType {$/;"	g	namespace:v8
Color	dependencies/include/SFML/Graphics/Color.hpp	/^class SFML_GRAPHICS_API Color$/;"	c	namespace:sf
Comma	dependencies/include/SFML/Window/Keyboard.hpp	/^        Comma,        \/\/\/< The , key$/;"	e	enum:sf::Keyboard::Key
CommandNotImplemented	dependencies/include/SFML/Network/Ftp.hpp	/^            CommandNotImplemented   = 502, \/\/\/< Command not implemented$/;"	e	enum:sf::Ftp::Response::Status
CommandUnknown	dependencies/include/SFML/Network/Ftp.hpp	/^            CommandUnknown          = 500, \/\/\/< Syntax error, command unrecognized$/;"	e	enum:sf::Ftp::Response::Status
CompatibleLimits	dependencies/include/nlohmann/json.hpp	/^    using CompatibleLimits = std::numeric_limits<CompatibleNumberIntegerType>;$/;"	t	struct:nlohmann::detail::is_compatible_integer_type_impl	typeref:typename:std::numeric_limits<CompatibleNumberIntegerType>
CompileOptions	dependencies/include/v8.h	/^  enum CompileOptions {$/;"	g	class:v8::ScriptCompiler
CompiledWasmModule	dependencies/include/v8.h	/^class V8_EXPORT CompiledWasmModule {$/;"	c	namespace:v8
ConnectionClosed	dependencies/include/SFML/Network/Ftp.hpp	/^            ConnectionClosed = 1002, \/\/\/< Not part of the FTP standard, generated by SFML whe/;"	e	enum:sf::Ftp::Response::Status
ConnectionFailed	dependencies/include/SFML/Network/Ftp.hpp	/^            ConnectionFailed = 1001, \/\/\/< Not part of the FTP standard, generated by SFML whe/;"	e	enum:sf::Ftp::Response::Status
ConnectionFailed	dependencies/include/SFML/Network/Http.hpp	/^            ConnectionFailed = 1001  \/\/\/< Connection with server failed$/;"	e	enum:sf::Http::Response::Status
ConsoleCallArguments	dependencies/include/v8.h	/^  friend class debug::ConsoleCallArguments;$/;"	m	class:v8::FunctionCallbackInfo::debug	typeref:typename:class
ConstIterator	dependencies/include/SFML/System/String.hpp	/^    typedef std::basic_string<Uint32>::const_iterator ConstIterator; \/\/\/< Read-only iterator /;"	t	class:sf::String	typeref:typename:std::basic_string<Uint32>::const_iterator
ConstructorBehavior	dependencies/include/v8.h	/^enum class ConstructorBehavior { kThrow, kAllow };$/;"	g	namespace:v8
Contains	dependencies/include/v8-util.h	/^  bool Contains(const K& key) {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:bool
Contents	dependencies/include/v8.h	/^    Contents()$/;"	f	class:v8::ArrayBuffer::Contents
Contents	dependencies/include/v8.h	/^    Contents()$/;"	f	class:v8::SharedArrayBuffer::Contents
Contents	dependencies/include/v8.h	/^  class V8_EXPORT Contents {  \/\/ NOLINT$/;"	c	class:v8::SharedArrayBuffer
Contents	dependencies/include/v8.h	/^  class V8_EXPORT Contents { \/\/ NOLINT$/;"	c	class:v8::ArrayBuffer
Context	dependencies/include/SFML/Window/Context.hpp	/^class SFML_WINDOW_API Context : GlResource, NonCopyable$/;"	c	namespace:sf
ContextDestroyCallback	dependencies/include/SFML/Window/GlResource.hpp	/^typedef void(*ContextDestroyCallback)(void*);$/;"	t	namespace:sf	typeref:typename:void (*)(void *)
ContextSettings	dependencies/include/SFML/Window/ContextSettings.hpp	/^    explicit ContextSettings(unsigned int depth = 0, unsigned int stencil = 0, unsigned int anti/;"	f	struct:sf::ContextSettings
ContextSettings	dependencies/include/SFML/Window/ContextSettings.hpp	/^struct ContextSettings$/;"	s	namespace:sf
ControlOption	dependencies/include/v8-profiler.h	/^  enum ControlOption {$/;"	g	class:v8::ActivityControl
ConvertableToTraceFormat	dependencies/include/v8-platform.h	/^class ConvertableToTraceFormat {$/;"	c	namespace:v8
ConvexShape	dependencies/include/SFML/Graphics/ConvexShape.hpp	/^class SFML_GRAPHICS_API ConvexShape : public Shape$/;"	c	namespace:sf
CoordinateType	dependencies/include/SFML/Graphics/Texture.hpp	/^    enum CoordinateType$/;"	g	class:sf::Texture
Copy	dependencies/include/v8.h	/^  V8_INLINE static void Copy(const Persistent<S, M>& source,$/;"	f	class:v8::NonCopyablePersistentTraits	typeref:typename:V8_INLINE void
Copy	dependencies/include/v8.h	/^  static V8_INLINE void Copy(const Persistent<S, M>& source,$/;"	f	struct:v8::CopyablePersistentTraits	typeref:typename:V8_INLINE void
CopyablePersistent	dependencies/include/v8.h	/^  typedef Persistent<T, CopyablePersistentTraits<T> > CopyablePersistent;$/;"	t	struct:v8::CopyablePersistentTraits	typeref:typename:Persistent<T,CopyablePersistentTraits<T>>
CopyablePersistentTraits	dependencies/include/v8.h	/^struct CopyablePersistentTraits {$/;"	s	namespace:v8
Core	dependencies/include/SFML/Window/ContextSettings.hpp	/^        Core    = 1 << 0, \/\/\/< Core attribute$/;"	e	enum:sf::ContextSettings::Attribute
Count	dependencies/include/SFML/Window/Event.hpp	/^        Count                   \/\/\/< Keep last -- the total number of event types$/;"	e	enum:sf::Event::EventType
Count	dependencies/include/SFML/Window/Joystick.hpp	/^        Count       = 8,  \/\/\/< Maximum number of supported joysticks$/;"	e	enum:sf::Joystick::__anon1e23a3bc0103
Count	dependencies/include/SFML/Window/Sensor.hpp	/^        Count             \/\/\/< Keep last -- the total number of sensor types$/;"	e	enum:sf::Sensor::Type
CpuProfile	dependencies/include/v8-profiler.h	/^class V8_EXPORT CpuProfile {$/;"	c	namespace:v8
CpuProfileDeoptFrame	dependencies/include/v8-profiler.h	/^struct CpuProfileDeoptFrame {$/;"	s	namespace:v8
CpuProfileDeoptInfo	dependencies/include/v8-profiler.h	/^struct V8_EXPORT CpuProfileDeoptInfo {$/;"	s	namespace:v8
CpuProfileNode	dependencies/include/v8-profiler.h	/^class V8_EXPORT CpuProfileNode {$/;"	c	namespace:v8
CpuProfiler	dependencies/include/v8-profiler.h	/^class V8_EXPORT CpuProfiler {$/;"	c	namespace:v8
CpuProfilingMode	dependencies/include/v8-profiler.h	/^enum CpuProfilingMode {$/;"	g	namespace:v8
Created	dependencies/include/SFML/Network/Http.hpp	/^            Created        = 201, \/\/\/< The resource has successfully been created$/;"	e	enum:sf::Http::Response::Status
CreationContext	dependencies/include/v8.h	/^  V8_INLINE static Local<Context> CreationContext($/;"	f	class:v8::Object	typeref:typename:V8_INLINE Local<Context>
Cross	dependencies/include/SFML/Window/Cursor.hpp	/^        Cross,                  \/\/\/< Crosshair cursor$/;"	e	enum:sf::Cursor::Type
CurrentTexture	dependencies/include/SFML/Graphics/Shader.hpp	/^    static CurrentTextureType CurrentTexture;$/;"	m	class:sf::Shader	typeref:typename:CurrentTextureType
CurrentTextureType	dependencies/include/SFML/Graphics/Shader.hpp	/^    struct CurrentTextureType {};$/;"	s	class:sf::Shader
CurrentValueSerializerFormatVersion	dependencies/include/v8-value-serializer-version.h	/^constexpr uint32_t CurrentValueSerializerFormatVersion() { return 13; }$/;"	f	namespace:v8	typeref:typename:uint32_t
Cursor	dependencies/include/SFML/Window/Cursor.hpp	/^class SFML_WINDOW_API Cursor : NonCopyable$/;"	c	namespace:sf
CustomArguments	dependencies/include/v8.h	/^  template<class F> friend class internal::CustomArguments;$/;"	m	class:v8::Local::internal	typeref:typename:class
Cyan	dependencies/include/SFML/Graphics/Color.hpp	/^    static const Color Cyan;        \/\/\/< Cyan predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
D	dependencies/include/SFML/Window/Keyboard.hpp	/^        D,            \/\/\/< The D key$/;"	e	enum:sf::Keyboard::Key
DEC	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#define DEC(/;"	d	file:
DEC	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:
DEFAULT	dependencies/include/v8.h	/^  DEFAULT               = 0,$/;"	e	enum:v8::AccessControl
DISABLED	dependencies/include/libplatform/v8-tracing.h	/^  enum Mode { DISABLED = 0, RECORDING_MODE };$/;"	e	enum:v8::platform::tracing::TracingController::Mode
Dash	dependencies/include/SFML/Window/Keyboard.hpp	/^        Dash      = Hyphen,       \/\/\/< \\deprecated Use Hyphen instead$/;"	e	enum:sf::Keyboard::Key
Data	dependencies/include/SFML/Network/TcpSocket.hpp	/^        std::vector<char> Data;         \/\/\/< Data of the packet$/;"	m	struct:sf::TcpSocket::PendingPacket	typeref:typename:std::vector<char>
Data	dependencies/include/v8.h	/^    void* Data() const { return data_; }$/;"	f	class:v8::ArrayBuffer::Contents	typeref:typename:void *
Data	dependencies/include/v8.h	/^    void* Data() const { return data_; }$/;"	f	class:v8::SharedArrayBuffer::Contents	typeref:typename:void *
Data	dependencies/include/v8.h	/^class V8_EXPORT Data {$/;"	c	namespace:v8
DataConnectionAlreadyOpened	dependencies/include/SFML/Network/Ftp.hpp	/^            DataConnectionAlreadyOpened = 125, \/\/\/< Data connection already opened, transfer /;"	e	enum:sf::Ftp::Response::Status
DataConnectionOpened	dependencies/include/SFML/Network/Ftp.hpp	/^            DataConnectionOpened  = 225, \/\/\/< Data connection open, no transfer in progress$/;"	e	enum:sf::Ftp::Response::Status
DataConnectionUnavailable	dependencies/include/SFML/Network/Ftp.hpp	/^            DataConnectionUnavailable = 425, \/\/\/< Can't open data connection$/;"	e	enum:sf::Ftp::Response::Status
DataView	dependencies/include/v8.h	/^class V8_EXPORT DataView : public ArrayBufferView {$/;"	c	namespace:v8
Date	dependencies/include/v8.h	/^class V8_EXPORT Date : public Object {$/;"	c	namespace:v8
Debug	dependencies/include/SFML/Window/ContextSettings.hpp	/^        Debug   = 1 << 2  \/\/\/< Debug attribute$/;"	e	enum:sf::ContextSettings::Attribute
Debugger	dependencies/include/v8-inspector.h	/^namespace Debugger {$/;"	n	namespace:v8_inspector::protocol
Default	dependencies/include/SFML/Graphics/RenderStates.hpp	/^    static const RenderStates Default; \/\/\/< Special instance holding the default render state/;"	m	class:sf::RenderStates	typeref:typename:const RenderStates
Default	dependencies/include/SFML/Window/ContextSettings.hpp	/^        Default = 0,      \/\/\/< Non-debug, compatibility context (this and the core attribute /;"	e	enum:sf::ContextSettings::Attribute
Default	dependencies/include/SFML/Window/WindowStyle.hpp	/^        Default = Titlebar | Resize | Close \/\/\/< Default window style$/;"	e	enum:sf::Style::__anonc2dbfd350103
DefaultGlobalMapTraits	dependencies/include/v8-util.h	/^class DefaultGlobalMapTraits : public StdMapTraits<K, V> {$/;"	c	namespace:v8
DefaultPersistentValueMapTraits	dependencies/include/v8-util.h	/^class DefaultPersistentValueMapTraits : public StdMapTraits<K, V> {$/;"	c	namespace:v8
DefaultPersistentValueVectorTraits	dependencies/include/v8-util.h	/^class DefaultPersistentValueVectorTraits {$/;"	c	namespace:v8
Delegate	dependencies/include/v8.h	/^  class V8_EXPORT Delegate {$/;"	c	class:v8::ValueDeserializer
Delegate	dependencies/include/v8.h	/^  class V8_EXPORT Delegate {$/;"	c	class:v8::ValueSerializer
Delete	dependencies/include/SFML/Network/Http.hpp	/^            Delete \/\/\/< Request in delete mode, useful for a REST API$/;"	e	enum:sf::Http::Request::Method
Delete	dependencies/include/SFML/Window/Keyboard.hpp	/^        Delete,       \/\/\/< The Delete key$/;"	e	enum:sf::Keyboard::Key
Deleter	dependencies/include/v8.h	/^    DeleterCallback Deleter() const { return deleter_; }$/;"	f	class:v8::ArrayBuffer::Contents	typeref:typename:DeleterCallback
Deleter	dependencies/include/v8.h	/^    DeleterCallback Deleter() const { return deleter_; }$/;"	f	class:v8::SharedArrayBuffer::Contents	typeref:typename:DeleterCallback
DeleterCallback	dependencies/include/v8.h	/^    using DeleterCallback = void (*)(void* buffer, size_t length, void* info);$/;"	t	class:v8::ArrayBuffer::Contents
DeleterCallback	dependencies/include/v8.h	/^    using DeleterCallback = void (*)(void* buffer, size_t length, void* info);$/;"	t	class:v8::SharedArrayBuffer::Contents
DeleterData	dependencies/include/v8.h	/^    void* DeleterData() const { return deleter_data_; }$/;"	f	class:v8::ArrayBuffer::Contents	typeref:typename:void *
DeleterData	dependencies/include/v8.h	/^    void* DeleterData() const { return deleter_data_; }$/;"	f	class:v8::SharedArrayBuffer::Contents	typeref:typename:void *
DirectoryOk	dependencies/include/SFML/Network/Ftp.hpp	/^            DirectoryOk           = 257, \/\/\/< PATHNAME created$/;"	e	enum:sf::Ftp::Response::Status
DirectoryResponse	dependencies/include/SFML/Network/Ftp.hpp	/^    class SFML_NETWORK_API DirectoryResponse : public Response$/;"	c	class:sf::Ftp
DirectoryStatus	dependencies/include/SFML/Network/Ftp.hpp	/^            DirectoryStatus       = 212, \/\/\/< Directory status$/;"	e	enum:sf::Ftp::Response::Status
DiscardSystemPages	dependencies/include/v8-platform.h	/^  virtual bool DiscardSystemPages(void* address, size_t size) { return true; }$/;"	f	class:v8::PageAllocator	typeref:typename:bool
Disconnected	dependencies/include/SFML/Network/Socket.hpp	/^        Disconnected, \/\/\/< The TCP socket has been disconnected$/;"	e	enum:sf::Socket::Status
Dispose	dependencies/include/v8-util.h	/^  static void Dispose(Isolate* isolate, Global<V> value, K key) {}$/;"	f	class:v8::DefaultGlobalMapTraits	typeref:typename:void
Dispose	dependencies/include/v8-util.h	/^  static void Dispose(Isolate* isolate, Global<V> value, K key) {}$/;"	f	class:v8::DefaultPersistentValueMapTraits	typeref:typename:void
Dispose	dependencies/include/v8.h	/^    virtual void Dispose() { delete this; }$/;"	f	class:v8::String::ExternalStringResourceBase	typeref:typename:void
DisposeCallbackData	dependencies/include/v8-util.h	/^  static void DisposeCallbackData(WeakCallbackDataType* data) { }$/;"	f	class:v8::DefaultPersistentValueMapTraits	typeref:typename:void
DisposeCallbackData	dependencies/include/v8-util.h	/^  static void DisposeCallbackData(WeakCallbackDataType* data) {}$/;"	f	class:v8::DefaultGlobalMapTraits	typeref:typename:void
DisposeWeak	dependencies/include/v8-util.h	/^  static void DisposeWeak(const WeakCallbackInfo<WeakCallbackDataType>& data) {}$/;"	f	class:v8::DefaultGlobalMapTraits	typeref:typename:void
Divide	dependencies/include/SFML/Window/Keyboard.hpp	/^        Divide,       \/\/\/< The \/ key$/;"	e	enum:sf::Keyboard::Key
Done	dependencies/include/SFML/Network/Socket.hpp	/^        Done,         \/\/\/< The socket has sent \/ received the data$/;"	e	enum:sf::Socket::Status
DontDelete	dependencies/include/v8.h	/^  DontDelete = 1 << 2$/;"	e	enum:v8::PropertyAttribute
DontEnum	dependencies/include/v8.h	/^  DontEnum = 1 << 1,$/;"	e	enum:v8::PropertyAttribute
Down	dependencies/include/SFML/Window/Keyboard.hpp	/^        Down,         \/\/\/< Down arrow$/;"	e	enum:sf::Keyboard::Key
Drawable	dependencies/include/SFML/Graphics/Drawable.hpp	/^class SFML_GRAPHICS_API Drawable$/;"	c	namespace:sf
DstAlpha	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        DstAlpha,         \/\/\/< (dst.a, dst.a, dst.a, dst.a)$/;"	e	enum:sf::BlendMode::Factor
DstColor	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        DstColor,         \/\/\/< (dst.r, dst.g, dst.b, dst.a)$/;"	e	enum:sf::BlendMode::Factor
DumpWithoutCrashing	dependencies/include/v8-platform.h	/^  virtual void DumpWithoutCrashing() {}$/;"	f	class:v8::Platform	typeref:typename:void
Dynamic	dependencies/include/SFML/Graphics/VertexBuffer.hpp	/^        Dynamic, \/\/\/< Occasionally changing data$/;"	e	enum:sf::VertexBuffer::Usage
E	dependencies/include/SFML/Window/Keyboard.hpp	/^        E,            \/\/\/< The E key$/;"	e	enum:sf::Keyboard::Key
ECHO_TO_CONSOLE	dependencies/include/libplatform/v8-tracing.h	/^  ECHO_TO_CONSOLE,$/;"	e	enum:v8::platform::tracing::TraceRecordMode
ENABLED_FOR_ETW_EXPORT	dependencies/include/libplatform/v8-tracing.h	/^    ENABLED_FOR_ETW_EXPORT = 1 << 3$/;"	e	enum:v8::platform::tracing::TracingController::CategoryGroupEnabledFlags
ENABLED_FOR_EVENT_CALLBACK	dependencies/include/libplatform/v8-tracing.h	/^    ENABLED_FOR_EVENT_CALLBACK = 1 << 2,$/;"	e	enum:v8::platform::tracing::TracingController::CategoryGroupEnabledFlags
ENABLED_FOR_RECORDING	dependencies/include/libplatform/v8-tracing.h	/^    ENABLED_FOR_RECORDING = 1 << 0,$/;"	e	enum:v8::platform::tracing::TracingController::CategoryGroupEnabledFlags
EXTERNAL	dependencies/include/v8.h	/^  EXTERNAL,$/;"	e	enum:v8::StateTag
Ebcdic	dependencies/include/SFML/Network/Ftp.hpp	/^        Ebcdic  \/\/\/< Text mode using EBCDIC encoding$/;"	e	enum:sf::Ftp::TransferMode
EmbedderGraph	dependencies/include/v8-profiler.h	/^class V8_EXPORT EmbedderGraph {$/;"	c	namespace:v8
Empty	dependencies/include/v8-util.h	/^  static bool Empty(Impl* impl) { return impl->empty(); }$/;"	f	class:v8::StdMapTraits	typeref:typename:bool
Empty	dependencies/include/v8.h	/^  V8_INLINE void Empty() { val_ = 0; }$/;"	f	class:v8::PersistentBase	typeref:typename:V8_INLINE void
EnableArgumentFilter	dependencies/include/libplatform/v8-tracing.h	/^  void EnableArgumentFilter() { enable_argument_filter_ = true; }$/;"	f	class:v8::platform::tracing::TraceConfig	typeref:typename:void
EnableSystrace	dependencies/include/libplatform/v8-tracing.h	/^  void EnableSystrace() { enable_systrace_ = true; }$/;"	f	class:v8::platform::tracing::TraceConfig	typeref:typename:void
Encoding	dependencies/include/v8.h	/^    enum Encoding { ONE_BYTE, TWO_BYTE, UTF8 };$/;"	g	class:v8::ScriptCompiler::StreamedSource
Encoding	dependencies/include/v8.h	/^  enum Encoding {$/;"	g	class:v8::String
End	dependencies/include/SFML/Window/Keyboard.hpp	/^        End,          \/\/\/< The End key$/;"	e	enum:sf::Keyboard::Key
End	dependencies/include/v8-util.h	/^  static Iterator End(Impl* impl) { return impl->end(); }$/;"	f	class:v8::StdMapTraits	typeref:typename:Iterator
Enter	dependencies/include/SFML/Window/Keyboard.hpp	/^        Enter,        \/\/\/< The Enter\/Return keys$/;"	e	enum:sf::Keyboard::Key
EnteringPassiveMode	dependencies/include/SFML/Network/Ftp.hpp	/^            EnteringPassiveMode   = 227, \/\/\/< Entering passive mode$/;"	e	enum:sf::Ftp::Response::Status
Equal	dependencies/include/SFML/Window/Keyboard.hpp	/^        Equal,        \/\/\/< The = key$/;"	e	enum:sf::Keyboard::Key
Equation	dependencies/include/SFML/Graphics/BlendMode.hpp	/^    enum Equation$/;"	g	struct:sf::BlendMode
Error	dependencies/include/SFML/Network/Socket.hpp	/^        Error         \/\/\/< An unexpected error happened$/;"	e	enum:sf::Socket::Status
EscapableHandleScope	dependencies/include/v8.h	/^class V8_EXPORT EscapableHandleScope : public HandleScope {$/;"	c	namespace:v8
Escape	dependencies/include/SFML/Window/Keyboard.hpp	/^        Escape,       \/\/\/< The Escape key$/;"	e	enum:sf::Keyboard::Key
Escape	dependencies/include/v8.h	/^  V8_INLINE Local<T> Escape(Local<T> value) {$/;"	f	class:v8::EscapableHandleScope	typeref:typename:V8_INLINE Local<T>
EscapeMaybe	dependencies/include/v8.h	/^  V8_INLINE MaybeLocal<T> EscapeMaybe(MaybeLocal<T> value) {$/;"	f	class:v8::EscapableHandleScope	typeref:typename:V8_INLINE MaybeLocal<T>
Eternal	dependencies/include/v8.h	/^  V8_INLINE Eternal() : val_(nullptr) {}$/;"	f	class:v8::Eternal	typeref:typename:V8_INLINE
Eternal	dependencies/include/v8.h	/^  V8_INLINE Eternal(Isolate* isolate, Local<S> handle) : val_(nullptr) {$/;"	f	class:v8::Eternal	typeref:typename:V8_INLINE
Eternal	dependencies/include/v8.h	/^template <class T> class Eternal {$/;"	c	namespace:v8
Event	dependencies/include/SFML/Window/Event.hpp	/^class Event$/;"	c	namespace:sf
EventType	dependencies/include/SFML/Window/Event.hpp	/^    enum EventType$/;"	g	class:sf::Event
External	dependencies/include/v8.h	/^class V8_EXPORT External : public Value {$/;"	c	namespace:v8
ExternalOneByteStringResource	dependencies/include/v8.h	/^  class V8_EXPORT ExternalOneByteStringResource$/;"	c	class:v8::String
ExternalSourceStream	dependencies/include/v8.h	/^  class V8_EXPORT ExternalSourceStream {$/;"	c	class:v8::ScriptCompiler
ExternalStringResource	dependencies/include/v8.h	/^  class V8_EXPORT ExternalStringResource$/;"	c	class:v8::String
ExternalStringResourceBase	dependencies/include/v8.h	/^  class V8_EXPORT ExternalStringResourceBase {  \/\/ NOLINT$/;"	c	class:v8::String
F	dependencies/include/SFML/Window/Keyboard.hpp	/^        F,            \/\/\/< The F key$/;"	e	enum:sf::Keyboard::Key
F1	dependencies/include/SFML/Window/Keyboard.hpp	/^        F1,           \/\/\/< The F1 key$/;"	e	enum:sf::Keyboard::Key
F10	dependencies/include/SFML/Window/Keyboard.hpp	/^        F10,          \/\/\/< The F10 key$/;"	e	enum:sf::Keyboard::Key
F11	dependencies/include/SFML/Window/Keyboard.hpp	/^        F11,          \/\/\/< The F11 key$/;"	e	enum:sf::Keyboard::Key
F12	dependencies/include/SFML/Window/Keyboard.hpp	/^        F12,          \/\/\/< The F12 key$/;"	e	enum:sf::Keyboard::Key
F13	dependencies/include/SFML/Window/Keyboard.hpp	/^        F13,          \/\/\/< The F13 key$/;"	e	enum:sf::Keyboard::Key
F14	dependencies/include/SFML/Window/Keyboard.hpp	/^        F14,          \/\/\/< The F14 key$/;"	e	enum:sf::Keyboard::Key
F15	dependencies/include/SFML/Window/Keyboard.hpp	/^        F15,          \/\/\/< The F15 key$/;"	e	enum:sf::Keyboard::Key
F2	dependencies/include/SFML/Window/Keyboard.hpp	/^        F2,           \/\/\/< The F2 key$/;"	e	enum:sf::Keyboard::Key
F3	dependencies/include/SFML/Window/Keyboard.hpp	/^        F3,           \/\/\/< The F3 key$/;"	e	enum:sf::Keyboard::Key
F4	dependencies/include/SFML/Window/Keyboard.hpp	/^        F4,           \/\/\/< The F4 key$/;"	e	enum:sf::Keyboard::Key
F5	dependencies/include/SFML/Window/Keyboard.hpp	/^        F5,           \/\/\/< The F5 key$/;"	e	enum:sf::Keyboard::Key
F6	dependencies/include/SFML/Window/Keyboard.hpp	/^        F6,           \/\/\/< The F6 key$/;"	e	enum:sf::Keyboard::Key
F7	dependencies/include/SFML/Window/Keyboard.hpp	/^        F7,           \/\/\/< The F7 key$/;"	e	enum:sf::Keyboard::Key
F8	dependencies/include/SFML/Window/Keyboard.hpp	/^        F8,           \/\/\/< The F8 key$/;"	e	enum:sf::Keyboard::Key
F9	dependencies/include/SFML/Window/Keyboard.hpp	/^        F9,           \/\/\/< The F9 key$/;"	e	enum:sf::Keyboard::Key
Factor	dependencies/include/SFML/Graphics/BlendMode.hpp	/^    enum Factor$/;"	g	struct:sf::BlendMode
FieldTable	dependencies/include/SFML/Network/Http.hpp	/^        typedef std::map<std::string, std::string> FieldTable;$/;"	t	class:sf::Http::Request	typeref:typename:std::map<std::string,std::string>
FieldTable	dependencies/include/SFML/Network/Http.hpp	/^        typedef std::map<std::string, std::string> FieldTable;$/;"	t	class:sf::Http::Response	typeref:typename:std::map<std::string,std::string>
FileActionAborted	dependencies/include/SFML/Network/Ftp.hpp	/^            FileActionAborted         = 450, \/\/\/< Requested file action not taken$/;"	e	enum:sf::Ftp::Response::Status
FileActionOk	dependencies/include/SFML/Network/Ftp.hpp	/^            FileActionOk          = 250, \/\/\/< Requested file action ok$/;"	e	enum:sf::Ftp::Response::Status
FileInputStream	dependencies/include/SFML/System/FileInputStream.hpp	/^class SFML_SYSTEM_API FileInputStream : public InputStream, NonCopyable$/;"	c	namespace:sf
FileStatus	dependencies/include/SFML/Network/Ftp.hpp	/^            FileStatus            = 213, \/\/\/< File status$/;"	e	enum:sf::Ftp::Response::Status
FileUnavailable	dependencies/include/SFML/Network/Ftp.hpp	/^            FileUnavailable         = 550, \/\/\/< Requested action not taken, file unavailable$/;"	e	enum:sf::Ftp::Response::Status
FilenameNotAllowed	dependencies/include/SFML/Network/Ftp.hpp	/^            FilenameNotAllowed      = 553, \/\/\/< Requested action not taken, file name not all/;"	e	enum:sf::Ftp::Response::Status
Flags	dependencies/include/v8.h	/^  enum Flags {$/;"	g	class:v8::RegExp
Flags	dependencies/include/v8.h	/^  int Flags() const { return flags_; }$/;"	f	class:v8::ScriptOriginOptions	typeref:typename:int
Float32Array	dependencies/include/v8.h	/^class V8_EXPORT Float32Array : public TypedArray {$/;"	c	namespace:v8
Float64Array	dependencies/include/v8.h	/^class V8_EXPORT Float64Array : public TypedArray {$/;"	c	namespace:v8
FloatRect	dependencies/include/SFML/Graphics/Rect.hpp	/^typedef Rect<float> FloatRect;$/;"	t	namespace:sf	typeref:typename:Rect<float>
Font	dependencies/include/SFML/Graphics/Font.hpp	/^class SFML_GRAPHICS_API Font$/;"	c	namespace:sf
Forbidden	dependencies/include/SFML/Network/Http.hpp	/^            Forbidden           = 403, \/\/\/< The requested page cannot be accessed at all, eve/;"	e	enum:sf::Http::Response::Status
Fragment	dependencies/include/SFML/Graphics/Shader.hpp	/^        Fragment  \/\/\/< Fragment (pixel) shader$/;"	e	enum:sf::Shader::Type
FromMaybe	dependencies/include/v8.h	/^  V8_INLINE Local<S> FromMaybe(Local<S> default_value) const {$/;"	f	class:v8::MaybeLocal	typeref:typename:V8_INLINE Local<S>
FromVal	dependencies/include/v8-util.h	/^  static V* FromVal(PersistentContainerValue v) {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:V *
FromVal	dependencies/include/v8-util.h	/^  static V* FromVal(PersistentContainerValue v) {$/;"	f	class:v8::PersistentValueVector	typeref:typename:V *
Ftp	dependencies/include/SFML/Network/Ftp.hpp	/^class SFML_NETWORK_API Ftp : NonCopyable$/;"	c	namespace:sf
Fullscreen	dependencies/include/SFML/Window/WindowStyle.hpp	/^        Fullscreen = 1 << 3, \/\/\/< Fullscreen mode (this flag and all others are mutually excl/;"	e	enum:sf::Style::__anonc2dbfd350103
Function	dependencies/include/v8.h	/^class V8_EXPORT Function : public Object {$/;"	c	namespace:v8
FunctionCallback	dependencies/include/v8.h	/^typedef void (*FunctionCallback)(const FunctionCallbackInfo<Value>& info);$/;"	t	namespace:v8	typeref:typename:void (*)(const FunctionCallbackInfo<Value> & info)
FunctionCallbackArguments	dependencies/include/v8.h	/^  friend class internal::FunctionCallbackArguments;$/;"	m	class:v8::FunctionCallbackInfo::internal	typeref:typename:class
FunctionCallbackInfo	dependencies/include/v8.h	/^class FunctionCallbackInfo {$/;"	c	namespace:v8
FunctionTemplate	dependencies/include/v8.h	/^class V8_EXPORT FunctionTemplate : public Template {$/;"	c	namespace:v8
G	dependencies/include/SFML/Window/Keyboard.hpp	/^        G,            \/\/\/< The G key$/;"	e	enum:sf::Keyboard::Key
GC	dependencies/include/v8.h	/^  GC,$/;"	e	enum:v8::StateTag
GainedFocus	dependencies/include/SFML/Window/Event.hpp	/^        GainedFocus,            \/\/\/< The window gained the focus (no data)$/;"	e	enum:sf::Event::EventType
Game	src/Game.cpp	/^Game::Game(){$/;"	f	class:Game
Game	src/Game.hpp	/^class Game {$/;"	c
Game_hpp	src/Game.hpp	/^#define Game_hpp$/;"	d
GatewayTimeout	dependencies/include/SFML/Network/Http.hpp	/^            GatewayTimeout      = 504, \/\/\/< The gateway server couldn't receive a response fr/;"	e	enum:sf::Http::Response::Status
GenericNamedPropertyDefinerCallback	dependencies/include/v8.h	/^typedef void (*GenericNamedPropertyDefinerCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(Local<Name> property,const PropertyDescriptor & desc,const PropertyCallbackInfo<Value> & info)
GenericNamedPropertyDeleterCallback	dependencies/include/v8.h	/^typedef void (*GenericNamedPropertyDeleterCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(Local<Name> property,const PropertyCallbackInfo<Boolean> & info)
GenericNamedPropertyDescriptorCallback	dependencies/include/v8.h	/^typedef void (*GenericNamedPropertyDescriptorCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(Local<Name> property,const PropertyCallbackInfo<Value> & info)
GenericNamedPropertyEnumeratorCallback	dependencies/include/v8.h	/^typedef void (*GenericNamedPropertyEnumeratorCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(const PropertyCallbackInfo<Array> & info)
GenericNamedPropertyGetterCallback	dependencies/include/v8.h	/^typedef void (*GenericNamedPropertyGetterCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(Local<Name> property,const PropertyCallbackInfo<Value> & info)
GenericNamedPropertyQueryCallback	dependencies/include/v8.h	/^typedef void (*GenericNamedPropertyQueryCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(Local<Name> property,const PropertyCallbackInfo<Integer> & info)
GenericNamedPropertySetterCallback	dependencies/include/v8.h	/^typedef void (*GenericNamedPropertySetterCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(Local<Name> property,Local<Value> value,const PropertyCallbackInfo<Value> & info)
Geometry	dependencies/include/SFML/Graphics/Shader.hpp	/^        Geometry, \/\/\/< Geometry shader$/;"	e	enum:sf::Shader::Type
Get	dependencies/include/SFML/Network/Http.hpp	/^            Get,   \/\/\/< Request in get mode, standard method to retrieve a page$/;"	e	enum:sf::Http::Request::Method
Get	dependencies/include/v8-util.h	/^  Local<V> Get(const K& key) {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:Local<V>
Get	dependencies/include/v8-util.h	/^  Local<V> Get(size_t index) const {$/;"	f	class:v8::PersistentValueVector	typeref:typename:Local<V>
Get	dependencies/include/v8-util.h	/^  static PersistentContainerValue Get(Impl* impl, K key) {$/;"	f	class:v8::StdMapTraits	typeref:typename:PersistentContainerValue
Get	dependencies/include/v8-util.h	/^  static PersistentContainerValue Get(const Impl* impl, size_t i) {$/;"	f	class:v8::DefaultPersistentValueVectorTraits	typeref:typename:PersistentContainerValue
Get	dependencies/include/v8.h	/^  V8_INLINE Local<T> Get(Isolate* isolate) const {$/;"	f	class:v8::PersistentBase	typeref:typename:V8_INLINE Local<T>
GetAlignedPointerFromInternalField	dependencies/include/v8.h	/^  V8_INLINE static void* GetAlignedPointerFromInternalField($/;"	f	class:v8::Object	typeref:typename:V8_INLINE void *
GetCategoryGroupEnabled	dependencies/include/v8-platform.h	/^  virtual const uint8_t* GetCategoryGroupEnabled(const char* name) {$/;"	f	class:v8::TracingController	typeref:typename:const uint8_t *
GetChunkSize	dependencies/include/v8-profiler.h	/^  virtual int GetChunkSize() { return 1024; }$/;"	f	class:v8::OutputStream	typeref:typename:int
GetColumnNumber	dependencies/include/v8.h	/^  int GetColumnNumber() { return column_number_; }$/;"	f	class:v8::Location	typeref:typename:int
GetElementCount	dependencies/include/v8-profiler.h	/^  virtual intptr_t GetElementCount() { return -1; }$/;"	f	class:v8::RetainedObjectInfo	typeref:typename:intptr_t
GetEmbedderData	dependencies/include/v8-internal.h	/^  V8_INLINE static void* GetEmbedderData(const v8::Isolate* isolate,$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE void *
GetEventAt	dependencies/include/libplatform/v8-tracing.h	/^  TraceObject* GetEventAt(size_t index) { return &chunk_[index]; }$/;"	f	class:v8::platform::tracing::TraceBufferChunk	typeref:typename:TraceObject *
GetGroupLabel	dependencies/include/v8-profiler.h	/^  virtual const char* GetGroupLabel() { return GetLabel(); }$/;"	f	class:v8::RetainedObjectInfo	typeref:typename:const char *
GetInstanceType	dependencies/include/v8-internal.h	/^  V8_INLINE static int GetInstanceType(const internal::Address obj) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE int
GetIsolate	dependencies/include/v8-util.h	/^  Isolate* GetIsolate() { return isolate_; }$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:Isolate *
GetIsolate	dependencies/include/v8.h	/^  V8_INLINE Isolate* GetIsolate() const { return isolate_; }$/;"	f	class:v8::WeakCallbackInfo	typeref:typename:V8_INLINE Isolate *
GetIsolate	dependencies/include/v8.h	/^  V8_INLINE Isolate* GetIsolate() const {$/;"	f	class:v8::HandleScope	typeref:typename:V8_INLINE Isolate *
GetLineNumber	dependencies/include/v8.h	/^  int GetLineNumber() { return line_number_; }$/;"	f	class:v8::Location	typeref:typename:int
GetNodeFlag	dependencies/include/v8-internal.h	/^  V8_INLINE static uint8_t GetNodeFlag(internal::Address* obj, int shift) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE uint8_t
GetNodeState	dependencies/include/v8-internal.h	/^  V8_INLINE static uint8_t GetNodeState(internal::Address* obj) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE uint8_t
GetOddballKind	dependencies/include/v8-internal.h	/^  V8_INLINE static int GetOddballKind(const internal::Address obj) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE int
GetPageAllocator	dependencies/include/v8-platform.h	/^  virtual PageAllocator* GetPageAllocator() {$/;"	f	class:v8::Platform	typeref:typename:PageAllocator *
GetParameter	dependencies/include/v8.h	/^  V8_INLINE T* GetParameter() const { return parameter_; }$/;"	f	class:v8::WeakCallbackInfo	typeref:typename:V8_INLINE T *
GetReference	dependencies/include/v8-util.h	/^  PersistentValueReference GetReference(const K& key) {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:PersistentValueReference
GetRetainerInfosCallback	dependencies/include/v8-profiler.h	/^  typedef RetainerInfos (*GetRetainerInfosCallback)(v8::Isolate* isolate);$/;"	t	class:v8::HeapProfiler	typeref:typename:RetainerInfos (*)(v8::Isolate * isolate)
GetRoot	dependencies/include/v8-internal.h	/^  V8_INLINE static internal::Address* GetRoot(v8::Isolate* isolate, int index) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE internal::Address *
GetRootFromOnHeapAddress	dependencies/include/v8-internal.h	/^  V8_INLINE static internal::Address GetRootFromOnHeapAddress($/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE internal::Address
GetSizeInBytes	dependencies/include/v8-profiler.h	/^  virtual intptr_t GetSizeInBytes() { return -1; }$/;"	f	class:v8::RetainedObjectInfo	typeref:typename:intptr_t
GetStackTracePrinter	dependencies/include/v8-platform.h	/^  virtual StackTracePrinter GetStackTracePrinter() { return nullptr; }$/;"	f	class:v8::Platform	typeref:typename:StackTracePrinter
GetTraceRecordMode	dependencies/include/libplatform/v8-tracing.h	/^  TraceRecordMode GetTraceRecordMode() const { return record_mode_; }$/;"	f	class:v8::platform::tracing::TraceConfig	typeref:typename:TraceRecordMode
GlFunctionPointer	dependencies/include/SFML/Window/Context.hpp	/^typedef void (*GlFunctionPointer)();$/;"	t	namespace:sf	typeref:typename:void (*)()
GlResource	dependencies/include/SFML/Window/GlResource.hpp	/^class SFML_WINDOW_API GlResource$/;"	c	namespace:sf
Global	dependencies/include/v8.h	/^  V8_INLINE Global() : PersistentBase<T>(nullptr) {}$/;"	f	class:v8::Global	typeref:typename:V8_INLINE
Global	dependencies/include/v8.h	/^  V8_INLINE Global(Global&& other) : PersistentBase<T>(other.val_) {$/;"	f	class:v8::Global	typeref:typename:V8_INLINE
Global	dependencies/include/v8.h	/^  V8_INLINE Global(Isolate* isolate, Local<S> that)$/;"	f	class:v8::Global	typeref:typename:V8_INLINE
Global	dependencies/include/v8.h	/^  V8_INLINE Global(Isolate* isolate, const PersistentBase<S>& that)$/;"	f	class:v8::Global	typeref:typename:V8_INLINE
Global	dependencies/include/v8.h	/^class Global : public PersistentBase<T> {$/;"	c	namespace:v8
GlobalValueMap	dependencies/include/v8-util.h	/^  GlobalValueMap(Isolate* isolate, const char* label)$/;"	f	class:v8::GlobalValueMap
GlobalValueMap	dependencies/include/v8-util.h	/^  explicit GlobalValueMap(Isolate* isolate)$/;"	f	class:v8::GlobalValueMap
GlobalValueMap	dependencies/include/v8-util.h	/^class GlobalValueMap : public PersistentValueMapBase<K, V, Traits> {$/;"	c	namespace:v8
Glsl	dependencies/include/SFML/Graphics/Glsl.hpp	/^namespace Glsl$/;"	n	namespace:sf
Glyph	dependencies/include/SFML/Graphics/Glyph.hpp	/^    Glyph() : advance(0) {}$/;"	f	class:sf::Glyph
Glyph	dependencies/include/SFML/Graphics/Glyph.hpp	/^class SFML_GRAPHICS_API Glyph$/;"	c	namespace:sf
GlyphTable	dependencies/include/SFML/Graphics/Font.hpp	/^    typedef std::map<Uint64, Glyph> GlyphTable; \/\/\/< Table mapping a codepoint to its glyph$/;"	t	class:sf::Font	typeref:typename:std::map<Uint64,Glyph>
Gravity	dependencies/include/SFML/Window/Sensor.hpp	/^        Gravity,          \/\/\/< Measures the direction and intensity of gravity, independent o/;"	e	enum:sf::Sensor::Type
Green	dependencies/include/SFML/Graphics/Color.hpp	/^    static const Color Green;       \/\/\/< Green predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
Gyroscope	dependencies/include/SFML/Window/Sensor.hpp	/^        Gyroscope,        \/\/\/< Measures the raw rotation rates (degrees\/s)$/;"	e	enum:sf::Sensor::Type
H	dependencies/include/SFML/Window/Keyboard.hpp	/^        H,            \/\/\/< The H key$/;"	e	enum:sf::Keyboard::Key
HEX	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#define HEX(/;"	d	file:
HEX	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:
HINT_MANY_WRITES_EXPECTED	dependencies/include/v8.h	/^    HINT_MANY_WRITES_EXPECTED = 1,$/;"	e	enum:v8::String::WriteOptions
Hand	dependencies/include/SFML/Window/Cursor.hpp	/^        Hand,                   \/\/\/< Pointing hand cursor$/;"	e	enum:sf::Cursor::Type
Handle	dependencies/include/v8.h	/^using Handle = Local<T>;$/;"	t	namespace:v8	typeref:typename:Local<T>
HandleScope	dependencies/include/v8.h	/^class V8_EXPORT HandleScope {$/;"	c	namespace:v8
HasHeapObjectTag	dependencies/include/v8-internal.h	/^  V8_INLINE static bool HasHeapObjectTag(const internal::Address value) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE bool
Head	dependencies/include/SFML/Network/Http.hpp	/^            Head,  \/\/\/< Request a page's header only$/;"	e	enum:sf::Http::Request::Method
Heap	dependencies/include/v8.h	/^    friend class internal::Heap;$/;"	m	class:v8::String::ExternalStringResourceBase::internal	typeref:typename:class
HeapGraphEdge	dependencies/include/v8-profiler.h	/^class V8_EXPORT HeapGraphEdge {$/;"	c	namespace:v8
HeapGraphNode	dependencies/include/v8-profiler.h	/^class V8_EXPORT HeapGraphNode {$/;"	c	namespace:v8
HeapProfiler	dependencies/include/v8-profiler.h	/^class V8_EXPORT HeapProfiler {$/;"	c	namespace:v8
HeapSnapshot	dependencies/include/v8-profiler.h	/^class V8_EXPORT HeapSnapshot {$/;"	c	namespace:v8
HeapStatsUpdate	dependencies/include/v8-profiler.h	/^  HeapStatsUpdate(uint32_t index, uint32_t count, uint32_t size)$/;"	f	struct:v8::HeapStatsUpdate
HeapStatsUpdate	dependencies/include/v8-profiler.h	/^struct HeapStatsUpdate {$/;"	s	namespace:v8
Help	dependencies/include/SFML/Window/Cursor.hpp	/^        Help,                   \/\/\/< Help cursor$/;"	e	enum:sf::Cursor::Type
HelpMessage	dependencies/include/SFML/Network/Ftp.hpp	/^            HelpMessage           = 214, \/\/\/< Help message$/;"	e	enum:sf::Ftp::Response::Status
Home	dependencies/include/SFML/Window/Keyboard.hpp	/^        Home,         \/\/\/< The Home key$/;"	e	enum:sf::Keyboard::Key
HorizontalWheel	dependencies/include/SFML/Window/Mouse.hpp	/^        HorizontalWheel \/\/\/< The horizontal mouse wheel$/;"	e	enum:sf::Mouse::Wheel
Http	dependencies/include/SFML/Network/Http.hpp	/^class SFML_NETWORK_API Http : NonCopyable$/;"	c	namespace:sf
Hyphen	dependencies/include/SFML/Window/Keyboard.hpp	/^        Hyphen,       \/\/\/< The - key (hyphen)$/;"	e	enum:sf::Keyboard::Key
I	dependencies/include/SFML/Window/Keyboard.hpp	/^        I,            \/\/\/< The I key$/;"	e	enum:sf::Keyboard::Key
I	dependencies/include/v8-internal.h	/^    typedef internal::Internals I;$/;"	t	function:v8::internal::Internals::ReadEmbedderData	typeref:typename:internal::Internals
IDLE	dependencies/include/v8.h	/^  IDLE$/;"	e	enum:v8::StateTag
ID_VOID_MAIN	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	file:
INCLUDE_V8_H_	dependencies/include/v8.h	/^#define INCLUDE_V8_H_$/;"	d
INCLUDE_V8_INTERNAL_H_	dependencies/include/v8-internal.h	/^#define INCLUDE_V8_INTERNAL_H_$/;"	d
INCLUDE_V8_VALUE_SERIALIZER_VERSION_H_	dependencies/include/v8-value-serializer-version.h	/^#define INCLUDE_V8_VALUE_SERIALIZER_VERSION_H_$/;"	d
Identification	dependencies/include/SFML/Window/Joystick.hpp	/^    struct SFML_WINDOW_API Identification$/;"	s	class:sf::Joystick
Identity	dependencies/include/SFML/Graphics/Transform.hpp	/^    static const Transform Identity; \/\/\/< The identity transform (does nothing)$/;"	m	class:sf::Transform	typeref:typename:const Transform
IdleTask	dependencies/include/v8-platform.h	/^class IdleTask {$/;"	c	namespace:v8
IdleTaskSupport	dependencies/include/libplatform/libplatform.h	/^enum class IdleTaskSupport { kDisabled, kEnabled };$/;"	g	namespace:v8::platform
IdleTasksEnabled	dependencies/include/v8-platform.h	/^  virtual bool IdleTasksEnabled(Isolate* isolate) {$/;"	f	class:v8::Platform	typeref:typename:bool
Image	dependencies/include/SFML/Graphics/Image.hpp	/^class SFML_GRAPHICS_API Image$/;"	c	namespace:sf
Impl	dependencies/include/v8-util.h	/^  typedef std::map<K, PersistentContainerValue> Impl;$/;"	t	class:v8::StdMapTraits	typeref:typename:std::map<K,PersistentContainerValue>
Impl	dependencies/include/v8-util.h	/^  typedef std::vector<PersistentContainerValue> Impl;$/;"	t	class:v8::DefaultPersistentValueVectorTraits	typeref:typename:std::vector<PersistentContainerValue>
InProcessStackDumping	dependencies/include/libplatform/libplatform.h	/^enum class InProcessStackDumping { kDisabled, kEnabled };$/;"	g	namespace:v8::platform
IndexFilter	dependencies/include/v8.h	/^enum class IndexFilter { kIncludeIndices, kSkipIndices };$/;"	g	namespace:v8
IndexedPropertyDefinerCallback	dependencies/include/v8.h	/^typedef void (*IndexedPropertyDefinerCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(uint32_t index,const PropertyDescriptor & desc,const PropertyCallbackInfo<Value> & info)
IndexedPropertyDeleterCallback	dependencies/include/v8.h	/^typedef void (*IndexedPropertyDeleterCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(uint32_t index,const PropertyCallbackInfo<Boolean> & info)
IndexedPropertyDescriptorCallback	dependencies/include/v8.h	/^typedef void (*IndexedPropertyDescriptorCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(uint32_t index,const PropertyCallbackInfo<Value> & info)
IndexedPropertyEnumeratorCallback	dependencies/include/v8.h	/^typedef void (*IndexedPropertyEnumeratorCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(const PropertyCallbackInfo<Array> & info)
IndexedPropertyGetterCallback	dependencies/include/v8.h	/^typedef void (*IndexedPropertyGetterCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(uint32_t index,const PropertyCallbackInfo<Value> & info)
IndexedPropertyHandlerConfiguration	dependencies/include/v8.h	/^  IndexedPropertyHandlerConfiguration($/;"	f	struct:v8::IndexedPropertyHandlerConfiguration
IndexedPropertyHandlerConfiguration	dependencies/include/v8.h	/^struct IndexedPropertyHandlerConfiguration {$/;"	s	namespace:v8
IndexedPropertyQueryCallback	dependencies/include/v8.h	/^typedef void (*IndexedPropertyQueryCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(uint32_t index,const PropertyCallbackInfo<Integer> & info)
IndexedPropertySetterCallback	dependencies/include/v8.h	/^typedef void (*IndexedPropertySetterCallback)($/;"	t	namespace:v8	typeref:typename:void (*)(uint32_t index,Local<Value> value,const PropertyCallbackInfo<Value> & info)
Info	dependencies/include/SFML/Audio/SoundFileReader.hpp	/^    struct Info$/;"	s	class:sf::SoundFileReader
Info	dependencies/include/SFML/Graphics/Font.hpp	/^    struct Info$/;"	s	class:sf::Font
InputSoundFile	dependencies/include/SFML/Audio/InputSoundFile.hpp	/^class SFML_AUDIO_API InputSoundFile : NonCopyable$/;"	c	namespace:sf
InputStream	dependencies/include/SFML/System/InputStream.hpp	/^class SFML_SYSTEM_API InputStream$/;"	c	namespace:sf
Insert	dependencies/include/SFML/Window/Keyboard.hpp	/^        Insert,       \/\/\/< The Insert key$/;"	e	enum:sf::Keyboard::Key
Inspectable	dependencies/include/v8-inspector.h	/^  class V8_EXPORT Inspectable {$/;"	c	class:v8_inspector::V8InspectorSession
InsufficientStorageSpace	dependencies/include/SFML/Network/Ftp.hpp	/^            InsufficientStorageSpace  = 452, \/\/\/< Requested action not taken; insufficient st/;"	e	enum:sf::Ftp::Response::Status
Int16	dependencies/include/SFML/Config.hpp	/^    typedef signed   short Int16;$/;"	t	namespace:sf	typeref:typename:signed short
Int16Array	dependencies/include/v8.h	/^class V8_EXPORT Int16Array : public TypedArray {$/;"	c	namespace:v8
Int32	dependencies/include/SFML/Config.hpp	/^    typedef signed   int Int32;$/;"	t	namespace:sf	typeref:typename:signed int
Int32	dependencies/include/v8.h	/^class V8_EXPORT Int32 : public Integer {$/;"	c	namespace:v8
Int32Array	dependencies/include/v8.h	/^class V8_EXPORT Int32Array : public TypedArray {$/;"	c	namespace:v8
Int64	dependencies/include/SFML/Config.hpp	/^        typedef signed   __int64 Int64;$/;"	t	namespace:sf	typeref:typename:signed __int64
Int64	dependencies/include/SFML/Config.hpp	/^        typedef signed   long long Int64;$/;"	t	namespace:sf	typeref:typename:signed long long
Int8	dependencies/include/SFML/Config.hpp	/^    typedef signed   char Int8;$/;"	t	namespace:sf	typeref:typename:signed char
Int8Array	dependencies/include/v8.h	/^class V8_EXPORT Int8Array : public TypedArray {$/;"	c	namespace:v8
IntRect	dependencies/include/SFML/Graphics/Rect.hpp	/^typedef Rect<int>   IntRect;$/;"	t	namespace:sf	typeref:typename:Rect<int>
IntToSmi	dependencies/include/v8-internal.h	/^  V8_INLINE static constexpr internal::Address IntToSmi(int value) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE internal::Address
IntToSmi	dependencies/include/v8-internal.h	/^V8_INLINE static constexpr internal::Address IntToSmi(int value) {$/;"	f	namespace:v8::internal	typeref:typename:V8_INLINE internal::Address
Integer	dependencies/include/v8.h	/^class V8_EXPORT Integer : public Number {$/;"	c	namespace:v8
IntegrityLevel	dependencies/include/v8.h	/^enum class IntegrityLevel { kFrozen, kSealed };$/;"	g	namespace:v8
InternalFieldCount	dependencies/include/v8.h	/^  V8_INLINE static int InternalFieldCount($/;"	f	class:v8::Object	typeref:typename:V8_INLINE int
InternalServerError	dependencies/include/SFML/Network/Http.hpp	/^            InternalServerError = 500, \/\/\/< The server encountered an unexpected error$/;"	e	enum:sf::Http::Response::Status
Internals	dependencies/include/v8-internal.h	/^class Internals {$/;"	c	namespace:v8::internal
Intrinsic	dependencies/include/v8.h	/^enum Intrinsic {$/;"	g	namespace:v8
InvalidFile	dependencies/include/SFML/Network/Ftp.hpp	/^            InvalidFile      = 1003  \/\/\/< Not part of the FTP standard, generated by SFML whe/;"	e	enum:sf::Ftp::Response::Status
InvalidPos	dependencies/include/SFML/System/String.hpp	/^    static const std::size_t InvalidPos; \/\/\/< Represents an invalid position in the string$/;"	m	class:sf::String	typeref:typename:const std::size_t
InvalidResponse	dependencies/include/SFML/Network/Ftp.hpp	/^            InvalidResponse  = 1000, \/\/\/< Not part of the FTP standard, generated by SFML whe/;"	e	enum:sf::Ftp::Response::Status
InvalidResponse	dependencies/include/SFML/Network/Http.hpp	/^            InvalidResponse  = 1000, \/\/\/< Response is not a valid HTTP one$/;"	e	enum:sf::Http::Response::Status
IpAddress	dependencies/include/SFML/Network/IpAddress.hpp	/^class SFML_NETWORK_API IpAddress$/;"	c	namespace:sf
IsArgumentFilterEnabled	dependencies/include/libplatform/v8-tracing.h	/^  bool IsArgumentFilterEnabled() const { return enable_argument_filter_; }$/;"	f	class:v8::platform::tracing::TraceConfig	typeref:typename:bool
IsCacheable	dependencies/include/v8.h	/^    virtual bool IsCacheable() const { return true; }$/;"	f	class:v8::String::ExternalStringResourceBase	typeref:typename:bool
IsCompressible	dependencies/include/v8.h	/^    V8_DEPRECATED("Use IsCacheable().", virtual bool IsCompressible() const) {$/;"	f	class:v8::String::ExternalStringResourceBase	typeref:typename:V8_DEPRECATED ("",virtual bool const)
IsEmbedderNode	dependencies/include/v8-profiler.h	/^    virtual bool IsEmbedderNode() { return true; }$/;"	f	class:v8::EmbedderGraph::Node	typeref:typename:bool
IsEmpty	dependencies/include/v8-util.h	/^    bool IsEmpty() const {$/;"	f	class:v8::PersistentValueMapBase::PersistentValueReference	typeref:typename:bool
IsEmpty	dependencies/include/v8-util.h	/^  bool IsEmpty() const {$/;"	f	class:v8::PersistentValueVector	typeref:typename:bool
IsEmpty	dependencies/include/v8-util.h	/^  static bool IsEmpty(const Impl* impl) {$/;"	f	class:v8::DefaultPersistentValueVectorTraits	typeref:typename:bool
IsEmpty	dependencies/include/v8.h	/^  V8_INLINE bool IsEmpty() const { return val_ == nullptr; }$/;"	f	class:v8::Eternal	typeref:typename:V8_INLINE bool
IsEmpty	dependencies/include/v8.h	/^  V8_INLINE bool IsEmpty() const { return val_ == nullptr; }$/;"	f	class:v8::Local	typeref:typename:V8_INLINE bool
IsEmpty	dependencies/include/v8.h	/^  V8_INLINE bool IsEmpty() const { return val_ == nullptr; }$/;"	f	class:v8::MaybeLocal	typeref:typename:V8_INLINE bool
IsEmpty	dependencies/include/v8.h	/^  V8_INLINE bool IsEmpty() const { return val_ == nullptr; }$/;"	f	class:v8::PersistentBase	typeref:typename:V8_INLINE bool
IsExternalTwoByteString	dependencies/include/v8-internal.h	/^  V8_INLINE static bool IsExternalTwoByteString(int instance_type) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE bool
IsFull	dependencies/include/libplatform/v8-tracing.h	/^  bool IsFull() const { return next_free_ == kChunkSize; }$/;"	f	class:v8::platform::tracing::TraceBufferChunk	typeref:typename:bool
IsModule	dependencies/include/v8.h	/^  bool IsModule() const { return (flags_ & kIsModule) != 0; }$/;"	f	class:v8::ScriptOriginOptions	typeref:typename:bool
IsNeuterable	dependencies/include/v8.h	/^                    inline bool IsNeuterable() const) {$/;"	f	class:v8::ArrayBuffer	typeref:typename:V8_DEPRECATE_SOON ("",inline bool const)
IsOpaque	dependencies/include/v8.h	/^  bool IsOpaque() const { return (flags_ & kIsOpaque) != 0; }$/;"	f	class:v8::ScriptOriginOptions	typeref:typename:bool
IsRootNode	dependencies/include/v8-profiler.h	/^    virtual bool IsRootNode() { return false; }$/;"	f	class:v8::EmbedderGraph::Node	typeref:typename:bool
IsSharedCrossOrigin	dependencies/include/v8.h	/^  bool IsSharedCrossOrigin() const {$/;"	f	class:v8::ScriptOriginOptions	typeref:typename:bool
IsSystraceEnabled	dependencies/include/libplatform/v8-tracing.h	/^  bool IsSystraceEnabled() const { return enable_systrace_; }$/;"	f	class:v8::platform::tracing::TraceConfig	typeref:typename:bool
IsValidSmi	dependencies/include/v8-internal.h	/^  V8_INLINE static constexpr bool IsValidSmi(intptr_t value) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE bool
IsValidSmi	dependencies/include/v8-internal.h	/^  V8_INLINE static constexpr bool IsValidSmi(intptr_t value) {$/;"	f	struct:v8::internal::SmiTagging	typeref:typename:V8_INLINE bool
IsWasm	dependencies/include/v8.h	/^  bool IsWasm() const { return (flags_ & kIsWasm) != 0; }$/;"	f	class:v8::ScriptOriginOptions	typeref:typename:bool
IsWeak	dependencies/include/v8-util.h	/^  bool IsWeak() { return Traits::kCallbackType != kNotWeak; }$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:bool
It	dependencies/include/v8-util.h	/^    typedef typename Traits::Iterator It;$/;"	t	function:v8::PersistentValueMapBase::Clear	typeref:typename:Traits::Iterator
Italic	dependencies/include/SFML/Graphics/Text.hpp	/^        Italic        = 1 << 1, \/\/\/< Italic characters$/;"	e	enum:sf::Text::Style
Iterator	dependencies/include/SFML/System/String.hpp	/^    typedef std::basic_string<Uint32>::iterator       Iterator;      \/\/\/< Iterator type$/;"	t	class:sf::String	typeref:typename:std::basic_string<Uint32>::iterator
Iterator	dependencies/include/v8-util.h	/^  typedef typename Impl::iterator Iterator;$/;"	t	class:v8::StdMapTraits	typeref:typename:Impl::iterator
Ivec2	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef Vector2<int> Ivec2;$/;"	t	namespace:sf::Glsl	typeref:typename:Vector2<int>
Ivec3	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef Vector3<int> Ivec3;$/;"	t	namespace:sf::Glsl	typeref:typename:Vector3<int>
Ivec4	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef implementation-defined Ivec4;$/;"	t	namespace:sf::Glsl	typeref:typename:implementation-defined
Ivec4	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef priv::Vector4<int> Ivec4;$/;"	t	namespace:sf::Glsl	typeref:typename:priv::Vector4<int>
J	dependencies/include/SFML/Window/Keyboard.hpp	/^        J,            \/\/\/< The J key$/;"	e	enum:sf::Keyboard::Key
JS	dependencies/include/v8.h	/^  JS,$/;"	e	enum:v8::StateTag
JSEntryStub	dependencies/include/v8.h	/^struct JSEntryStub {$/;"	s	namespace:v8
JSON	dependencies/include/v8.h	/^class V8_EXPORT JSON {$/;"	c	namespace:v8
JSON_CATCH	dependencies/include/nlohmann/json.hpp	/^    #define JSON_CATCH /;"	d
JSON_CATCH	dependencies/include/nlohmann/json.hpp	/^    #define JSON_CATCH(/;"	d
JSON_DEPRECATED	dependencies/include/nlohmann/json.hpp	/^    #define JSON_DEPRECATED /;"	d
JSON_DEPRECATED	dependencies/include/nlohmann/json.hpp	/^    #define JSON_DEPRECATED$/;"	d
JSON_HAS_CPP_14	dependencies/include/nlohmann/json.hpp	/^    #define JSON_HAS_CPP_14$/;"	d
JSON_HAS_CPP_17	dependencies/include/nlohmann/json.hpp	/^    #define JSON_HAS_CPP_17$/;"	d
JSON_INTERNAL_CATCH	dependencies/include/nlohmann/json.hpp	/^    #define JSON_INTERNAL_CATCH /;"	d
JSON_INTERNAL_CATCH	dependencies/include/nlohmann/json.hpp	/^    #define JSON_INTERNAL_CATCH(/;"	d
JSON_LIKELY	dependencies/include/nlohmann/json.hpp	/^    #define JSON_LIKELY(/;"	d
JSON_THROW	dependencies/include/nlohmann/json.hpp	/^    #define JSON_THROW /;"	d
JSON_THROW	dependencies/include/nlohmann/json.hpp	/^    #define JSON_THROW(/;"	d
JSON_TRY	dependencies/include/nlohmann/json.hpp	/^    #define JSON_TRY /;"	d
JSON_UNLIKELY	dependencies/include/nlohmann/json.hpp	/^    #define JSON_UNLIKELY(/;"	d
Joystick	dependencies/include/SFML/Window/Joystick.hpp	/^class SFML_WINDOW_API Joystick$/;"	c	namespace:sf
JoystickButtonEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct JoystickButtonEvent$/;"	s	class:sf::Event
JoystickButtonPressed	dependencies/include/SFML/Window/Event.hpp	/^        JoystickButtonPressed,  \/\/\/< A joystick button was pressed (data in event.joystickBut/;"	e	enum:sf::Event::EventType
JoystickButtonReleased	dependencies/include/SFML/Window/Event.hpp	/^        JoystickButtonReleased, \/\/\/< A joystick button was released (data in event.joystickBu/;"	e	enum:sf::Event::EventType
JoystickConnectEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct JoystickConnectEvent$/;"	s	class:sf::Event
JoystickConnected	dependencies/include/SFML/Window/Event.hpp	/^        JoystickConnected,      \/\/\/< A joystick was connected (data in event.joystickConnect)$/;"	e	enum:sf::Event::EventType
JoystickDisconnected	dependencies/include/SFML/Window/Event.hpp	/^        JoystickDisconnected,   \/\/\/< A joystick was disconnected (data in event.joystickConne/;"	e	enum:sf::Event::EventType
JoystickMoveEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct JoystickMoveEvent$/;"	s	class:sf::Event
JoystickMoved	dependencies/include/SFML/Window/Event.hpp	/^        JoystickMoved,          \/\/\/< The joystick moved along an axis (data in event.joystick/;"	e	enum:sf::Event::EventType
K	dependencies/include/SFML/Window/Keyboard.hpp	/^        K,            \/\/\/< The K key$/;"	e	enum:sf::Keyboard::Key
Key	dependencies/include/SFML/Window/Keyboard.hpp	/^    enum Key$/;"	g	class:sf::Keyboard
Key	dependencies/include/v8-util.h	/^  static K Key(Iterator it) { return it->first; }$/;"	f	class:v8::StdMapTraits	typeref:typename:K
KeyCollectionMode	dependencies/include/v8.h	/^enum class KeyCollectionMode { kOwnOnly, kIncludePrototypes };$/;"	g	namespace:v8
KeyConversionMode	dependencies/include/v8.h	/^enum class KeyConversionMode { kConvertToString, kKeepNumbers };$/;"	g	namespace:v8
KeyCount	dependencies/include/SFML/Window/Keyboard.hpp	/^        KeyCount,     \/\/\/< Keep last -- the total number of keyboard keys$/;"	e	enum:sf::Keyboard::Key
KeyEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct KeyEvent$/;"	s	class:sf::Event
KeyFromWeakCallbackInfo	dependencies/include/v8-util.h	/^  static K KeyFromWeakCallbackInfo($/;"	f	class:v8::DefaultGlobalMapTraits	typeref:typename:K
KeyFromWeakCallbackInfo	dependencies/include/v8-util.h	/^  static K KeyFromWeakCallbackInfo($/;"	f	class:v8::DefaultPersistentValueMapTraits	typeref:typename:K
KeyPressed	dependencies/include/SFML/Window/Event.hpp	/^        KeyPressed,             \/\/\/< A key was pressed (data in event.key)$/;"	e	enum:sf::Event::EventType
KeyReleased	dependencies/include/SFML/Window/Event.hpp	/^        KeyReleased,            \/\/\/< A key was released (data in event.key)$/;"	e	enum:sf::Event::EventType
Keyboard	dependencies/include/SFML/Window/Keyboard.hpp	/^class SFML_WINDOW_API Keyboard$/;"	c	namespace:sf
L	dependencies/include/SFML/Window/Keyboard.hpp	/^        L,            \/\/\/< The L key$/;"	e	enum:sf::Keyboard::Key
LAlt	dependencies/include/SFML/Window/Keyboard.hpp	/^        LAlt,         \/\/\/< The left Alt key$/;"	e	enum:sf::Keyboard::Key
LBracket	dependencies/include/SFML/Window/Keyboard.hpp	/^        LBracket,     \/\/\/< The [ key$/;"	e	enum:sf::Keyboard::Key
LControl	dependencies/include/SFML/Window/Keyboard.hpp	/^        LControl,     \/\/\/< The left Control key$/;"	e	enum:sf::Keyboard::Key
LShift	dependencies/include/SFML/Window/Keyboard.hpp	/^        LShift,       \/\/\/< The left Shift key$/;"	e	enum:sf::Keyboard::Key
LSystem	dependencies/include/SFML/Window/Keyboard.hpp	/^        LSystem,      \/\/\/< The left OS specific key: window (Windows and Linux), apple (MacOS/;"	e	enum:sf::Keyboard::Key
Leak	dependencies/include/v8-util.h	/^  static PersistentContainerValue Leak(Global<V>* persistent) {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:PersistentContainerValue
Left	dependencies/include/SFML/Window/Keyboard.hpp	/^        Left,         \/\/\/< Left arrow$/;"	e	enum:sf::Keyboard::Key
Left	dependencies/include/SFML/Window/Mouse.hpp	/^        Left,       \/\/\/< The left mouse button$/;"	e	enum:sf::Mouse::Button
LegacyBuildEmbedderGraphCallback	dependencies/include/v8-profiler.h	/^  typedef void (*LegacyBuildEmbedderGraphCallback)(v8::Isolate* isolate,$/;"	t	class:v8::HeapProfiler	typeref:typename:void (*)(v8::Isolate * isolate,v8::EmbedderGraph * graph)
LineStrip	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^    LineStrip,     \/\/\/< List of connected lines, a point uses the previous point to form a li/;"	e	enum:sf::PrimitiveType
LineTick	dependencies/include/v8-profiler.h	/^  struct LineTick {$/;"	s	class:v8::CpuProfileNode
Lines	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^    Lines,         \/\/\/< List of individual lines$/;"	e	enum:sf::PrimitiveType
LinesStrip	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^    LinesStrip     = LineStrip,     \/\/\/< \\deprecated Use LineStrip instead$/;"	e	enum:sf::PrimitiveType
Listener	dependencies/include/SFML/Audio/Listener.hpp	/^class SFML_AUDIO_API Listener$/;"	c	namespace:sf
ListingResponse	dependencies/include/SFML/Network/Ftp.hpp	/^    class SFML_NETWORK_API ListingResponse : public Response$/;"	c	class:sf::Ftp
Local	dependencies/include/v8.h	/^  V8_INLINE Local() : val_(nullptr) {}$/;"	f	class:v8::Local	typeref:typename:V8_INLINE
Local	dependencies/include/v8.h	/^  V8_INLINE Local(Local<S> that)$/;"	f	class:v8::Local	typeref:typename:V8_INLINE
Local	dependencies/include/v8.h	/^  explicit V8_INLINE Local(T* that) : val_(that) {}$/;"	f	class:v8::Local	typeref:typename:V8_INLINE
Local	dependencies/include/v8.h	/^class Local {$/;"	c	namespace:v8
LocalError	dependencies/include/SFML/Network/Ftp.hpp	/^            LocalError                = 451, \/\/\/< Requested action aborted, local error in pr/;"	e	enum:sf::Ftp::Response::Status
LocalHost	dependencies/include/SFML/Network/IpAddress.hpp	/^    static const IpAddress LocalHost; \/\/\/< The "localhost" address (for connecting a computer/;"	m	class:sf::IpAddress	typeref:typename:const IpAddress
Location	dependencies/include/v8.h	/^  Location(int line_number, int column_number)$/;"	f	class:v8::Location
Location	dependencies/include/v8.h	/^class V8_EXPORT Location {$/;"	c	namespace:v8
Lock	dependencies/include/SFML/System/Lock.hpp	/^class SFML_SYSTEM_API Lock : NonCopyable$/;"	c	namespace:sf
Lock	dependencies/include/v8.h	/^    virtual void Lock() const {}$/;"	f	class:v8::String::ExternalStringResourceBase	typeref:typename:void
LoggedIn	dependencies/include/SFML/Network/Ftp.hpp	/^            LoggedIn              = 230, \/\/\/< User logged in, proceed. Logged out if appropri/;"	e	enum:sf::Ftp::Response::Status
LostFocus	dependencies/include/SFML/Window/Event.hpp	/^        LostFocus,              \/\/\/< The window lost the focus (no data)$/;"	e	enum:sf::Event::EventType
M	dependencies/include/SFML/Window/Keyboard.hpp	/^        M,            \/\/\/< The M key$/;"	e	enum:sf::Keyboard::Key
Magenta	dependencies/include/SFML/Graphics/Color.hpp	/^    static const Color Magenta;     \/\/\/< Magenta predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
Magnetometer	dependencies/include/SFML/Window/Sensor.hpp	/^        Magnetometer,     \/\/\/< Measures the ambient magnetic field (micro-teslas)$/;"	e	enum:sf::Sensor::Type
Map	dependencies/include/v8.h	/^class V8_EXPORT Map : public Object {$/;"	c	namespace:v8
MapFromWeakCallbackInfo	dependencies/include/v8-util.h	/^  static MapType* MapFromWeakCallbackInfo($/;"	f	class:v8::DefaultGlobalMapTraits	typeref:typename:MapType *
MapFromWeakCallbackInfo	dependencies/include/v8-util.h	/^  static MapType* MapFromWeakCallbackInfo($/;"	f	class:v8::DefaultPersistentValueMapTraits	typeref:typename:MapType *
MapType	dependencies/include/v8-util.h	/^      MapType;$/;"	t	class:v8::DefaultPersistentValueMapTraits	typeref:typename:PersistentValueMap<K,V,DefaultPersistentValueMapTraits<K,V>>
MapType	dependencies/include/v8-util.h	/^  typedef GlobalValueMap<K, V, DefaultGlobalMapTraits<K, V> > MapType;$/;"	t	class:v8::DefaultGlobalMapTraits	typeref:typename:GlobalValueMap<K,V,DefaultGlobalMapTraits<K,V>>
Mat3	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef implementation-defined Mat3;$/;"	t	namespace:sf::Glsl	typeref:typename:implementation-defined
Mat3	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef priv::Matrix<3, 3> Mat3;$/;"	t	namespace:sf::Glsl	typeref:typename:priv::Matrix<3,3>
Mat4	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef implementation-defined Mat4;$/;"	t	namespace:sf::Glsl	typeref:typename:implementation-defined
Mat4	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef priv::Matrix<4, 4> Mat4;$/;"	t	namespace:sf::Glsl	typeref:typename:priv::Matrix<4,4>
Matrix	dependencies/include/SFML/Graphics/Glsl.inl	/^    Matrix(const Transform& transform)$/;"	f	struct:Matrix	file:
Matrix	dependencies/include/SFML/Graphics/Glsl.inl	/^    explicit Matrix(const float* pointer)$/;"	f	struct:Matrix	file:
Matrix	dependencies/include/SFML/Graphics/Glsl.inl	/^struct Matrix$/;"	s	file:
MaxDatagramSize	dependencies/include/SFML/Network/UdpSocket.hpp	/^        MaxDatagramSize = 65507 \/\/\/< The maximum number of bytes that can be sent in a single/;"	e	enum:sf::UdpSocket::__anond7159df00103
MaybeLocal	dependencies/include/v8.h	/^  V8_INLINE MaybeLocal() : val_(nullptr) {}$/;"	f	class:v8::MaybeLocal	typeref:typename:V8_INLINE
MaybeLocal	dependencies/include/v8.h	/^  V8_INLINE MaybeLocal(Local<S> that)$/;"	f	class:v8::MaybeLocal	typeref:typename:V8_INLINE
MaybeLocal	dependencies/include/v8.h	/^class MaybeLocal {$/;"	c	namespace:v8
MemoryInputStream	dependencies/include/SFML/System/MemoryInputStream.hpp	/^class SFML_SYSTEM_API MemoryInputStream : public InputStream$/;"	c	namespace:sf
MemoryRange	dependencies/include/v8.h	/^struct MemoryRange {$/;"	s	namespace:v8
MemorySpan	dependencies/include/v8.h	/^  constexpr MemorySpan(T* data, size_t size) : data_(data), size_(size) {}$/;"	f	class:v8::MemorySpan
MemorySpan	dependencies/include/v8.h	/^class V8_EXPORT MemorySpan {$/;"	c	namespace:v8
Menu	dependencies/include/SFML/Window/Keyboard.hpp	/^        Menu,         \/\/\/< The Menu key$/;"	e	enum:sf::Keyboard::Key
Message	dependencies/include/v8.h	/^class V8_EXPORT Message {$/;"	c	namespace:v8
MessageLoopBehavior	dependencies/include/libplatform/libplatform.h	/^enum class MessageLoopBehavior : bool {$/;"	g	namespace:v8::platform	typeref:typename:bool
Method	dependencies/include/SFML/Network/Http.hpp	/^        enum Method$/;"	g	class:sf::Http::Request
Middle	dependencies/include/SFML/Window/Mouse.hpp	/^        Middle,     \/\/\/< The middle (wheel) mouse button$/;"	e	enum:sf::Mouse::Button
Mode	dependencies/include/libplatform/v8-tracing.h	/^  enum Mode { DISABLED = 0, RECORDING_MODE };$/;"	g	class:v8::platform::tracing::TracingController
Module	dependencies/include/v8.h	/^class V8_EXPORT Module {$/;"	c	namespace:v8
Mouse	dependencies/include/SFML/Window/Mouse.hpp	/^class SFML_WINDOW_API Mouse$/;"	c	namespace:sf
MouseButtonEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct MouseButtonEvent$/;"	s	class:sf::Event
MouseButtonPressed	dependencies/include/SFML/Window/Event.hpp	/^        MouseButtonPressed,     \/\/\/< A mouse button was pressed (data in event.mouseButton)$/;"	e	enum:sf::Event::EventType
MouseButtonReleased	dependencies/include/SFML/Window/Event.hpp	/^        MouseButtonReleased,    \/\/\/< A mouse button was released (data in event.mouseButton)$/;"	e	enum:sf::Event::EventType
MouseEntered	dependencies/include/SFML/Window/Event.hpp	/^        MouseEntered,           \/\/\/< The mouse cursor entered the area of the window (no data/;"	e	enum:sf::Event::EventType
MouseLeft	dependencies/include/SFML/Window/Event.hpp	/^        MouseLeft,              \/\/\/< The mouse cursor left the area of the window (no data)$/;"	e	enum:sf::Event::EventType
MouseMoveEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct MouseMoveEvent$/;"	s	class:sf::Event
MouseMoved	dependencies/include/SFML/Window/Event.hpp	/^        MouseMoved,             \/\/\/< The mouse cursor moved (data in event.mouseMove)$/;"	e	enum:sf::Event::EventType
MouseWheelEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct MouseWheelEvent$/;"	s	class:sf::Event
MouseWheelMoved	dependencies/include/SFML/Window/Event.hpp	/^        MouseWheelMoved,        \/\/\/< The mouse wheel was scrolled (data in event.mouseWheel) /;"	e	enum:sf::Event::EventType
MouseWheelScrollEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct MouseWheelScrollEvent$/;"	s	class:sf::Event
MouseWheelScrolled	dependencies/include/SFML/Window/Event.hpp	/^        MouseWheelScrolled,     \/\/\/< The mouse wheel was scrolled (data in event.mouseWheelSc/;"	e	enum:sf::Event::EventType
MoveOnlyTypeForCPP03	dependencies/include/v8.h	/^  typedef void MoveOnlyTypeForCPP03;$/;"	t	class:v8::Global	typeref:typename:void
MovedPermanently	dependencies/include/SFML/Network/Http.hpp	/^            MovedPermanently = 301, \/\/\/< The requested page has permanently moved to a new lo/;"	e	enum:sf::Http::Response::Status
MovedTemporarily	dependencies/include/SFML/Network/Http.hpp	/^            MovedTemporarily = 302, \/\/\/< The requested page has temporarily moved to a new lo/;"	e	enum:sf::Http::Response::Status
MultipleChoices	dependencies/include/SFML/Network/Http.hpp	/^            MultipleChoices  = 300, \/\/\/< The requested page can be accessed from several loca/;"	e	enum:sf::Http::Response::Status
Multiply	dependencies/include/SFML/Window/Keyboard.hpp	/^        Multiply,     \/\/\/< The * key$/;"	e	enum:sf::Keyboard::Key
Music	dependencies/include/SFML/Audio/Music.hpp	/^class SFML_AUDIO_API Music : public SoundStream$/;"	c	namespace:sf
Mutex	dependencies/include/SFML/System/Mutex.hpp	/^class SFML_SYSTEM_API Mutex : NonCopyable$/;"	c	namespace:sf
N	dependencies/include/SFML/Window/Keyboard.hpp	/^        N,            \/\/\/< The N key$/;"	e	enum:sf::Keyboard::Key
NLOHMANN_BASIC_JSON_TPL	dependencies/include/nlohmann/json.hpp	/^#define NLOHMANN_BASIC_JSON_TPL /;"	d
NLOHMANN_BASIC_JSON_TPL_DECLARATION	dependencies/include/nlohmann/json.hpp	/^#define NLOHMANN_BASIC_JSON_TPL_DECLARATION /;"	d
NLOHMANN_JSON_FWD_HPP	dependencies/include/nlohmann/json.hpp	/^#define NLOHMANN_JSON_FWD_HPP$/;"	d
NLOHMANN_JSON_HPP	dependencies/include/nlohmann/json.hpp	/^#define NLOHMANN_JSON_HPP$/;"	d
NLOHMANN_JSON_SERIALIZE_ENUM	dependencies/include/nlohmann/json.hpp	/^#define NLOHMANN_JSON_SERIALIZE_ENUM(/;"	d
NLOHMANN_JSON_VERSION_MAJOR	dependencies/include/nlohmann/json.hpp	/^#define NLOHMANN_JSON_VERSION_MAJOR /;"	d
NLOHMANN_JSON_VERSION_MINOR	dependencies/include/nlohmann/json.hpp	/^#define NLOHMANN_JSON_VERSION_MINOR /;"	d
NLOHMANN_JSON_VERSION_PATCH	dependencies/include/nlohmann/json.hpp	/^#define NLOHMANN_JSON_VERSION_PATCH /;"	d
NOMINMAX	dependencies/include/SFML/Config.hpp	/^        #define NOMINMAX$/;"	d
NO_NULL_TERMINATION	dependencies/include/v8.h	/^    NO_NULL_TERMINATION = 2,$/;"	e	enum:v8::String::WriteOptions
NO_OPTIONS	dependencies/include/v8.h	/^    NO_OPTIONS = 0,$/;"	e	enum:v8::String::WriteOptions
Name	dependencies/include/v8.h	/^class V8_EXPORT Name : public Primitive {$/;"	c	namespace:v8
NamePrefix	dependencies/include/v8-profiler.h	/^    virtual const char* NamePrefix() { return nullptr; }$/;"	f	class:v8::EmbedderGraph::Node	typeref:typename:const char *
NamedPropertyHandlerConfiguration	dependencies/include/v8.h	/^  NamedPropertyHandlerConfiguration($/;"	f	struct:v8::NamedPropertyHandlerConfiguration
NamedPropertyHandlerConfiguration	dependencies/include/v8.h	/^struct NamedPropertyHandlerConfiguration {$/;"	s	namespace:v8
NeedAccountToLogIn	dependencies/include/SFML/Network/Ftp.hpp	/^            NeedAccountToLogIn = 332, \/\/\/< Need account for login$/;"	e	enum:sf::Ftp::Response::Status
NeedAccountToStore	dependencies/include/SFML/Network/Ftp.hpp	/^            NeedAccountToStore      = 532, \/\/\/< Need account for storing files$/;"	e	enum:sf::Ftp::Response::Status
NeedInformation	dependencies/include/SFML/Network/Ftp.hpp	/^            NeedInformation    = 350, \/\/\/< Requested file action pending further information$/;"	e	enum:sf::Ftp::Response::Status
NeedPassword	dependencies/include/SFML/Network/Ftp.hpp	/^            NeedPassword       = 331, \/\/\/< User name ok, need password$/;"	e	enum:sf::Ftp::Response::Status
Neuter	dependencies/include/v8.h	/^  V8_DEPRECATE_SOON("Use Detach() instead.", inline void Neuter()) { Detach(); }$/;"	f	class:v8::ArrayBuffer	typeref:typename:V8_DEPRECATE_SOON ("",inline void)
NewInstance	dependencies/include/v8.h	/^  V8_WARN_UNUSED_RESULT MaybeLocal<Object> NewInstance($/;"	f	class:v8::Function	typeref:typename:V8_WARN_UNUSED_RESULT MaybeLocal<Object>
NewLocal	dependencies/include/v8-util.h	/^    Local<V> NewLocal(Isolate* isolate) const {$/;"	f	class:v8::PersistentValueMapBase::PersistentValueReference	typeref:typename:Local<V>
NewStringType	dependencies/include/v8.h	/^  enum NewStringType {$/;"	g	class:v8::String
NewStringType	dependencies/include/v8.h	/^enum class NewStringType {$/;"	g	namespace:v8
NoCacheReason	dependencies/include/v8.h	/^  enum NoCacheReason {$/;"	g	class:v8::ScriptCompiler
NoContent	dependencies/include/SFML/Network/Http.hpp	/^            NoContent      = 204, \/\/\/< The server didn't send any data in return$/;"	e	enum:sf::Http::Response::Status
NoLoop	dependencies/include/SFML/Audio/SoundStream.hpp	/^        NoLoop = -1 \/\/\/< "Invalid" endSeeks value, telling us to continue uninterrupted$/;"	e	enum:sf::SoundStream::__anon941a085b0103
Node	dependencies/include/v8-profiler.h	/^  class Node {$/;"	c	class:v8::EmbedderGraph
Node	dependencies/include/v8-profiler.h	/^  struct Node {$/;"	s	class:v8::AllocationProfile
NonCopyable	dependencies/include/SFML/System/NonCopyable.hpp	/^    NonCopyable() {}$/;"	f	class:sf::NonCopyable
NonCopyable	dependencies/include/SFML/System/NonCopyable.hpp	/^class SFML_SYSTEM_API NonCopyable$/;"	c	namespace:sf
NonCopyablePersistent	dependencies/include/v8.h	/^  typedef Persistent<T, NonCopyablePersistentTraits<T> > NonCopyablePersistent;$/;"	t	class:v8::NonCopyablePersistentTraits	typeref:typename:Persistent<T,NonCopyablePersistentTraits<T>>
NonCopyablePersistentTraits	dependencies/include/v8.h	/^class NonCopyablePersistentTraits {$/;"	c	namespace:v8
NonNestableTasksEnabled	dependencies/include/v8-platform.h	/^  virtual bool NonNestableTasksEnabled() const { return false; }$/;"	f	class:v8::TaskRunner	typeref:typename:bool
None	dependencies/include/SFML/Network/IpAddress.hpp	/^    static const IpAddress None;      \/\/\/< Value representing an empty\/invalid address$/;"	m	class:sf::IpAddress	typeref:typename:const IpAddress
None	dependencies/include/SFML/Window/WindowStyle.hpp	/^        None       = 0,      \/\/\/< No border \/ title bar (this flag and all others are mutual/;"	e	enum:sf::Style::__anonc2dbfd350103
None	dependencies/include/v8.h	/^  None = 0,$/;"	e	enum:v8::PropertyAttribute
Normalized	dependencies/include/SFML/Graphics/Texture.hpp	/^        Normalized, \/\/\/< Texture coordinates in range [0 .. 1]$/;"	e	enum:sf::Texture::CoordinateType
NotAllowed	dependencies/include/SFML/Window/Cursor.hpp	/^        NotAllowed              \/\/\/< Action not allowed cursor$/;"	e	enum:sf::Cursor::Type
NotEnoughMemory	dependencies/include/SFML/Network/Ftp.hpp	/^            NotEnoughMemory         = 552, \/\/\/< Requested file action aborted, exceeded stora/;"	e	enum:sf::Ftp::Response::Status
NotFound	dependencies/include/SFML/Network/Http.hpp	/^            NotFound            = 404, \/\/\/< The requested page doesn't exist$/;"	e	enum:sf::Http::Response::Status
NotImplemented	dependencies/include/SFML/Network/Http.hpp	/^            NotImplemented      = 501, \/\/\/< The server doesn't implement a requested feature$/;"	e	enum:sf::Http::Response::Status
NotLoggedIn	dependencies/include/SFML/Network/Ftp.hpp	/^            NotLoggedIn             = 530, \/\/\/< Not logged in$/;"	e	enum:sf::Ftp::Response::Status
NotModified	dependencies/include/SFML/Network/Http.hpp	/^            NotModified      = 304, \/\/\/< For conditional requests, means the requested page h/;"	e	enum:sf::Http::Response::Status
NotNullLiteral	dependencies/include/v8-inspector.h	/^  enum NotNullTagEnum { NotNullLiteral };$/;"	e	enum:v8_inspector::V8ContextInfo::NotNullTagEnum
NotNullTagEnum	dependencies/include/v8-inspector.h	/^  enum NotNullTagEnum { NotNullLiteral };$/;"	g	class:v8_inspector::V8ContextInfo
NotReady	dependencies/include/SFML/Network/Socket.hpp	/^        NotReady,     \/\/\/< The socket is not ready to send \/ receive data yet$/;"	e	enum:sf::Socket::Status
Num0	dependencies/include/SFML/Window/Keyboard.hpp	/^        Num0,         \/\/\/< The 0 key$/;"	e	enum:sf::Keyboard::Key
Num1	dependencies/include/SFML/Window/Keyboard.hpp	/^        Num1,         \/\/\/< The 1 key$/;"	e	enum:sf::Keyboard::Key
Num2	dependencies/include/SFML/Window/Keyboard.hpp	/^        Num2,         \/\/\/< The 2 key$/;"	e	enum:sf::Keyboard::Key
Num3	dependencies/include/SFML/Window/Keyboard.hpp	/^        Num3,         \/\/\/< The 3 key$/;"	e	enum:sf::Keyboard::Key
Num4	dependencies/include/SFML/Window/Keyboard.hpp	/^        Num4,         \/\/\/< The 4 key$/;"	e	enum:sf::Keyboard::Key
Num5	dependencies/include/SFML/Window/Keyboard.hpp	/^        Num5,         \/\/\/< The 5 key$/;"	e	enum:sf::Keyboard::Key
Num6	dependencies/include/SFML/Window/Keyboard.hpp	/^        Num6,         \/\/\/< The 6 key$/;"	e	enum:sf::Keyboard::Key
Num7	dependencies/include/SFML/Window/Keyboard.hpp	/^        Num7,         \/\/\/< The 7 key$/;"	e	enum:sf::Keyboard::Key
Num8	dependencies/include/SFML/Window/Keyboard.hpp	/^        Num8,         \/\/\/< The 8 key$/;"	e	enum:sf::Keyboard::Key
Num9	dependencies/include/SFML/Window/Keyboard.hpp	/^        Num9,         \/\/\/< The 9 key$/;"	e	enum:sf::Keyboard::Key
Number	dependencies/include/v8.h	/^class V8_EXPORT Number : public Primitive {$/;"	c	namespace:v8
NumberObject	dependencies/include/v8.h	/^class V8_EXPORT NumberObject : public Object {$/;"	c	namespace:v8
Numpad0	dependencies/include/SFML/Window/Keyboard.hpp	/^        Numpad0,      \/\/\/< The numpad 0 key$/;"	e	enum:sf::Keyboard::Key
Numpad1	dependencies/include/SFML/Window/Keyboard.hpp	/^        Numpad1,      \/\/\/< The numpad 1 key$/;"	e	enum:sf::Keyboard::Key
Numpad2	dependencies/include/SFML/Window/Keyboard.hpp	/^        Numpad2,      \/\/\/< The numpad 2 key$/;"	e	enum:sf::Keyboard::Key
Numpad3	dependencies/include/SFML/Window/Keyboard.hpp	/^        Numpad3,      \/\/\/< The numpad 3 key$/;"	e	enum:sf::Keyboard::Key
Numpad4	dependencies/include/SFML/Window/Keyboard.hpp	/^        Numpad4,      \/\/\/< The numpad 4 key$/;"	e	enum:sf::Keyboard::Key
Numpad5	dependencies/include/SFML/Window/Keyboard.hpp	/^        Numpad5,      \/\/\/< The numpad 5 key$/;"	e	enum:sf::Keyboard::Key
Numpad6	dependencies/include/SFML/Window/Keyboard.hpp	/^        Numpad6,      \/\/\/< The numpad 6 key$/;"	e	enum:sf::Keyboard::Key
Numpad7	dependencies/include/SFML/Window/Keyboard.hpp	/^        Numpad7,      \/\/\/< The numpad 7 key$/;"	e	enum:sf::Keyboard::Key
Numpad8	dependencies/include/SFML/Window/Keyboard.hpp	/^        Numpad8,      \/\/\/< The numpad 8 key$/;"	e	enum:sf::Keyboard::Key
Numpad9	dependencies/include/SFML/Window/Keyboard.hpp	/^        Numpad9,      \/\/\/< The numpad 9 key$/;"	e	enum:sf::Keyboard::Key
O	dependencies/include/SFML/Window/Keyboard.hpp	/^        O,            \/\/\/< The O key$/;"	e	enum:sf::Keyboard::Key
ONE_BYTE	dependencies/include/v8.h	/^    enum Encoding { ONE_BYTE, TWO_BYTE, UTF8 };$/;"	e	enum:v8::ScriptCompiler::StreamedSource::Encoding
ONE_BYTE_ENCODING	dependencies/include/v8.h	/^    ONE_BYTE_ENCODING = 0x8$/;"	e	enum:v8::String::Encoding
ONLY_CONFIGURABLE	dependencies/include/v8.h	/^  ONLY_CONFIGURABLE = 4,$/;"	e	enum:v8::PropertyFilter
ONLY_ENUMERABLE	dependencies/include/v8.h	/^  ONLY_ENUMERABLE = 2,$/;"	e	enum:v8::PropertyFilter
ONLY_WRITABLE	dependencies/include/v8.h	/^  ONLY_WRITABLE = 1,$/;"	e	enum:v8::PropertyFilter
OTHER	dependencies/include/v8.h	/^  OTHER,$/;"	e	enum:v8::StateTag
Object	dependencies/include/v8.h	/^class V8_EXPORT Object : public Value {$/;"	c	namespace:v8
ObjectNameResolver	dependencies/include/v8-profiler.h	/^  class ObjectNameResolver {$/;"	c	class:v8::HeapProfiler
ObjectTemplate	dependencies/include/v8.h	/^class V8_EXPORT ObjectTemplate : public Template {$/;"	c	namespace:v8
Ok	dependencies/include/SFML/Network/Ftp.hpp	/^            Ok                    = 200, \/\/\/< Command ok$/;"	e	enum:sf::Ftp::Response::Status
Ok	dependencies/include/SFML/Network/Http.hpp	/^            Ok             = 200, \/\/\/< Most common code returned when operation was successfu/;"	e	enum:sf::Http::Response::Status
OnCriticalMemoryPressure	dependencies/include/v8-platform.h	/^  virtual bool OnCriticalMemoryPressure(size_t length) { return false; }$/;"	f	class:v8::Platform	typeref:typename:bool
OnCriticalMemoryPressure	dependencies/include/v8-platform.h	/^  virtual void OnCriticalMemoryPressure() {$/;"	f	class:v8::Platform	typeref:typename:void
OnWeakCallback	dependencies/include/v8-util.h	/^  static void OnWeakCallback($/;"	f	class:v8::DefaultGlobalMapTraits	typeref:typename:void
OnWeakCallback	dependencies/include/v8-util.h	/^  static void OnWeakCallback($/;"	f	class:v8::GlobalValueMap	typeref:typename:void
One	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        One,              \/\/\/< (1, 1, 1, 1)$/;"	e	enum:sf::BlendMode::Factor
OneMinusDstAlpha	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        OneMinusDstAlpha  \/\/\/< (1, 1, 1, 1) - (dst.a, dst.a, dst.a, dst.a)$/;"	e	enum:sf::BlendMode::Factor
OneMinusDstColor	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        OneMinusDstColor, \/\/\/< (1, 1, 1, 1) - (dst.r, dst.g, dst.b, dst.a)$/;"	e	enum:sf::BlendMode::Factor
OneMinusSrcAlpha	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        OneMinusSrcAlpha, \/\/\/< (1, 1, 1, 1) - (src.a, src.a, src.a, src.a)$/;"	e	enum:sf::BlendMode::Factor
OneMinusSrcColor	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        OneMinusSrcColor, \/\/\/< (1, 1, 1, 1) - (src.r, src.g, src.b, src.a)$/;"	e	enum:sf::BlendMode::Factor
OpeningDataConnection	dependencies/include/SFML/Network/Ftp.hpp	/^            OpeningDataConnection       = 150, \/\/\/< File status ok, about to open data connec/;"	e	enum:sf::Ftp::Response::Status
Options	dependencies/include/v8.h	/^  V8_INLINE ScriptOriginOptions Options() const { return options_; }$/;"	f	class:v8::ScriptOrigin	typeref:typename:V8_INLINE ScriptOriginOptions
Orientation	dependencies/include/SFML/Window/Sensor.hpp	/^        Orientation,      \/\/\/< Measures the absolute 3D orientation (degrees)$/;"	e	enum:sf::Sensor::Type
OutputSoundFile	dependencies/include/SFML/Audio/OutputSoundFile.hpp	/^class SFML_AUDIO_API OutputSoundFile : NonCopyable$/;"	c	namespace:sf
OutputStream	dependencies/include/v8-profiler.h	/^class V8_EXPORT OutputStream {  \/\/ NOLINT$/;"	c	namespace:v8
OwnedBuffer	dependencies/include/v8.h	/^  OwnedBuffer(std::unique_ptr<const uint8_t[]> buffer, size_t size)$/;"	f	struct:v8::OwnedBuffer
OwnedBuffer	dependencies/include/v8.h	/^struct OwnedBuffer {$/;"	s	namespace:v8
P	dependencies/include/SFML/Window/Keyboard.hpp	/^        P,            \/\/\/< The P key$/;"	e	enum:sf::Keyboard::Key
PARSER	dependencies/include/v8.h	/^  PARSER,$/;"	e	enum:v8::StateTag
PLATFORM_ID	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	file:
PRESERVE_ONE_BYTE_NULL	dependencies/include/v8.h	/^    PRESERVE_ONE_BYTE_NULL = 4,$/;"	e	enum:v8::String::WriteOptions
PROHIBITS_OVERWRITING	dependencies/include/v8.h	/^  PROHIBITS_OVERWRITING = 1 << 2$/;"	e	enum:v8::AccessControl
Packet	dependencies/include/SFML/Network/Packet.hpp	/^class SFML_NETWORK_API Packet$/;"	c	namespace:sf
Page	dependencies/include/SFML/Graphics/Font.hpp	/^    struct Page$/;"	s	class:sf::Font
PageAllocator	dependencies/include/v8-platform.h	/^class PageAllocator {$/;"	c	namespace:v8
PageDown	dependencies/include/SFML/Window/Keyboard.hpp	/^        PageDown,     \/\/\/< The Page down key$/;"	e	enum:sf::Keyboard::Key
PageTable	dependencies/include/SFML/Graphics/Font.hpp	/^    typedef std::map<unsigned int, Page> PageTable; \/\/\/< Table mapping a character size to it/;"	t	class:sf::Font	typeref:typename:std::map<unsigned int,Page>
PageTypeUnknown	dependencies/include/SFML/Network/Ftp.hpp	/^            PageTypeUnknown         = 551, \/\/\/< Requested action aborted, page type unknown$/;"	e	enum:sf::Ftp::Response::Status
PageUp	dependencies/include/SFML/Window/Keyboard.hpp	/^        PageUp,       \/\/\/< The Page up key$/;"	e	enum:sf::Keyboard::Key
ParameterNotImplemented	dependencies/include/SFML/Network/Ftp.hpp	/^            ParameterNotImplemented = 504, \/\/\/< Command not implemented for that parameter$/;"	e	enum:sf::Ftp::Response::Status
ParametersUnknown	dependencies/include/SFML/Network/Ftp.hpp	/^            ParametersUnknown       = 501, \/\/\/< Syntax error in parameters or arguments$/;"	e	enum:sf::Ftp::Response::Status
Partial	dependencies/include/SFML/Network/Socket.hpp	/^        Partial,      \/\/\/< The socket sent a part of the data$/;"	e	enum:sf::Socket::Status
PartialContent	dependencies/include/SFML/Network/Http.hpp	/^            PartialContent = 206, \/\/\/< The server has sent a part of the resource, as a respo/;"	e	enum:sf::Http::Response::Status
Pass	dependencies/include/v8.h	/^  Global Pass() { return static_cast<Global&&>(*this); }  \/\/ NOLINT$/;"	f	class:v8::Global	typeref:typename:Global
Pause	dependencies/include/SFML/Window/Keyboard.hpp	/^        Pause,        \/\/\/< The Pause key$/;"	e	enum:sf::Keyboard::Key
Paused	dependencies/include/SFML/Audio/SoundSource.hpp	/^        Paused,  \/\/\/< Sound is paused$/;"	e	enum:sf::SoundSource::Status
PendingPacket	dependencies/include/SFML/Network/TcpSocket.hpp	/^    struct PendingPacket$/;"	s	class:sf::TcpSocket
Perform	dependencies/include/v8-internal.h	/^void CastCheck<false>::Perform(T* data) {}$/;"	f	class:v8::internal::CastCheck	typeref:typename:void
Perform	dependencies/include/v8-internal.h	/^void CastCheck<true>::Perform(T* data) {$/;"	f	class:v8::internal::CastCheck	typeref:typename:void
PerformCastCheck	dependencies/include/v8-internal.h	/^V8_INLINE void PerformCastCheck(T* data) {$/;"	f	namespace:v8::internal	typeref:typename:V8_INLINE void
Period	dependencies/include/SFML/Window/Keyboard.hpp	/^        Period,       \/\/\/< The . key$/;"	e	enum:sf::Keyboard::Key
Permission	dependencies/include/v8-platform.h	/^  enum Permission {$/;"	g	class:v8::PageAllocator
Persistent	dependencies/include/v8.h	/^  V8_INLINE Persistent() : PersistentBase<T>(nullptr) {}$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE
Persistent	dependencies/include/v8.h	/^  V8_INLINE Persistent(Isolate* isolate, Local<S> that)$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE
Persistent	dependencies/include/v8.h	/^  V8_INLINE Persistent(Isolate* isolate, const Persistent<S, M2>& that)$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE
Persistent	dependencies/include/v8.h	/^  V8_INLINE Persistent(const Persistent& that) : PersistentBase<T>(nullptr) {$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE
Persistent	dependencies/include/v8.h	/^  V8_INLINE Persistent(const Persistent<S, M2>& that) : PersistentBase<T>(0) {$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE
Persistent	dependencies/include/v8.h	/^  explicit V8_INLINE Persistent(T* that) : PersistentBase<T>(that) {}$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE
Persistent	dependencies/include/v8.h	/^template <class T, class M> class Persistent : public PersistentBase<T> {$/;"	c	namespace:v8
PersistentBase	dependencies/include/v8.h	/^  explicit V8_INLINE PersistentBase(T* val) : val_(val) {}$/;"	f	class:v8::PersistentBase	typeref:typename:V8_INLINE
PersistentBase	dependencies/include/v8.h	/^template <class T> class PersistentBase {$/;"	c	namespace:v8
PersistentContainerCallbackType	dependencies/include/v8-util.h	/^enum PersistentContainerCallbackType {$/;"	g	namespace:v8
PersistentContainerValue	dependencies/include/v8-util.h	/^typedef uintptr_t PersistentContainerValue;$/;"	t	namespace:v8	typeref:typename:uintptr_t
PersistentValueMap	dependencies/include/v8-util.h	/^  PersistentValueMap(Isolate* isolate, const char* label)$/;"	f	class:v8::PersistentValueMap
PersistentValueMap	dependencies/include/v8-util.h	/^  explicit PersistentValueMap(Isolate* isolate)$/;"	f	class:v8::PersistentValueMap
PersistentValueMap	dependencies/include/v8-util.h	/^class PersistentValueMap : public PersistentValueMapBase<K, V, Traits> {$/;"	c	namespace:v8
PersistentValueMapBase	dependencies/include/v8-util.h	/^  PersistentValueMapBase(Isolate* isolate, const char* label)$/;"	f	class:v8::PersistentValueMapBase
PersistentValueMapBase	dependencies/include/v8-util.h	/^  explicit PersistentValueMapBase(Isolate* isolate)$/;"	f	class:v8::PersistentValueMapBase
PersistentValueMapBase	dependencies/include/v8-util.h	/^class PersistentValueMapBase {$/;"	c	namespace:v8
PersistentValueReference	dependencies/include/v8-util.h	/^          PersistentValueReference;$/;"	t	class:v8::GlobalValueMap	typeref:typename:PersistentValueMapBase<K,V,Traits>::PersistentValueReference
PersistentValueReference	dependencies/include/v8-util.h	/^          PersistentValueReference;$/;"	t	class:v8::PersistentValueMap	typeref:typename:PersistentValueMapBase<K,V,Traits>::PersistentValueReference
PersistentValueReference	dependencies/include/v8-util.h	/^    PersistentValueReference() : value_(kPersistentContainerNotFound) { }$/;"	f	class:v8::PersistentValueMapBase::PersistentValueReference
PersistentValueReference	dependencies/include/v8-util.h	/^    PersistentValueReference(const PersistentValueReference& other)$/;"	f	class:v8::PersistentValueMapBase::PersistentValueReference
PersistentValueReference	dependencies/include/v8-util.h	/^    explicit PersistentValueReference(PersistentContainerValue value)$/;"	f	class:v8::PersistentValueMapBase::PersistentValueReference
PersistentValueReference	dependencies/include/v8-util.h	/^  class PersistentValueReference {$/;"	c	class:v8::PersistentValueMapBase
PersistentValueVector	dependencies/include/v8-util.h	/^  explicit PersistentValueVector(Isolate* isolate) : isolate_(isolate) { }$/;"	f	class:v8::PersistentValueVector
PersistentValueVector	dependencies/include/v8-util.h	/^class PersistentValueVector {$/;"	c	namespace:v8
Pixels	dependencies/include/SFML/Graphics/Texture.hpp	/^        Pixels      \/\/\/< Texture coordinates in range [0 .. size]$/;"	e	enum:sf::Texture::CoordinateType
Platform	dependencies/include/v8-platform.h	/^class Platform {$/;"	c	namespace:v8
PlatformSmiTagging	dependencies/include/v8-internal.h	/^typedef SmiTagging<kApiIntSize> PlatformSmiTagging;$/;"	t	namespace:v8::internal	typeref:typename:SmiTagging<kApiIntSize>
PlatformSmiTagging	dependencies/include/v8-internal.h	/^typedef SmiTagging<kApiSystemPointerSize> PlatformSmiTagging;$/;"	t	namespace:v8::internal	typeref:typename:SmiTagging<kApiSystemPointerSize>
Playing	dependencies/include/SFML/Audio/SoundSource.hpp	/^        Playing  \/\/\/< Sound is playing$/;"	e	enum:sf::SoundSource::Status
PointlessCommand	dependencies/include/SFML/Network/Ftp.hpp	/^            PointlessCommand      = 202, \/\/\/< Command not implemented$/;"	e	enum:sf::Ftp::Response::Status
Points	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^    Points,        \/\/\/< List of individual points$/;"	e	enum:sf::PrimitiveType
Post	dependencies/include/SFML/Network/Http.hpp	/^            Post,  \/\/\/< Request in post mode, usually to send data to a page$/;"	e	enum:sf::Http::Request::Method
PostNonNestableTask	dependencies/include/v8-platform.h	/^  virtual void PostNonNestableTask(std::unique_ptr<Task> task) {}$/;"	f	class:v8::TaskRunner	typeref:typename:void
PovX	dependencies/include/SFML/Window/Joystick.hpp	/^        PovX, \/\/\/< The X axis of the point-of-view hat$/;"	e	enum:sf::Joystick::Axis
PovY	dependencies/include/SFML/Window/Joystick.hpp	/^        PovY  \/\/\/< The Y axis of the point-of-view hat$/;"	e	enum:sf::Joystick::Axis
Primitive	dependencies/include/v8.h	/^class V8_EXPORT Primitive : public Value { };$/;"	c	namespace:v8
PrimitiveArray	dependencies/include/v8.h	/^class V8_EXPORT PrimitiveArray {$/;"	c	namespace:v8
PrimitiveType	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^enum PrimitiveType$/;"	g	namespace:sf
Private	dependencies/include/v8.h	/^class V8_EXPORT Private : public Data {$/;"	c	namespace:v8
Promise	dependencies/include/v8.h	/^class V8_EXPORT Promise : public Object {$/;"	c	namespace:v8
PromiseState	dependencies/include/v8.h	/^  enum PromiseState { kPending, kFulfilled, kRejected };$/;"	g	class:v8::Promise
PropertyAttribute	dependencies/include/v8.h	/^enum PropertyAttribute {$/;"	g	namespace:v8
PropertyCallbackArguments	dependencies/include/v8.h	/^  friend class internal::PropertyCallbackArguments;$/;"	m	class:v8::PropertyCallbackInfo::internal	typeref:typename:class
PropertyCallbackInfo	dependencies/include/v8.h	/^  V8_INLINE PropertyCallbackInfo(internal::Address* args) : args_(args) {}$/;"	f	class:v8::PropertyCallbackInfo	typeref:typename:V8_INLINE
PropertyCallbackInfo	dependencies/include/v8.h	/^class PropertyCallbackInfo {$/;"	c	namespace:v8
PropertyDescriptor	dependencies/include/v8.h	/^PropertyDescriptor::PropertyDescriptor(Local<Value> value)$/;"	f	class:v8::PropertyDescriptor
PropertyDescriptor	dependencies/include/v8.h	/^class V8_EXPORT PropertyDescriptor {$/;"	c	namespace:v8
PropertyFilter	dependencies/include/v8.h	/^enum PropertyFilter {$/;"	g	namespace:v8
PropertyHandlerFlags	dependencies/include/v8.h	/^enum class PropertyHandlerFlags {$/;"	g	namespace:v8
Proxy	dependencies/include/v8.h	/^class V8_EXPORT Proxy : public Object {$/;"	c	namespace:v8
Put	dependencies/include/SFML/Network/Http.hpp	/^            Put,   \/\/\/< Request in put mode, useful for a REST API$/;"	e	enum:sf::Http::Request::Method
Q	dependencies/include/SFML/Window/Keyboard.hpp	/^        Q,            \/\/\/< The Q key$/;"	e	enum:sf::Keyboard::Key
Quads	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^    Quads,         \/\/\/< List of individual quads (deprecated, don't work with OpenGL ES)$/;"	e	enum:sf::PrimitiveType
Quote	dependencies/include/SFML/Window/Keyboard.hpp	/^        Quote,        \/\/\/< The ' key$/;"	e	enum:sf::Keyboard::Key
R	dependencies/include/SFML/Window/Joystick.hpp	/^        R,    \/\/\/< The R axis$/;"	e	enum:sf::Joystick::Axis
R	dependencies/include/SFML/Window/Keyboard.hpp	/^        R,            \/\/\/< The R key$/;"	e	enum:sf::Keyboard::Key
RAlt	dependencies/include/SFML/Window/Keyboard.hpp	/^        RAlt,         \/\/\/< The right Alt key$/;"	e	enum:sf::Keyboard::Key
RBracket	dependencies/include/SFML/Window/Keyboard.hpp	/^        RBracket,     \/\/\/< The ] key$/;"	e	enum:sf::Keyboard::Key
RControl	dependencies/include/SFML/Window/Keyboard.hpp	/^        RControl,     \/\/\/< The right Control key$/;"	e	enum:sf::Keyboard::Key
RECORDING_MODE	dependencies/include/libplatform/v8-tracing.h	/^  enum Mode { DISABLED = 0, RECORDING_MODE };$/;"	e	enum:v8::platform::tracing::TracingController::Mode
RECORD_AS_MUCH_AS_POSSIBLE	dependencies/include/libplatform/v8-tracing.h	/^  RECORD_AS_MUCH_AS_POSSIBLE,$/;"	e	enum:v8::platform::tracing::TraceRecordMode
RECORD_CONTINUOUSLY	dependencies/include/libplatform/v8-tracing.h	/^  RECORD_CONTINUOUSLY,$/;"	e	enum:v8::platform::tracing::TraceRecordMode
RECORD_UNTIL_FULL	dependencies/include/libplatform/v8-tracing.h	/^  RECORD_UNTIL_FULL,$/;"	e	enum:v8::platform::tracing::TraceRecordMode
REPLACE_INVALID_UTF8	dependencies/include/v8.h	/^    REPLACE_INVALID_UTF8 = 8$/;"	e	enum:v8::String::WriteOptions
RShift	dependencies/include/SFML/Window/Keyboard.hpp	/^        RShift,       \/\/\/< The right Shift key$/;"	e	enum:sf::Keyboard::Key
RSystem	dependencies/include/SFML/Window/Keyboard.hpp	/^        RSystem,      \/\/\/< The right OS specific key: window (Windows and Linux), apple (MacO/;"	e	enum:sf::Keyboard::Key
RangeNotSatisfiable	dependencies/include/SFML/Network/Http.hpp	/^            RangeNotSatisfiable = 407, \/\/\/< The server can't satisfy the partial GET request /;"	e	enum:sf::Http::Response::Status
ReadEmbedderData	dependencies/include/v8-internal.h	/^  V8_INLINE static T ReadEmbedderData(const v8::Context* context, int index) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE T
ReadOnly	dependencies/include/v8.h	/^  ReadOnly = 1 << 0,$/;"	e	enum:v8::PropertyAttribute
ReadRawField	dependencies/include/v8-internal.h	/^  V8_INLINE static T ReadRawField(internal::Address heap_object_ptr,$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE T
ReadTaggedAnyField	dependencies/include/v8-internal.h	/^  V8_INLINE static internal::Address ReadTaggedAnyField($/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE internal::Address
ReadTaggedPointerField	dependencies/include/v8-internal.h	/^  V8_INLINE static internal::Address ReadTaggedPointerField($/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE internal::Address
ReadTaggedSignedField	dependencies/include/v8-internal.h	/^  V8_INLINE static internal::Address ReadTaggedSignedField($/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE internal::Address
ReaderFactory	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^    struct ReaderFactory$/;"	s	class:sf::SoundFileFactory
ReaderFactoryArray	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^    typedef std::vector<ReaderFactory> ReaderFactoryArray;$/;"	t	class:sf::SoundFileFactory	typeref:typename:std::vector<ReaderFactory>
RealLimits	dependencies/include/nlohmann/json.hpp	/^    using RealLimits = std::numeric_limits<RealIntegerType>;$/;"	t	struct:nlohmann::detail::is_compatible_integer_type_impl	typeref:typename:std::numeric_limits<RealIntegerType>
RecordCEntryFrame	dependencies/include/v8-profiler.h	/^  enum RecordCEntryFrame { kIncludeCEntryFrame, kSkipCEntryFrame };$/;"	g	struct:v8::TickSample
Rect	dependencies/include/SFML/Graphics/Rect.hpp	/^class Rect$/;"	c	namespace:sf
Rect	dependencies/include/SFML/Graphics/Rect.inl	/^Rect<T>::Rect() :$/;"	f	class:Rect
Rect	dependencies/include/SFML/Graphics/Rect.inl	/^Rect<T>::Rect(T rectLeft, T rectTop, T rectWidth, T rectHeight) :$/;"	f	class:Rect
Rect	dependencies/include/SFML/Graphics/Rect.inl	/^Rect<T>::Rect(const Rect<U>& rectangle) :$/;"	f	class:Rect
Rect	dependencies/include/SFML/Graphics/Rect.inl	/^Rect<T>::Rect(const Vector2<T>& position, const Vector2<T>& size) :$/;"	f	class:Rect
RectangleShape	dependencies/include/SFML/Graphics/RectangleShape.hpp	/^class SFML_GRAPHICS_API RectangleShape : public Shape$/;"	c	namespace:sf
Red	dependencies/include/SFML/Graphics/Color.hpp	/^    static const Color Red;         \/\/\/< Red predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
RegExp	dependencies/include/v8.h	/^class V8_EXPORT RegExp : public Object {$/;"	c	namespace:v8
RegisterExternallyReferencedObject	dependencies/include/v8-util.h	/^  void RegisterExternallyReferencedObject(K& key) {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:void
RegisterState	dependencies/include/v8.h	/^  RegisterState() : pc(nullptr), sp(nullptr), fp(nullptr) {}$/;"	f	struct:v8::RegisterState
RegisterState	dependencies/include/v8.h	/^struct RegisterState {$/;"	s	namespace:v8
Regular	dependencies/include/SFML/Graphics/Text.hpp	/^        Regular       = 0,      \/\/\/< Regular characters, no style$/;"	e	enum:sf::Text::Style
Release	dependencies/include/v8-util.h	/^  static Global<V> Release(PersistentContainerValue v) {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:Global<V>
Remove	dependencies/include/v8-util.h	/^  Global<V> Remove(const K& key) {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:Global<V>
Remove	dependencies/include/v8-util.h	/^  static PersistentContainerValue Remove(Impl* impl, K key) {$/;"	f	class:v8::StdMapTraits	typeref:typename:PersistentContainerValue
RemovePointer	dependencies/include/v8-util.h	/^  struct RemovePointer<T*> {$/;"	s	class:v8::DefaultGlobalMapTraits
RemoveTraceStateObserver	dependencies/include/v8-platform.h	/^  virtual void RemoveTraceStateObserver(TraceStateObserver*) {}$/;"	f	class:v8::TracingController	typeref:typename:void
RemoveWeak	dependencies/include/v8-util.h	/^  void RemoveWeak(const K& key) {$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:void
RenderStates	dependencies/include/SFML/Graphics/RenderStates.hpp	/^class SFML_GRAPHICS_API RenderStates$/;"	c	namespace:sf
RenderTarget	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^class SFML_GRAPHICS_API RenderTarget : NonCopyable$/;"	c	namespace:sf
RenderTexture	dependencies/include/SFML/Graphics/RenderTexture.hpp	/^class SFML_GRAPHICS_API RenderTexture : public RenderTarget$/;"	c	namespace:sf
RenderWindow	dependencies/include/SFML/Graphics/RenderWindow.hpp	/^class SFML_GRAPHICS_API RenderWindow : public Window, public RenderTarget$/;"	c	namespace:sf
Request	dependencies/include/SFML/Network/Http.hpp	/^    class SFML_NETWORK_API Request$/;"	c	class:sf::Http
ReserveCapacity	dependencies/include/v8-util.h	/^  static void ReserveCapacity(Impl* impl, size_t capacity) {$/;"	f	class:v8::DefaultPersistentValueVectorTraits	typeref:typename:void
ReserveCapacity	dependencies/include/v8-util.h	/^  void ReserveCapacity(size_t capacity) {$/;"	f	class:v8::PersistentValueVector	typeref:typename:void
Reset	dependencies/include/v8-util.h	/^    void Reset() {$/;"	f	class:v8::PersistentValueMapBase::PersistentValueReference	typeref:typename:void
ResetContent	dependencies/include/SFML/Network/Http.hpp	/^            ResetContent   = 205, \/\/\/< The server informs the client that it should clear the/;"	e	enum:sf::Http::Response::Status
Resize	dependencies/include/SFML/Window/WindowStyle.hpp	/^        Resize     = 1 << 1, \/\/\/< Title bar + resizable border + maximize button$/;"	e	enum:sf::Style::__anonc2dbfd350103
Resized	dependencies/include/SFML/Window/Event.hpp	/^        Resized,                \/\/\/< The window was resized (data in event.size)$/;"	e	enum:sf::Event::EventType
ResolveCallback	dependencies/include/v8.h	/^  typedef MaybeLocal<Module> (*ResolveCallback)(Local<Context> context,$/;"	t	class:v8::Module	typeref:typename:MaybeLocal<Module> (*)(Local<Context> context,Local<String> specifier,Local<Module> referrer)
Resolver	dependencies/include/v8.h	/^  class V8_EXPORT Resolver : public Object {$/;"	c	class:v8::Promise
ResourceStream	dependencies/include/SFML/System/FileInputStream.hpp	/^class SFML_SYSTEM_API ResourceStream;$/;"	v	namespace:sf::priv	typeref:class:SFML_SYSTEM_API
Response	dependencies/include/SFML/Network/Ftp.hpp	/^    class SFML_NETWORK_API Response$/;"	c	class:sf::Ftp
Response	dependencies/include/SFML/Network/Http.hpp	/^    class SFML_NETWORK_API Response$/;"	c	class:sf::Http
RestartMarkerReply	dependencies/include/SFML/Network/Ftp.hpp	/^            RestartMarkerReply          = 110, \/\/\/< Restart marker reply$/;"	e	enum:sf::Ftp::Response::Status
RetainedObjectInfo	dependencies/include/v8-profiler.h	/^class V8_EXPORT RetainedObjectInfo {  \/\/ NOLINT$/;"	c	namespace:v8
RetainerChildren	dependencies/include/v8-profiler.h	/^      RetainerChildren;$/;"	t	class:v8::HeapProfiler	typeref:typename:std::unordered_set<const v8::PersistentBase<v8::Value> * >
RetainerEdges	dependencies/include/v8-profiler.h	/^      RetainerEdges;$/;"	t	class:v8::HeapProfiler
RetainerGroups	dependencies/include/v8-profiler.h	/^      RetainerGroups;$/;"	t	class:v8::HeapProfiler	typeref:typename:std::vector<std::pair<v8::RetainedObjectInfo *,RetainerChildren>>
RetainerInfos	dependencies/include/v8-profiler.h	/^  struct RetainerInfos {$/;"	s	class:v8::HeapProfiler
Return	dependencies/include/SFML/Window/Keyboard.hpp	/^        Return    = Enter         \/\/\/< \\deprecated Use Enter instead$/;"	e	enum:sf::Keyboard::Key
ReturnValue	dependencies/include/v8.h	/^  template <class S> V8_INLINE ReturnValue(const ReturnValue<S>& that)$/;"	f	class:v8::ReturnValue	typeref:typename:V8_INLINE
ReturnValue	dependencies/include/v8.h	/^class ReturnValue {$/;"	c	namespace:v8
ReverseSubtract	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        ReverseSubtract \/\/\/< Pixel = Dst * DstFactor - Src * SrcFactor$/;"	e	enum:sf::BlendMode::Equation
Right	dependencies/include/SFML/Window/Keyboard.hpp	/^        Right,        \/\/\/< Right arrow$/;"	e	enum:sf::Keyboard::Key
Right	dependencies/include/SFML/Window/Mouse.hpp	/^        Right,      \/\/\/< The right mouse button$/;"	e	enum:sf::Mouse::Button
Row	dependencies/include/SFML/Graphics/Font.hpp	/^        Row(unsigned int rowTop, unsigned int rowHeight) : width(0), top(rowTop), height(rowHeig/;"	f	struct:sf::Font::Row
Row	dependencies/include/SFML/Graphics/Font.hpp	/^    struct Row$/;"	s	class:sf::Font
Runtime	dependencies/include/v8-inspector.h	/^namespace Runtime {$/;"	n	namespace:v8_inspector::protocol
S	dependencies/include/SFML/Window/Keyboard.hpp	/^        S,            \/\/\/< The S key$/;"	e	enum:sf::Keyboard::Key
SFML_ALRESOURCE_HPP	dependencies/include/SFML/Audio/AlResource.hpp	/^#define SFML_ALRESOURCE_HPP$/;"	d
SFML_API_EXPORT	dependencies/include/SFML/Config.hpp	/^            #define SFML_API_EXPORT /;"	d
SFML_API_EXPORT	dependencies/include/SFML/Config.hpp	/^            #define SFML_API_EXPORT$/;"	d
SFML_API_EXPORT	dependencies/include/SFML/Config.hpp	/^        #define SFML_API_EXPORT /;"	d
SFML_API_EXPORT	dependencies/include/SFML/Config.hpp	/^    #define SFML_API_EXPORT$/;"	d
SFML_API_IMPORT	dependencies/include/SFML/Config.hpp	/^            #define SFML_API_IMPORT /;"	d
SFML_API_IMPORT	dependencies/include/SFML/Config.hpp	/^            #define SFML_API_IMPORT$/;"	d
SFML_API_IMPORT	dependencies/include/SFML/Config.hpp	/^        #define SFML_API_IMPORT /;"	d
SFML_API_IMPORT	dependencies/include/SFML/Config.hpp	/^    #define SFML_API_IMPORT$/;"	d
SFML_AUDIO_API	dependencies/include/SFML/Audio/Export.hpp	/^    #define SFML_AUDIO_API /;"	d
SFML_AUDIO_EXPORT_HPP	dependencies/include/SFML/Audio/Export.hpp	/^#define SFML_AUDIO_EXPORT_HPP$/;"	d
SFML_AUDIO_HPP	dependencies/include/SFML/Audio.hpp	/^#define SFML_AUDIO_HPP$/;"	d
SFML_BLENDMODE_HPP	dependencies/include/SFML/Graphics/BlendMode.hpp	/^#define SFML_BLENDMODE_HPP$/;"	d
SFML_CIRCLESHAPE_HPP	dependencies/include/SFML/Graphics/CircleShape.hpp	/^#define SFML_CIRCLESHAPE_HPP$/;"	d
SFML_CLIPBOARD_HPP	dependencies/include/SFML/Window/Clipboard.hpp	/^#define SFML_CLIPBOARD_HPP$/;"	d
SFML_CLOCK_HPP	dependencies/include/SFML/System/Clock.hpp	/^#define SFML_CLOCK_HPP$/;"	d
SFML_COLOR_HPP	dependencies/include/SFML/Graphics/Color.hpp	/^#define SFML_COLOR_HPP$/;"	d
SFML_CONFIG_HPP	dependencies/include/SFML/Config.hpp	/^#define SFML_CONFIG_HPP$/;"	d
SFML_CONTEXTSETTINGS_HPP	dependencies/include/SFML/Window/ContextSettings.hpp	/^#define SFML_CONTEXTSETTINGS_HPP$/;"	d
SFML_CONTEXT_HPP	dependencies/include/SFML/Window/Context.hpp	/^#define SFML_CONTEXT_HPP$/;"	d
SFML_CONVEXSHAPE_HPP	dependencies/include/SFML/Graphics/ConvexShape.hpp	/^#define SFML_CONVEXSHAPE_HPP$/;"	d
SFML_CURSOR_HPP	dependencies/include/SFML/Window/Cursor.hpp	/^#define SFML_CURSOR_HPP$/;"	d
SFML_DEBUG	dependencies/include/SFML/Config.hpp	/^    #define SFML_DEBUG$/;"	d
SFML_DEFINE_DISCRETE_GPU_PREFERENCE	dependencies/include/SFML/GpuPreference.hpp	/^    #define SFML_DEFINE_DISCRETE_GPU_PREFERENCE /;"	d
SFML_DEFINE_DISCRETE_GPU_PREFERENCE	dependencies/include/SFML/GpuPreference.hpp	/^    #define SFML_DEFINE_DISCRETE_GPU_PREFERENCE$/;"	d
SFML_DEPRECATED	dependencies/include/SFML/Config.hpp	/^    #define SFML_DEPRECATED /;"	d
SFML_DEPRECATED	dependencies/include/SFML/Config.hpp	/^    #define SFML_DEPRECATED$/;"	d
SFML_DRAWABLE_HPP	dependencies/include/SFML/Graphics/Drawable.hpp	/^#define SFML_DRAWABLE_HPP$/;"	d
SFML_ERR_HPP	dependencies/include/SFML/System/Err.hpp	/^#define SFML_ERR_HPP$/;"	d
SFML_EVENT_HPP	dependencies/include/SFML/Window/Event.hpp	/^#define SFML_EVENT_HPP$/;"	d
SFML_FILEINPUTSTREAM_HPP	dependencies/include/SFML/System/FileInputStream.hpp	/^#define SFML_FILEINPUTSTREAM_HPP$/;"	d
SFML_FONT_HPP	dependencies/include/SFML/Graphics/Font.hpp	/^#define SFML_FONT_HPP$/;"	d
SFML_FTP_HPP	dependencies/include/SFML/Network/Ftp.hpp	/^#define SFML_FTP_HPP$/;"	d
SFML_GLRESOURCE_HPP	dependencies/include/SFML/Window/GlResource.hpp	/^#define SFML_GLRESOURCE_HPP$/;"	d
SFML_GLSL_HPP	dependencies/include/SFML/Graphics/Glsl.hpp	/^#define SFML_GLSL_HPP$/;"	d
SFML_GLYPH_HPP	dependencies/include/SFML/Graphics/Glyph.hpp	/^#define SFML_GLYPH_HPP$/;"	d
SFML_GPUPREFERENCE_HPP	dependencies/include/SFML/GpuPreference.hpp	/^#define SFML_GPUPREFERENCE_HPP$/;"	d
SFML_GRAPHICS_API	dependencies/include/SFML/Graphics/Export.hpp	/^    #define SFML_GRAPHICS_API /;"	d
SFML_GRAPHICS_EXPORT_HPP	dependencies/include/SFML/Graphics/Export.hpp	/^#define SFML_GRAPHICS_EXPORT_HPP$/;"	d
SFML_GRAPHICS_HPP	dependencies/include/SFML/Graphics.hpp	/^#define SFML_GRAPHICS_HPP$/;"	d
SFML_HTTP_HPP	dependencies/include/SFML/Network/Http.hpp	/^#define SFML_HTTP_HPP$/;"	d
SFML_IMAGE_HPP	dependencies/include/SFML/Graphics/Image.hpp	/^#define SFML_IMAGE_HPP$/;"	d
SFML_INPUTSOUNDFILE_HPP	dependencies/include/SFML/Audio/InputSoundFile.hpp	/^#define SFML_INPUTSOUNDFILE_HPP$/;"	d
SFML_INPUTSTREAM_HPP	dependencies/include/SFML/System/InputStream.hpp	/^#define SFML_INPUTSTREAM_HPP$/;"	d
SFML_IPADDRESS_HPP	dependencies/include/SFML/Network/IpAddress.hpp	/^#define SFML_IPADDRESS_HPP$/;"	d
SFML_JOYSTICK_HPP	dependencies/include/SFML/Window/Joystick.hpp	/^#define SFML_JOYSTICK_HPP$/;"	d
SFML_KEYBOARD_HPP	dependencies/include/SFML/Window/Keyboard.hpp	/^#define SFML_KEYBOARD_HPP$/;"	d
SFML_LISTENER_HPP	dependencies/include/SFML/Audio/Listener.hpp	/^#define SFML_LISTENER_HPP$/;"	d
SFML_LOCK_HPP	dependencies/include/SFML/System/Lock.hpp	/^#define SFML_LOCK_HPP$/;"	d
SFML_MAIN_HPP	dependencies/include/SFML/Main.hpp	/^#define SFML_MAIN_HPP$/;"	d
SFML_MEMORYINPUTSTREAM_HPP	dependencies/include/SFML/System/MemoryInputStream.hpp	/^#define SFML_MEMORYINPUTSTREAM_HPP$/;"	d
SFML_MOUSE_HPP	dependencies/include/SFML/Window/Mouse.hpp	/^#define SFML_MOUSE_HPP$/;"	d
SFML_MUSIC_HPP	dependencies/include/SFML/Audio/Music.hpp	/^#define SFML_MUSIC_HPP$/;"	d
SFML_MUTEX_HPP	dependencies/include/SFML/System/Mutex.hpp	/^#define SFML_MUTEX_HPP$/;"	d
SFML_NATIVEACTIVITY_HPP	dependencies/include/SFML/System/NativeActivity.hpp	/^#define SFML_NATIVEACTIVITY_HPP$/;"	d
SFML_NETWORK_API	dependencies/include/SFML/Network/Export.hpp	/^    #define SFML_NETWORK_API /;"	d
SFML_NETWORK_EXPORT_HPP	dependencies/include/SFML/Network/Export.hpp	/^#define SFML_NETWORK_EXPORT_HPP$/;"	d
SFML_NETWORK_HPP	dependencies/include/SFML/Network.hpp	/^#define SFML_NETWORK_HPP$/;"	d
SFML_NONCOPYABLE_HPP	dependencies/include/SFML/System/NonCopyable.hpp	/^#define SFML_NONCOPYABLE_HPP$/;"	d
SFML_OPENGL_HPP	dependencies/include/SFML/OpenGL.hpp	/^#define SFML_OPENGL_HPP$/;"	d
SFML_OUTPUTSOUNDFILE_HPP	dependencies/include/SFML/Audio/OutputSoundFile.hpp	/^#define SFML_OUTPUTSOUNDFILE_HPP$/;"	d
SFML_PACKET_HPP	dependencies/include/SFML/Network/Packet.hpp	/^#define SFML_PACKET_HPP$/;"	d
SFML_PRIMITIVETYPE_HPP	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^#define SFML_PRIMITIVETYPE_HPP$/;"	d
SFML_RECTANGLESHAPE_HPP	dependencies/include/SFML/Graphics/RectangleShape.hpp	/^#define SFML_RECTANGLESHAPE_HPP$/;"	d
SFML_RECT_HPP	dependencies/include/SFML/Graphics/Rect.hpp	/^#define SFML_RECT_HPP$/;"	d
SFML_RENDERSTATES_HPP	dependencies/include/SFML/Graphics/RenderStates.hpp	/^#define SFML_RENDERSTATES_HPP$/;"	d
SFML_RENDERTARGET_HPP	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^#define SFML_RENDERTARGET_HPP$/;"	d
SFML_RENDERTEXTURE_HPP	dependencies/include/SFML/Graphics/RenderTexture.hpp	/^#define SFML_RENDERTEXTURE_HPP$/;"	d
SFML_RENDERWINDOW_HPP	dependencies/include/SFML/Graphics/RenderWindow.hpp	/^#define SFML_RENDERWINDOW_HPP$/;"	d
SFML_SENSOR_HPP	dependencies/include/SFML/Window/Sensor.hpp	/^#define SFML_SENSOR_HPP$/;"	d
SFML_SFML_WINDOW_HPP	dependencies/include/SFML/Window.hpp	/^#define SFML_SFML_WINDOW_HPP$/;"	d
SFML_SHADER_HPP	dependencies/include/SFML/Graphics/Shader.hpp	/^#define SFML_SHADER_HPP$/;"	d
SFML_SHAPE_HPP	dependencies/include/SFML/Graphics/Shape.hpp	/^#define SFML_SHAPE_HPP$/;"	d
SFML_SLEEP_HPP	dependencies/include/SFML/System/Sleep.hpp	/^#define SFML_SLEEP_HPP$/;"	d
SFML_SOCKETHANDLE_HPP	dependencies/include/SFML/Network/SocketHandle.hpp	/^#define SFML_SOCKETHANDLE_HPP$/;"	d
SFML_SOCKETSELECTOR_HPP	dependencies/include/SFML/Network/SocketSelector.hpp	/^#define SFML_SOCKETSELECTOR_HPP$/;"	d
SFML_SOCKET_HPP	dependencies/include/SFML/Network/Socket.hpp	/^#define SFML_SOCKET_HPP$/;"	d
SFML_SOUNDBUFFERRECORDER_HPP	dependencies/include/SFML/Audio/SoundBufferRecorder.hpp	/^#define SFML_SOUNDBUFFERRECORDER_HPP$/;"	d
SFML_SOUNDBUFFER_HPP	dependencies/include/SFML/Audio/SoundBuffer.hpp	/^#define SFML_SOUNDBUFFER_HPP$/;"	d
SFML_SOUNDFILEFACTORY_HPP	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^#define SFML_SOUNDFILEFACTORY_HPP$/;"	d
SFML_SOUNDFILEREADER_HPP	dependencies/include/SFML/Audio/SoundFileReader.hpp	/^#define SFML_SOUNDFILEREADER_HPP$/;"	d
SFML_SOUNDFILEWRITER_HPP	dependencies/include/SFML/Audio/SoundFileWriter.hpp	/^#define SFML_SOUNDFILEWRITER_HPP$/;"	d
SFML_SOUNDRECORDER_HPP	dependencies/include/SFML/Audio/SoundRecorder.hpp	/^#define SFML_SOUNDRECORDER_HPP$/;"	d
SFML_SOUNDSOURCE_HPP	dependencies/include/SFML/Audio/SoundSource.hpp	/^#define SFML_SOUNDSOURCE_HPP$/;"	d
SFML_SOUNDSTREAM_HPP	dependencies/include/SFML/Audio/SoundStream.hpp	/^#define SFML_SOUNDSTREAM_HPP$/;"	d
SFML_SOUND_HPP	dependencies/include/SFML/Audio/Sound.hpp	/^#define SFML_SOUND_HPP$/;"	d
SFML_SPRITE_HPP	dependencies/include/SFML/Graphics/Sprite.hpp	/^#define SFML_SPRITE_HPP$/;"	d
SFML_STRING_HPP	dependencies/include/SFML/System/String.hpp	/^#define SFML_STRING_HPP$/;"	d
SFML_SYSTEM_ANDROID	dependencies/include/SFML/Config.hpp	/^        #define SFML_SYSTEM_ANDROID$/;"	d
SFML_SYSTEM_API	dependencies/include/SFML/System/Export.hpp	/^    #define SFML_SYSTEM_API /;"	d
SFML_SYSTEM_EXPORT_HPP	dependencies/include/SFML/System/Export.hpp	/^#define SFML_SYSTEM_EXPORT_HPP$/;"	d
SFML_SYSTEM_FREEBSD	dependencies/include/SFML/Config.hpp	/^        #define SFML_SYSTEM_FREEBSD$/;"	d
SFML_SYSTEM_HPP	dependencies/include/SFML/System.hpp	/^#define SFML_SYSTEM_HPP$/;"	d
SFML_SYSTEM_IOS	dependencies/include/SFML/Config.hpp	/^        #define SFML_SYSTEM_IOS$/;"	d
SFML_SYSTEM_LINUX	dependencies/include/SFML/Config.hpp	/^        #define SFML_SYSTEM_LINUX$/;"	d
SFML_SYSTEM_MACOS	dependencies/include/SFML/Config.hpp	/^        #define SFML_SYSTEM_MACOS$/;"	d
SFML_SYSTEM_OPENBSD	dependencies/include/SFML/Config.hpp	/^        #define SFML_SYSTEM_OPENBSD$/;"	d
SFML_SYSTEM_WINDOWS	dependencies/include/SFML/Config.hpp	/^    #define SFML_SYSTEM_WINDOWS$/;"	d
SFML_TCPLISTENER_HPP	dependencies/include/SFML/Network/TcpListener.hpp	/^#define SFML_TCPLISTENER_HPP$/;"	d
SFML_TCPSOCKET_HPP	dependencies/include/SFML/Network/TcpSocket.hpp	/^#define SFML_TCPSOCKET_HPP$/;"	d
SFML_TEXTURE_HPP	dependencies/include/SFML/Graphics/Texture.hpp	/^#define SFML_TEXTURE_HPP$/;"	d
SFML_TEXT_HPP	dependencies/include/SFML/Graphics/Text.hpp	/^#define SFML_TEXT_HPP$/;"	d
SFML_THREADLOCALPTR_HPP	dependencies/include/SFML/System/ThreadLocalPtr.hpp	/^#define SFML_THREADLOCALPTR_HPP$/;"	d
SFML_THREADLOCAL_HPP	dependencies/include/SFML/System/ThreadLocal.hpp	/^#define SFML_THREADLOCAL_HPP$/;"	d
SFML_THREAD_HPP	dependencies/include/SFML/System/Thread.hpp	/^#define SFML_THREAD_HPP$/;"	d
SFML_TIME_HPP	dependencies/include/SFML/System/Time.hpp	/^#define SFML_TIME_HPP$/;"	d
SFML_TOUCH_HPP	dependencies/include/SFML/Window/Touch.hpp	/^#define SFML_TOUCH_HPP$/;"	d
SFML_TRANSFORMABLE_HPP	dependencies/include/SFML/Graphics/Transformable.hpp	/^#define SFML_TRANSFORMABLE_HPP$/;"	d
SFML_TRANSFORM_HPP	dependencies/include/SFML/Graphics/Transform.hpp	/^#define SFML_TRANSFORM_HPP$/;"	d
SFML_UDPSOCKET_HPP	dependencies/include/SFML/Network/UdpSocket.hpp	/^#define SFML_UDPSOCKET_HPP$/;"	d
SFML_UTF_HPP	dependencies/include/SFML/System/Utf.hpp	/^#define SFML_UTF_HPP$/;"	d
SFML_VECTOR2_HPP	dependencies/include/SFML/System/Vector2.hpp	/^#define SFML_VECTOR2_HPP$/;"	d
SFML_VECTOR3_HPP	dependencies/include/SFML/System/Vector3.hpp	/^#define SFML_VECTOR3_HPP$/;"	d
SFML_VERSION_MAJOR	dependencies/include/SFML/Config.hpp	/^#define SFML_VERSION_MAJOR /;"	d
SFML_VERSION_MINOR	dependencies/include/SFML/Config.hpp	/^#define SFML_VERSION_MINOR /;"	d
SFML_VERSION_PATCH	dependencies/include/SFML/Config.hpp	/^#define SFML_VERSION_PATCH /;"	d
SFML_VERTEXARRAY_HPP	dependencies/include/SFML/Graphics/VertexArray.hpp	/^#define SFML_VERTEXARRAY_HPP$/;"	d
SFML_VERTEXBUFFER_HPP	dependencies/include/SFML/Graphics/VertexBuffer.hpp	/^#define SFML_VERTEXBUFFER_HPP$/;"	d
SFML_VERTEX_HPP	dependencies/include/SFML/Graphics/Vertex.hpp	/^#define SFML_VERTEX_HPP$/;"	d
SFML_VIDEOMODE_HPP	dependencies/include/SFML/Window/VideoMode.hpp	/^#define SFML_VIDEOMODE_HPP$/;"	d
SFML_VIEW_HPP	dependencies/include/SFML/Graphics/View.hpp	/^#define SFML_VIEW_HPP$/;"	d
SFML_WINDOWHANDLE_HPP	dependencies/include/SFML/Window/WindowHandle.hpp	/^#define SFML_WINDOWHANDLE_HPP$/;"	d
SFML_WINDOWSTYLE_HPP	dependencies/include/SFML/Window/WindowStyle.hpp	/^#define SFML_WINDOWSTYLE_HPP$/;"	d
SFML_WINDOW_API	dependencies/include/SFML/Window/Export.hpp	/^    #define SFML_WINDOW_API /;"	d
SFML_WINDOW_EXPORT_HPP	dependencies/include/SFML/Window/Export.hpp	/^#define SFML_WINDOW_EXPORT_HPP$/;"	d
SFML_WINDOW_HPP	dependencies/include/SFML/Window/Window.hpp	/^#define SFML_WINDOW_HPP$/;"	d
SIMULATE_ID	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_VERSION_MAJOR	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SKIP_STRINGS	dependencies/include/v8.h	/^  SKIP_STRINGS = 8,$/;"	e	enum:v8::PropertyFilter
SKIP_SYMBOLS	dependencies/include/v8.h	/^  SKIP_SYMBOLS = 16$/;"	e	enum:v8::PropertyFilter
STRINGIFY	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY(/;"	d	file:
STRINGIFY	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(/;"	d	file:
STRINGIFY_HELPER	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:
Sample	dependencies/include/v8-profiler.h	/^  struct Sample {$/;"	s	class:v8::AllocationProfile
SampleInfo	dependencies/include/v8.h	/^struct SampleInfo {$/;"	s	namespace:v8
SamplingFlags	dependencies/include/v8-profiler.h	/^  enum SamplingFlags {$/;"	g	class:v8::HeapProfiler
Schema	dependencies/include/v8-inspector.h	/^namespace Schema {$/;"	n	namespace:v8_inspector::protocol
ScopedExternalStringLock	dependencies/include/v8.h	/^    friend class internal::ScopedExternalStringLock;$/;"	m	class:v8::String::ExternalStringResourceBase::internal	typeref:typename:class
Script	dependencies/include/v8.h	/^class V8_EXPORT Script {$/;"	c	namespace:v8
ScriptCompiler	dependencies/include/v8.h	/^class V8_EXPORT ScriptCompiler {$/;"	c	namespace:v8
ScriptOrModule	dependencies/include/v8.h	/^class V8_EXPORT ScriptOrModule {$/;"	c	namespace:v8
ScriptOrigin	dependencies/include/v8.h	/^class ScriptOrigin {$/;"	c	namespace:v8
ScriptOriginOptions	dependencies/include/v8.h	/^  V8_INLINE ScriptOriginOptions(bool is_shared_cross_origin = false,$/;"	f	class:v8::ScriptOriginOptions	typeref:typename:V8_INLINE
ScriptOriginOptions	dependencies/include/v8.h	/^  V8_INLINE ScriptOriginOptions(int flags)$/;"	f	class:v8::ScriptOriginOptions	typeref:typename:V8_INLINE
ScriptOriginOptions	dependencies/include/v8.h	/^class ScriptOriginOptions {$/;"	c	namespace:v8
ScriptStreamingTask	dependencies/include/v8.h	/^    explicit ScriptStreamingTask(internal::ScriptStreamingData* data)$/;"	f	class:v8::ScriptCompiler::ScriptStreamingTask
ScriptStreamingTask	dependencies/include/v8.h	/^  class V8_EXPORT ScriptStreamingTask final {$/;"	c	class:v8::ScriptCompiler
SealHandleScope	dependencies/include/v8.h	/^class V8_EXPORT SealHandleScope {$/;"	c	namespace:v8
SecondWeakCallback	dependencies/include/v8-util.h	/^  static void SecondWeakCallback($/;"	f	class:v8::GlobalValueMap	typeref:typename:void
SemiColon	dependencies/include/SFML/Window/Keyboard.hpp	/^        SemiColon = Semicolon,    \/\/\/< \\deprecated Use Semicolon instead$/;"	e	enum:sf::Keyboard::Key
Semicolon	dependencies/include/SFML/Window/Keyboard.hpp	/^        Semicolon,    \/\/\/< The ; key$/;"	e	enum:sf::Keyboard::Key
Sensor	dependencies/include/SFML/Window/Sensor.hpp	/^class SFML_WINDOW_API Sensor$/;"	c	namespace:sf
SensorChanged	dependencies/include/SFML/Window/Event.hpp	/^        SensorChanged,          \/\/\/< A sensor value changed (data in event.sensor)$/;"	e	enum:sf::Event::EventType
SensorEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct SensorEvent$/;"	s	class:sf::Event
SerializationFormat	dependencies/include/v8-profiler.h	/^  enum SerializationFormat {$/;"	g	class:v8::HeapSnapshot
ServiceNotAvailable	dependencies/include/SFML/Network/Http.hpp	/^            ServiceNotAvailable = 503, \/\/\/< The server is temporarily unavailable (overloaded/;"	e	enum:sf::Http::Response::Status
ServiceReady	dependencies/include/SFML/Network/Ftp.hpp	/^            ServiceReady          = 220, \/\/\/< Service ready for new user$/;"	e	enum:sf::Ftp::Response::Status
ServiceReadySoon	dependencies/include/SFML/Network/Ftp.hpp	/^            ServiceReadySoon            = 120, \/\/\/< Service ready in N minutes$/;"	e	enum:sf::Ftp::Response::Status
ServiceUnavailable	dependencies/include/SFML/Network/Ftp.hpp	/^            ServiceUnavailable        = 421, \/\/\/< Service not available, closing control conn/;"	e	enum:sf::Ftp::Response::Status
Set	dependencies/include/v8-util.h	/^  Global<V> Set(const K& key, Global<V> value) {$/;"	f	class:v8::GlobalValueMap	typeref:typename:Global<V>
Set	dependencies/include/v8-util.h	/^  Global<V> Set(const K& key, Global<V> value) {$/;"	f	class:v8::PersistentValueMap	typeref:typename:Global<V>
Set	dependencies/include/v8-util.h	/^  Global<V> Set(const K& key, Global<V> value,$/;"	f	class:v8::GlobalValueMap	typeref:typename:Global<V>
Set	dependencies/include/v8-util.h	/^  Global<V> Set(const K& key, Global<V> value,$/;"	f	class:v8::PersistentValueMap	typeref:typename:Global<V>
Set	dependencies/include/v8-util.h	/^  Global<V> Set(const K& key, Local<V> value) {$/;"	f	class:v8::GlobalValueMap	typeref:typename:Global<V>
Set	dependencies/include/v8-util.h	/^  Global<V> Set(const K& key, Local<V> value) {$/;"	f	class:v8::PersistentValueMap	typeref:typename:Global<V>
Set	dependencies/include/v8-util.h	/^  static PersistentContainerValue Set(Impl* impl, K key,$/;"	f	class:v8::StdMapTraits	typeref:typename:PersistentContainerValue
Set	dependencies/include/v8.h	/^class V8_EXPORT Set : public Object {$/;"	c	namespace:v8
SetEmbedderData	dependencies/include/v8-internal.h	/^  V8_INLINE static void SetEmbedderData(v8::Isolate* isolate, uint32_t slot,$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE void
SetIndexedPropertyHandler	dependencies/include/v8.h	/^  void SetIndexedPropertyHandler($/;"	f	class:v8::ObjectTemplate	typeref:typename:void
SetInternal	dependencies/include/v8.h	/^  V8_INLINE void SetInternal(internal::Address value) { *value_ = value; }$/;"	f	class:v8::ReturnValue	typeref:typename:V8_INLINE void
SetReturnValue	dependencies/include/v8-util.h	/^    bool SetReturnValue(ReturnValue<T> returnValue) {$/;"	f	class:v8::PersistentValueMapBase::PersistentValueReference	typeref:typename:bool
SetReturnValue	dependencies/include/v8-util.h	/^  bool SetReturnValue(const K& key,$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:bool
SetReturnValueFromVal	dependencies/include/v8-util.h	/^  static bool SetReturnValueFromVal(ReturnValue<Value>* returnValue,$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:bool
SetSecondPassCallback	dependencies/include/v8.h	/^  void SetSecondPassCallback(Callback callback) const { *callback_ = callback; }$/;"	f	class:v8::WeakCallbackInfo	typeref:typename:void
SetTraceRecordMode	dependencies/include/libplatform/v8-tracing.h	/^  void SetTraceRecordMode(TraceRecordMode mode) { record_mode_ = mode; }$/;"	f	class:v8::platform::tracing::TraceConfig	typeref:typename:void
SetUnique	dependencies/include/v8-util.h	/^  Global<V> SetUnique(const K& key, Global<V>* persistent) {$/;"	f	class:v8::GlobalValueMap	typeref:typename:Global<V>
SetUnique	dependencies/include/v8-util.h	/^  Global<V> SetUnique(const K& key, Global<V>* persistent) {$/;"	f	class:v8::PersistentValueMap	typeref:typename:Global<V>
Shader	dependencies/include/SFML/Graphics/Shader.hpp	/^class SFML_GRAPHICS_API Shader : GlResource, NonCopyable$/;"	c	namespace:sf
Shape	dependencies/include/SFML/Graphics/Shape.hpp	/^class SFML_GRAPHICS_API Shape : public Drawable, public Transformable$/;"	c	namespace:sf
SharedArrayBuffer	dependencies/include/v8.h	/^class V8_EXPORT SharedArrayBuffer : public Object {$/;"	c	namespace:v8
SharedModule	dependencies/include/v8.h	/^    typedef std::shared_ptr<internal::wasm::NativeModule> SharedModule;$/;"	t	class:v8::WasmModuleObject::TransferrableModule	typeref:typename:std::shared_ptr<internal::wasm::NativeModule>
SideEffectType	dependencies/include/v8.h	/^enum class SideEffectType {$/;"	g	namespace:v8
Signature	dependencies/include/v8.h	/^class V8_EXPORT Signature : public Data {$/;"	c	namespace:v8
Size	dependencies/include/SFML/Network/TcpSocket.hpp	/^        Uint32            Size;         \/\/\/< Data of packet size$/;"	m	struct:sf::TcpSocket::PendingPacket	typeref:typename:Uint32
Size	dependencies/include/v8-util.h	/^  size_t Size() const {$/;"	f	class:v8::PersistentValueVector	typeref:typename:size_t
Size	dependencies/include/v8-util.h	/^  size_t Size() { return Traits::Size(&impl_); }$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:size_t
Size	dependencies/include/v8-util.h	/^  static size_t Size(Impl* impl) { return impl->size(); }$/;"	f	class:v8::StdMapTraits	typeref:typename:size_t
Size	dependencies/include/v8-util.h	/^  static size_t Size(const Impl* impl) {$/;"	f	class:v8::DefaultPersistentValueVectorTraits	typeref:typename:size_t
SizeAll	dependencies/include/SFML/Window/Cursor.hpp	/^        SizeAll,                \/\/\/< Combination of SizeHorizontal and SizeVertical$/;"	e	enum:sf::Cursor::Type
SizeBottomLeftTopRight	dependencies/include/SFML/Window/Cursor.hpp	/^        SizeBottomLeftTopRight, \/\/\/< Double arrow cursor going from bottom-left to top-right$/;"	e	enum:sf::Cursor::Type
SizeEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct SizeEvent$/;"	s	class:sf::Event
SizeHorizontal	dependencies/include/SFML/Window/Cursor.hpp	/^        SizeHorizontal,         \/\/\/< Horizontal double arrow cursor$/;"	e	enum:sf::Cursor::Type
SizeReceived	dependencies/include/SFML/Network/TcpSocket.hpp	/^        std::size_t       SizeReceived; \/\/\/< Number of size bytes received so far$/;"	m	struct:sf::TcpSocket::PendingPacket	typeref:typename:std::size_t
SizeTopLeftBottomRight	dependencies/include/SFML/Window/Cursor.hpp	/^        SizeTopLeftBottomRight, \/\/\/< Double arrow cursor going from top-left to bottom-right$/;"	e	enum:sf::Cursor::Type
SizeVertical	dependencies/include/SFML/Window/Cursor.hpp	/^        SizeVertical,           \/\/\/< Vertical double arrow cursor$/;"	e	enum:sf::Cursor::Type
Slash	dependencies/include/SFML/Window/Keyboard.hpp	/^        Slash,        \/\/\/< The \/ key$/;"	e	enum:sf::Keyboard::Key
SmiTagging	dependencies/include/v8-internal.h	/^struct SmiTagging<4> {$/;"	s	namespace:v8::internal
SmiTagging	dependencies/include/v8-internal.h	/^struct SmiTagging<8> {$/;"	s	namespace:v8::internal
SmiToInt	dependencies/include/v8-internal.h	/^  V8_INLINE static int SmiToInt(const internal::Address value) {$/;"	f	struct:v8::internal::SmiTagging	typeref:typename:V8_INLINE int
SmiValue	dependencies/include/v8-internal.h	/^  V8_INLINE static int SmiValue(const internal::Address value) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE int
SmiValuesAre31Bits	dependencies/include/v8-internal.h	/^constexpr bool SmiValuesAre31Bits() { return kSmiValueSize == 31; }$/;"	f	namespace:v8::internal	typeref:typename:bool
SmiValuesAre32Bits	dependencies/include/v8-internal.h	/^constexpr bool SmiValuesAre32Bits() { return kSmiValueSize == 32; }$/;"	f	namespace:v8::internal	typeref:typename:bool
SnapshotObjectId	dependencies/include/v8-profiler.h	/^typedef uint32_t SnapshotObjectId;$/;"	t	namespace:v8	typeref:typename:uint32_t
Socket	dependencies/include/SFML/Network/Socket.hpp	/^class SFML_NETWORK_API Socket : NonCopyable$/;"	c	namespace:sf
SocketHandle	dependencies/include/SFML/Network/SocketHandle.hpp	/^    typedef UINT_PTR SocketHandle;$/;"	t	namespace:sf	typeref:typename:UINT_PTR
SocketSelector	dependencies/include/SFML/Network/SocketSelector.hpp	/^class SFML_NETWORK_API SocketSelector$/;"	c	namespace:sf
Sound	dependencies/include/SFML/Audio/Sound.hpp	/^class SFML_AUDIO_API Sound : public SoundSource$/;"	c	namespace:sf
SoundBuffer	dependencies/include/SFML/Audio/SoundBuffer.hpp	/^class SFML_AUDIO_API SoundBuffer : AlResource$/;"	c	namespace:sf
SoundBufferRecorder	dependencies/include/SFML/Audio/SoundBufferRecorder.hpp	/^class SFML_AUDIO_API SoundBufferRecorder : public SoundRecorder$/;"	c	namespace:sf
SoundFileFactory	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^class SFML_AUDIO_API SoundFileFactory$/;"	c	namespace:sf
SoundFileReader	dependencies/include/SFML/Audio/SoundFileReader.hpp	/^class SFML_AUDIO_API SoundFileReader$/;"	c	namespace:sf
SoundFileWriter	dependencies/include/SFML/Audio/SoundFileWriter.hpp	/^class SFML_AUDIO_API SoundFileWriter$/;"	c	namespace:sf
SoundList	dependencies/include/SFML/Audio/SoundBuffer.hpp	/^    typedef std::set<Sound*> SoundList; \/\/\/< Set of unique sound instances$/;"	t	class:sf::SoundBuffer	typeref:typename:std::set<Sound * >
SoundRecorder	dependencies/include/SFML/Audio/SoundRecorder.hpp	/^class SFML_AUDIO_API SoundRecorder : AlResource$/;"	c	namespace:sf
SoundSource	dependencies/include/SFML/Audio/SoundSource.hpp	/^class SFML_AUDIO_API SoundSource : AlResource$/;"	c	namespace:sf
SoundStream	dependencies/include/SFML/Audio/SoundStream.hpp	/^class SFML_AUDIO_API SoundStream : public SoundSource$/;"	c	namespace:sf
Source	dependencies/include/v8.h	/^  class Source {$/;"	c	class:v8::ScriptCompiler
Space	dependencies/include/SFML/Window/Keyboard.hpp	/^        Space,        \/\/\/< The Space key$/;"	e	enum:sf::Keyboard::Key
Span	dependencies/include/SFML/Audio/Music.hpp	/^        Span()$/;"	f	struct:sf::Music::Span
Span	dependencies/include/SFML/Audio/Music.hpp	/^        Span(T off, T len):$/;"	f	struct:sf::Music::Span
Span	dependencies/include/SFML/Audio/Music.hpp	/^    struct Span$/;"	s	class:sf::Music
Sprite	dependencies/include/SFML/Graphics/Sprite.hpp	/^class SFML_GRAPHICS_API Sprite : public Drawable, public Transformable$/;"	c	namespace:sf
SrcAlpha	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        SrcAlpha,         \/\/\/< (src.a, src.a, src.a, src.a)$/;"	e	enum:sf::BlendMode::Factor
SrcColor	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        SrcColor,         \/\/\/< (src.r, src.g, src.b, src.a)$/;"	e	enum:sf::BlendMode::Factor
StackFrame	dependencies/include/v8.h	/^class V8_EXPORT StackFrame {$/;"	c	namespace:v8
StackTrace	dependencies/include/v8.h	/^class V8_EXPORT StackTrace {$/;"	c	namespace:v8
StackTraceOptions	dependencies/include/v8.h	/^  enum StackTraceOptions {$/;"	g	class:v8::StackTrace
StackTracePrinter	dependencies/include/v8-platform.h	/^  typedef void (*StackTracePrinter)();$/;"	t	class:v8::Platform	typeref:typename:void (*)()
StateTag	dependencies/include/v8.h	/^enum StateTag {$/;"	g	namespace:v8
StatesCache	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^    struct StatesCache$/;"	s	class:sf::RenderTarget
Static	dependencies/include/SFML/Graphics/VertexBuffer.hpp	/^        Static   \/\/\/< Rarely changing data$/;"	e	enum:sf::VertexBuffer::Usage
Status	dependencies/include/SFML/Audio/SoundSource.hpp	/^    enum Status$/;"	g	class:sf::SoundSource
Status	dependencies/include/SFML/Network/Ftp.hpp	/^        enum Status$/;"	g	class:sf::Ftp::Response
Status	dependencies/include/SFML/Network/Http.hpp	/^        enum Status$/;"	g	class:sf::Http::Response
Status	dependencies/include/SFML/Network/Socket.hpp	/^    enum Status$/;"	g	class:sf::Socket
Status	dependencies/include/v8.h	/^  enum Status {$/;"	g	class:v8::Module
StdGlobalValueMap	dependencies/include/v8-util.h	/^  explicit StdGlobalValueMap(Isolate* isolate)$/;"	f	class:v8::StdGlobalValueMap
StdGlobalValueMap	dependencies/include/v8-util.h	/^class StdGlobalValueMap : public GlobalValueMap<K, V, Traits> {$/;"	c	namespace:v8
StdMapTraits	dependencies/include/v8-util.h	/^class StdMapTraits {$/;"	c	namespace:v8
StdPersistentValueMap	dependencies/include/v8-util.h	/^  explicit StdPersistentValueMap(Isolate* isolate)$/;"	f	class:v8::StdPersistentValueMap
StdPersistentValueMap	dependencies/include/v8-util.h	/^class StdPersistentValueMap : public PersistentValueMap<K, V, Traits> {$/;"	c	namespace:v8
Stopped	dependencies/include/SFML/Audio/SoundSource.hpp	/^        Stopped, \/\/\/< Sound is not playing$/;"	e	enum:sf::SoundSource::Status
Stream	dependencies/include/SFML/Graphics/VertexBuffer.hpp	/^        Stream,  \/\/\/< Constantly changing data$/;"	e	enum:sf::VertexBuffer::Usage
StreamedSource	dependencies/include/v8.h	/^  class V8_EXPORT StreamedSource {$/;"	c	class:v8::ScriptCompiler
StressType	dependencies/include/v8-testing.h	/^  enum StressType {$/;"	g	class:v8::Testing
StrikeThrough	dependencies/include/SFML/Graphics/Text.hpp	/^        StrikeThrough = 1 << 3  \/\/\/< Strike through characters$/;"	e	enum:sf::Text::Style
String	dependencies/include/SFML/System/String.hpp	/^class SFML_SYSTEM_API String$/;"	c	namespace:sf
String	dependencies/include/v8.h	/^    friend class v8::String;$/;"	m	class:v8::String::ExternalStringResourceBase::v8	typeref:typename:class
String	dependencies/include/v8.h	/^class V8_EXPORT String : public Name {$/;"	c	namespace:v8
StringBuffer	dependencies/include/v8-inspector.h	/^class V8_EXPORT StringBuffer {$/;"	c	namespace:v8_inspector
StringList	dependencies/include/libplatform/v8-tracing.h	/^  typedef std::vector<std::string> StringList;$/;"	t	class:v8::platform::tracing::TraceConfig	typeref:typename:std::vector<std::string>
StringObject	dependencies/include/v8.h	/^class V8_EXPORT StringObject : public Object {$/;"	c	namespace:v8
StringView	dependencies/include/v8-inspector.h	/^  StringView() : m_is8Bit(true), m_length(0), m_characters8(nullptr) {}$/;"	f	class:v8_inspector::StringView
StringView	dependencies/include/v8-inspector.h	/^  StringView(const uint16_t* characters, size_t length)$/;"	f	class:v8_inspector::StringView
StringView	dependencies/include/v8-inspector.h	/^  StringView(const uint8_t* characters, size_t length)$/;"	f	class:v8_inspector::StringView
StringView	dependencies/include/v8-inspector.h	/^class V8_EXPORT StringView {$/;"	c	namespace:v8_inspector
Style	dependencies/include/SFML/Graphics/Text.hpp	/^    enum Style$/;"	g	class:sf::Text
Style	dependencies/include/SFML/Window/WindowStyle.hpp	/^namespace Style$/;"	n	namespace:sf
Subtract	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        Subtract,       \/\/\/< Pixel = Src * SrcFactor - Dst * DstFactor$/;"	e	enum:sf::BlendMode::Equation
Subtract	dependencies/include/SFML/Window/Keyboard.hpp	/^        Subtract,     \/\/\/< The - key (minus, usually from numpad)$/;"	e	enum:sf::Keyboard::Key
Swap	dependencies/include/v8-util.h	/^  static void Swap(Impl& a, Impl& b) { std::swap(a, b); }  \/\/ NOLINT$/;"	f	class:v8::StdMapTraits	typeref:typename:void
Symbol	dependencies/include/v8.h	/^class V8_EXPORT Symbol : public Name {$/;"	c	namespace:v8
SymbolObject	dependencies/include/v8.h	/^class V8_EXPORT SymbolObject : public Object {$/;"	c	namespace:v8
SystemStatus	dependencies/include/SFML/Network/Ftp.hpp	/^            SystemStatus          = 211, \/\/\/< System status, or system help reply$/;"	e	enum:sf::Ftp::Response::Status
SystemType	dependencies/include/SFML/Network/Ftp.hpp	/^            SystemType            = 215, \/\/\/< NAME system type, where NAME is an official sys/;"	e	enum:sf::Ftp::Response::Status
T	dependencies/include/SFML/Window/Keyboard.hpp	/^        T,            \/\/\/< The T key$/;"	e	enum:sf::Keyboard::Key
TWO_BYTE	dependencies/include/v8.h	/^    enum Encoding { ONE_BYTE, TWO_BYTE, UTF8 };$/;"	e	enum:v8::ScriptCompiler::StreamedSource::Encoding
TWO_BYTE_ENCODING	dependencies/include/v8.h	/^    TWO_BYTE_ENCODING = 0x0,$/;"	e	enum:v8::String::Encoding
TYPE_CHECK	dependencies/include/v8.h	/^#define TYPE_CHECK(/;"	d
Tab	dependencies/include/SFML/Window/Keyboard.hpp	/^        Tab,          \/\/\/< The Tabulation key$/;"	e	enum:sf::Keyboard::Key
Task	dependencies/include/v8-platform.h	/^class Task {$/;"	c	namespace:v8
TaskRunner	dependencies/include/v8-platform.h	/^class TaskRunner {$/;"	c	namespace:v8
Tcp	dependencies/include/SFML/Network/Socket.hpp	/^        Tcp, \/\/\/< TCP protocol$/;"	e	enum:sf::Socket::Type
TcpListener	dependencies/include/SFML/Network/TcpListener.hpp	/^class SFML_NETWORK_API TcpListener : public Socket$/;"	c	namespace:sf
TcpSocket	dependencies/include/SFML/Network/TcpSocket.hpp	/^class SFML_NETWORK_API TcpSocket : public Socket$/;"	c	namespace:sf
Template	dependencies/include/v8.h	/^class V8_EXPORT Template : public Data {$/;"	c	namespace:v8
Testing	dependencies/include/v8-testing.h	/^class V8_EXPORT Testing {$/;"	c	namespace:v8
Text	dependencies/include/SFML/Graphics/Text.hpp	/^class SFML_GRAPHICS_API Text : public Drawable, public Transformable$/;"	c	namespace:sf
Text	dependencies/include/SFML/Window/Cursor.hpp	/^        Text,                   \/\/\/< I-beam, cursor when hovering over a field allowing text /;"	e	enum:sf::Cursor::Type
TextEntered	dependencies/include/SFML/Window/Event.hpp	/^        TextEntered,            \/\/\/< A character was entered (data in event.text)$/;"	e	enum:sf::Event::EventType
TextEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct TextEvent$/;"	s	class:sf::Event
Texture	dependencies/include/SFML/Graphics/Texture.hpp	/^class SFML_GRAPHICS_API Texture : GlResource$/;"	c	namespace:sf
TextureTable	dependencies/include/SFML/Graphics/Shader.hpp	/^    typedef std::map<int, const Texture*> TextureTable;$/;"	t	class:sf::Shader	typeref:typename:std::map<int,const Texture * >
Thread	dependencies/include/SFML/System/Thread.hpp	/^class SFML_SYSTEM_API Thread : NonCopyable$/;"	c	namespace:sf
Thread	dependencies/include/SFML/System/Thread.inl	/^Thread::Thread(F function, A argument) :$/;"	f	class:Thread
Thread	dependencies/include/SFML/System/Thread.inl	/^Thread::Thread(F functor) :$/;"	f	class:Thread
Thread	dependencies/include/SFML/System/Thread.inl	/^Thread::Thread(void(C::*function)(), C* object) :$/;"	f	class:Thread
ThreadFunc	dependencies/include/SFML/System/Thread.inl	/^struct ThreadFunc$/;"	s	namespace:priv	file:
ThreadFunctor	dependencies/include/SFML/System/Thread.inl	/^    ThreadFunctor(T functor) : m_functor(functor) {}$/;"	f	struct:priv::ThreadFunctor	file:
ThreadFunctor	dependencies/include/SFML/System/Thread.inl	/^struct ThreadFunctor : ThreadFunc$/;"	s	namespace:priv	file:
ThreadFunctorWithArg	dependencies/include/SFML/System/Thread.inl	/^    ThreadFunctorWithArg(F function, A arg) : m_function(function), m_arg(arg) {}$/;"	f	struct:priv::ThreadFunctorWithArg	file:
ThreadFunctorWithArg	dependencies/include/SFML/System/Thread.inl	/^struct ThreadFunctorWithArg : ThreadFunc$/;"	s	namespace:priv	file:
ThreadImpl	dependencies/include/SFML/System/Thread.hpp	/^    friend class priv::ThreadImpl;$/;"	m	class:sf::Thread::priv	typeref:typename:class
ThreadLocal	dependencies/include/SFML/System/ThreadLocal.hpp	/^class SFML_SYSTEM_API ThreadLocal : NonCopyable$/;"	c	namespace:sf
ThreadLocalPtr	dependencies/include/SFML/System/ThreadLocalPtr.hpp	/^class ThreadLocalPtr : private ThreadLocal$/;"	c	namespace:sf
ThreadLocalPtr	dependencies/include/SFML/System/ThreadLocalPtr.inl	/^ThreadLocalPtr<T>::ThreadLocalPtr(T* value) :$/;"	f	class:sf::ThreadLocalPtr
ThreadMemberFunc	dependencies/include/SFML/System/Thread.inl	/^    ThreadMemberFunc(void(C::*function)(), C* object) : m_function(function), m_object(object) {/;"	f	struct:priv::ThreadMemberFunc	file:
ThreadMemberFunc	dependencies/include/SFML/System/Thread.inl	/^struct ThreadMemberFunc : ThreadFunc$/;"	s	namespace:priv	file:
TickSample	dependencies/include/v8-profiler.h	/^  TickSample()$/;"	f	struct:v8::TickSample
TickSample	dependencies/include/v8-profiler.h	/^struct TickSample {$/;"	s	namespace:v8
Tilde	dependencies/include/SFML/Window/Keyboard.hpp	/^        Tilde,        \/\/\/< The ~ key$/;"	e	enum:sf::Keyboard::Key
Time	dependencies/include/SFML/System/Time.hpp	/^class SFML_SYSTEM_API Time$/;"	c	namespace:sf
TimeSpan	dependencies/include/SFML/Audio/Music.hpp	/^    typedef Span<Time> TimeSpan;$/;"	t	class:sf::Music	typeref:typename:Span<Time>
TimerCallback	dependencies/include/v8-inspector.h	/^  typedef void (*TimerCallback)(void*);$/;"	t	class:v8_inspector::V8InspectorClient	typeref:typename:void (*)(void *)
Titlebar	dependencies/include/SFML/Window/WindowStyle.hpp	/^        Titlebar   = 1 << 0, \/\/\/< Title bar + fixed border$/;"	e	enum:sf::Style::__anonc2dbfd350103
ToLocal	dependencies/include/v8.h	/^  V8_WARN_UNUSED_RESULT V8_INLINE bool ToLocal(Local<S>* out) const {$/;"	f	class:v8::MaybeLocal	typeref:typename:V8_WARN_UNUSED_RESULT V8_INLINE bool
Touch	dependencies/include/SFML/Window/Touch.hpp	/^class SFML_WINDOW_API Touch$/;"	c	namespace:sf
TouchBegan	dependencies/include/SFML/Window/Event.hpp	/^        TouchBegan,             \/\/\/< A touch event began (data in event.touch)$/;"	e	enum:sf::Event::EventType
TouchEnded	dependencies/include/SFML/Window/Event.hpp	/^        TouchEnded,             \/\/\/< A touch event ended (data in event.touch)$/;"	e	enum:sf::Event::EventType
TouchEvent	dependencies/include/SFML/Window/Event.hpp	/^    struct TouchEvent$/;"	s	class:sf::Event
TouchMoved	dependencies/include/SFML/Window/Event.hpp	/^        TouchMoved,             \/\/\/< A touch moved (data in event.touch)$/;"	e	enum:sf::Event::EventType
TraceBuffer	dependencies/include/libplatform/v8-tracing.h	/^class V8_PLATFORM_EXPORT TraceBuffer {$/;"	c	namespace:v8::platform::tracing
TraceBufferChunk	dependencies/include/libplatform/v8-tracing.h	/^class V8_PLATFORM_EXPORT TraceBufferChunk {$/;"	c	namespace:v8::platform::tracing
TraceConfig	dependencies/include/libplatform/v8-tracing.h	/^  TraceConfig() : enable_systrace_(false), enable_argument_filter_(false) {}$/;"	f	class:v8::platform::tracing::TraceConfig
TraceConfig	dependencies/include/libplatform/v8-tracing.h	/^class V8_PLATFORM_EXPORT TraceConfig {$/;"	c	namespace:v8::platform::tracing
TraceObject	dependencies/include/libplatform/v8-tracing.h	/^class V8_PLATFORM_EXPORT TraceObject {$/;"	c	namespace:v8::platform::tracing
TraceRecordMode	dependencies/include/libplatform/v8-tracing.h	/^enum TraceRecordMode {$/;"	g	namespace:v8::platform::tracing
TraceStateObserver	dependencies/include/v8-platform.h	/^  class TraceStateObserver {$/;"	c	class:v8::TracingController
TraceWriter	dependencies/include/libplatform/v8-tracing.h	/^class V8_PLATFORM_EXPORT TraceWriter {$/;"	c	namespace:v8::platform::tracing
TracingController	dependencies/include/libplatform/v8-tracing.h	/^class V8_PLATFORM_EXPORT TracingController$/;"	c	namespace:v8::platform::tracing
TracingController	dependencies/include/v8-platform.h	/^class TracingController {$/;"	c	namespace:v8
TransferAborted	dependencies/include/SFML/Network/Ftp.hpp	/^            TransferAborted           = 426, \/\/\/< Connection closed, transfer aborted$/;"	e	enum:sf::Ftp::Response::Status
TransferMode	dependencies/include/SFML/Network/Ftp.hpp	/^    enum TransferMode$/;"	g	class:sf::Ftp
TransferrableModule	dependencies/include/v8.h	/^    TransferrableModule(OwnedBuffer serialized, OwnedBuffer bytes)$/;"	f	class:v8::WasmModuleObject::TransferrableModule
TransferrableModule	dependencies/include/v8.h	/^    explicit TransferrableModule(SharedModule shared_module)$/;"	f	class:v8::WasmModuleObject::TransferrableModule
TransferrableModule	dependencies/include/v8.h	/^  class TransferrableModule final {$/;"	c	class:v8::WasmModuleObject
Transform	dependencies/include/SFML/Graphics/Transform.hpp	/^class SFML_GRAPHICS_API Transform$/;"	c	namespace:sf
Transformable	dependencies/include/SFML/Graphics/Transformable.hpp	/^class SFML_GRAPHICS_API Transformable$/;"	c	namespace:sf
TransientContextLock	dependencies/include/SFML/Window/GlResource.hpp	/^    class SFML_WINDOW_API TransientContextLock : NonCopyable$/;"	c	class:sf::GlResource
Transparent	dependencies/include/SFML/Graphics/Color.hpp	/^    static const Color Transparent; \/\/\/< Transparent (black) predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
TriangleFan	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^    TriangleFan,   \/\/\/< List of connected triangles, a point uses the common center and the p/;"	e	enum:sf::PrimitiveType
TriangleStrip	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^    TriangleStrip, \/\/\/< List of connected triangles, a point uses the two previous points to /;"	e	enum:sf::PrimitiveType
Triangles	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^    Triangles,     \/\/\/< List of individual triangles$/;"	e	enum:sf::PrimitiveType
TrianglesFan	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^    TrianglesFan   = TriangleFan    \/\/\/< \\deprecated Use TriangleFan instead$/;"	e	enum:sf::PrimitiveType
TrianglesStrip	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^    TrianglesStrip = TriangleStrip, \/\/\/< \\deprecated Use TriangleStrip instead$/;"	e	enum:sf::PrimitiveType
Type	dependencies/include/SFML/Graphics/Shader.hpp	/^    enum Type$/;"	g	class:sf::Shader
Type	dependencies/include/SFML/Network/Socket.hpp	/^    enum Type$/;"	g	class:sf::Socket
Type	dependencies/include/SFML/Window/Cursor.hpp	/^    enum Type$/;"	g	class:sf::Cursor
Type	dependencies/include/SFML/Window/Sensor.hpp	/^    enum Type$/;"	g	class:sf::Sensor
Type	dependencies/include/v8-profiler.h	/^  enum Type {$/;"	g	class:v8::HeapGraphEdge
Type	dependencies/include/v8-profiler.h	/^  enum Type {$/;"	g	class:v8::HeapGraphNode
Type	dependencies/include/v8-util.h	/^    typedef T Type;$/;"	t	struct:v8::DefaultGlobalMapTraits::RemovePointer	typeref:typename:T
TypedArray	dependencies/include/v8.h	/^class V8_EXPORT TypedArray : public ArrayBufferView {$/;"	c	namespace:v8
U	dependencies/include/SFML/Window/Joystick.hpp	/^        U,    \/\/\/< The U axis$/;"	e	enum:sf::Joystick::Axis
U	dependencies/include/SFML/Window/Keyboard.hpp	/^        U,            \/\/\/< The U key$/;"	e	enum:sf::Keyboard::Key
UNKNOWN_ENCODING	dependencies/include/v8.h	/^    UNKNOWN_ENCODING = 0x1,$/;"	e	enum:v8::String::Encoding
UTF8	dependencies/include/v8.h	/^    enum Encoding { ONE_BYTE, TWO_BYTE, UTF8 };$/;"	e	enum:v8::ScriptCompiler::StreamedSource::Encoding
UTF8_ACCEPT	dependencies/include/nlohmann/json.hpp	/^    static constexpr uint8_t UTF8_ACCEPT = 0;$/;"	m	class:nlohmann::detail::serializer	typeref:typename:uint8_t
UTF8_REJECT	dependencies/include/nlohmann/json.hpp	/^    static constexpr uint8_t UTF8_REJECT = 1;$/;"	m	class:nlohmann::detail::serializer	typeref:typename:uint8_t
Udp	dependencies/include/SFML/Network/Socket.hpp	/^        Udp  \/\/\/< UDP protocol$/;"	e	enum:sf::Socket::Type
UdpSocket	dependencies/include/SFML/Network/UdpSocket.hpp	/^class SFML_NETWORK_API UdpSocket : public Socket$/;"	c	namespace:sf
Uint16	dependencies/include/SFML/Config.hpp	/^    typedef unsigned short Uint16;$/;"	t	namespace:sf	typeref:typename:unsigned short
Uint16Array	dependencies/include/v8.h	/^class V8_EXPORT Uint16Array : public TypedArray {$/;"	c	namespace:v8
Uint32	dependencies/include/SFML/Config.hpp	/^    typedef unsigned int Uint32;$/;"	t	namespace:sf	typeref:typename:unsigned int
Uint32	dependencies/include/v8.h	/^class V8_EXPORT Uint32 : public Integer {$/;"	c	namespace:v8
Uint32Array	dependencies/include/v8.h	/^class V8_EXPORT Uint32Array : public TypedArray {$/;"	c	namespace:v8
Uint64	dependencies/include/SFML/Config.hpp	/^        typedef unsigned __int64 Uint64;$/;"	t	namespace:sf	typeref:typename:unsigned __int64
Uint64	dependencies/include/SFML/Config.hpp	/^        typedef unsigned long long Uint64;$/;"	t	namespace:sf	typeref:typename:unsigned long long
Uint8	dependencies/include/SFML/Config.hpp	/^    typedef unsigned char Uint8;$/;"	t	namespace:sf	typeref:typename:unsigned char
Uint8Array	dependencies/include/v8.h	/^class V8_EXPORT Uint8Array : public TypedArray {$/;"	c	namespace:v8
Uint8ClampedArray	dependencies/include/v8.h	/^class V8_EXPORT Uint8ClampedArray : public TypedArray {$/;"	c	namespace:v8
Unauthorized	dependencies/include/SFML/Network/Http.hpp	/^            Unauthorized        = 401, \/\/\/< The requested page needs an authentication to be /;"	e	enum:sf::Http::Response::Status
UnboundModuleScript	dependencies/include/v8.h	/^class V8_EXPORT UnboundModuleScript {$/;"	c	namespace:v8
UnboundScript	dependencies/include/v8.h	/^class V8_EXPORT UnboundScript {$/;"	c	namespace:v8
Uncompilable	dependencies/include/v8.h	/^  template<class O> V8_INLINE static void Uncompilable() {$/;"	f	class:v8::NonCopyablePersistentTraits	typeref:typename:V8_INLINE void
Underlined	dependencies/include/SFML/Graphics/Text.hpp	/^        Underlined    = 1 << 2, \/\/\/< Underlined characters$/;"	e	enum:sf::Text::Style
UniformTable	dependencies/include/SFML/Graphics/Shader.hpp	/^    typedef std::map<std::string, int> UniformTable;$/;"	t	class:sf::Shader	typeref:typename:std::map<std::string,int>
UniquePersistent	dependencies/include/v8.h	/^using UniquePersistent = Global<T>;$/;"	t	namespace:v8	typeref:typename:Global<T>
Unknown	dependencies/include/SFML/Window/Keyboard.hpp	/^        Unknown = -1, \/\/\/< Unhandled key$/;"	e	enum:sf::Keyboard::Key
Unlock	dependencies/include/v8.h	/^    virtual void Unlock() const {}$/;"	f	class:v8::String::ExternalStringResourceBase	typeref:typename:void
UnwindState	dependencies/include/v8.h	/^struct UnwindState {$/;"	s	namespace:v8
Up	dependencies/include/SFML/Window/Keyboard.hpp	/^        Up,           \/\/\/< Up arrow$/;"	e	enum:sf::Keyboard::Key
UpdateNodeFlag	dependencies/include/v8-internal.h	/^  V8_INLINE static void UpdateNodeFlag(internal::Address* obj, bool value,$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE void
UpdateNodeState	dependencies/include/v8-internal.h	/^  V8_INLINE static void UpdateNodeState(internal::Address* obj, uint8_t value) {$/;"	f	class:v8::internal::Internals	typeref:typename:V8_INLINE void
UpdateTraceEventDuration	dependencies/include/v8-platform.h	/^  virtual void UpdateTraceEventDuration(const uint8_t* category_enabled_flag,$/;"	f	class:v8::TracingController	typeref:typename:void
Usage	dependencies/include/SFML/Graphics/VertexBuffer.hpp	/^    enum Usage$/;"	g	class:sf::VertexBuffer
UserAcceleration	dependencies/include/SFML/Window/Sensor.hpp	/^        UserAcceleration, \/\/\/< Measures the direction and intensity of device acceleration, i/;"	e	enum:sf::Sensor::Type
Utf	dependencies/include/SFML/System/Utf.hpp	/^class Utf<16>$/;"	c	namespace:sf
Utf	dependencies/include/SFML/System/Utf.hpp	/^class Utf<32>$/;"	c	namespace:sf
Utf	dependencies/include/SFML/System/Utf.hpp	/^class Utf<8>$/;"	c	namespace:sf
Utf16	dependencies/include/SFML/System/Utf.hpp	/^typedef Utf<16> Utf16;$/;"	t	namespace:sf	typeref:typename:Utf<16>
Utf32	dependencies/include/SFML/System/Utf.hpp	/^typedef Utf<32> Utf32;$/;"	t	namespace:sf	typeref:typename:Utf<32>
Utf8	dependencies/include/SFML/System/Utf.hpp	/^typedef Utf<8>  Utf8;$/;"	t	namespace:sf	typeref:typename:Utf<8>
Utf8Value	dependencies/include/v8.h	/^  class V8_EXPORT Utf8Value {$/;"	c	class:v8::String
V	dependencies/include/SFML/Window/Joystick.hpp	/^        V,    \/\/\/< The V axis$/;"	e	enum:sf::Joystick::Axis
V	dependencies/include/SFML/Window/Keyboard.hpp	/^        V,            \/\/\/< The V key$/;"	e	enum:sf::Keyboard::Key
V	dependencies/include/v8-profiler.h	/^#define V(/;"	d
V8CONFIG_H_	dependencies/include/v8config.h	/^#define V8CONFIG_H_$/;"	d
V8ContextInfo	dependencies/include/v8-inspector.h	/^  V8ContextInfo(v8::Local<v8::Context> context, int contextGroupId,$/;"	f	class:v8_inspector::V8ContextInfo
V8ContextInfo	dependencies/include/v8-inspector.h	/^class V8_EXPORT V8ContextInfo {$/;"	c	namespace:v8_inspector
V8Inspector	dependencies/include/v8-inspector.h	/^class V8_EXPORT V8Inspector {$/;"	c	namespace:v8_inspector
V8InspectorClient	dependencies/include/v8-inspector.h	/^class V8_EXPORT V8InspectorClient {$/;"	c	namespace:v8_inspector
V8InspectorSession	dependencies/include/v8-inspector.h	/^class V8_EXPORT V8InspectorSession {$/;"	c	namespace:v8_inspector
V8StackTrace	dependencies/include/v8-inspector.h	/^class V8_EXPORT V8StackTrace {$/;"	c	namespace:v8_inspector
V8StackTraceId	dependencies/include/v8-inspector.h	/^struct V8_EXPORT V8StackTraceId {$/;"	s	namespace:v8_inspector
V8_ARRAY_BUFFER_INTERNAL_FIELD_COUNT	dependencies/include/v8.h	/^#define V8_ARRAY_BUFFER_INTERNAL_FIELD_COUNT /;"	d
V8_ARRAY_BUFFER_VIEW_INTERNAL_FIELD_COUNT	dependencies/include/v8.h	/^#define V8_ARRAY_BUFFER_VIEW_INTERNAL_FIELD_COUNT /;"	d
V8_BUILD_NUMBER	dependencies/include/v8-version.h	/^#define V8_BUILD_NUMBER /;"	d
V8_CANDIDATE_STRING	dependencies/include/v8-version-string.h	/^#define V8_CANDIDATE_STRING /;"	d
V8_CAN_HAVE_DCHECK_IN_CONSTEXPR	dependencies/include/v8config.h	/^#  define V8_CAN_HAVE_DCHECK_IN_CONSTEXPR /;"	d
V8_CC_GNU	dependencies/include/v8config.h	/^# define V8_CC_GNU /;"	d
V8_CC_INTEL	dependencies/include/v8config.h	/^#  define V8_CC_INTEL /;"	d
V8_CC_MINGW	dependencies/include/v8config.h	/^# define V8_CC_MINGW /;"	d
V8_CC_MINGW32	dependencies/include/v8config.h	/^#  define V8_CC_MINGW32 /;"	d
V8_CC_MINGW64	dependencies/include/v8config.h	/^#  define V8_CC_MINGW64 /;"	d
V8_CC_MSVC	dependencies/include/v8config.h	/^# define V8_CC_MSVC /;"	d
V8_DECL_INTRINSIC	dependencies/include/v8.h	/^#define V8_DECL_INTRINSIC(/;"	d
V8_DEPRECATED	dependencies/include/v8config.h	/^#define V8_DEPRECATED(/;"	d
V8_DEPRECATE_SOON	dependencies/include/libplatform/libplatform.h	/^V8_PLATFORM_EXPORT V8_DEPRECATE_SOON($/;"	v	namespace:v8::platform	typeref:typename:V8_PLATFORM_EXPORT
V8_DEPRECATE_SOON	dependencies/include/v8config.h	/^#define V8_DEPRECATE_SOON(/;"	d
V8_EMBEDDER_STRING	dependencies/include/v8-version-string.h	/^#define V8_EMBEDDER_STRING /;"	d
V8_EXPORT	dependencies/include/v8config.h	/^#  define V8_EXPORT /;"	d
V8_EXPORT	dependencies/include/v8config.h	/^#  define V8_EXPORT$/;"	d
V8_EXPORT	dependencies/include/v8config.h	/^# define V8_EXPORT /;"	d
V8_EXPORT	dependencies/include/v8config.h	/^# define V8_EXPORT$/;"	d
V8_GLIBC_PREREQ	dependencies/include/v8config.h	/^# define V8_GLIBC_PREREQ(/;"	d
V8_GNUC_PREREQ	dependencies/include/v8config.h	/^# define V8_GNUC_PREREQ(/;"	d
V8_HAS_ATTRIBUTE_ALWAYS_INLINE	dependencies/include/v8config.h	/^# define V8_HAS_ATTRIBUTE_ALWAYS_INLINE /;"	d
V8_HAS_ATTRIBUTE_DEPRECATED	dependencies/include/v8config.h	/^# define V8_HAS_ATTRIBUTE_DEPRECATED /;"	d
V8_HAS_ATTRIBUTE_DEPRECATED_MESSAGE	dependencies/include/v8config.h	/^# define V8_HAS_ATTRIBUTE_DEPRECATED_MESSAGE /;"	d
V8_HAS_ATTRIBUTE_NOINLINE	dependencies/include/v8config.h	/^# define V8_HAS_ATTRIBUTE_NOINLINE /;"	d
V8_HAS_ATTRIBUTE_UNUSED	dependencies/include/v8config.h	/^# define V8_HAS_ATTRIBUTE_UNUSED /;"	d
V8_HAS_ATTRIBUTE_VISIBILITY	dependencies/include/v8config.h	/^# define V8_HAS_ATTRIBUTE_VISIBILITY /;"	d
V8_HAS_ATTRIBUTE_WARN_UNUSED_RESULT	dependencies/include/v8config.h	/^# define V8_HAS_ATTRIBUTE_WARN_UNUSED_RESULT /;"	d
V8_HAS_BUILTIN_BSWAP16	dependencies/include/v8config.h	/^# define V8_HAS_BUILTIN_BSWAP16 /;"	d
V8_HAS_BUILTIN_BSWAP32	dependencies/include/v8config.h	/^# define V8_HAS_BUILTIN_BSWAP32 /;"	d
V8_HAS_BUILTIN_BSWAP64	dependencies/include/v8config.h	/^# define V8_HAS_BUILTIN_BSWAP64 /;"	d
V8_HAS_BUILTIN_CLZ	dependencies/include/v8config.h	/^# define V8_HAS_BUILTIN_CLZ /;"	d
V8_HAS_BUILTIN_CTZ	dependencies/include/v8config.h	/^# define V8_HAS_BUILTIN_CTZ /;"	d
V8_HAS_BUILTIN_EXPECT	dependencies/include/v8config.h	/^# define V8_HAS_BUILTIN_EXPECT /;"	d
V8_HAS_BUILTIN_FRAME_ADDRESS	dependencies/include/v8config.h	/^# define V8_HAS_BUILTIN_FRAME_ADDRESS /;"	d
V8_HAS_BUILTIN_POPCOUNT	dependencies/include/v8config.h	/^# define V8_HAS_BUILTIN_POPCOUNT /;"	d
V8_HAS_BUILTIN_SADD_OVERFLOW	dependencies/include/v8config.h	/^# define V8_HAS_BUILTIN_SADD_OVERFLOW /;"	d
V8_HAS_BUILTIN_SSUB_OVERFLOW	dependencies/include/v8config.h	/^# define V8_HAS_BUILTIN_SSUB_OVERFLOW /;"	d
V8_HAS_BUILTIN_UADD_OVERFLOW	dependencies/include/v8config.h	/^# define V8_HAS_BUILTIN_UADD_OVERFLOW /;"	d
V8_HAS_DECLSPEC_DEPRECATED	dependencies/include/v8config.h	/^# define V8_HAS_DECLSPEC_DEPRECATED /;"	d
V8_HAS_DECLSPEC_NOINLINE	dependencies/include/v8config.h	/^# define V8_HAS_DECLSPEC_NOINLINE /;"	d
V8_HAS_DECLSPEC_NORETURN	dependencies/include/v8config.h	/^# define V8_HAS_DECLSPEC_NORETURN /;"	d
V8_HAS_DECLSPEC_SELECTANY	dependencies/include/v8config.h	/^# define V8_HAS_DECLSPEC_SELECTANY /;"	d
V8_HAS___FORCEINLINE	dependencies/include/v8config.h	/^# define V8_HAS___FORCEINLINE /;"	d
V8_INCLUDE_VERSION_H_	dependencies/include/v8-version.h	/^#define V8_INCLUDE_VERSION_H_$/;"	d
V8_INLINE	dependencies/include/v8config.h	/^# define V8_INLINE /;"	d
V8_INTRINSICS_LIST	dependencies/include/v8.h	/^  V8_INTRINSICS_LIST(V8_DECL_INTRINSIC)$/;"	e	enum:v8::Intrinsic
V8_INTRINSICS_LIST	dependencies/include/v8.h	/^#define V8_INTRINSICS_LIST(/;"	d
V8_IS_CANDIDATE_VERSION	dependencies/include/v8-version.h	/^#define V8_IS_CANDIDATE_VERSION /;"	d
V8_LIBC_BIONIC	dependencies/include/v8config.h	/^# define V8_LIBC_BIONIC /;"	d
V8_LIBC_BSD	dependencies/include/v8config.h	/^# define V8_LIBC_BSD /;"	d
V8_LIBC_GLIBC	dependencies/include/v8config.h	/^# define V8_LIBC_GLIBC /;"	d
V8_LIBC_MSVCRT	dependencies/include/v8config.h	/^# define V8_LIBC_MSVCRT /;"	d
V8_LIBC_UCLIBC	dependencies/include/v8config.h	/^# define V8_LIBC_UCLIBC /;"	d
V8_LIBPLATFORM_LIBPLATFORM_EXPORT_H_	dependencies/include/libplatform/libplatform-export.h	/^#define V8_LIBPLATFORM_LIBPLATFORM_EXPORT_H_$/;"	d
V8_LIBPLATFORM_LIBPLATFORM_H_	dependencies/include/libplatform/libplatform.h	/^#define V8_LIBPLATFORM_LIBPLATFORM_H_$/;"	d
V8_LIBPLATFORM_V8_TRACING_H_	dependencies/include/libplatform/v8-tracing.h	/^#define V8_LIBPLATFORM_V8_TRACING_H_$/;"	d
V8_LIKELY	dependencies/include/v8config.h	/^# define V8_LIKELY(/;"	d
V8_MAJOR_VERSION	dependencies/include/v8-version.h	/^#define V8_MAJOR_VERSION /;"	d
V8_MINOR_VERSION	dependencies/include/v8-version.h	/^#define V8_MINOR_VERSION /;"	d
V8_NOINLINE	dependencies/include/v8config.h	/^# define V8_NOINLINE /;"	d
V8_OS_AIX	dependencies/include/v8config.h	/^#define V8_OS_AIX /;"	d
V8_OS_ANDROID	dependencies/include/v8config.h	/^# define V8_OS_ANDROID /;"	d
V8_OS_BSD	dependencies/include/v8config.h	/^# define V8_OS_BSD /;"	d
V8_OS_CYGWIN	dependencies/include/v8config.h	/^# define V8_OS_CYGWIN /;"	d
V8_OS_DRAGONFLYBSD	dependencies/include/v8config.h	/^# define V8_OS_DRAGONFLYBSD /;"	d
V8_OS_FREEBSD	dependencies/include/v8config.h	/^# define V8_OS_FREEBSD /;"	d
V8_OS_FUCHSIA	dependencies/include/v8config.h	/^# define V8_OS_FUCHSIA /;"	d
V8_OS_LINUX	dependencies/include/v8config.h	/^# define V8_OS_LINUX /;"	d
V8_OS_MACOSX	dependencies/include/v8config.h	/^# define V8_OS_MACOSX /;"	d
V8_OS_NETBSD	dependencies/include/v8config.h	/^# define V8_OS_NETBSD /;"	d
V8_OS_OPENBSD	dependencies/include/v8config.h	/^# define V8_OS_OPENBSD /;"	d
V8_OS_POSIX	dependencies/include/v8config.h	/^# define V8_OS_POSIX /;"	d
V8_OS_POSIX	dependencies/include/v8config.h	/^#define V8_OS_POSIX /;"	d
V8_OS_QNX	dependencies/include/v8config.h	/^# define V8_OS_QNX /;"	d
V8_OS_SOLARIS	dependencies/include/v8config.h	/^# define V8_OS_SOLARIS /;"	d
V8_OS_WIN	dependencies/include/v8config.h	/^# define V8_OS_WIN /;"	d
V8_PATCH_LEVEL	dependencies/include/v8-version.h	/^#define V8_PATCH_LEVEL /;"	d
V8_PLATFORM_EXPORT	dependencies/include/libplatform/libplatform-export.h	/^#define V8_PLATFORM_EXPORT /;"	d
V8_PLATFORM_EXPORT	dependencies/include/libplatform/libplatform-export.h	/^#define V8_PLATFORM_EXPORT$/;"	d
V8_PLATFORM_NON_EXPORTED_BASE	dependencies/include/libplatform/v8-tracing.h	/^#define V8_PLATFORM_NON_EXPORTED_BASE(/;"	d
V8_PROMISE_INTERNAL_FIELD_COUNT	dependencies/include/v8.h	/^#define V8_PROMISE_INTERNAL_FIELD_COUNT /;"	d
V8_S	dependencies/include/v8-version-string.h	/^#define V8_S(/;"	d
V8_SX	dependencies/include/v8-version-string.h	/^#define V8_SX(/;"	d
V8_UNLIKELY	dependencies/include/v8config.h	/^# define V8_UNLIKELY(/;"	d
V8_UTIL_H_	dependencies/include/v8-util.h	/^#define V8_UTIL_H_$/;"	d
V8_V8_INSPECTOR_H_	dependencies/include/v8-inspector.h	/^#define V8_V8_INSPECTOR_H_$/;"	d
V8_V8_INSPECTOR_PROTOCOL_H_	dependencies/include/v8-inspector-protocol.h	/^#define V8_V8_INSPECTOR_PROTOCOL_H_$/;"	d
V8_V8_PLATFORM_H_	dependencies/include/v8-platform.h	/^#define V8_V8_PLATFORM_H_$/;"	d
V8_V8_PROFILER_H_	dependencies/include/v8-profiler.h	/^#define V8_V8_PROFILER_H_$/;"	d
V8_V8_TEST_H_	dependencies/include/v8-testing.h	/^#define V8_V8_TEST_H_$/;"	d
V8_VERSION_STRING	dependencies/include/v8-version-string.h	/^#define V8_VERSION_STRING /;"	d
V8_VERSION_STRING_H_	dependencies/include/v8-version-string.h	/^#define V8_VERSION_STRING_H_$/;"	d
V8_WARN_UNUSED_RESULT	dependencies/include/v8config.h	/^#define V8_WARN_UNUSED_RESULT /;"	d
V8_WASM_TRAP_HANDLER_POSIX_H_	dependencies/include/v8-wasm-trap-handler-posix.h	/^#define V8_WASM_TRAP_HANDLER_POSIX_H_$/;"	d
V8_WASM_TRAP_HANDLER_WIN_H_	dependencies/include/v8-wasm-trap-handler-win.h	/^#define V8_WASM_TRAP_HANDLER_WIN_H_$/;"	d
Value	dependencies/include/v8-util.h	/^  static PersistentContainerValue Value(Iterator it) { return it->second; }$/;"	f	class:v8::StdMapTraits	typeref:typename:PersistentContainerValue
Value	dependencies/include/v8.h	/^  class V8_EXPORT Value {$/;"	c	class:v8::String
Value	dependencies/include/v8.h	/^class V8_EXPORT Value : public Data {$/;"	c	namespace:v8
ValueDeserializer	dependencies/include/v8.h	/^class V8_EXPORT ValueDeserializer {$/;"	c	namespace:v8
ValueSerializer	dependencies/include/v8.h	/^class V8_EXPORT ValueSerializer {$/;"	c	namespace:v8
Vec2	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef Vector2<float> Vec2;$/;"	t	namespace:sf::Glsl	typeref:typename:Vector2<float>
Vec3	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef Vector3<float> Vec3;$/;"	t	namespace:sf::Glsl	typeref:typename:Vector3<float>
Vec4	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef implementation-defined Vec4;$/;"	t	namespace:sf::Glsl	typeref:typename:implementation-defined
Vec4	dependencies/include/SFML/Graphics/Glsl.hpp	/^    typedef priv::Vector4<float> Vec4;$/;"	t	namespace:sf::Glsl	typeref:typename:priv::Vector4<float>
Vector2	dependencies/include/SFML/System/Vector2.hpp	/^class Vector2$/;"	c	namespace:sf
Vector2	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T>::Vector2() :$/;"	f	class:Vector2
Vector2	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T>::Vector2(T X, T Y) :$/;"	f	class:Vector2
Vector2	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T>::Vector2(const Vector2<U>& vector) :$/;"	f	class:Vector2
Vector2f	dependencies/include/SFML/System/Vector2.hpp	/^typedef Vector2<float>        Vector2f;$/;"	t	namespace:sf	typeref:typename:Vector2<float>
Vector2i	dependencies/include/SFML/System/Vector2.hpp	/^typedef Vector2<int>          Vector2i;$/;"	t	namespace:sf	typeref:typename:Vector2<int>
Vector2u	dependencies/include/SFML/System/Vector2.hpp	/^typedef Vector2<unsigned int> Vector2u;$/;"	t	namespace:sf	typeref:typename:Vector2<unsigned int>
Vector3	dependencies/include/SFML/System/Vector3.hpp	/^class Vector3$/;"	c	namespace:sf
Vector3	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T>::Vector3() :$/;"	f	class:Vector3
Vector3	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T>::Vector3(T X, T Y, T Z) :$/;"	f	class:Vector3
Vector3	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T>::Vector3(const Vector3<U>& vector) :$/;"	f	class:Vector3
Vector3f	dependencies/include/SFML/System/Vector3.hpp	/^typedef Vector3<float> Vector3f;$/;"	t	namespace:sf	typeref:typename:Vector3<float>
Vector3i	dependencies/include/SFML/System/Vector3.hpp	/^typedef Vector3<int>   Vector3i;$/;"	t	namespace:sf	typeref:typename:Vector3<int>
Vector4	dependencies/include/SFML/Graphics/Glsl.inl	/^    Vector4() :$/;"	f	struct:Vector4	file:
Vector4	dependencies/include/SFML/Graphics/Glsl.inl	/^    Vector4(T X, T Y, T Z, T W) :$/;"	f	struct:Vector4	file:
Vector4	dependencies/include/SFML/Graphics/Glsl.inl	/^    Vector4(const Color& color)$/;"	f	struct:Vector4	file:
Vector4	dependencies/include/SFML/Graphics/Glsl.inl	/^    explicit Vector4(const Vector4<U>& other) :$/;"	f	struct:Vector4	file:
Vector4	dependencies/include/SFML/Graphics/Glsl.inl	/^struct Vector4$/;"	s	file:
VersionNotSupported	dependencies/include/SFML/Network/Http.hpp	/^            VersionNotSupported = 505, \/\/\/< The server doesn't support the requested HTTP ver/;"	e	enum:sf::Http::Response::Status
Vertex	dependencies/include/SFML/Graphics/Shader.hpp	/^        Vertex,   \/\/\/< %Vertex shader$/;"	e	enum:sf::Shader::Type
Vertex	dependencies/include/SFML/Graphics/Vertex.hpp	/^class SFML_GRAPHICS_API Vertex$/;"	c	namespace:sf
VertexArray	dependencies/include/SFML/Graphics/VertexArray.hpp	/^class SFML_GRAPHICS_API VertexArray : public Drawable$/;"	c	namespace:sf
VertexBuffer	dependencies/include/SFML/Graphics/VertexBuffer.hpp	/^class SFML_GRAPHICS_API VertexBuffer : public Drawable, private GlResource$/;"	c	namespace:sf
VertexCacheSize	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^        enum {VertexCacheSize = 4};$/;"	e	enum:sf::RenderTarget::StatesCache::__anon47acc7ac0103
VerticalWheel	dependencies/include/SFML/Window/Mouse.hpp	/^        VerticalWheel,  \/\/\/< The vertical mouse wheel$/;"	e	enum:sf::Mouse::Wheel
VideoMode	dependencies/include/SFML/Window/VideoMode.hpp	/^class SFML_WINDOW_API VideoMode$/;"	c	namespace:sf
View	dependencies/include/SFML/Graphics/View.hpp	/^class SFML_GRAPHICS_API View$/;"	c	namespace:sf
W	dependencies/include/SFML/Window/Keyboard.hpp	/^        W,            \/\/\/< The W key$/;"	e	enum:sf::Keyboard::Key
Wait	dependencies/include/SFML/Window/Cursor.hpp	/^        Wait,                   \/\/\/< Busy cursor$/;"	e	enum:sf::Cursor::Type
WasmModuleObject	dependencies/include/v8.h	/^class V8_EXPORT WasmModuleObject : public Object {$/;"	c	namespace:v8
WasmModuleObjectBuilderStreaming	dependencies/include/v8.h	/^class V8_EXPORT WasmModuleObjectBuilderStreaming final {$/;"	c	namespace:v8
WasmStreaming	dependencies/include/v8.h	/^class V8_EXPORT WasmStreaming final {$/;"	c	namespace:v8
WeakCallback	dependencies/include/v8-util.h	/^  static void WeakCallback($/;"	f	class:v8::PersistentValueMap	typeref:typename:void
WeakCallbackDataType	dependencies/include/v8-util.h	/^  typedef void WeakCallbackDataType;$/;"	t	class:v8::DefaultGlobalMapTraits	typeref:typename:void
WeakCallbackDataType	dependencies/include/v8-util.h	/^  typedef void WeakCallbackDataType;$/;"	t	class:v8::DefaultPersistentValueMapTraits	typeref:typename:void
WeakCallbackInfo	dependencies/include/v8.h	/^  WeakCallbackInfo(Isolate* isolate, T* parameter,$/;"	f	class:v8::WeakCallbackInfo
WeakCallbackInfo	dependencies/include/v8.h	/^class WeakCallbackInfo {$/;"	c	namespace:v8
WeakCallbackParameter	dependencies/include/v8-util.h	/^  static WeakCallbackDataType* WeakCallbackParameter($/;"	f	class:v8::DefaultPersistentValueMapTraits	typeref:typename:WeakCallbackDataType *
WeakCallbackParameter	dependencies/include/v8-util.h	/^  static WeakCallbackDataType* WeakCallbackParameter(MapType* map, const K& key,$/;"	f	class:v8::DefaultGlobalMapTraits	typeref:typename:WeakCallbackDataType *
WeakCallbackType	dependencies/include/v8.h	/^enum class WeakCallbackType { kParameter, kInternalFields, kFinalizer };$/;"	g	namespace:v8
Wheel	dependencies/include/SFML/Window/Mouse.hpp	/^    enum Wheel$/;"	g	class:sf::Mouse
White	dependencies/include/SFML/Graphics/Color.hpp	/^    static const Color White;       \/\/\/< White predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
Window	dependencies/include/SFML/Window/Window.hpp	/^class SFML_WINDOW_API Window : GlResource, NonCopyable$/;"	c	namespace:sf
WindowHandle	dependencies/include/SFML/Window/WindowHandle.hpp	/^    typedef HWND__* WindowHandle;$/;"	t	namespace:sf	typeref:typename:HWND__ *
WrapperInfoCallback	dependencies/include/v8-profiler.h	/^  typedef RetainedObjectInfo* (*WrapperInfoCallback)(uint16_t class_id,$/;"	t	class:v8::HeapProfiler	typeref:typename:RetainedObjectInfo * (*)(uint16_t class_id,Local<Value> wrapper)
WrapperNode	dependencies/include/v8-profiler.h	/^    virtual Node* WrapperNode() { return nullptr; }$/;"	f	class:v8::EmbedderGraph::Node	typeref:typename:Node *
WriteHeapStatsChunk	dependencies/include/v8-profiler.h	/^  virtual WriteResult WriteHeapStatsChunk(HeapStatsUpdate* data, int count) {$/;"	f	class:v8::OutputStream	typeref:typename:WriteResult
WriteOptions	dependencies/include/v8.h	/^  enum WriteOptions {$/;"	g	class:v8::String
WriteResult	dependencies/include/v8-profiler.h	/^  enum WriteResult {$/;"	g	class:v8::OutputStream
WriterFactory	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^    struct WriterFactory$/;"	s	class:sf::SoundFileFactory
WriterFactoryArray	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^    typedef std::vector<WriterFactory> WriterFactoryArray;$/;"	t	class:sf::SoundFileFactory	typeref:typename:std::vector<WriterFactory>
X	dependencies/include/SFML/Window/Joystick.hpp	/^        X,    \/\/\/< The X axis$/;"	e	enum:sf::Joystick::Axis
X	dependencies/include/SFML/Window/Keyboard.hpp	/^        X,            \/\/\/< The X key$/;"	e	enum:sf::Keyboard::Key
XButton1	dependencies/include/SFML/Window/Mouse.hpp	/^        XButton1,   \/\/\/< The first extra mouse button$/;"	e	enum:sf::Mouse::Button
XButton2	dependencies/include/SFML/Window/Mouse.hpp	/^        XButton2,   \/\/\/< The second extra mouse button$/;"	e	enum:sf::Mouse::Button
Y	dependencies/include/SFML/Window/Joystick.hpp	/^        Y,    \/\/\/< The Y axis$/;"	e	enum:sf::Joystick::Axis
Y	dependencies/include/SFML/Window/Keyboard.hpp	/^        Y,            \/\/\/< The Y key$/;"	e	enum:sf::Keyboard::Key
Yellow	dependencies/include/SFML/Graphics/Color.hpp	/^    static const Color Yellow;      \/\/\/< Yellow predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
Z	dependencies/include/SFML/Window/Joystick.hpp	/^        Z,    \/\/\/< The Z axis$/;"	e	enum:sf::Joystick::Axis
Z	dependencies/include/SFML/Window/Keyboard.hpp	/^        Z,            \/\/\/< The Z key$/;"	e	enum:sf::Keyboard::Key
Zero	dependencies/include/SFML/Graphics/BlendMode.hpp	/^        Zero,             \/\/\/< (0, 0, 0, 0)$/;"	e	enum:sf::BlendMode::Factor
Zero	dependencies/include/SFML/System/Time.hpp	/^    static const Time Zero; \/\/\/< Predefined "zero" time value$/;"	m	class:sf::Time	typeref:typename:const Time
__anon1e23a3bc0103	dependencies/include/SFML/Window/Joystick.hpp	/^    {$/;"	g	class:sf::Joystick
__anon2dc9d442010a	dependencies/include/v8-profiler.h	/^  union {$/;"	u	struct:v8::TickSample
__anon47acc7ac0103	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^        enum {VertexCacheSize = 4};$/;"	g	struct:sf::RenderTarget::StatesCache
__anon941a085b0103	dependencies/include/SFML/Audio/SoundStream.hpp	/^    {$/;"	g	class:sf::SoundStream
__anon941a085b0203	dependencies/include/SFML/Audio/SoundStream.hpp	/^    {$/;"	g	class:sf::SoundStream
__anon94c341520203	dependencies/include/v8.h	/^  enum {$/;"	g	class:v8::ScriptOriginOptions
__anon9e6e9dae010a	dependencies/include/SFML/Window/Event.hpp	/^    {$/;"	u	class:sf::Event
__anona4fd579c0103	dependencies/include/v8-internal.h	/^  enum { kSmiShiftSize = 0, kSmiValueSize = 31 };$/;"	g	struct:v8::internal::SmiTagging
__anona4fd579c0203	dependencies/include/v8-internal.h	/^  enum { kSmiShiftSize = 31, kSmiValueSize = 32 };$/;"	g	struct:v8::internal::SmiTagging
__anonc2dbfd350103	dependencies/include/SFML/Window/WindowStyle.hpp	/^    {$/;"	g	namespace:sf::Style
__anonccec14c70103	dependencies/include/SFML/Network/Socket.hpp	/^    {$/;"	g	class:sf::Socket
__anond356d9080102	dependencies/include/nlohmann/json.hpp	/^    {$/;"	f	function:nlohmann::detail::from_json	file:
__anond356d9080202	dependencies/include/nlohmann/json.hpp	/^    {$/;"	f	function:nlohmann::detail::from_json_array_impl	file:
__anond356d9080302	dependencies/include/nlohmann/json.hpp	/^    {$/;"	f	function:nlohmann::detail::from_json_array_impl	file:
__anond356d9080402	dependencies/include/nlohmann/json.hpp	/^    {$/;"	f	function:nlohmann::detail::from_json	file:
__anond356d9080510	dependencies/include/nlohmann/json.hpp	/^{$/;"	n	namespace:nlohmann
__anond356d9080610	dependencies/include/nlohmann/json.hpp	/^{$/;"	n	namespace:nlohmann
__anond356d9080702	dependencies/include/nlohmann/json.hpp	/^        {$/;"	f	function:nlohmann::detail::input_adapter::input_adapter	file:
__anond356d9080802	dependencies/include/nlohmann/json.hpp	/^                {$/;"	f	function:nlohmann::detail::binary_reader::parse_cbor_internal	file:
__anond356d9080902	dependencies/include/nlohmann/json.hpp	/^        {$/;"	f	function:nlohmann::detail::binary_reader::get_string	file:
__anond356d9080a02	dependencies/include/nlohmann/json.hpp	/^                    {$/;"	f	function:nlohmann::detail::binary_writer::write_ubjson	file:
__anond356d9080b02	dependencies/include/nlohmann/json.hpp	/^                    {$/;"	f	function:nlohmann::detail::binary_writer::write_ubjson	file:
__anond356d9080c02	dependencies/include/nlohmann/json.hpp	/^        {$/;"	f	function:nlohmann::detail::binary_writer::calc_bson_object_size	file:
__anond356d9080d02	dependencies/include/nlohmann/json.hpp	/^        {$/;"	f	function:nlohmann::detail::serializer::dump_float	file:
__anond356d9080e02	dependencies/include/nlohmann/json.hpp	/^        {$/;"	f	function:nlohmann::json_pointer::to_string	file:
__anond356d9080f02	dependencies/include/nlohmann/json.hpp	/^                {$/;"	f	function:nlohmann::json_pointer::get_unchecked	file:
__anond356d9081002	dependencies/include/nlohmann/json.hpp	/^        {$/;"	f	function:nlohmann::basic_json::create	file:
__anond356d9081102	dependencies/include/nlohmann/json.hpp	/^        {$/;"	f	function:nlohmann::basic_json::basic_json	file:
__anond356d9081202	dependencies/include/nlohmann/json.hpp	/^            {$/;"	f	function:nlohmann::basic_json::basic_json	file:
__anond356d9081302	dependencies/include/nlohmann/json.hpp	/^        {$/;"	f	function:nlohmann::basic_json::patch	file:
__anond356d9081402	dependencies/include/nlohmann/json.hpp	/^        {$/;"	f	function:nlohmann::basic_json::patch	file:
__anond356d9081502	dependencies/include/nlohmann/json.hpp	/^        {$/;"	f	function:nlohmann::basic_json::patch	file:
__anond356d9081602	dependencies/include/nlohmann/json.hpp	/^            {$/;"	f	function:nlohmann::basic_json::patch	typeref:typename:basic_json &	file:
__anond7159df00103	dependencies/include/SFML/Network/UdpSocket.hpp	/^    {$/;"	g	class:sf::UdpSocket
__anonf5fcbbf6010a	dependencies/include/v8-inspector.h	/^  union {$/;"	u	class:v8_inspector::StringView
a	dependencies/include/SFML/Graphics/Color.hpp	/^    Uint8 a; \/\/\/< Alpha (opacity) component$/;"	m	class:sf::Color	typeref:typename:Uint8
accept	dependencies/include/nlohmann/json.hpp	/^    bool accept(const bool strict = true)$/;"	f	class:nlohmann::detail::parser	typeref:typename:bool
accept	dependencies/include/nlohmann/json.hpp	/^    static bool accept(IteratorType first, IteratorType last)$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
accept	dependencies/include/nlohmann/json.hpp	/^    static bool accept(detail::input_adapter&& i)$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
add	dependencies/include/nlohmann/json.hpp	/^        enum class patch_operations {add, remove, replace, move, copy, test, invalid};$/;"	e	enum:nlohmann::basic_json::patch::patch_operations
add	dependencies/include/nlohmann/json.hpp	/^    void add(int c)$/;"	f	class:nlohmann::detail::lexer	typeref:typename:void
adl_serializer	dependencies/include/nlohmann/json.hpp	/^struct adl_serializer$/;"	s	namespace:nlohmann
advance	dependencies/include/SFML/Graphics/Glyph.hpp	/^    float     advance;     \/\/\/< Offset to move horizontally to the next character$/;"	m	class:sf::Glyph	typeref:typename:float
allocation_base_	dependencies/include/v8.h	/^    void* allocation_base_;$/;"	m	class:v8::ArrayBuffer::Contents	typeref:typename:void *
allocation_base_	dependencies/include/v8.h	/^    void* allocation_base_;$/;"	m	class:v8::SharedArrayBuffer::Contents	typeref:typename:void *
allocation_length_	dependencies/include/v8.h	/^    size_t allocation_length_;$/;"	m	class:v8::ArrayBuffer::Contents	typeref:typename:size_t
allocation_length_	dependencies/include/v8.h	/^    size_t allocation_length_;$/;"	m	class:v8::SharedArrayBuffer::Contents	typeref:typename:size_t
allocation_mode_	dependencies/include/v8.h	/^    Allocator::AllocationMode allocation_mode_;$/;"	m	class:v8::ArrayBuffer::Contents	typeref:typename:Allocator::AllocationMode
allocation_mode_	dependencies/include/v8.h	/^    Allocator::AllocationMode allocation_mode_;$/;"	m	class:v8::SharedArrayBuffer::Contents	typeref:typename:Allocator::AllocationMode
allocations	dependencies/include/v8-profiler.h	/^    std::vector<Allocation> allocations;$/;"	m	struct:v8::AllocationProfile::Node	typeref:typename:std::vector<Allocation>
allocator_type	dependencies/include/nlohmann/json.hpp	/^    using allocator_type = AllocatorType<basic_json>;$/;"	t	class:nlohmann::basic_json	typeref:typename:AllocatorType<basic_json>
allow_exceptions	dependencies/include/nlohmann/json.hpp	/^    const bool allow_exceptions = true;$/;"	m	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:const bool
allow_exceptions	dependencies/include/nlohmann/json.hpp	/^    const bool allow_exceptions = true;$/;"	m	class:nlohmann::detail::json_sax_dom_parser	typeref:typename:const bool
allow_exceptions	dependencies/include/nlohmann/json.hpp	/^    const bool allow_exceptions = true;$/;"	m	class:nlohmann::detail::parser	typeref:typename:const bool
alphaDstFactor	dependencies/include/SFML/Graphics/BlendMode.hpp	/^    Factor   alphaDstFactor; \/\/\/< Destination blending factor for the alpha channel$/;"	m	struct:sf::BlendMode	typeref:typename:Factor
alphaEquation	dependencies/include/SFML/Graphics/BlendMode.hpp	/^    Equation alphaEquation;  \/\/\/< Blending equation for the alpha channel$/;"	m	struct:sf::BlendMode	typeref:typename:Equation
alphaSrcFactor	dependencies/include/SFML/Graphics/BlendMode.hpp	/^    Factor   alphaSrcFactor; \/\/\/< Source blending factor for the alpha channel$/;"	m	struct:sf::BlendMode	typeref:typename:Factor
alt	dependencies/include/SFML/Window/Event.hpp	/^        bool          alt;     \/\/\/< Is the Alt key pressed?$/;"	m	struct:sf::Event::KeyEvent	typeref:typename:bool
anchor	dependencies/include/nlohmann/json.hpp	/^    IteratorType anchor;$/;"	m	class:nlohmann::detail::iteration_proxy_value	typeref:typename:IteratorType
antialiasingLevel	dependencies/include/SFML/Window/ContextSettings.hpp	/^    unsigned int antialiasingLevel; \/\/\/< Level of antialiasing$/;"	m	struct:sf::ContextSettings	typeref:typename:unsigned int
append_exponent	dependencies/include/nlohmann/json.hpp	/^inline char* append_exponent(char* buf, int e)$/;"	f	namespace:nlohmann::detail::dtoa_impl	typeref:typename:char *
arg_convertables	dependencies/include/libplatform/v8-tracing.h	/^  std::unique_ptr<v8::ConvertableToTraceFormat>* arg_convertables() {$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:std::unique_ptr<v8::ConvertableToTraceFormat> *
arg_convertables_	dependencies/include/libplatform/v8-tracing.h	/^      arg_convertables_[kTraceMaxNumArgs];$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:std::unique_ptr<v8::ConvertableToTraceFormat>[]
arg_names	dependencies/include/libplatform/v8-tracing.h	/^  const char** arg_names() { return arg_names_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:const char **
arg_names_	dependencies/include/libplatform/v8-tracing.h	/^  const char* arg_names_[kTraceMaxNumArgs];$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:const char * []
arg_types	dependencies/include/libplatform/v8-tracing.h	/^  uint8_t* arg_types() { return arg_types_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:uint8_t *
arg_types_	dependencies/include/libplatform/v8-tracing.h	/^  uint8_t arg_types_[kTraceMaxNumArgs];$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:uint8_t[]
arg_values	dependencies/include/libplatform/v8-tracing.h	/^  ArgValue* arg_values() { return arg_values_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:ArgValue *
arg_values_	dependencies/include/libplatform/v8-tracing.h	/^  ArgValue arg_values_[kTraceMaxNumArgs];$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:ArgValue[]
args_	dependencies/include/v8.h	/^  internal::Address* args_;$/;"	m	class:v8::PropertyCallbackInfo	typeref:typename:internal::Address *
array	dependencies/include/SFML/Graphics/Glsl.inl	/^    float array[Columns * Rows]; \/\/\/< Array holding matrix data$/;"	m	struct:Matrix	typeref:typename:float[]	file:
array	dependencies/include/nlohmann/json.hpp	/^        array_t* array;$/;"	m	union:nlohmann::basic_json::json_value	typeref:typename:array_t *
array	dependencies/include/nlohmann/json.hpp	/^    array,            \/\/\/< array (ordered collection of values)$/;"	e	enum:nlohmann::detail::value_t
array	dependencies/include/nlohmann/json.hpp	/^    static basic_json array(initializer_list_t init = {})$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
array_end	dependencies/include/nlohmann/json.hpp	/^        array_end,$/;"	e	enum:nlohmann::detail::parser::parse_event_t
array_index	dependencies/include/nlohmann/json.hpp	/^    static int array_index(const std::string& s)$/;"	f	class:nlohmann::json_pointer	typeref:typename:int
array_index	dependencies/include/nlohmann/json.hpp	/^    std::size_t array_index = 0;$/;"	m	class:nlohmann::detail::iteration_proxy_value	typeref:typename:std::size_t
array_index_last	dependencies/include/nlohmann/json.hpp	/^    mutable std::size_t array_index_last = 0;$/;"	m	class:nlohmann::detail::iteration_proxy_value	typeref:typename:std::size_t
array_index_str	dependencies/include/nlohmann/json.hpp	/^    mutable std::string array_index_str = "0";$/;"	m	class:nlohmann::detail::iteration_proxy_value	typeref:typename:std::string
array_iterator	dependencies/include/nlohmann/json.hpp	/^    typename BasicJsonType::array_t::iterator array_iterator {};$/;"	m	struct:nlohmann::detail::internal_iterator	typeref:typename:BasicJsonType::array_t::iterator
array_start	dependencies/include/nlohmann/json.hpp	/^        array_start,$/;"	e	enum:nlohmann::detail::parser::parse_event_t
array_t	dependencies/include/nlohmann/json.hpp	/^    using array_t = ArrayType<basic_json, AllocatorType<basic_json>>;$/;"	t	class:nlohmann::basic_json	typeref:typename:ArrayType<basic_json,AllocatorType<basic_json>>
array_t	dependencies/include/nlohmann/json.hpp	/^    using array_t = typename BasicJsonType::array_t;$/;"	t	class:nlohmann::detail::iter_impl	typeref:typename:BasicJsonType::array_t
as_bool	dependencies/include/libplatform/v8-tracing.h	/^    bool as_bool;$/;"	m	union:v8::platform::tracing::TraceObject::ArgValue	typeref:typename:bool
as_double	dependencies/include/libplatform/v8-tracing.h	/^    double as_double;$/;"	m	union:v8::platform::tracing::TraceObject::ArgValue	typeref:typename:double
as_int	dependencies/include/libplatform/v8-tracing.h	/^    int64_t as_int;$/;"	m	union:v8::platform::tracing::TraceObject::ArgValue	typeref:typename:int64_t
as_pointer	dependencies/include/libplatform/v8-tracing.h	/^    const void* as_pointer;$/;"	m	union:v8::platform::tracing::TraceObject::ArgValue	typeref:typename:const void *
as_string	dependencies/include/libplatform/v8-tracing.h	/^    const char* as_string;$/;"	m	union:v8::platform::tracing::TraceObject::ArgValue	typeref:typename:const char *
as_uint	dependencies/include/libplatform/v8-tracing.h	/^    uint64_t as_uint;$/;"	m	union:v8::platform::tracing::TraceObject::ArgValue	typeref:typename:uint64_t
assert_invariant	dependencies/include/nlohmann/json.hpp	/^    void assert_invariant() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:void
at	dependencies/include/nlohmann/json.hpp	/^    const_reference at(const json_pointer& ptr) const$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reference
at	dependencies/include/nlohmann/json.hpp	/^    const_reference at(const typename object_t::key_type& key) const$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reference
at	dependencies/include/nlohmann/json.hpp	/^    const_reference at(size_type idx) const$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reference
at	dependencies/include/nlohmann/json.hpp	/^    reference at(const json_pointer& ptr)$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
at	dependencies/include/nlohmann/json.hpp	/^    reference at(const typename object_t::key_type& key)$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
at	dependencies/include/nlohmann/json.hpp	/^    reference at(size_type idx)$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
attributeFlags	dependencies/include/SFML/Window/ContextSettings.hpp	/^    Uint32       attributeFlags;    \/\/\/< The attribute flags to create the context with$/;"	m	struct:sf::ContextSettings	typeref:typename:Uint32
auxData	dependencies/include/v8-inspector.h	/^  StringView auxData;$/;"	m	class:v8_inspector::V8ContextInfo	typeref:typename:StringView
axis	dependencies/include/SFML/Window/Event.hpp	/^        Joystick::Axis axis;       \/\/\/< Axis on which the joystick moved$/;"	m	struct:sf::Event::JoystickMoveEvent	typeref:typename:Joystick::Axis
b	dependencies/include/SFML/Graphics/Color.hpp	/^    Uint8 b; \/\/\/< Blue component$/;"	m	class:sf::Color	typeref:typename:Uint8
back	dependencies/include/nlohmann/json.hpp	/^    const_reference back() const$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reference
back	dependencies/include/nlohmann/json.hpp	/^    reference back()$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
base	dependencies/include/libplatform/v8-tracing.h	/^namespace base {$/;"	n	namespace:v8
base_iterator	dependencies/include/nlohmann/json.hpp	/^    using base_iterator = std::reverse_iterator<Base>;$/;"	t	class:nlohmann::detail::json_reverse_iterator	typeref:typename:std::reverse_iterator<Base>
basic_json	dependencies/include/nlohmann/json.hpp	/^    basic_json(InputIT first, InputIT last)$/;"	f	class:nlohmann::basic_json
basic_json	dependencies/include/nlohmann/json.hpp	/^    basic_json(basic_json&& other) noexcept$/;"	f	class:nlohmann::basic_json
basic_json	dependencies/include/nlohmann/json.hpp	/^    basic_json(const BasicJsonType& val)$/;"	f	class:nlohmann::basic_json
basic_json	dependencies/include/nlohmann/json.hpp	/^    basic_json(const basic_json& other)$/;"	f	class:nlohmann::basic_json
basic_json	dependencies/include/nlohmann/json.hpp	/^    basic_json(const detail::json_ref<basic_json>& ref)$/;"	f	class:nlohmann::basic_json
basic_json	dependencies/include/nlohmann/json.hpp	/^    basic_json(const value_t v)$/;"	f	class:nlohmann::basic_json
basic_json	dependencies/include/nlohmann/json.hpp	/^    basic_json(initializer_list_t init,$/;"	f	class:nlohmann::basic_json
basic_json	dependencies/include/nlohmann/json.hpp	/^    basic_json(size_type cnt, const basic_json& val)$/;"	f	class:nlohmann::basic_json
basic_json	dependencies/include/nlohmann/json.hpp	/^    basic_json(std::nullptr_t = nullptr) noexcept$/;"	f	class:nlohmann::basic_json
basic_json	dependencies/include/nlohmann/json.hpp	/^class basic_json$/;"	c	namespace:nlohmann
basic_json_t	dependencies/include/nlohmann/json.hpp	/^    using basic_json_t = NLOHMANN_BASIC_JSON_TPL;$/;"	t	class:nlohmann::basic_json	typeref:typename:NLOHMANN_BASIC_JSON_TPL
begin	dependencies/include/nlohmann/json.hpp	/^    const_iterator begin() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const_iterator
begin	dependencies/include/nlohmann/json.hpp	/^    iteration_proxy_value<IteratorType> begin() noexcept$/;"	f	class:nlohmann::detail::iteration_proxy	typeref:typename:iteration_proxy_value<IteratorType>
begin	dependencies/include/nlohmann/json.hpp	/^    iterator begin() noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:iterator
beginEnsureAllContextsInGroup	dependencies/include/v8-inspector.h	/^  virtual void beginEnsureAllContextsInGroup(int contextGroupId) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
beginUserGesture	dependencies/include/v8-inspector.h	/^  virtual void beginUserGesture() {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
begin_array	dependencies/include/nlohmann/json.hpp	/^        begin_array,      \/\/\/< the character for array begin `[`$/;"	e	enum:nlohmann::detail::lexer::token_type
begin_object	dependencies/include/nlohmann/json.hpp	/^        begin_object,     \/\/\/< the character for object begin `{`$/;"	e	enum:nlohmann::detail::lexer::token_type
begin_value	dependencies/include/nlohmann/json.hpp	/^    static constexpr difference_type begin_value = 0;$/;"	m	class:nlohmann::detail::primitive_iterator_t	typeref:typename:difference_type
binary_reader	dependencies/include/nlohmann/json.hpp	/^    explicit binary_reader(input_adapter_t adapter) : ia(std::move(adapter))$/;"	f	class:nlohmann::detail::binary_reader
binary_reader	dependencies/include/nlohmann/json.hpp	/^    using binary_reader = ::nlohmann::detail::binary_reader<basic_json>;$/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::detail::binary_reader<basic_json>
binary_reader	dependencies/include/nlohmann/json.hpp	/^class binary_reader$/;"	c	namespace:nlohmann::detail
binary_writer	dependencies/include/nlohmann/json.hpp	/^    explicit binary_writer(output_adapter_t<CharType> adapter) : oa(adapter)$/;"	f	class:nlohmann::detail::binary_writer
binary_writer	dependencies/include/nlohmann/json.hpp	/^    template<typename CharType> using binary_writer = ::nlohmann::detail::binary_writer<basic_js/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::detail::binary_writer<basic_json,CharType>
binary_writer	dependencies/include/nlohmann/json.hpp	/^class binary_writer$/;"	c	namespace:nlohmann::detail
bind_id	dependencies/include/libplatform/v8-tracing.h	/^  uint64_t bind_id() const { return bind_id_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:uint64_t
bind_id_	dependencies/include/libplatform/v8-tracing.h	/^  uint64_t bind_id_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:uint64_t
bitsPerPixel	dependencies/include/SFML/Window/VideoMode.hpp	/^    unsigned int bitsPerPixel; \/\/\/< Video mode pixel depth, in bits per pixels$/;"	m	class:sf::VideoMode	typeref:typename:unsigned int
bits_type	dependencies/include/nlohmann/json.hpp	/^    using bits_type = typename std::conditional< kPrecision == 24, uint32_t, uint64_t >::type;$/;"	t	function:nlohmann::detail::dtoa_impl::compute_boundaries	typeref:typename:std::conditional<kPrecision==24,uint32_t,uint64_t>::type
blendMode	dependencies/include/SFML/Graphics/RenderStates.hpp	/^    BlendMode      blendMode; \/\/\/< Blending mode$/;"	m	class:sf::RenderStates	typeref:typename:BlendMode
boolean	dependencies/include/nlohmann/json.hpp	/^        boolean_t boolean;$/;"	m	union:nlohmann::basic_json::json_value	typeref:typename:boolean_t
boolean	dependencies/include/nlohmann/json.hpp	/^    bool boolean(bool \/*unused*\/)$/;"	f	class:nlohmann::detail::json_sax_acceptor	typeref:typename:bool
boolean	dependencies/include/nlohmann/json.hpp	/^    bool boolean(bool val)$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:bool
boolean	dependencies/include/nlohmann/json.hpp	/^    bool boolean(bool val)$/;"	f	class:nlohmann::detail::json_sax_dom_parser	typeref:typename:bool
boolean	dependencies/include/nlohmann/json.hpp	/^    boolean,          \/\/\/< boolean value$/;"	e	enum:nlohmann::detail::value_t
boolean_function_t	dependencies/include/nlohmann/json.hpp	/^using boolean_function_t =$/;"	t	namespace:nlohmann::detail
boolean_t	dependencies/include/nlohmann/json.hpp	/^    using boolean_t = BooleanType;$/;"	t	class:nlohmann::basic_json	typeref:typename:BooleanType
boundaries	dependencies/include/nlohmann/json.hpp	/^struct boundaries$/;"	s	namespace:nlohmann::detail::dtoa_impl
bounds	dependencies/include/SFML/Graphics/Glyph.hpp	/^    FloatRect bounds;      \/\/\/< Bounding rectangle of the glyph, in coordinates relative to t/;"	m	class:sf::Glyph	typeref:typename:FloatRect
bson	dependencies/include/nlohmann/json.hpp	/^enum class input_format_t { json, cbor, msgpack, ubjson, bson };$/;"	e	enum:nlohmann::detail::input_format_t
buffer	dependencies/include/v8.h	/^  std::unique_ptr<const uint8_t[]> buffer;$/;"	m	struct:v8::OwnedBuffer	typeref:typename:std::unique_ptr<const uint8_t[]>
buffer_policy	dependencies/include/v8.h	/^    BufferPolicy buffer_policy;$/;"	m	struct:v8::ScriptCompiler::CachedData	typeref:typename:BufferPolicy
button	dependencies/include/SFML/Window/Event.hpp	/^        Mouse::Button button; \/\/\/< Code of the button that has been pressed$/;"	m	struct:sf::Event::MouseButtonEvent	typeref:typename:Mouse::Button
button	dependencies/include/SFML/Window/Event.hpp	/^        unsigned int button;     \/\/\/< Index of the button that has been pressed (in range [0 /;"	m	struct:sf::Event::JoystickButtonEvent	typeref:typename:unsigned int
byte	dependencies/include/nlohmann/json.hpp	/^    const std::size_t byte;$/;"	m	class:nlohmann::detail::parse_error	typeref:typename:const std::size_t
byte_length_	dependencies/include/v8.h	/^    size_t byte_length_;$/;"	m	class:v8::ArrayBuffer::Contents	typeref:typename:size_t
byte_length_	dependencies/include/v8.h	/^    size_t byte_length_;$/;"	m	class:v8::SharedArrayBuffer::Contents	typeref:typename:size_t
cached_data	dependencies/include/v8.h	/^    CachedData* cached_data;$/;"	m	class:v8::ScriptCompiler::Source	typeref:typename:CachedData *
cached_power	dependencies/include/nlohmann/json.hpp	/^struct cached_power \/\/ c = f * 2^e ~= 10^k$/;"	s	namespace:nlohmann::detail::dtoa_impl
calc_bson_array_size	dependencies/include/nlohmann/json.hpp	/^    static std::size_t calc_bson_array_size(const typename BasicJsonType::array_t& value)$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:std::size_t
calc_bson_element_size	dependencies/include/nlohmann/json.hpp	/^    static std::size_t calc_bson_element_size(const string_t& name,$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:std::size_t
calc_bson_entry_header_size	dependencies/include/nlohmann/json.hpp	/^    static std::size_t calc_bson_entry_header_size(const string_t& name)$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:std::size_t
calc_bson_integer_size	dependencies/include/nlohmann/json.hpp	/^    static std::size_t calc_bson_integer_size(const std::int64_t value)$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:std::size_t
calc_bson_object_size	dependencies/include/nlohmann/json.hpp	/^    static std::size_t calc_bson_object_size(const typename BasicJsonType::object_t& value)$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:std::size_t
calc_bson_string_size	dependencies/include/nlohmann/json.hpp	/^    static std::size_t calc_bson_string_size(const string_t& value)$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:std::size_t
calc_bson_unsigned_size	dependencies/include/nlohmann/json.hpp	/^    static constexpr std::size_t calc_bson_unsigned_size(const std::uint64_t value) noexcept$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:std::size_t
callback	dependencies/include/nlohmann/json.hpp	/^    const parser_callback_t callback = nullptr;$/;"	m	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:const parser_callback_t
callback	dependencies/include/nlohmann/json.hpp	/^    const parser_callback_t callback = nullptr;$/;"	m	class:nlohmann::detail::parser	typeref:typename:const parser_callback_t
callback_	dependencies/include/v8.h	/^  Callback* callback_;$/;"	m	class:v8::WeakCallbackInfo	typeref:typename:Callback *
canExecuteScripts	dependencies/include/v8-inspector.h	/^  virtual bool canExecuteScripts(int contextGroupId) { return true; }$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:bool
cancelTimer	dependencies/include/v8-inspector.h	/^  virtual void cancelTimer(void* data) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
category_enabled_flag	dependencies/include/libplatform/v8-tracing.h	/^  const uint8_t* category_enabled_flag() const {$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:const uint8_t *
category_enabled_flag_	dependencies/include/libplatform/v8-tracing.h	/^  const uint8_t* category_enabled_flag_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:const uint8_t *
cbegin	dependencies/include/nlohmann/json.hpp	/^    const_iterator cbegin() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const_iterator
cbor	dependencies/include/nlohmann/json.hpp	/^enum class input_format_t { json, cbor, msgpack, ubjson, bson };$/;"	e	enum:nlohmann::detail::input_format_t
cend	dependencies/include/nlohmann/json.hpp	/^    const_iterator cend() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const_iterator
channelCount	dependencies/include/SFML/Audio/SoundFileReader.hpp	/^        unsigned int channelCount; \/\/\/< Number of channels of the sound$/;"	m	struct:sf::SoundFileReader::Info	typeref:typename:unsigned int
characters16	dependencies/include/v8-inspector.h	/^  const uint16_t* characters16() const { return m_characters16; }$/;"	f	class:v8_inspector::StringView	typeref:typename:const uint16_t *
characters8	dependencies/include/v8-inspector.h	/^  const uint8_t* characters8() const { return m_characters8; }$/;"	f	class:v8_inspector::StringView	typeref:typename:const uint8_t *
chars_read	dependencies/include/nlohmann/json.hpp	/^    std::size_t chars_read = 0;$/;"	m	class:nlohmann::detail::binary_reader	typeref:typename:std::size_t
chars_read_current_line	dependencies/include/nlohmann/json.hpp	/^    std::size_t chars_read_current_line = 0;$/;"	m	struct:nlohmann::detail::position_t	typeref:typename:std::size_t
chars_read_total	dependencies/include/nlohmann/json.hpp	/^    std::size_t chars_read_total = 0;$/;"	m	struct:nlohmann::detail::position_t	typeref:typename:std::size_t
check	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^        bool (*check)(InputStream&);$/;"	m	struct:sf::SoundFileFactory::ReaderFactory	typeref:typename:bool (*)(InputStream &)
check	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^        bool (*check)(const std::string&);$/;"	m	struct:sf::SoundFileFactory::WriterFactory	typeref:typename:bool (*)(const std::string &)
children	dependencies/include/v8-profiler.h	/^    std::vector<Node*> children;$/;"	m	struct:v8::AllocationProfile::Node	typeref:typename:std::vector<Node * >
chunk_	dependencies/include/libplatform/v8-tracing.h	/^  TraceObject chunk_[kChunkSize];$/;"	m	class:v8::platform::tracing::TraceBufferChunk	typeref:typename:TraceObject[]
clean	src/Game.cpp	/^void Game::clean(){$/;"	f	class:Game	typeref:typename:void
clear	dependencies/include/nlohmann/json.hpp	/^    void clear() noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:void
code	dependencies/include/SFML/Window/Event.hpp	/^        Keyboard::Key code;    \/\/\/< Code of the key that has been pressed$/;"	m	struct:sf::Event::KeyEvent	typeref:typename:Keyboard::Key
code	dependencies/include/v8.h	/^  MemoryRange code;$/;"	m	struct:v8::JSEntryStub	typeref:typename:MemoryRange
code_range	dependencies/include/v8.h	/^  MemoryRange code_range;$/;"	m	struct:v8::UnwindState	typeref:typename:MemoryRange
color	dependencies/include/SFML/Graphics/Vertex.hpp	/^    Color     color;     \/\/\/< Color of the vertex$/;"	m	class:sf::Vertex	typeref:typename:Color
colorDstFactor	dependencies/include/SFML/Graphics/BlendMode.hpp	/^    Factor   colorDstFactor; \/\/\/< Destination blending factor for the color channels$/;"	m	struct:sf::BlendMode	typeref:typename:Factor
colorEquation	dependencies/include/SFML/Graphics/BlendMode.hpp	/^    Equation colorEquation;  \/\/\/< Blending equation for the color channels$/;"	m	struct:sf::BlendMode	typeref:typename:Equation
colorSrcFactor	dependencies/include/SFML/Graphics/BlendMode.hpp	/^    Factor   colorSrcFactor; \/\/\/< Source blending factor for the color channels$/;"	m	struct:sf::BlendMode	typeref:typename:Factor
column_number	dependencies/include/v8-profiler.h	/^    int column_number;$/;"	m	struct:v8::AllocationProfile::Node	typeref:typename:int
column_number_	dependencies/include/v8.h	/^  int column_number_;$/;"	m	class:v8::Location	typeref:typename:int
compute_boundaries	dependencies/include/nlohmann/json.hpp	/^boundaries compute_boundaries(FloatType value)$/;"	f	namespace:nlohmann::detail::dtoa_impl	typeref:typename:boundaries
consoleAPIMessage	dependencies/include/v8-inspector.h	/^  virtual void consoleAPIMessage(int contextGroupId,$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
consoleClear	dependencies/include/v8-inspector.h	/^  virtual void consoleClear(int contextGroupId) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
consoleTime	dependencies/include/v8-inspector.h	/^  virtual void consoleTime(const StringView& title) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
consoleTimeEnd	dependencies/include/v8-inspector.h	/^  virtual void consoleTimeEnd(const StringView& title) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
consoleTimeStamp	dependencies/include/v8-inspector.h	/^  virtual void consoleTimeStamp(const StringView& title) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
const	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^# define const$/;"	d	file:
const_iterator	dependencies/include/nlohmann/json.hpp	/^    using const_iterator = iter_impl<const basic_json>;$/;"	t	class:nlohmann::basic_json	typeref:typename:iter_impl<const basic_json>
const_pointer	dependencies/include/nlohmann/json.hpp	/^    using const_pointer = typename std::allocator_traits<allocator_type>::const_pointer;$/;"	t	class:nlohmann::basic_json	typeref:typename:std::allocator_traits<allocator_type>::const_pointer
const_reference	dependencies/include/nlohmann/json.hpp	/^    using const_reference = const value_type&;$/;"	t	class:nlohmann::basic_json	typeref:typename:const value_type &
const_reverse_iterator	dependencies/include/nlohmann/json.hpp	/^    using const_reverse_iterator = json_reverse_iterator<typename basic_json::const_iterator>;$/;"	t	class:nlohmann::basic_json	typeref:typename:json_reverse_iterator<typename basic_json::const_iterator>
construct	dependencies/include/nlohmann/json.hpp	/^    static void construct(BasicJsonType& j, const CompatibleArrayType& arr)$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	dependencies/include/nlohmann/json.hpp	/^    static void construct(BasicJsonType& j, const CompatibleObjectType& obj)$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	dependencies/include/nlohmann/json.hpp	/^    static void construct(BasicJsonType& j, const CompatibleStringType& str)$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	dependencies/include/nlohmann/json.hpp	/^    static void construct(BasicJsonType& j, const std::valarray<T>& arr)$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	dependencies/include/nlohmann/json.hpp	/^    static void construct(BasicJsonType& j, const std::vector<bool>& arr)$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	dependencies/include/nlohmann/json.hpp	/^    static void construct(BasicJsonType& j, const typename BasicJsonType::array_t& arr)$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	dependencies/include/nlohmann/json.hpp	/^    static void construct(BasicJsonType& j, const typename BasicJsonType::object_t& obj)$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	dependencies/include/nlohmann/json.hpp	/^    static void construct(BasicJsonType& j, const typename BasicJsonType::string_t& s)$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	dependencies/include/nlohmann/json.hpp	/^    static void construct(BasicJsonType& j, typename BasicJsonType::array_t&& arr)$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	dependencies/include/nlohmann/json.hpp	/^    static void construct(BasicJsonType& j, typename BasicJsonType::boolean_t b) noexcept$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	dependencies/include/nlohmann/json.hpp	/^    static void construct(BasicJsonType& j, typename BasicJsonType::number_float_t val) noexcept$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	dependencies/include/nlohmann/json.hpp	/^    static void construct(BasicJsonType& j, typename BasicJsonType::number_integer_t val) noexce/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	dependencies/include/nlohmann/json.hpp	/^    static void construct(BasicJsonType& j, typename BasicJsonType::number_unsigned_t val) noexc/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	dependencies/include/nlohmann/json.hpp	/^    static void construct(BasicJsonType& j, typename BasicJsonType::object_t&& obj)$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	dependencies/include/nlohmann/json.hpp	/^    static void construct(BasicJsonType& j, typename BasicJsonType::string_t&& s)$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
container	dependencies/include/nlohmann/json.hpp	/^    typename IteratorType::reference container;$/;"	m	class:nlohmann::detail::iteration_proxy	typeref:typename:IteratorType::reference
contains	dependencies/include/SFML/Graphics/Rect.inl	/^bool Rect<T>::contains(T x, T y) const$/;"	f	class:Rect	typeref:typename:bool
contains	dependencies/include/SFML/Graphics/Rect.inl	/^bool Rect<T>::contains(const Vector2<T>& point) const$/;"	f	class:Rect	typeref:typename:bool
context	dependencies/include/v8-inspector.h	/^  v8::Local<v8::Context> context;$/;"	m	class:v8_inspector::V8ContextInfo	typeref:typename:v8::Local<v8::Context>
contextGroupId	dependencies/include/v8-inspector.h	/^  int contextGroupId;$/;"	m	class:v8_inspector::V8ContextInfo	typeref:typename:int
control	dependencies/include/SFML/Window/Event.hpp	/^        bool          control; \/\/\/< Is the Control key pressed?$/;"	m	struct:sf::Event::KeyEvent	typeref:typename:bool
copy	dependencies/include/nlohmann/json.hpp	/^        enum class patch_operations {add, remove, replace, move, copy, test, invalid};$/;"	e	enum:nlohmann::basic_json::patch::patch_operations
count	dependencies/include/SFML/System/Utf.inl	/^std::size_t Utf<16>::count(In begin, In end)$/;"	f	class:Utf	typeref:typename:std::size_t
count	dependencies/include/SFML/System/Utf.inl	/^std::size_t Utf<32>::count(In begin, In end)$/;"	f	class:Utf	typeref:typename:std::size_t
count	dependencies/include/SFML/System/Utf.inl	/^std::size_t Utf<8>::count(In begin, In end)$/;"	f	class:Utf	typeref:typename:std::size_t
count	dependencies/include/nlohmann/json.hpp	/^    size_type count(KeyT&& key) const$/;"	f	class:nlohmann::basic_json	typeref:typename:size_type
count	dependencies/include/v8-profiler.h	/^    unsigned int count;$/;"	m	struct:v8::AllocationProfile::Allocation	typeref:typename:unsigned int
count	dependencies/include/v8-profiler.h	/^    unsigned int count;$/;"	m	struct:v8::AllocationProfile::Sample	typeref:typename:unsigned int
count	dependencies/include/v8-profiler.h	/^  uint32_t count;  \/\/ New value of count field for the interval with this index.$/;"	m	struct:v8::HeapStatsUpdate	typeref:typename:uint32_t
cpu_duration	dependencies/include/libplatform/v8-tracing.h	/^  uint64_t cpu_duration() { return cpu_duration_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:uint64_t
cpu_duration_	dependencies/include/libplatform/v8-tracing.h	/^  uint64_t cpu_duration_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:uint64_t
crbegin	dependencies/include/nlohmann/json.hpp	/^    const_reverse_iterator crbegin() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reverse_iterator
create	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^        SoundFileReader* (*create)();$/;"	m	struct:sf::SoundFileFactory::ReaderFactory	typeref:typename:SoundFileReader * (*)()
create	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^        SoundFileWriter* (*create)();$/;"	m	struct:sf::SoundFileFactory::WriterFactory	typeref:typename:SoundFileWriter * (*)()
create	dependencies/include/nlohmann/json.hpp	/^    static T* create(Args&& ... args)$/;"	f	class:nlohmann::basic_json	typeref:typename:T *
create	dependencies/include/nlohmann/json.hpp	/^    static invalid_iterator create(int id_, const std::string& what_arg)$/;"	f	class:nlohmann::detail::invalid_iterator	typeref:typename:invalid_iterator
create	dependencies/include/nlohmann/json.hpp	/^    static other_error create(int id_, const std::string& what_arg)$/;"	f	class:nlohmann::detail::other_error	typeref:typename:other_error
create	dependencies/include/nlohmann/json.hpp	/^    static out_of_range create(int id_, const std::string& what_arg)$/;"	f	class:nlohmann::detail::out_of_range	typeref:typename:out_of_range
create	dependencies/include/nlohmann/json.hpp	/^    static parse_error create(int id_, const position_t& pos, const std::string& what_arg)$/;"	f	class:nlohmann::detail::parse_error	typeref:typename:parse_error
create	dependencies/include/nlohmann/json.hpp	/^    static parse_error create(int id_, std::size_t byte_, const std::string& what_arg)$/;"	f	class:nlohmann::detail::parse_error	typeref:typename:parse_error
create	dependencies/include/nlohmann/json.hpp	/^    static type_error create(int id_, const std::string& what_arg)$/;"	f	class:nlohmann::detail::type_error	typeref:typename:type_error
createReader	dependencies/include/SFML/Audio/SoundFileFactory.inl	/^    template <typename T> SoundFileReader* createReader() {return new T;}$/;"	f	namespace:sf::priv	typeref:typename:SoundFileReader *
createWriter	dependencies/include/SFML/Audio/SoundFileFactory.inl	/^    template <typename T> SoundFileWriter* createWriter() {return new T;}$/;"	f	namespace:sf::priv	typeref:typename:SoundFileWriter *
crend	dependencies/include/nlohmann/json.hpp	/^    const_reverse_iterator crend() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reverse_iterator
current	dependencies/include/nlohmann/json.hpp	/^    int current = std::char_traits<char>::eof();$/;"	m	class:nlohmann::detail::binary_reader	typeref:typename:int
current	dependencies/include/nlohmann/json.hpp	/^    std::char_traits<char>::int_type current = std::char_traits<char>::eof();$/;"	m	class:nlohmann::detail::lexer	typeref:typename:std::char_traits<char>::int_type
currentTimeMS	dependencies/include/v8-inspector.h	/^  virtual double currentTimeMS() { return 0; }$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:double
current_wchar	dependencies/include/nlohmann/json.hpp	/^    std::size_t current_wchar = 0;$/;"	m	class:nlohmann::detail::wide_string_input_adapter	typeref:typename:std::size_t
cursor	dependencies/include/nlohmann/json.hpp	/^    const char* cursor;$/;"	m	class:nlohmann::detail::input_buffer_adapter	typeref:typename:const char *
data	dependencies/include/v8.h	/^    const uint8_t* data;$/;"	m	struct:v8::ScriptCompiler::CachedData	typeref:typename:const uint8_t *
data	dependencies/include/v8.h	/^  Local<Value> data;$/;"	m	struct:v8::IndexedPropertyHandlerConfiguration	typeref:typename:Local<Value>
data	dependencies/include/v8.h	/^  Local<Value> data;$/;"	m	struct:v8::NamedPropertyHandlerConfiguration	typeref:typename:Local<Value>
data	dependencies/include/v8.h	/^  constexpr T* data() const { return data_; }$/;"	f	class:v8::MemorySpan	typeref:typename:T *
data_	dependencies/include/v8.h	/^    internal::ScriptStreamingData* data_;$/;"	m	class:v8::ScriptCompiler::ScriptStreamingTask	typeref:typename:internal::ScriptStreamingData *
data_	dependencies/include/v8.h	/^    void* data_;$/;"	m	class:v8::ArrayBuffer::Contents	typeref:typename:void *
data_	dependencies/include/v8.h	/^    void* data_;$/;"	m	class:v8::SharedArrayBuffer::Contents	typeref:typename:void *
data_	dependencies/include/v8.h	/^  T* data_ = nullptr;$/;"	m	class:v8::MemorySpan	typeref:typename:T *
debug	dependencies/include/v8.h	/^namespace debug {$/;"	n	namespace:v8
debugger_id	dependencies/include/v8-inspector.h	/^  std::pair<int64_t, int64_t> debugger_id;$/;"	m	struct:v8_inspector::V8StackTraceId	typeref:typename:std::pair<int64_t,int64_t>
decimal_point	dependencies/include/nlohmann/json.hpp	/^    const char decimal_point = '\\0';$/;"	m	class:nlohmann::detail::serializer	typeref:typename:const char
decimal_point_char	dependencies/include/nlohmann/json.hpp	/^    const char decimal_point_char = '.';$/;"	m	class:nlohmann::detail::lexer	typeref:typename:const char
decode	dependencies/include/SFML/System/Utf.inl	/^In Utf<16>::decode(In begin, In end, Uint32& output, Uint32 replacement)$/;"	f	class:Utf	typeref:typename:In
decode	dependencies/include/SFML/System/Utf.inl	/^In Utf<32>::decode(In begin, In \/*end*\/, Uint32& output, Uint32 \/*replacement*\/)$/;"	f	class:Utf	typeref:typename:In
decode	dependencies/include/SFML/System/Utf.inl	/^In Utf<8>::decode(In begin, In end, Uint32& output, Uint32 replacement)$/;"	f	class:Utf	typeref:typename:In
decode	dependencies/include/nlohmann/json.hpp	/^    static uint8_t decode(uint8_t& state, uint32_t& codep, const uint8_t byte) noexcept$/;"	f	class:nlohmann::detail::serializer	typeref:typename:uint8_t
decodeAnsi	dependencies/include/SFML/System/Utf.inl	/^Uint32 Utf<32>::decodeAnsi(In input, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Uint32
decodeWide	dependencies/include/SFML/System/Utf.inl	/^Uint32 Utf<32>::decodeWide(In input)$/;"	f	class:Utf	typeref:typename:Uint32
definer	dependencies/include/v8.h	/^  GenericNamedPropertyDefinerCallback definer;$/;"	m	struct:v8::NamedPropertyHandlerConfiguration	typeref:typename:GenericNamedPropertyDefinerCallback
definer	dependencies/include/v8.h	/^  IndexedPropertyDefinerCallback definer;$/;"	m	struct:v8::IndexedPropertyHandlerConfiguration	typeref:typename:IndexedPropertyDefinerCallback
deleter	dependencies/include/v8.h	/^  GenericNamedPropertyDeleterCallback deleter;$/;"	m	struct:v8::NamedPropertyHandlerConfiguration	typeref:typename:GenericNamedPropertyDeleterCallback
deleter	dependencies/include/v8.h	/^  IndexedPropertyDeleterCallback deleter;$/;"	m	struct:v8::IndexedPropertyHandlerConfiguration	typeref:typename:IndexedPropertyDeleterCallback
deleter_	dependencies/include/v8.h	/^    DeleterCallback deleter_;$/;"	m	class:v8::ArrayBuffer::Contents	typeref:typename:DeleterCallback
deleter_	dependencies/include/v8.h	/^    DeleterCallback deleter_;$/;"	m	class:v8::SharedArrayBuffer::Contents	typeref:typename:DeleterCallback
deleter_data_	dependencies/include/v8.h	/^    void* deleter_data_;$/;"	m	class:v8::ArrayBuffer::Contents	typeref:typename:void *
deleter_data_	dependencies/include/v8.h	/^    void* deleter_data_;$/;"	m	class:v8::SharedArrayBuffer::Contents	typeref:typename:void *
delta	dependencies/include/SFML/Window/Event.hpp	/^        float        delta; \/\/\/< Wheel offset (positive is up\/left, negative is down\/right)/;"	m	struct:sf::Event::MouseWheelScrollEvent	typeref:typename:float
delta	dependencies/include/SFML/Window/Event.hpp	/^        int delta; \/\/\/< Number of ticks the wheel has moved (positive is up, negative is down/;"	m	struct:sf::Event::MouseWheelEvent	typeref:typename:int
deopt_reason	dependencies/include/v8-profiler.h	/^  const char* deopt_reason;$/;"	m	struct:v8::CpuProfileDeoptInfo	typeref:typename:const char *
depthBits	dependencies/include/SFML/Window/ContextSettings.hpp	/^    unsigned int depthBits;         \/\/\/< Bits of the depth buffer$/;"	m	struct:sf::ContextSettings	typeref:typename:unsigned int
descriptor	dependencies/include/v8.h	/^  GenericNamedPropertyDescriptorCallback descriptor;$/;"	m	struct:v8::NamedPropertyHandlerConfiguration	typeref:typename:GenericNamedPropertyDescriptorCallback
descriptor	dependencies/include/v8.h	/^  IndexedPropertyDescriptorCallback descriptor;$/;"	m	struct:v8::IndexedPropertyHandlerConfiguration	typeref:typename:IndexedPropertyDescriptorCallback
destroy	dependencies/include/nlohmann/json.hpp	/^        void destroy(value_t t) noexcept$/;"	f	union:nlohmann::basic_json::json_value	typeref:typename:void
detail	dependencies/include/nlohmann/json.hpp	/^namespace detail$/;"	n	namespace:nlohmann
detected_or	dependencies/include/nlohmann/json.hpp	/^using detected_or = detector<Default, void, Op, Args...>;$/;"	t	namespace:nlohmann::detail	typeref:typename:detector<Default,void,Op,Args...>
detected_or_t	dependencies/include/nlohmann/json.hpp	/^using detected_or_t = typename detected_or<Default, Op, Args...>::type;$/;"	t	namespace:nlohmann::detail	typeref:typename:detected_or<Default,Op,Args...>::type
detected_t	dependencies/include/nlohmann/json.hpp	/^using detected_t = typename detector<nonesuch, void, Op, Args...>::type;$/;"	t	namespace:nlohmann::detail	typeref:typename:detector<nonesuch,void,Op,Args...>::type
detector	dependencies/include/nlohmann/json.hpp	/^struct detector$/;"	s	namespace:nlohmann::detail
detector	dependencies/include/nlohmann/json.hpp	/^struct detector<Default, void_t<Op<Args...>>, Op, Args...>$/;"	s	namespace:nlohmann::detail
diff	dependencies/include/nlohmann/json.hpp	/^    static basic_json diff(const basic_json& source, const basic_json& target,$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
difference_type	dependencies/include/nlohmann/json.hpp	/^    using difference_type = ptrdiff_t;$/;"	t	struct:nlohmann::detail::iterator_traits	typeref:typename:ptrdiff_t
difference_type	dependencies/include/nlohmann/json.hpp	/^    using difference_type = std::ptrdiff_t;$/;"	t	class:nlohmann::basic_json	typeref:typename:std::ptrdiff_t
difference_type	dependencies/include/nlohmann/json.hpp	/^    using difference_type = std::ptrdiff_t;$/;"	t	class:nlohmann::detail::iteration_proxy_value	typeref:typename:std::ptrdiff_t
difference_type	dependencies/include/nlohmann/json.hpp	/^    using difference_type = std::ptrdiff_t;$/;"	t	class:nlohmann::detail::json_reverse_iterator	typeref:typename:std::ptrdiff_t
difference_type	dependencies/include/nlohmann/json.hpp	/^    using difference_type = std::ptrdiff_t;$/;"	t	class:nlohmann::detail::primitive_iterator_t	typeref:typename:std::ptrdiff_t
difference_type	dependencies/include/nlohmann/json.hpp	/^    using difference_type = typename BasicJsonType::difference_type;$/;"	t	class:nlohmann::detail::iter_impl	typeref:typename:BasicJsonType::difference_type
difference_type	dependencies/include/nlohmann/json.hpp	/^    using difference_type = typename It::difference_type;$/;"	t	struct:nlohmann::detail::iterator_types	typeref:typename:It::difference_type
difference_type_t	dependencies/include/nlohmann/json.hpp	/^using difference_type_t = typename T::difference_type;$/;"	t	namespace:nlohmann::detail	typeref:typename:T::difference_type
discarded	dependencies/include/nlohmann/json.hpp	/^    BasicJsonType discarded = BasicJsonType::value_t::discarded;$/;"	m	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:BasicJsonType
discarded	dependencies/include/nlohmann/json.hpp	/^    discarded         \/\/\/< discarded by the the parser callback function$/;"	e	enum:nlohmann::detail::value_t
diyfp	dependencies/include/nlohmann/json.hpp	/^    constexpr diyfp(uint64_t f_, int e_) noexcept : f(f_), e(e_) {}$/;"	f	struct:nlohmann::detail::dtoa_impl::diyfp
diyfp	dependencies/include/nlohmann/json.hpp	/^struct diyfp \/\/ f * 2^e$/;"	s	namespace:nlohmann::detail::dtoa_impl
dtoa_impl	dependencies/include/nlohmann/json.hpp	/^namespace dtoa_impl$/;"	n	namespace:nlohmann::detail
dump	dependencies/include/nlohmann/json.hpp	/^    string_t dump(const int indent = -1,$/;"	f	class:nlohmann::basic_json	typeref:typename:string_t
dump	dependencies/include/nlohmann/json.hpp	/^    void dump(const BasicJsonType& val, const bool pretty_print,$/;"	f	class:nlohmann::detail::serializer	typeref:typename:void
dump_escaped	dependencies/include/nlohmann/json.hpp	/^    void dump_escaped(const string_t& s, const bool ensure_ascii)$/;"	f	class:nlohmann::detail::serializer	typeref:typename:void
dump_float	dependencies/include/nlohmann/json.hpp	/^    void dump_float(number_float_t x)$/;"	f	class:nlohmann::detail::serializer	typeref:typename:void
dump_float	dependencies/include/nlohmann/json.hpp	/^    void dump_float(number_float_t x, std::false_type \/*is_ieee_single_or_double*\/)$/;"	f	class:nlohmann::detail::serializer	typeref:typename:void
dump_float	dependencies/include/nlohmann/json.hpp	/^    void dump_float(number_float_t x, std::true_type \/*is_ieee_single_or_double*\/)$/;"	f	class:nlohmann::detail::serializer	typeref:typename:void
dump_integer	dependencies/include/nlohmann/json.hpp	/^    void dump_integer(NumberType x)$/;"	f	class:nlohmann::detail::serializer	typeref:typename:void
duration	dependencies/include/libplatform/v8-tracing.h	/^  uint64_t duration() { return duration_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:uint64_t
duration_	dependencies/include/libplatform/v8-tracing.h	/^  uint64_t duration_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:uint64_t
e	dependencies/include/nlohmann/json.hpp	/^    int e = 0;$/;"	m	struct:nlohmann::detail::dtoa_impl::diyfp	typeref:typename:int
e	dependencies/include/nlohmann/json.hpp	/^    int e;$/;"	m	struct:nlohmann::detail::dtoa_impl::cached_power	typeref:typename:int
edges	dependencies/include/v8-profiler.h	/^    RetainerEdges edges;$/;"	m	struct:v8::HeapProfiler::RetainerInfos	typeref:typename:RetainerEdges
embedded_code_range	dependencies/include/v8.h	/^  MemoryRange embedded_code_range;$/;"	m	struct:v8::UnwindState	typeref:typename:MemoryRange
embedder_fields_	dependencies/include/v8.h	/^  void* embedder_fields_[kEmbedderFieldsInWeakCallback];$/;"	m	class:v8::WeakCallbackInfo	typeref:typename:void * []
emplace	dependencies/include/nlohmann/json.hpp	/^    std::pair<iterator, bool> emplace(Args&& ... args)$/;"	f	class:nlohmann::basic_json	typeref:typename:std::pair<iterator,bool>
emplace_back	dependencies/include/nlohmann/json.hpp	/^    void emplace_back(Args&& ... args)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
empty	dependencies/include/nlohmann/json.hpp	/^    bool empty() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
empty_str	dependencies/include/nlohmann/json.hpp	/^    const std::string empty_str = "";$/;"	m	class:nlohmann::detail::iteration_proxy_value	typeref:typename:const std::string
enable	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^        bool      enable;         \/\/\/< Is the cache enabled?$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:bool
enable_argument_filter_	dependencies/include/libplatform/v8-tracing.h	/^  bool enable_argument_filter_ : 1;$/;"	m	class:v8::platform::tracing::TraceConfig	typeref:typename:bool:1
enable_if_t	dependencies/include/nlohmann/json.hpp	/^using enable_if_t = typename std::enable_if<B, T>::type;$/;"	t	namespace:nlohmann::detail	typeref:typename:std::enable_if<B,T>::type
enable_systrace_	dependencies/include/libplatform/v8-tracing.h	/^  bool enable_systrace_ : 1;$/;"	m	class:v8::platform::tracing::TraceConfig	typeref:typename:bool:1
encode	dependencies/include/SFML/System/Utf.inl	/^Out Utf<16>::encode(Uint32 input, Out output, Uint16 replacement)$/;"	f	class:Utf	typeref:typename:Out
encode	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::encode(Uint32 input, Out output, Uint32 \/*replacement*\/)$/;"	f	class:Utf	typeref:typename:Out
encode	dependencies/include/SFML/System/Utf.inl	/^Out Utf<8>::encode(Uint32 input, Out output, Uint8 replacement)$/;"	f	class:Utf	typeref:typename:Out
encodeAnsi	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::encodeAnsi(Uint32 codepoint, Out output, char replacement, const std::locale& local/;"	f	class:Utf	typeref:typename:Out
encodeWide	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::encodeWide(Uint32 codepoint, Out output, wchar_t replacement)$/;"	f	class:Utf	typeref:typename:Out
end	dependencies/include/nlohmann/json.hpp	/^    const_iterator end() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const_iterator
end	dependencies/include/nlohmann/json.hpp	/^    iteration_proxy_value<IteratorType> end() noexcept$/;"	f	class:nlohmann::detail::iteration_proxy	typeref:typename:iteration_proxy_value<IteratorType>
end	dependencies/include/nlohmann/json.hpp	/^    iterator end() noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:iterator
endEnsureAllContextsInGroup	dependencies/include/v8-inspector.h	/^  virtual void endEnsureAllContextsInGroup(int contextGroupId) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
endUserGesture	dependencies/include/v8-inspector.h	/^  virtual void endUserGesture() {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
end_array	dependencies/include/nlohmann/json.hpp	/^        end_array,        \/\/\/< the character for array end `]`$/;"	e	enum:nlohmann::detail::lexer::token_type
end_array	dependencies/include/nlohmann/json.hpp	/^    bool end_array()$/;"	f	class:nlohmann::detail::json_sax_acceptor	typeref:typename:bool
end_array	dependencies/include/nlohmann/json.hpp	/^    bool end_array()$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:bool
end_array	dependencies/include/nlohmann/json.hpp	/^    bool end_array()$/;"	f	class:nlohmann::detail::json_sax_dom_parser	typeref:typename:bool
end_array_function_t	dependencies/include/nlohmann/json.hpp	/^using end_array_function_t = decltype(std::declval<T&>().end_array());$/;"	t	namespace:nlohmann::detail
end_object	dependencies/include/nlohmann/json.hpp	/^        end_object,       \/\/\/< the character for object end `}`$/;"	e	enum:nlohmann::detail::lexer::token_type
end_object	dependencies/include/nlohmann/json.hpp	/^    bool end_object()$/;"	f	class:nlohmann::detail::json_sax_acceptor	typeref:typename:bool
end_object	dependencies/include/nlohmann/json.hpp	/^    bool end_object()$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:bool
end_object	dependencies/include/nlohmann/json.hpp	/^    bool end_object()$/;"	f	class:nlohmann::detail::json_sax_dom_parser	typeref:typename:bool
end_object_function_t	dependencies/include/nlohmann/json.hpp	/^using end_object_function_t = decltype(std::declval<T&>().end_object());$/;"	t	namespace:nlohmann::detail
end_of_input	dependencies/include/nlohmann/json.hpp	/^        end_of_input,     \/\/\/< indicating the end of the input buffer$/;"	e	enum:nlohmann::detail::lexer::token_type
end_value	dependencies/include/nlohmann/json.hpp	/^    static constexpr difference_type end_value = begin_value + 1;$/;"	m	class:nlohmann::detail::primitive_iterator_t	typeref:typename:difference_type
ensureDefaultContextInGroup	dependencies/include/v8-inspector.h	/^  virtual v8::Local<v8::Context> ensureDefaultContextInGroup($/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:v8::Local<v8::Context>
enumerator	dependencies/include/v8.h	/^  GenericNamedPropertyEnumeratorCallback enumerator;$/;"	m	struct:v8::NamedPropertyHandlerConfiguration	typeref:typename:GenericNamedPropertyEnumeratorCallback
enumerator	dependencies/include/v8.h	/^  IndexedPropertyEnumeratorCallback enumerator;$/;"	m	struct:v8::IndexedPropertyHandlerConfiguration	typeref:typename:IndexedPropertyEnumeratorCallback
erase	dependencies/include/nlohmann/json.hpp	/^    IteratorType erase(IteratorType first, IteratorType last)$/;"	f	class:nlohmann::basic_json	typeref:typename:IteratorType
erase	dependencies/include/nlohmann/json.hpp	/^    IteratorType erase(IteratorType pos)$/;"	f	class:nlohmann::basic_json	typeref:typename:IteratorType
erase	dependencies/include/nlohmann/json.hpp	/^    size_type erase(const typename object_t::key_type& key)$/;"	f	class:nlohmann::basic_json	typeref:typename:size_type
erase	dependencies/include/nlohmann/json.hpp	/^    void erase(const size_type idx)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
error_handler	dependencies/include/nlohmann/json.hpp	/^    const error_handler_t error_handler;$/;"	m	class:nlohmann::detail::serializer	typeref:typename:const error_handler_t
error_handler_t	dependencies/include/nlohmann/json.hpp	/^    using error_handler_t = detail::error_handler_t;$/;"	t	class:nlohmann::basic_json	typeref:typename:detail::error_handler_t
error_handler_t	dependencies/include/nlohmann/json.hpp	/^enum class error_handler_t$/;"	g	namespace:nlohmann::detail
error_message	dependencies/include/nlohmann/json.hpp	/^    const char* error_message = "";$/;"	m	class:nlohmann::detail::lexer	typeref:typename:const char *
errored	dependencies/include/nlohmann/json.hpp	/^    bool errored = false;$/;"	m	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:bool
errored	dependencies/include/nlohmann/json.hpp	/^    bool errored = false;$/;"	m	class:nlohmann::detail::json_sax_dom_parser	typeref:typename:bool
escape	dependencies/include/nlohmann/json.hpp	/^    static std::string escape(std::string s)$/;"	f	class:nlohmann::json_pointer	typeref:typename:std::string
escape_slot_	dependencies/include/v8.h	/^  internal::Address* escape_slot_;$/;"	m	class:v8::EscapableHandleScope	typeref:typename:internal::Address *
exception	dependencies/include/nlohmann/json.hpp	/^    exception(int id_, const char* what_arg) : id(id_), m(what_arg) {}$/;"	f	class:nlohmann::detail::exception
exception	dependencies/include/nlohmann/json.hpp	/^    using exception = detail::exception;$/;"	t	class:nlohmann::basic_json	typeref:typename:detail::exception
exception	dependencies/include/nlohmann/json.hpp	/^class exception : public std::exception$/;"	c	namespace:nlohmann::detail
exception_message	dependencies/include/nlohmann/json.hpp	/^    std::string exception_message(const input_format_t format,$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:std::string
exception_message	dependencies/include/nlohmann/json.hpp	/^    std::string exception_message(const token_type expected, const std::string& context)$/;"	f	class:nlohmann::detail::parser	typeref:typename:std::string
exception_t	dependencies/include/nlohmann/json.hpp	/^    using exception_t = typename BasicJsonType::exception;$/;"	t	struct:nlohmann::detail::is_sax	typeref:typename:BasicJsonType::exception
exception_t	dependencies/include/nlohmann/json.hpp	/^    using exception_t = typename BasicJsonType::exception;$/;"	t	struct:nlohmann::detail::is_sax_static_asserts	typeref:typename:BasicJsonType::exception
external_callback_entry	dependencies/include/v8-profiler.h	/^    void* external_callback_entry;$/;"	m	union:v8::TickSample::__anon2dc9d442010a	typeref:typename:void *
external_callback_entry	dependencies/include/v8.h	/^  void* external_callback_entry;  \/\/ External callback address if VM is$/;"	m	struct:v8::SampleInfo	typeref:typename:void *
external_constructor	dependencies/include/nlohmann/json.hpp	/^    template<detail::value_t> friend struct detail::external_constructor;$/;"	m	class:nlohmann::basic_json::detail	typeref:typename:struct
external_constructor	dependencies/include/nlohmann/json.hpp	/^struct external_constructor<value_t::array>$/;"	s	namespace:nlohmann::detail
external_constructor	dependencies/include/nlohmann/json.hpp	/^struct external_constructor<value_t::boolean>$/;"	s	namespace:nlohmann::detail
external_constructor	dependencies/include/nlohmann/json.hpp	/^struct external_constructor<value_t::number_float>$/;"	s	namespace:nlohmann::detail
external_constructor	dependencies/include/nlohmann/json.hpp	/^struct external_constructor<value_t::number_integer>$/;"	s	namespace:nlohmann::detail
external_constructor	dependencies/include/nlohmann/json.hpp	/^struct external_constructor<value_t::number_unsigned>$/;"	s	namespace:nlohmann::detail
external_constructor	dependencies/include/nlohmann/json.hpp	/^struct external_constructor<value_t::object>$/;"	s	namespace:nlohmann::detail
external_constructor	dependencies/include/nlohmann/json.hpp	/^struct external_constructor<value_t::string>$/;"	s	namespace:nlohmann::detail
f	dependencies/include/nlohmann/json.hpp	/^    uint64_t f = 0;$/;"	m	struct:nlohmann::detail::dtoa_impl::diyfp	typeref:typename:uint64_t
f	dependencies/include/nlohmann/json.hpp	/^    uint64_t f;$/;"	m	struct:nlohmann::detail::dtoa_impl::cached_power	typeref:typename:uint64_t
family	dependencies/include/SFML/Graphics/Font.hpp	/^        std::string family; \/\/\/< The font family$/;"	m	struct:sf::Font::Info	typeref:typename:std::string
features	build/default/CMakeFiles/feature_tests.c	/^  const char features[] = {"\\n"$/;"	v	typeref:typename:const char[]
features	build/default/CMakeFiles/feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v	typeref:typename:const char[]
file_input_adapter	dependencies/include/nlohmann/json.hpp	/^    explicit file_input_adapter(std::FILE* f)  noexcept$/;"	f	class:nlohmann::detail::file_input_adapter
file_input_adapter	dependencies/include/nlohmann/json.hpp	/^class file_input_adapter : public input_adapter_protocol$/;"	c	namespace:nlohmann::detail
fill_buffer	dependencies/include/nlohmann/json.hpp	/^    static void fill_buffer(const WideStringType& str, size_t& current_wchar, std::array<std::ch/;"	f	struct:nlohmann::detail::wide_string_input_helper	typeref:typename:void
fill_buffer	dependencies/include/nlohmann/json.hpp	/^    void fill_buffer()$/;"	f	class:nlohmann::detail::wide_string_input_adapter	typeref:typename:void
find	dependencies/include/nlohmann/json.hpp	/^    const_iterator find(KeyT&& key) const$/;"	f	class:nlohmann::basic_json	typeref:typename:const_iterator
find	dependencies/include/nlohmann/json.hpp	/^    iterator find(KeyT&& key)$/;"	f	class:nlohmann::basic_json	typeref:typename:iterator
find_largest_pow10	dependencies/include/nlohmann/json.hpp	/^inline int find_largest_pow10(const uint32_t n, uint32_t& pow10)$/;"	f	namespace:nlohmann::detail::dtoa_impl	typeref:typename:int
finger	dependencies/include/SFML/Window/Event.hpp	/^        unsigned int finger; \/\/\/< Index of the finger in case of multi-touch events$/;"	m	struct:sf::Event::TouchEvent	typeref:typename:unsigned int
flags	dependencies/include/libplatform/v8-tracing.h	/^  unsigned int flags() const { return flags_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:unsigned int
flags	dependencies/include/v8.h	/^  PropertyHandlerFlags flags;$/;"	m	struct:v8::IndexedPropertyHandlerConfiguration	typeref:typename:PropertyHandlerFlags
flags	dependencies/include/v8.h	/^  PropertyHandlerFlags flags;$/;"	m	struct:v8::NamedPropertyHandlerConfiguration	typeref:typename:PropertyHandlerFlags
flags_	dependencies/include/libplatform/v8-tracing.h	/^  unsigned int flags_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:unsigned int
flags_	dependencies/include/v8.h	/^  const int flags_;$/;"	m	class:v8::ScriptOriginOptions	typeref:typename:const int
flatten	dependencies/include/nlohmann/json.hpp	/^    basic_json flatten() const$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
flatten	dependencies/include/nlohmann/json.hpp	/^    static void flatten(const std::string& reference_string,$/;"	f	class:nlohmann::json_pointer	typeref:typename:void
formatAccessorsAsProperties	dependencies/include/v8-inspector.h	/^  virtual bool formatAccessorsAsProperties(v8::Local<v8::Value>) {$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:bool
format_buffer	dependencies/include/nlohmann/json.hpp	/^inline char* format_buffer(char* buf, int len, int decimal_exponent,$/;"	f	namespace:nlohmann::detail::dtoa_impl	typeref:typename:char *
fp	dependencies/include/v8.h	/^  void* fp;  \/\/ Frame pointer.$/;"	m	struct:v8::RegisterState	typeref:typename:void *
frames_count	dependencies/include/v8-profiler.h	/^  unsigned frames_count : kMaxFramesCountLog2;  \/\/ Number of captured frames.$/;"	m	struct:v8::TickSample	typeref:typename:unsigned
frames_count	dependencies/include/v8.h	/^  size_t frames_count;            \/\/ Number of frames collected.$/;"	m	struct:v8::SampleInfo	typeref:typename:size_t
fromAnsi	dependencies/include/SFML/System/Utf.inl	/^Out Utf<16>::fromAnsi(In begin, In end, Out output, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
fromAnsi	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::fromAnsi(In begin, In end, Out output, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
fromAnsi	dependencies/include/SFML/System/Utf.inl	/^Out Utf<8>::fromAnsi(In begin, In end, Out output, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
fromLatin1	dependencies/include/SFML/System/Utf.inl	/^Out Utf<16>::fromLatin1(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
fromLatin1	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::fromLatin1(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
fromLatin1	dependencies/include/SFML/System/Utf.inl	/^Out Utf<8>::fromLatin1(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
fromUtf16	dependencies/include/SFML/System/String.inl	/^String String::fromUtf16(T begin, T end)$/;"	f	class:String	typeref:typename:String
fromUtf32	dependencies/include/SFML/System/String.inl	/^String String::fromUtf32(T begin, T end)$/;"	f	class:String	typeref:typename:String
fromUtf8	dependencies/include/SFML/System/String.inl	/^String String::fromUtf8(T begin, T end)$/;"	f	class:String	typeref:typename:String
fromWide	dependencies/include/SFML/System/Utf.inl	/^Out Utf<16>::fromWide(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
fromWide	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::fromWide(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
fromWide	dependencies/include/SFML/System/Utf.inl	/^Out Utf<8>::fromWide(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
from_bson	dependencies/include/nlohmann/json.hpp	/^    static basic_json from_bson(A1 && a1, A2 && a2,$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
from_bson	dependencies/include/nlohmann/json.hpp	/^    static basic_json from_bson(detail::input_adapter&& i,$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
from_cbor	dependencies/include/nlohmann/json.hpp	/^    static basic_json from_cbor(A1 && a1, A2 && a2,$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
from_cbor	dependencies/include/nlohmann/json.hpp	/^    static basic_json from_cbor(detail::input_adapter&& i,$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
from_json	dependencies/include/nlohmann/json.hpp	/^    static auto from_json(BasicJsonType&& j, ValueType& val) noexcept($/;"	f	struct:nlohmann::adl_serializer	typeref:typename:auto
from_json	dependencies/include/nlohmann/json.hpp	/^auto from_json(const BasicJsonType& j, ConstructibleArrayType& arr)$/;"	f	namespace:nlohmann::detail	typeref:typename:decltype (from_json_array_impl (j,arr,priority_tag<3>{}),j.template get<typename ConstructibleArrayType::value_type> (),void ())
from_json	dependencies/include/nlohmann/json.hpp	/^constexpr const auto& from_json = detail::static_const<detail::from_json_fn>::value;$/;"	v	namespace:nlohmann::__anond356d9080510	typeref:typename:const auto &
from_json	dependencies/include/nlohmann/json.hpp	/^void from_json(const BasicJsonType& j, ArithmeticType& val)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	dependencies/include/nlohmann/json.hpp	/^void from_json(const BasicJsonType& j, ConstructibleObjectType& obj)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	dependencies/include/nlohmann/json.hpp	/^void from_json(const BasicJsonType& j, ConstructibleStringType& s)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	dependencies/include/nlohmann/json.hpp	/^void from_json(const BasicJsonType& j, EnumType& e)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	dependencies/include/nlohmann/json.hpp	/^void from_json(const BasicJsonType& j, std::forward_list<T, Allocator>& l)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	dependencies/include/nlohmann/json.hpp	/^void from_json(const BasicJsonType& j, std::map<Key, Value, Compare, Allocator>& m)$/;"	f	namespace:nlohmann::detail	typeref:typename:::value>> void
from_json	dependencies/include/nlohmann/json.hpp	/^void from_json(const BasicJsonType& j, std::pair<A1, A2>& p)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	dependencies/include/nlohmann/json.hpp	/^void from_json(const BasicJsonType& j, std::tuple<Args...>& t)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	dependencies/include/nlohmann/json.hpp	/^void from_json(const BasicJsonType& j, std::unordered_map<Key, Value, Hash, KeyEqual, Allocator>/;"	f	namespace:nlohmann::detail	typeref:typename:::value>> void
from_json	dependencies/include/nlohmann/json.hpp	/^void from_json(const BasicJsonType& j, std::valarray<T>& l)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	dependencies/include/nlohmann/json.hpp	/^void from_json(const BasicJsonType& j, typename BasicJsonType::boolean_t& b)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	dependencies/include/nlohmann/json.hpp	/^void from_json(const BasicJsonType& j, typename BasicJsonType::number_float_t& val)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	dependencies/include/nlohmann/json.hpp	/^void from_json(const BasicJsonType& j, typename BasicJsonType::number_integer_t& val)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	dependencies/include/nlohmann/json.hpp	/^void from_json(const BasicJsonType& j, typename BasicJsonType::number_unsigned_t& val)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	dependencies/include/nlohmann/json.hpp	/^void from_json(const BasicJsonType& j, typename BasicJsonType::string_t& s)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	dependencies/include/nlohmann/json.hpp	/^void from_json(const BasicJsonType& j, typename std::nullptr_t& n)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json_array_impl	dependencies/include/nlohmann/json.hpp	/^auto from_json_array_impl(const BasicJsonType& j, ConstructibleArrayType& arr, priority_tag<1> \//;"	f	namespace:nlohmann::detail	typeref:typename:decltype (arr.reserve (std::declval<typename ConstructibleArrayType::size_type> ()),j.template get<typename ConstructibleArrayType::value_type> (),void ())
from_json_array_impl	dependencies/include/nlohmann/json.hpp	/^auto from_json_array_impl(const BasicJsonType& j, std::array<T, N>& arr,$/;"	f	namespace:nlohmann::detail	typeref:typename:decltype (j.template get<T> (),void ())
from_json_array_impl	dependencies/include/nlohmann/json.hpp	/^void from_json_array_impl(const BasicJsonType& j, ConstructibleArrayType& arr,$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json_array_impl	dependencies/include/nlohmann/json.hpp	/^void from_json_array_impl(const BasicJsonType& j, typename BasicJsonType::array_t& arr, priority/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json_fn	dependencies/include/nlohmann/json.hpp	/^struct from_json_fn$/;"	s	namespace:nlohmann::detail
from_json_function	dependencies/include/nlohmann/json.hpp	/^        is_detected_exact<T, from_json_function, serializer,$/;"	m	struct:nlohmann::detail::has_non_default_from_json	typeref:typename:bool
from_json_function	dependencies/include/nlohmann/json.hpp	/^        is_detected_exact<void, from_json_function, serializer,$/;"	m	struct:nlohmann::detail::has_from_json	typeref:typename:bool
from_json_function	dependencies/include/nlohmann/json.hpp	/^using from_json_function = decltype(T::from_json(std::declval<Args>()...));$/;"	t	namespace:nlohmann::detail
from_json_tuple_impl	dependencies/include/nlohmann/json.hpp	/^void from_json_tuple_impl(const BasicJsonType& j, Tuple& t, index_sequence<Idx...> \/*unused*\/)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_msgpack	dependencies/include/nlohmann/json.hpp	/^    static basic_json from_msgpack(A1 && a1, A2 && a2,$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
from_msgpack	dependencies/include/nlohmann/json.hpp	/^    static basic_json from_msgpack(detail::input_adapter&& i,$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
from_ubjson	dependencies/include/nlohmann/json.hpp	/^    static basic_json from_ubjson(A1 && a1, A2 && a2,$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
from_ubjson	dependencies/include/nlohmann/json.hpp	/^    static basic_json from_ubjson(detail::input_adapter&& i,$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
front	dependencies/include/nlohmann/json.hpp	/^    const_reference front() const$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reference
front	dependencies/include/nlohmann/json.hpp	/^    reference front()$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
g	dependencies/include/SFML/Graphics/Color.hpp	/^    Uint8 g; \/\/\/< Green component$/;"	m	class:sf::Color	typeref:typename:Uint8
get	dependencies/include/nlohmann/json.hpp	/^    BasicJsonType get() const$/;"	f	class:nlohmann::basic_json	typeref:typename:BasicJsonType
get	dependencies/include/nlohmann/json.hpp	/^    auto get() noexcept -> decltype(std::declval<basic_json_t&>().template get_ptr<PointerType>(/;"	f	class:nlohmann::basic_json	typeref:typename:auto
get	dependencies/include/nlohmann/json.hpp	/^    basic_json get() const$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
get	dependencies/include/nlohmann/json.hpp	/^    constexpr auto get() const noexcept -> decltype(std::declval<const basic_json_t&>().template/;"	f	class:nlohmann::basic_json	typeref:typename:auto
get	dependencies/include/nlohmann/json.hpp	/^    int get()$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:int
get	dependencies/include/nlohmann/json.hpp	/^    std::char_traits<char>::int_type get()$/;"	f	class:nlohmann::detail::lexer	typeref:typename:std::char_traits<char>::int_type
get	dependencies/include/nlohmann/json.hpp	/^auto get(const nlohmann::detail::iteration_proxy_value<IteratorType>& i) -> decltype(i.key())$/;"	f	namespace:nlohmann::detail	typeref:typename:decltype (i.key ())
get	dependencies/include/nlohmann/json.hpp	/^auto get(const nlohmann::detail::iteration_proxy_value<IteratorType>& i) -> decltype(i.value())$/;"	f	namespace:nlohmann::detail	typeref:typename:decltype (i.value ())
get_allocator	dependencies/include/nlohmann/json.hpp	/^    static allocator_type get_allocator()$/;"	f	class:nlohmann::basic_json	typeref:typename:allocator_type
get_and_create	dependencies/include/nlohmann/json.hpp	/^    BasicJsonType& get_and_create(BasicJsonType& j) const$/;"	f	class:nlohmann::json_pointer	typeref:typename:BasicJsonType &
get_arithmetic_value	dependencies/include/nlohmann/json.hpp	/^void get_arithmetic_value(const BasicJsonType& j, ArithmeticType& val)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
get_bson_cstr	dependencies/include/nlohmann/json.hpp	/^    bool get_bson_cstr(string_t& result)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
get_bson_string	dependencies/include/nlohmann/json.hpp	/^    bool get_bson_string(const NumberType len, string_t& result)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
get_cached_power_for_binary_exponent	dependencies/include/nlohmann/json.hpp	/^inline cached_power get_cached_power_for_binary_exponent(int e)$/;"	f	namespace:nlohmann::detail::dtoa_impl	typeref:typename:cached_power
get_cbor_array	dependencies/include/nlohmann/json.hpp	/^    bool get_cbor_array(const std::size_t len)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
get_cbor_float_prefix	dependencies/include/nlohmann/json.hpp	/^    static constexpr CharType get_cbor_float_prefix(double \/*unused*\/)$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:CharType
get_cbor_float_prefix	dependencies/include/nlohmann/json.hpp	/^    static constexpr CharType get_cbor_float_prefix(float \/*unused*\/)$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:CharType
get_cbor_object	dependencies/include/nlohmann/json.hpp	/^    bool get_cbor_object(const std::size_t len)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
get_cbor_string	dependencies/include/nlohmann/json.hpp	/^    bool get_cbor_string(string_t& result)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
get_character	dependencies/include/nlohmann/json.hpp	/^    std::char_traits<char>::int_type get_character() noexcept override$/;"	f	class:nlohmann::detail::file_input_adapter	typeref:typename:std::char_traits<char>::int_type
get_character	dependencies/include/nlohmann/json.hpp	/^    std::char_traits<char>::int_type get_character() noexcept override$/;"	f	class:nlohmann::detail::input_buffer_adapter	typeref:typename:std::char_traits<char>::int_type
get_character	dependencies/include/nlohmann/json.hpp	/^    std::char_traits<char>::int_type get_character() noexcept override$/;"	f	class:nlohmann::detail::wide_string_input_adapter	typeref:typename:std::char_traits<char>::int_type
get_character	dependencies/include/nlohmann/json.hpp	/^    std::char_traits<char>::int_type get_character() override$/;"	f	class:nlohmann::detail::input_stream_adapter	typeref:typename:std::char_traits<char>::int_type
get_checked	dependencies/include/nlohmann/json.hpp	/^    BasicJsonType& get_checked(BasicJsonType* ptr) const$/;"	f	class:nlohmann::json_pointer	typeref:typename:BasicJsonType &
get_checked	dependencies/include/nlohmann/json.hpp	/^    const BasicJsonType& get_checked(const BasicJsonType* ptr) const$/;"	f	class:nlohmann::json_pointer	typeref:typename:const BasicJsonType &
get_codepoint	dependencies/include/nlohmann/json.hpp	/^    int get_codepoint()$/;"	f	class:nlohmann::detail::lexer	typeref:typename:int
get_decimal_point	dependencies/include/nlohmann/json.hpp	/^    static char get_decimal_point() noexcept$/;"	f	class:nlohmann::detail::lexer	typeref:typename:char
get_error_message	dependencies/include/nlohmann/json.hpp	/^    constexpr const char* get_error_message() const noexcept$/;"	f	class:nlohmann::detail::lexer	typeref:typename:const char *
get_ignore_noop	dependencies/include/nlohmann/json.hpp	/^    int get_ignore_noop()$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:int
get_impl	dependencies/include/nlohmann/json.hpp	/^    boolean_t get_impl(boolean_t* \/*unused*\/) const$/;"	f	class:nlohmann::basic_json	typeref:typename:boolean_t
get_impl_ptr	dependencies/include/nlohmann/json.hpp	/^    array_t* get_impl_ptr(array_t* \/*unused*\/) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:array_t *
get_impl_ptr	dependencies/include/nlohmann/json.hpp	/^    boolean_t* get_impl_ptr(boolean_t* \/*unused*\/) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:boolean_t *
get_impl_ptr	dependencies/include/nlohmann/json.hpp	/^    constexpr const array_t* get_impl_ptr(const array_t* \/*unused*\/) const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const array_t *
get_impl_ptr	dependencies/include/nlohmann/json.hpp	/^    constexpr const boolean_t* get_impl_ptr(const boolean_t* \/*unused*\/) const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const boolean_t *
get_impl_ptr	dependencies/include/nlohmann/json.hpp	/^    constexpr const number_float_t* get_impl_ptr(const number_float_t* \/*unused*\/) const noexc/;"	f	class:nlohmann::basic_json	typeref:typename:const number_float_t *
get_impl_ptr	dependencies/include/nlohmann/json.hpp	/^    constexpr const number_integer_t* get_impl_ptr(const number_integer_t* \/*unused*\/) const n/;"	f	class:nlohmann::basic_json	typeref:typename:const number_integer_t *
get_impl_ptr	dependencies/include/nlohmann/json.hpp	/^    constexpr const number_unsigned_t* get_impl_ptr(const number_unsigned_t* \/*unused*\/) const/;"	f	class:nlohmann::basic_json	typeref:typename:const number_unsigned_t *
get_impl_ptr	dependencies/include/nlohmann/json.hpp	/^    constexpr const object_t* get_impl_ptr(const object_t* \/*unused*\/) const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const object_t *
get_impl_ptr	dependencies/include/nlohmann/json.hpp	/^    constexpr const string_t* get_impl_ptr(const string_t* \/*unused*\/) const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const string_t *
get_impl_ptr	dependencies/include/nlohmann/json.hpp	/^    number_float_t* get_impl_ptr(number_float_t* \/*unused*\/) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:number_float_t *
get_impl_ptr	dependencies/include/nlohmann/json.hpp	/^    number_integer_t* get_impl_ptr(number_integer_t* \/*unused*\/) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:number_integer_t *
get_impl_ptr	dependencies/include/nlohmann/json.hpp	/^    number_unsigned_t* get_impl_ptr(number_unsigned_t* \/*unused*\/) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:number_unsigned_t *
get_impl_ptr	dependencies/include/nlohmann/json.hpp	/^    object_t* get_impl_ptr(object_t* \/*unused*\/) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:object_t *
get_impl_ptr	dependencies/include/nlohmann/json.hpp	/^    string_t* get_impl_ptr(string_t* \/*unused*\/) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:string_t *
get_msgpack_array	dependencies/include/nlohmann/json.hpp	/^    bool get_msgpack_array(const std::size_t len)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
get_msgpack_float_prefix	dependencies/include/nlohmann/json.hpp	/^    static constexpr CharType get_msgpack_float_prefix(double \/*unused*\/)$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:CharType
get_msgpack_float_prefix	dependencies/include/nlohmann/json.hpp	/^    static constexpr CharType get_msgpack_float_prefix(float \/*unused*\/)$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:CharType
get_msgpack_object	dependencies/include/nlohmann/json.hpp	/^    bool get_msgpack_object(const std::size_t len)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
get_msgpack_string	dependencies/include/nlohmann/json.hpp	/^    bool get_msgpack_string(string_t& result)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
get_number	dependencies/include/nlohmann/json.hpp	/^    bool get_number(const input_format_t format, NumberType& result)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
get_number_float	dependencies/include/nlohmann/json.hpp	/^    constexpr number_float_t get_number_float() const noexcept$/;"	f	class:nlohmann::detail::lexer	typeref:typename:number_float_t
get_number_integer	dependencies/include/nlohmann/json.hpp	/^    constexpr number_integer_t get_number_integer() const noexcept$/;"	f	class:nlohmann::detail::lexer	typeref:typename:number_integer_t
get_number_unsigned	dependencies/include/nlohmann/json.hpp	/^    constexpr number_unsigned_t get_number_unsigned() const noexcept$/;"	f	class:nlohmann::detail::lexer	typeref:typename:number_unsigned_t
get_position	dependencies/include/nlohmann/json.hpp	/^    constexpr position_t get_position() const noexcept$/;"	f	class:nlohmann::detail::lexer	typeref:typename:position_t
get_private	dependencies/include/v8.h	/^  PrivateData* get_private() const { return private_; }$/;"	f	class:v8::PropertyDescriptor	typeref:typename:PrivateData *
get_ptr	dependencies/include/nlohmann/json.hpp	/^    auto get_ptr() noexcept -> decltype(std::declval<basic_json_t&>().get_impl_ptr(std::declval</;"	f	class:nlohmann::basic_json	typeref:typename:auto
get_ptr	dependencies/include/nlohmann/json.hpp	/^    constexpr auto get_ptr() const noexcept -> decltype(std::declval<const basic_json_t&>().get_/;"	f	class:nlohmann::basic_json	typeref:typename:auto
get_ref	dependencies/include/nlohmann/json.hpp	/^    ReferenceType get_ref() const$/;"	f	class:nlohmann::basic_json	typeref:typename:ReferenceType
get_ref	dependencies/include/nlohmann/json.hpp	/^    ReferenceType get_ref()$/;"	f	class:nlohmann::basic_json	typeref:typename:ReferenceType
get_ref_impl	dependencies/include/nlohmann/json.hpp	/^    static ReferenceType get_ref_impl(ThisType& obj)$/;"	f	class:nlohmann::basic_json	typeref:typename:ReferenceType
get_string	dependencies/include/nlohmann/json.hpp	/^    bool get_string(const input_format_t format,$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
get_string	dependencies/include/nlohmann/json.hpp	/^    string_t& get_string()$/;"	f	class:nlohmann::detail::lexer	typeref:typename:string_t &
get_template_function	dependencies/include/nlohmann/json.hpp	/^using get_template_function = decltype(std::declval<T>().template get<U>());$/;"	t	namespace:nlohmann::detail
get_to	dependencies/include/nlohmann/json.hpp	/^    ValueType & get_to(ValueType& v) const noexcept(noexcept($/;"	f	class:nlohmann::basic_json	typeref:typename:ValueType &
get_token	dependencies/include/nlohmann/json.hpp	/^    token_type get_token()$/;"	f	class:nlohmann::detail::parser	typeref:typename:token_type
get_token_string	dependencies/include/nlohmann/json.hpp	/^    std::string get_token_string() const$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:std::string
get_token_string	dependencies/include/nlohmann/json.hpp	/^    std::string get_token_string() const$/;"	f	class:nlohmann::detail::lexer	typeref:typename:std::string
get_ubjson_array	dependencies/include/nlohmann/json.hpp	/^    bool get_ubjson_array()$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
get_ubjson_float_prefix	dependencies/include/nlohmann/json.hpp	/^    static constexpr CharType get_ubjson_float_prefix(double \/*unused*\/)$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:CharType
get_ubjson_float_prefix	dependencies/include/nlohmann/json.hpp	/^    static constexpr CharType get_ubjson_float_prefix(float \/*unused*\/)$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:CharType
get_ubjson_object	dependencies/include/nlohmann/json.hpp	/^    bool get_ubjson_object()$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
get_ubjson_size_type	dependencies/include/nlohmann/json.hpp	/^    bool get_ubjson_size_type(std::pair<std::size_t, int>& result)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
get_ubjson_size_value	dependencies/include/nlohmann/json.hpp	/^    bool get_ubjson_size_value(std::size_t& result)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
get_ubjson_string	dependencies/include/nlohmann/json.hpp	/^    bool get_ubjson_string(string_t& result, const bool get_char = true)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
get_ubjson_value	dependencies/include/nlohmann/json.hpp	/^    bool get_ubjson_value(const int prefix)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
get_unchecked	dependencies/include/nlohmann/json.hpp	/^    BasicJsonType& get_unchecked(BasicJsonType* ptr) const$/;"	f	class:nlohmann::json_pointer	typeref:typename:BasicJsonType &
get_unchecked	dependencies/include/nlohmann/json.hpp	/^    const BasicJsonType& get_unchecked(const BasicJsonType* ptr) const$/;"	f	class:nlohmann::json_pointer	typeref:typename:const BasicJsonType &
get_value	dependencies/include/nlohmann/json.hpp	/^    constexpr difference_type get_value() const noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:difference_type
getter	dependencies/include/v8.h	/^  GenericNamedPropertyGetterCallback getter;$/;"	m	struct:v8::NamedPropertyHandlerConfiguration	typeref:typename:GenericNamedPropertyGetterCallback
getter	dependencies/include/v8.h	/^  IndexedPropertyGetterCallback getter;$/;"	m	struct:v8::IndexedPropertyHandlerConfiguration	typeref:typename:IndexedPropertyGetterCallback
glStatesSet	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^        bool      glStatesSet;    \/\/\/< Are our internal GL states set yet?$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:bool
glyphs	dependencies/include/SFML/Graphics/Font.hpp	/^        GlyphTable       glyphs;  \/\/\/< Table mapping code points to their corresponding glyph$/;"	m	struct:sf::Font::Page	typeref:typename:GlyphTable
grisu2	dependencies/include/nlohmann/json.hpp	/^inline void grisu2(char* buf, int& len, int& decimal_exponent,$/;"	f	namespace:nlohmann::detail::dtoa_impl	typeref:typename:void
grisu2	dependencies/include/nlohmann/json.hpp	/^void grisu2(char* buf, int& len, int& decimal_exponent, FloatType value)$/;"	f	namespace:nlohmann::detail::dtoa_impl	typeref:typename:void
grisu2_digit_gen	dependencies/include/nlohmann/json.hpp	/^inline void grisu2_digit_gen(char* buffer, int& length, int& decimal_exponent,$/;"	f	namespace:nlohmann::detail::dtoa_impl	typeref:typename:void
grisu2_round	dependencies/include/nlohmann/json.hpp	/^inline void grisu2_round(char* buf, int len, uint64_t dist, uint64_t delta,$/;"	f	namespace:nlohmann::detail::dtoa_impl	typeref:typename:void
groups	dependencies/include/v8-profiler.h	/^    RetainerGroups groups;$/;"	m	struct:v8::HeapProfiler::RetainerInfos	typeref:typename:RetainerGroups
handleEvent	src/Game.cpp	/^void Game::handleEvent(){$/;"	f	class:Game	typeref:typename:void
handle_value	dependencies/include/nlohmann/json.hpp	/^    BasicJsonType* handle_value(Value&& v)$/;"	f	class:nlohmann::detail::json_sax_dom_parser	typeref:typename:BasicJsonType *
handle_value	dependencies/include/nlohmann/json.hpp	/^    std::pair<bool, BasicJsonType*> handle_value(Value&& v, const bool skip_callback = false)$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:std::pair<bool,BasicJsonType * >
hasMemoryOnConsole	dependencies/include/v8-inspector.h	/^  bool hasMemoryOnConsole;$/;"	m	class:v8_inspector::V8ContextInfo	typeref:typename:bool
has_external_callback	dependencies/include/v8-profiler.h	/^  bool has_external_callback : 1;$/;"	m	struct:v8::TickSample	typeref:typename:bool:1
has_from_json	dependencies/include/nlohmann/json.hpp	/^struct has_from_json : std::false_type {};$/;"	s	namespace:nlohmann::detail
has_from_json	dependencies/include/nlohmann/json.hpp	/^struct has_from_json<BasicJsonType, T,$/;"	s	namespace:nlohmann::detail
has_non_default_from_json	dependencies/include/nlohmann/json.hpp	/^struct has_non_default_from_json : std::false_type {};$/;"	s	namespace:nlohmann::detail
has_non_default_from_json	dependencies/include/nlohmann/json.hpp	/^struct has_non_default_from_json<BasicJsonType, T, enable_if_t<not is_basic_json<T>::value>>$/;"	s	namespace:nlohmann::detail
has_to_json	dependencies/include/nlohmann/json.hpp	/^struct has_to_json : std::false_type {};$/;"	s	namespace:nlohmann::detail
has_to_json	dependencies/include/nlohmann/json.hpp	/^struct has_to_json<BasicJsonType, T, enable_if_t<not is_basic_json<T>::value>>$/;"	s	namespace:nlohmann::detail
hash	dependencies/include/nlohmann/json.hpp	/^struct hash<nlohmann::json>$/;"	s	namespace:std
height	dependencies/include/SFML/Graphics/Font.hpp	/^        unsigned int height; \/\/\/< Height of the row$/;"	m	struct:sf::Font::Row	typeref:typename:unsigned int
height	dependencies/include/SFML/Graphics/Rect.hpp	/^    T height; \/\/\/< Height of the rectangle$/;"	m	class:sf::Rect	typeref:typename:T
height	dependencies/include/SFML/Window/Event.hpp	/^        unsigned int height; \/\/\/< New height, in pixels$/;"	m	struct:sf::Event::SizeEvent	typeref:typename:unsigned int
height	dependencies/include/SFML/Window/VideoMode.hpp	/^    unsigned int height;       \/\/\/< Video mode height, in pixels$/;"	m	class:sf::VideoMode	typeref:typename:unsigned int
hit_count	dependencies/include/v8-profiler.h	/^    unsigned int hit_count;$/;"	m	struct:v8::CpuProfileNode::LineTick	typeref:typename:unsigned int
host_defined_options	dependencies/include/v8.h	/^    Local<PrimitiveArray> host_defined_options;$/;"	m	class:v8::ScriptCompiler::Source	typeref:typename:Local<PrimitiveArray>
host_defined_options_	dependencies/include/v8.h	/^  Local<PrimitiveArray> host_defined_options_;$/;"	m	class:v8::ScriptOrigin	typeref:typename:Local<PrimitiveArray>
humanReadableName	dependencies/include/v8-inspector.h	/^  StringView humanReadableName;$/;"	m	class:v8_inspector::V8ContextInfo	typeref:typename:StringView
ia	dependencies/include/nlohmann/json.hpp	/^    detail::input_adapter_t ia = nullptr;$/;"	m	class:nlohmann::detail::lexer	typeref:typename:detail::input_adapter_t
ia	dependencies/include/nlohmann/json.hpp	/^    input_adapter_t ia = nullptr;$/;"	m	class:nlohmann::detail::binary_reader	typeref:typename:input_adapter_t
ia	dependencies/include/nlohmann/json.hpp	/^    input_adapter_t ia = nullptr;$/;"	m	class:nlohmann::detail::input_adapter	typeref:typename:input_adapter_t
id	dependencies/include/libplatform/v8-tracing.h	/^  uint64_t id() const { return id_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:uint64_t
id	dependencies/include/nlohmann/json.hpp	/^    const int id;$/;"	m	class:nlohmann::detail::exception	typeref:typename:const int
id	dependencies/include/v8-inspector.h	/^  uintptr_t id;$/;"	m	struct:v8_inspector::V8StackTraceId	typeref:typename:uintptr_t
id_	dependencies/include/libplatform/v8-tracing.h	/^  uint64_t id_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:uint64_t
ignore	dependencies/include/nlohmann/json.hpp	/^    ignore   \/\/\/< ignore invalid UTF-8 sequences$/;"	e	enum:nlohmann::detail::error_handler_t
impl	dependencies/include/v8-util.h	/^  typename Traits::Impl* impl() { return &impl_; }$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:Traits::Impl *
impl	dependencies/include/v8.h	/^    internal::ScriptStreamingData* impl() const { return impl_.get(); }$/;"	f	class:v8::ScriptCompiler::StreamedSource	typeref:typename:internal::ScriptStreamingData *
impl_	dependencies/include/v8-util.h	/^  typename Traits::Impl impl_;$/;"	m	class:v8::PersistentValueMapBase	typeref:typename:Traits::Impl
impl_	dependencies/include/v8-util.h	/^  typename Traits::Impl impl_;$/;"	m	class:v8::PersistentValueVector	typeref:typename:Traits::Impl
impl_	dependencies/include/v8.h	/^    std::unique_ptr<internal::ScriptStreamingData> impl_;$/;"	m	class:v8::ScriptCompiler::StreamedSource	typeref:typename:std::unique_ptr<internal::ScriptStreamingData>
impl_	dependencies/include/v8.h	/^  std::unique_ptr<WasmStreamingImpl> impl_;$/;"	m	class:v8::WasmStreaming	typeref:typename:std::unique_ptr<WasmStreamingImpl>
implicit_args_	dependencies/include/v8.h	/^  internal::Address* implicit_args_;$/;"	m	class:v8::FunctionCallbackInfo	typeref:typename:internal::Address *
included_categories_	dependencies/include/libplatform/v8-tracing.h	/^  StringList included_categories_;$/;"	m	class:v8::platform::tracing::TraceConfig	typeref:typename:StringList
indent_char	dependencies/include/nlohmann/json.hpp	/^    const char indent_char;$/;"	m	class:nlohmann::detail::serializer	typeref:typename:const char
indent_string	dependencies/include/nlohmann/json.hpp	/^    string_t indent_string;$/;"	m	class:nlohmann::detail::serializer	typeref:typename:string_t
index	dependencies/include/v8-profiler.h	/^  uint32_t index;  \/\/ Index of the time interval that was changed.$/;"	m	struct:v8::HeapStatsUpdate	typeref:typename:uint32_t
index_sequence	dependencies/include/nlohmann/json.hpp	/^struct index_sequence$/;"	s	namespace:nlohmann::detail
index_sequence_for	dependencies/include/nlohmann/json.hpp	/^using index_sequence_for = make_index_sequence<sizeof...(Ts)>;$/;"	t	namespace:nlohmann::detail
info_arch	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_arch	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_cray	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_cray	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_language_dialect_default	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default =$/;"	v	typeref:typename:const char *
info_language_dialect_default	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v	typeref:typename:const char *
info_platform	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_platform	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate_version	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_simulate_version	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
init	src/Game.cpp	/^Game::init(const char *title, int xpos, int ypos, int width, int height, bool fullscreen){$/;"	f	class:Game
initializer_list_t	dependencies/include/nlohmann/json.hpp	/^    using initializer_list_t = std::initializer_list<detail::json_ref<basic_json>>;$/;"	t	class:nlohmann::basic_json	typeref:typename:std::initializer_list<detail::json_ref<basic_json>>
input_adapter	dependencies/include/nlohmann/json.hpp	/^    input_adapter(CharT b)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	dependencies/include/nlohmann/json.hpp	/^    input_adapter(CharT b, std::size_t l)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	dependencies/include/nlohmann/json.hpp	/^    input_adapter(IteratorType first, IteratorType last)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	dependencies/include/nlohmann/json.hpp	/^    input_adapter(T (&array)[N])$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	dependencies/include/nlohmann/json.hpp	/^    input_adapter(const ContiguousContainer& c)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	dependencies/include/nlohmann/json.hpp	/^    input_adapter(const std::u16string& ws)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	dependencies/include/nlohmann/json.hpp	/^    input_adapter(const std::u32string& ws)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	dependencies/include/nlohmann/json.hpp	/^    input_adapter(const std::wstring& ws)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	dependencies/include/nlohmann/json.hpp	/^    input_adapter(std::FILE* file)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	dependencies/include/nlohmann/json.hpp	/^    input_adapter(std::istream& i)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	dependencies/include/nlohmann/json.hpp	/^    input_adapter(std::istream&& i)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	dependencies/include/nlohmann/json.hpp	/^class input_adapter$/;"	c	namespace:nlohmann::detail
input_adapter_protocol	dependencies/include/nlohmann/json.hpp	/^struct input_adapter_protocol$/;"	s	namespace:nlohmann::detail
input_adapter_t	dependencies/include/nlohmann/json.hpp	/^using input_adapter_t = std::shared_ptr<input_adapter_protocol>;$/;"	t	namespace:nlohmann::detail	typeref:typename:std::shared_ptr<input_adapter_protocol>
input_buffer_adapter	dependencies/include/nlohmann/json.hpp	/^    input_buffer_adapter(const char* b, const std::size_t l) noexcept$/;"	f	class:nlohmann::detail::input_buffer_adapter
input_buffer_adapter	dependencies/include/nlohmann/json.hpp	/^class input_buffer_adapter : public input_adapter_protocol$/;"	c	namespace:nlohmann::detail
input_format_t	dependencies/include/nlohmann/json.hpp	/^    using input_format_t = detail::input_format_t;$/;"	t	class:nlohmann::basic_json	typeref:typename:detail::input_format_t
input_format_t	dependencies/include/nlohmann/json.hpp	/^enum class input_format_t { json, cbor, msgpack, ubjson, bson };$/;"	g	namespace:nlohmann::detail
input_stream_adapter	dependencies/include/nlohmann/json.hpp	/^    explicit input_stream_adapter(std::istream& i)$/;"	f	class:nlohmann::detail::input_stream_adapter
input_stream_adapter	dependencies/include/nlohmann/json.hpp	/^class input_stream_adapter : public input_adapter_protocol$/;"	c	namespace:nlohmann::detail
insert	dependencies/include/nlohmann/json.hpp	/^    iterator insert(const_iterator pos, basic_json&& val)$/;"	f	class:nlohmann::basic_json	typeref:typename:iterator
insert	dependencies/include/nlohmann/json.hpp	/^    iterator insert(const_iterator pos, const basic_json& val)$/;"	f	class:nlohmann::basic_json	typeref:typename:iterator
insert	dependencies/include/nlohmann/json.hpp	/^    iterator insert(const_iterator pos, const_iterator first, const_iterator last)$/;"	f	class:nlohmann::basic_json	typeref:typename:iterator
insert	dependencies/include/nlohmann/json.hpp	/^    iterator insert(const_iterator pos, initializer_list_t ilist)$/;"	f	class:nlohmann::basic_json	typeref:typename:iterator
insert	dependencies/include/nlohmann/json.hpp	/^    iterator insert(const_iterator pos, size_type cnt, const basic_json& val)$/;"	f	class:nlohmann::basic_json	typeref:typename:iterator
insert	dependencies/include/nlohmann/json.hpp	/^    void insert(const_iterator first, const_iterator last)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
insert_iterator	dependencies/include/nlohmann/json.hpp	/^    iterator insert_iterator(const_iterator pos, Args&& ... args)$/;"	f	class:nlohmann::basic_json	typeref:typename:iterator
installAdditionalCommandLineAPI	dependencies/include/v8-inspector.h	/^  virtual void installAdditionalCommandLineAPI(v8::Local<v8::Context>,$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
internal	dependencies/include/v8-internal.h	/^namespace internal {$/;"	n	namespace:v8
internal	dependencies/include/v8.h	/^namespace internal {$/;"	n	namespace:v8
internal_iterator	dependencies/include/nlohmann/json.hpp	/^    using internal_iterator = ::nlohmann::detail::internal_iterator<BasicJsonType>;$/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::detail::internal_iterator<BasicJsonType>
internal_iterator	dependencies/include/nlohmann/json.hpp	/^template<typename BasicJsonType> struct internal_iterator$/;"	s	namespace:nlohmann::detail
internal_listener_	dependencies/include/v8-profiler.h	/^  void* internal_listener_;$/;"	m	class:v8::CodeEventHandler	typeref:typename:void *
intersects	dependencies/include/SFML/Graphics/Rect.inl	/^bool Rect<T>::intersects(const Rect<T>& rectangle) const$/;"	f	class:Rect	typeref:typename:bool
intersects	dependencies/include/SFML/Graphics/Rect.inl	/^bool Rect<T>::intersects(const Rect<T>& rectangle, Rect<T>& intersection) const$/;"	f	class:Rect	typeref:typename:bool
invalid	dependencies/include/nlohmann/json.hpp	/^        enum class patch_operations {add, remove, replace, move, copy, test, invalid};$/;"	e	enum:nlohmann::basic_json::patch::patch_operations
invalid_iterator	dependencies/include/nlohmann/json.hpp	/^    invalid_iterator(int id_, const char* what_arg)$/;"	f	class:nlohmann::detail::invalid_iterator
invalid_iterator	dependencies/include/nlohmann/json.hpp	/^    using invalid_iterator = detail::invalid_iterator;$/;"	t	class:nlohmann::basic_json	typeref:typename:detail::invalid_iterator
invalid_iterator	dependencies/include/nlohmann/json.hpp	/^class invalid_iterator : public exception$/;"	c	namespace:nlohmann::detail
is	dependencies/include/nlohmann/json.hpp	/^    std::istream& is;$/;"	m	class:nlohmann::detail::input_stream_adapter	typeref:typename:std::istream &
is8Bit	dependencies/include/v8-inspector.h	/^  bool is8Bit() const { return m_is8Bit; }$/;"	f	class:v8_inspector::StringView	typeref:typename:bool
isInspectableHeapObject	dependencies/include/v8-inspector.h	/^  virtual bool isInspectableHeapObject(v8::Local<v8::Object>) { return true; }$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:bool
isRunning	src/Game.hpp	/^  bool isRunning;$/;"	m	class:Game	typeref:typename:bool
is_array	dependencies/include/nlohmann/json.hpp	/^    constexpr bool is_array() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
is_basic_json	dependencies/include/nlohmann/json.hpp	/^struct is_basic_json<NLOHMANN_BASIC_JSON_TPL> : std::true_type {};$/;"	s	namespace:nlohmann::detail
is_basic_json	dependencies/include/nlohmann/json.hpp	/^template<typename> struct is_basic_json : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_begin	dependencies/include/nlohmann/json.hpp	/^    constexpr bool is_begin() const noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:bool
is_boolean	dependencies/include/nlohmann/json.hpp	/^    constexpr bool is_boolean() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
is_compatible_array_type	dependencies/include/nlohmann/json.hpp	/^struct is_compatible_array_type$/;"	s	namespace:nlohmann::detail
is_compatible_array_type_impl	dependencies/include/nlohmann/json.hpp	/^struct is_compatible_array_type_impl : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_compatible_array_type_impl	dependencies/include/nlohmann/json.hpp	/^struct is_compatible_array_type_impl <$/;"	s	namespace:nlohmann::detail
is_compatible_integer_type	dependencies/include/nlohmann/json.hpp	/^struct is_compatible_integer_type$/;"	s	namespace:nlohmann::detail
is_compatible_integer_type_impl	dependencies/include/nlohmann/json.hpp	/^struct is_compatible_integer_type_impl : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_compatible_integer_type_impl	dependencies/include/nlohmann/json.hpp	/^struct is_compatible_integer_type_impl <$/;"	s	namespace:nlohmann::detail
is_compatible_object_type	dependencies/include/nlohmann/json.hpp	/^struct is_compatible_object_type$/;"	s	namespace:nlohmann::detail
is_compatible_object_type_impl	dependencies/include/nlohmann/json.hpp	/^struct is_compatible_object_type_impl : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_compatible_object_type_impl	dependencies/include/nlohmann/json.hpp	/^struct is_compatible_object_type_impl <$/;"	s	namespace:nlohmann::detail
is_compatible_string_type	dependencies/include/nlohmann/json.hpp	/^struct is_compatible_string_type$/;"	s	namespace:nlohmann::detail
is_compatible_string_type_impl	dependencies/include/nlohmann/json.hpp	/^struct is_compatible_string_type_impl : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_compatible_string_type_impl	dependencies/include/nlohmann/json.hpp	/^struct is_compatible_string_type_impl <$/;"	s	namespace:nlohmann::detail
is_compatible_type	dependencies/include/nlohmann/json.hpp	/^struct is_compatible_type$/;"	s	namespace:nlohmann::detail
is_compatible_type_impl	dependencies/include/nlohmann/json.hpp	/^struct is_compatible_type_impl <$/;"	s	namespace:nlohmann::detail
is_compatible_type_impl	dependencies/include/nlohmann/json.hpp	/^struct is_compatible_type_impl: std::false_type {};$/;"	s	namespace:nlohmann::detail
is_complete_type	dependencies/include/nlohmann/json.hpp	/^struct is_complete_type : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_complete_type	dependencies/include/nlohmann/json.hpp	/^struct is_complete_type<T, decltype(void(sizeof(T)))> : std::true_type {};$/;"	s	namespace:nlohmann::detail
is_constructible_array_type	dependencies/include/nlohmann/json.hpp	/^struct is_constructible_array_type$/;"	s	namespace:nlohmann::detail
is_constructible_array_type_impl	dependencies/include/nlohmann/json.hpp	/^struct is_constructible_array_type_impl : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_constructible_array_type_impl	dependencies/include/nlohmann/json.hpp	/^struct is_constructible_array_type_impl <$/;"	s	namespace:nlohmann::detail
is_constructible_object_type	dependencies/include/nlohmann/json.hpp	/^struct is_constructible_object_type$/;"	s	namespace:nlohmann::detail
is_constructible_object_type_impl	dependencies/include/nlohmann/json.hpp	/^struct is_constructible_object_type_impl : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_constructible_object_type_impl	dependencies/include/nlohmann/json.hpp	/^struct is_constructible_object_type_impl <$/;"	s	namespace:nlohmann::detail
is_constructible_string_type	dependencies/include/nlohmann/json.hpp	/^struct is_constructible_string_type$/;"	s	namespace:nlohmann::detail
is_constructible_string_type_impl	dependencies/include/nlohmann/json.hpp	/^struct is_constructible_string_type_impl : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_constructible_string_type_impl	dependencies/include/nlohmann/json.hpp	/^struct is_constructible_string_type_impl <$/;"	s	namespace:nlohmann::detail
is_detected	dependencies/include/nlohmann/json.hpp	/^using is_detected = typename detector<nonesuch, void, Op, Args...>::value_t;$/;"	t	namespace:nlohmann::detail	typeref:typename:detector<nonesuch,void,Op,Args...>::value_t
is_detected_convertible	dependencies/include/nlohmann/json.hpp	/^using is_detected_convertible =$/;"	t	namespace:nlohmann::detail	typeref:typename:std::is_convertible<detected_t<Op,Args...>,To>
is_detected_exact	dependencies/include/nlohmann/json.hpp	/^using is_detected_exact = std::is_same<Expected, detected_t<Op, Args...>>;$/;"	t	namespace:nlohmann::detail	typeref:typename:std::is_same<Expected,detected_t<Op,Args...>>
is_discarded	dependencies/include/nlohmann/json.hpp	/^    constexpr bool is_discarded() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
is_end	dependencies/include/nlohmann/json.hpp	/^    constexpr bool is_end() const noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:bool
is_errored	dependencies/include/nlohmann/json.hpp	/^    constexpr bool is_errored() const$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:bool
is_errored	dependencies/include/nlohmann/json.hpp	/^    constexpr bool is_errored() const$/;"	f	class:nlohmann::detail::json_sax_dom_parser	typeref:typename:bool
is_iterator_traits	dependencies/include/nlohmann/json.hpp	/^struct is_iterator_traits : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_iterator_traits	dependencies/include/nlohmann/json.hpp	/^struct is_iterator_traits<iterator_traits<T>>$/;"	s	namespace:nlohmann::detail
is_little_endian	dependencies/include/nlohmann/json.hpp	/^    const bool is_little_endian = binary_reader<BasicJsonType>::little_endianess();$/;"	m	class:nlohmann::detail::binary_writer	typeref:typename:const bool
is_little_endian	dependencies/include/nlohmann/json.hpp	/^    const bool is_little_endian = little_endianess();$/;"	m	class:nlohmann::detail::binary_reader	typeref:typename:const bool
is_null	dependencies/include/nlohmann/json.hpp	/^    constexpr bool is_null() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
is_number	dependencies/include/nlohmann/json.hpp	/^    constexpr bool is_number() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
is_number_float	dependencies/include/nlohmann/json.hpp	/^    constexpr bool is_number_float() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
is_number_integer	dependencies/include/nlohmann/json.hpp	/^    constexpr bool is_number_integer() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
is_number_unsigned	dependencies/include/nlohmann/json.hpp	/^    constexpr bool is_number_unsigned() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
is_object	dependencies/include/nlohmann/json.hpp	/^    constexpr bool is_object() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
is_primitive	dependencies/include/nlohmann/json.hpp	/^    constexpr bool is_primitive() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
is_root	dependencies/include/nlohmann/json.hpp	/^    bool is_root() const noexcept$/;"	f	class:nlohmann::json_pointer	typeref:typename:bool
is_rvalue	dependencies/include/nlohmann/json.hpp	/^    const bool is_rvalue;$/;"	m	class:nlohmann::detail::json_ref	typeref:typename:const bool
is_sax	dependencies/include/nlohmann/json.hpp	/^struct is_sax$/;"	s	namespace:nlohmann::detail
is_sax_static_asserts	dependencies/include/nlohmann/json.hpp	/^struct is_sax_static_asserts$/;"	s	namespace:nlohmann::detail
is_string	dependencies/include/nlohmann/json.hpp	/^    constexpr bool is_string() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
is_structured	dependencies/include/nlohmann/json.hpp	/^    constexpr bool is_structured() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
isfinite	dependencies/include/nlohmann/json.hpp	/^        if (not std::isfinite(x))$/;"	m	class:nlohmann::detail::serializer::dump_float::std	typeref:typename:not	file:
isolate	dependencies/include/v8-util.h	/^  Isolate* isolate() { return isolate_; }$/;"	f	class:v8::PersistentValueMapBase	typeref:typename:Isolate *
isolate_	dependencies/include/v8-util.h	/^  Isolate* isolate_;$/;"	m	class:v8::PersistentValueMapBase	typeref:typename:Isolate *
isolate_	dependencies/include/v8-util.h	/^  Isolate* isolate_;$/;"	m	class:v8::PersistentValueVector	typeref:typename:Isolate *
isolate_	dependencies/include/v8.h	/^  Isolate* isolate_ = nullptr;$/;"	m	class:v8::WasmModuleObjectBuilderStreaming	typeref:typename:Isolate *
isolate_	dependencies/include/v8.h	/^  Isolate* isolate_;$/;"	m	class:v8::WeakCallbackInfo	typeref:typename:Isolate *
isolate_	dependencies/include/v8.h	/^  internal::Isolate* const isolate_;$/;"	m	class:v8::SealHandleScope	typeref:typename:internal::Isolate * const
isolate_	dependencies/include/v8.h	/^  internal::Isolate* isolate_;$/;"	m	class:v8::HandleScope	typeref:typename:internal::Isolate *
items	dependencies/include/nlohmann/json.hpp	/^    iteration_proxy<const_iterator> items() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:iteration_proxy<const_iterator>
items	dependencies/include/nlohmann/json.hpp	/^    iteration_proxy<iterator> items() noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:iteration_proxy<iterator>
iter_impl	dependencies/include/nlohmann/json.hpp	/^    explicit iter_impl(pointer object) noexcept : m_object(object)$/;"	f	class:nlohmann::detail::iter_impl
iter_impl	dependencies/include/nlohmann/json.hpp	/^    iter_impl(const iter_impl<typename std::remove_const<BasicJsonType>::type>& other) noexcept$/;"	f	class:nlohmann::detail::iter_impl
iter_impl	dependencies/include/nlohmann/json.hpp	/^    using iter_impl = ::nlohmann::detail::iter_impl<BasicJsonType>;$/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::detail::iter_impl<BasicJsonType>
iter_impl	dependencies/include/nlohmann/json.hpp	/^class iter_impl$/;"	c	namespace:nlohmann::detail
iteration_proxy	dependencies/include/nlohmann/json.hpp	/^    explicit iteration_proxy(typename IteratorType::reference cont) noexcept$/;"	f	class:nlohmann::detail::iteration_proxy
iteration_proxy	dependencies/include/nlohmann/json.hpp	/^    using iteration_proxy = ::nlohmann::detail::iteration_proxy<Iterator>;$/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::detail::iteration_proxy<Iterator>
iteration_proxy	dependencies/include/nlohmann/json.hpp	/^template<typename IteratorType> class iteration_proxy$/;"	c	namespace:nlohmann::detail
iteration_proxy_value	dependencies/include/nlohmann/json.hpp	/^    explicit iteration_proxy_value(IteratorType it) noexcept : anchor(it) {}$/;"	f	class:nlohmann::detail::iteration_proxy_value
iteration_proxy_value	dependencies/include/nlohmann/json.hpp	/^template <typename IteratorType> class iteration_proxy_value$/;"	c	namespace:nlohmann::detail
iterator	dependencies/include/nlohmann/json.hpp	/^    using iterator = iter_impl<basic_json>;$/;"	t	class:nlohmann::basic_json	typeref:typename:iter_impl<basic_json>
iterator_category	dependencies/include/nlohmann/json.hpp	/^    using iterator_category = std::bidirectional_iterator_tag;$/;"	t	class:nlohmann::detail::iter_impl	typeref:typename:std::bidirectional_iterator_tag
iterator_category	dependencies/include/nlohmann/json.hpp	/^    using iterator_category = std::input_iterator_tag;$/;"	t	class:nlohmann::detail::iteration_proxy_value	typeref:typename:std::input_iterator_tag
iterator_category	dependencies/include/nlohmann/json.hpp	/^    using iterator_category = std::random_access_iterator_tag;$/;"	t	struct:nlohmann::detail::iterator_traits	typeref:typename:std::random_access_iterator_tag
iterator_category	dependencies/include/nlohmann/json.hpp	/^    using iterator_category = typename It::iterator_category;$/;"	t	struct:nlohmann::detail::iterator_types	typeref:typename:It::iterator_category
iterator_category_t	dependencies/include/nlohmann/json.hpp	/^using iterator_category_t = typename T::iterator_category;$/;"	t	namespace:nlohmann::detail	typeref:typename:T::iterator_category
iterator_t	dependencies/include/nlohmann/json.hpp	/^using iterator_t = typename T::iterator;$/;"	t	namespace:nlohmann::detail	typeref:typename:T::iterator
iterator_traits	dependencies/include/nlohmann/json.hpp	/^struct iterator_traits < T, enable_if_t < !std::is_pointer<T>::value >>$/;"	s	namespace:nlohmann::detail
iterator_traits	dependencies/include/nlohmann/json.hpp	/^struct iterator_traits$/;"	s	namespace:nlohmann::detail
iterator_traits	dependencies/include/nlohmann/json.hpp	/^struct iterator_traits<T*, enable_if_t<std::is_object<T>::value>>$/;"	s	namespace:nlohmann::detail
iterator_types	dependencies/include/nlohmann/json.hpp	/^struct iterator_types <$/;"	s	namespace:nlohmann::detail
iterator_types	dependencies/include/nlohmann/json.hpp	/^struct iterator_types {};$/;"	s	namespace:nlohmann::detail
iterator_wrapper	dependencies/include/nlohmann/json.hpp	/^    static iteration_proxy<const_iterator> iterator_wrapper(const_reference ref) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:JSON_DEPRECATED iteration_proxy<const_iterator>
iterator_wrapper	dependencies/include/nlohmann/json.hpp	/^    static iteration_proxy<iterator> iterator_wrapper(reference ref) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:JSON_DEPRECATED iteration_proxy<iterator>
joystickButton	dependencies/include/SFML/Window/Event.hpp	/^        JoystickButtonEvent   joystickButton;    \/\/\/< Joystick button event parameters (Event/;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:JoystickButtonEvent
joystickConnect	dependencies/include/SFML/Window/Event.hpp	/^        JoystickConnectEvent  joystickConnect;   \/\/\/< Joystick (dis)connect event parameters /;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:JoystickConnectEvent
joystickId	dependencies/include/SFML/Window/Event.hpp	/^        unsigned int   joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count/;"	m	struct:sf::Event::JoystickMoveEvent	typeref:typename:unsigned int
joystickId	dependencies/include/SFML/Window/Event.hpp	/^        unsigned int joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count -/;"	m	struct:sf::Event::JoystickButtonEvent	typeref:typename:unsigned int
joystickId	dependencies/include/SFML/Window/Event.hpp	/^        unsigned int joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count -/;"	m	struct:sf::Event::JoystickConnectEvent	typeref:typename:unsigned int
joystickMove	dependencies/include/SFML/Window/Event.hpp	/^        JoystickMoveEvent     joystickMove;      \/\/\/< Joystick move event parameters (Event::/;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:JoystickMoveEvent
js_entry_stub	dependencies/include/v8.h	/^  JSEntryStub js_entry_stub;$/;"	m	struct:v8::UnwindState	typeref:typename:JSEntryStub
json	dependencies/include/nlohmann/json.hpp	/^enum class input_format_t { json, cbor, msgpack, ubjson, bson };$/;"	e	enum:nlohmann::detail::input_format_t
json	dependencies/include/nlohmann/json.hpp	/^using json = basic_json<>;$/;"	t	namespace:nlohmann	typeref:typename:basic_json<>
json_pointer	dependencies/include/nlohmann/json.hpp	/^    explicit json_pointer(const std::string& s = "")$/;"	f	class:nlohmann::json_pointer
json_pointer	dependencies/include/nlohmann/json.hpp	/^    using json_pointer = ::nlohmann::json_pointer<basic_json>;$/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::json_pointer<basic_json>
json_pointer	dependencies/include/nlohmann/json.hpp	/^class json_pointer$/;"	c	namespace:nlohmann
json_ref	dependencies/include/nlohmann/json.hpp	/^    json_ref(Args && ... args)$/;"	f	class:nlohmann::detail::json_ref
json_ref	dependencies/include/nlohmann/json.hpp	/^    json_ref(const value_type& value)$/;"	f	class:nlohmann::detail::json_ref
json_ref	dependencies/include/nlohmann/json.hpp	/^    json_ref(std::initializer_list<json_ref> init)$/;"	f	class:nlohmann::detail::json_ref
json_ref	dependencies/include/nlohmann/json.hpp	/^    json_ref(value_type&& value)$/;"	f	class:nlohmann::detail::json_ref
json_ref	dependencies/include/nlohmann/json.hpp	/^class json_ref$/;"	c	namespace:nlohmann::detail
json_reverse_iterator	dependencies/include/nlohmann/json.hpp	/^    explicit json_reverse_iterator(const base_iterator& it) noexcept : base_iterator(it) {}$/;"	f	class:nlohmann::detail::json_reverse_iterator
json_reverse_iterator	dependencies/include/nlohmann/json.hpp	/^    explicit json_reverse_iterator(const typename base_iterator::iterator_type& it) noexcept$/;"	f	class:nlohmann::detail::json_reverse_iterator
json_reverse_iterator	dependencies/include/nlohmann/json.hpp	/^    template<typename Base> using json_reverse_iterator = ::nlohmann::detail::json_reverse_itera/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::detail::json_reverse_iterator<Base>
json_reverse_iterator	dependencies/include/nlohmann/json.hpp	/^class json_reverse_iterator : public std::reverse_iterator<Base>$/;"	c	namespace:nlohmann::detail
json_sax	dependencies/include/nlohmann/json.hpp	/^struct json_sax$/;"	s	namespace:nlohmann
json_sax_acceptor	dependencies/include/nlohmann/json.hpp	/^class json_sax_acceptor$/;"	c	namespace:nlohmann::detail
json_sax_dom_callback_parser	dependencies/include/nlohmann/json.hpp	/^    json_sax_dom_callback_parser(BasicJsonType& r,$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser
json_sax_dom_callback_parser	dependencies/include/nlohmann/json.hpp	/^class json_sax_dom_callback_parser$/;"	c	namespace:nlohmann::detail
json_sax_dom_parser	dependencies/include/nlohmann/json.hpp	/^    explicit json_sax_dom_parser(BasicJsonType& r, const bool allow_exceptions_ = true)$/;"	f	class:nlohmann::detail::json_sax_dom_parser
json_sax_dom_parser	dependencies/include/nlohmann/json.hpp	/^class json_sax_dom_parser$/;"	c	namespace:nlohmann::detail
json_sax_t	dependencies/include/nlohmann/json.hpp	/^    using json_sax_t = SAX;$/;"	t	class:nlohmann::detail::binary_reader	typeref:typename:SAX
json_sax_t	dependencies/include/nlohmann/json.hpp	/^    using json_sax_t = json_sax<basic_json>;$/;"	t	class:nlohmann::basic_json	typeref:typename:json_sax<basic_json>
json_serializer	dependencies/include/nlohmann/json.hpp	/^    using json_serializer = JSONSerializer<T, SFINAE>;$/;"	t	class:nlohmann::basic_json	typeref:typename:JSONSerializer<T,SFINAE>
json_value	dependencies/include/nlohmann/json.hpp	/^        json_value(array_t&& value)$/;"	f	union:nlohmann::basic_json::json_value
json_value	dependencies/include/nlohmann/json.hpp	/^        json_value(boolean_t v) noexcept : boolean(v) {}$/;"	f	union:nlohmann::basic_json::json_value
json_value	dependencies/include/nlohmann/json.hpp	/^        json_value(const array_t& value)$/;"	f	union:nlohmann::basic_json::json_value
json_value	dependencies/include/nlohmann/json.hpp	/^        json_value(const object_t& value)$/;"	f	union:nlohmann::basic_json::json_value
json_value	dependencies/include/nlohmann/json.hpp	/^        json_value(const string_t& value)$/;"	f	union:nlohmann::basic_json::json_value
json_value	dependencies/include/nlohmann/json.hpp	/^        json_value(number_float_t v) noexcept : number_float(v) {}$/;"	f	union:nlohmann::basic_json::json_value
json_value	dependencies/include/nlohmann/json.hpp	/^        json_value(number_integer_t v) noexcept : number_integer(v) {}$/;"	f	union:nlohmann::basic_json::json_value
json_value	dependencies/include/nlohmann/json.hpp	/^        json_value(number_unsigned_t v) noexcept : number_unsigned(v) {}$/;"	f	union:nlohmann::basic_json::json_value
json_value	dependencies/include/nlohmann/json.hpp	/^        json_value(object_t&& value)$/;"	f	union:nlohmann::basic_json::json_value
json_value	dependencies/include/nlohmann/json.hpp	/^        json_value(string_t&& value)$/;"	f	union:nlohmann::basic_json::json_value
json_value	dependencies/include/nlohmann/json.hpp	/^        json_value(value_t t)$/;"	f	union:nlohmann::basic_json::json_value
json_value	dependencies/include/nlohmann/json.hpp	/^    union json_value$/;"	u	class:nlohmann::basic_json
k	dependencies/include/nlohmann/json.hpp	/^    int k;$/;"	m	struct:nlohmann::detail::dtoa_impl::cached_power	typeref:typename:int
kAbort	dependencies/include/v8-profiler.h	/^    kAbort = 1$/;"	e	enum:v8::ActivityControl::ControlOption
kAbort	dependencies/include/v8-profiler.h	/^    kAbort = 1$/;"	e	enum:v8::OutputStream::WriteResult
kAllCanRead	dependencies/include/v8.h	/^  kAllCanRead = 1,$/;"	e	enum:v8::PropertyHandlerFlags
kAllow	dependencies/include/v8.h	/^enum class ConstructorBehavior { kThrow, kAllow };$/;"	e	enum:v8::ConstructorBehavior
kAlpha	dependencies/include/nlohmann/json.hpp	/^constexpr int kAlpha = -60;$/;"	v	namespace:nlohmann::detail::dtoa_impl	typeref:typename:int
kApiDoubleSize	dependencies/include/v8-internal.h	/^const int kApiDoubleSize = sizeof(double);$/;"	v	namespace:v8::internal	typeref:typename:const int
kApiInt64Size	dependencies/include/v8-internal.h	/^const int kApiInt64Size = sizeof(int64_t);$/;"	v	namespace:v8::internal	typeref:typename:const int
kApiIntSize	dependencies/include/v8-internal.h	/^const int kApiIntSize = sizeof(int);$/;"	v	namespace:v8::internal	typeref:typename:const int
kApiSystemPointerSize	dependencies/include/v8-internal.h	/^const int kApiSystemPointerSize = sizeof(void*);$/;"	v	namespace:v8::internal	typeref:typename:const int
kApiTaggedSize	dependencies/include/v8-internal.h	/^const int kApiTaggedSize = kApiSystemPointerSize;$/;"	v	namespace:v8::internal	typeref:typename:const int
kArgsLength	dependencies/include/v8.h	/^  static const int kArgsLength = 6;$/;"	m	class:v8::FunctionCallbackInfo	typeref:typename:const int
kArgsLength	dependencies/include/v8.h	/^  static const int kArgsLength = 7;$/;"	m	class:v8::PropertyCallbackInfo	typeref:typename:const int
kArray	dependencies/include/v8-profiler.h	/^    kArray = 1,          \/\/ An array of elements.$/;"	e	enum:v8::HeapGraphNode::Type
kBigInt	dependencies/include/v8-profiler.h	/^    kBigInt = 13         \/\/ BigInt.$/;"	e	enum:v8::HeapGraphNode::Type
kCallbackType	dependencies/include/v8-util.h	/^  static const PersistentContainerCallbackType kCallbackType = kNotWeak;$/;"	m	class:v8::DefaultGlobalMapTraits	typeref:typename:const PersistentContainerCallbackType
kCallbackType	dependencies/include/v8-util.h	/^  static const PersistentContainerCallbackType kCallbackType = kNotWeak;$/;"	m	class:v8::DefaultPersistentValueMapTraits	typeref:typename:const PersistentContainerCallbackType
kCallerLineNumbers	dependencies/include/v8-profiler.h	/^  kCallerLineNumbers,$/;"	e	enum:v8::CpuProfilingMode
kChunkSize	dependencies/include/libplatform/v8-tracing.h	/^  static const size_t kChunkSize = 64;$/;"	m	class:v8::platform::tracing::TraceBufferChunk	typeref:typename:const size_t
kClosure	dependencies/include/v8-profiler.h	/^    kClosure = 5,        \/\/ Function closure.$/;"	e	enum:v8::HeapGraphNode::Type
kCode	dependencies/include/v8-profiler.h	/^    kCode = 4,           \/\/ Compiled code.$/;"	e	enum:v8::HeapGraphNode::Type
kColumnOffset	dependencies/include/v8.h	/^    kColumnOffset = 1 << 1 | kLineNumber,$/;"	e	enum:v8::StackTrace::StackTraceOptions
kConsString	dependencies/include/v8-profiler.h	/^    kConsString = 10,    \/\/ Concatenated string. A pair of pointers to strings.$/;"	e	enum:v8::HeapGraphNode::Type
kConsumeCodeCache	dependencies/include/v8.h	/^    kConsumeCodeCache,$/;"	e	enum:v8::ScriptCompiler::CompileOptions
kContextVariable	dependencies/include/v8-profiler.h	/^    kContextVariable = 0,  \/\/ A variable from a function context.$/;"	e	enum:v8::HeapGraphEdge::Type
kContinue	dependencies/include/v8-profiler.h	/^    kContinue = 0,$/;"	e	enum:v8::ActivityControl::ControlOption
kContinue	dependencies/include/v8-profiler.h	/^    kContinue = 0,$/;"	e	enum:v8::OutputStream::WriteResult
kConvertToString	dependencies/include/v8.h	/^enum class KeyConversionMode { kConvertToString, kKeepNumbers };$/;"	e	enum:v8::KeyConversionMode
kDataIndex	dependencies/include/v8.h	/^  static const int kDataIndex = 4;$/;"	m	class:v8::FunctionCallbackInfo	typeref:typename:const int
kDataIndex	dependencies/include/v8.h	/^  static const int kDataIndex = 5;$/;"	m	class:v8::PropertyCallbackInfo	typeref:typename:const int
kDetailed	dependencies/include/v8.h	/^    kDetailed = kOverview | kIsEval | kIsConstructor | kScriptNameOrSourceURL$/;"	e	enum:v8::StackTrace::StackTraceOptions
kDisabled	dependencies/include/libplatform/libplatform.h	/^enum class IdleTaskSupport { kDisabled, kEnabled };$/;"	e	enum:v8::platform::IdleTaskSupport
kDisabled	dependencies/include/libplatform/libplatform.h	/^enum class InProcessStackDumping { kDisabled, kEnabled };$/;"	e	enum:v8::platform::InProcessStackDumping
kDoNotWait	dependencies/include/libplatform/libplatform.h	/^  kDoNotWait = false,$/;"	e	enum:v8::platform::MessageLoopBehavior
kDotAll	dependencies/include/v8.h	/^    kDotAll = 1 << 5,$/;"	e	enum:v8::RegExp::Flags
kEagerCompile	dependencies/include/v8.h	/^    kEagerCompile$/;"	e	enum:v8::ScriptCompiler::CompileOptions
kElement	dependencies/include/v8-profiler.h	/^    kElement = 1,          \/\/ An element of an array.$/;"	e	enum:v8::HeapGraphEdge::Type
kEmbedderDataArrayHeaderSize	dependencies/include/v8-internal.h	/^  static const int kEmbedderDataArrayHeaderSize = 2 * kApiTaggedSize;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kEmbedderDataSlotSize	dependencies/include/v8-internal.h	/^  static const int kEmbedderDataSlotSize =$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kEmbedderFieldCount	dependencies/include/v8.h	/^  static const int kEmbedderFieldCount = V8_ARRAY_BUFFER_INTERNAL_FIELD_COUNT;$/;"	m	class:v8::ArrayBuffer	typeref:typename:const int
kEmbedderFieldCount	dependencies/include/v8.h	/^  static const int kEmbedderFieldCount = V8_PROMISE_INTERNAL_FIELD_COUNT;$/;"	m	class:v8::Promise	typeref:typename:const int
kEmbedderFieldCount	dependencies/include/v8.h	/^  static const int kEmbedderFieldCount =$/;"	m	class:v8::ArrayBufferView	typeref:typename:const int
kEmbedderFieldsInWeakCallback	dependencies/include/v8.h	/^static const int kEmbedderFieldsInWeakCallback = 2;$/;"	v	namespace:v8	typeref:typename:const int
kEmptyStringRootIndex	dependencies/include/v8-internal.h	/^  static const int kEmptyStringRootIndex = 9;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kEnabled	dependencies/include/libplatform/libplatform.h	/^enum class IdleTaskSupport { kDisabled, kEnabled };$/;"	e	enum:v8::platform::IdleTaskSupport
kEnabled	dependencies/include/libplatform/libplatform.h	/^enum class InProcessStackDumping { kDisabled, kEnabled };$/;"	e	enum:v8::platform::InProcessStackDumping
kErrored	dependencies/include/v8.h	/^    kErrored$/;"	e	enum:v8::Module::Status
kEvaluated	dependencies/include/v8.h	/^    kEvaluated,$/;"	e	enum:v8::Module::Status
kEvaluating	dependencies/include/v8.h	/^    kEvaluating,$/;"	e	enum:v8::Module::Status
kExposeFramesAcrossSecurityOrigins	dependencies/include/v8.h	/^    kExposeFramesAcrossSecurityOrigins = 1 << 8,$/;"	e	enum:v8::StackTrace::StackTraceOptions
kExternalAllocationSoftLimit	dependencies/include/v8-internal.h	/^  static constexpr int kExternalAllocationSoftLimit = 64 * 1024 * 1024;$/;"	m	class:v8::internal::Internals	typeref:typename:int
kExternalMemoryAtLastMarkCompactOffset	dependencies/include/v8-internal.h	/^  static const int kExternalMemoryAtLastMarkCompactOffset =$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kExternalMemoryLimitOffset	dependencies/include/v8-internal.h	/^  static const int kExternalMemoryLimitOffset =$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kExternalMemoryOffset	dependencies/include/v8-internal.h	/^  static const int kExternalMemoryOffset =$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kExternalOneByteRepresentationTag	dependencies/include/v8-internal.h	/^  static const int kExternalOneByteRepresentationTag = 0x0a;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kExternalTwoByteRepresentationTag	dependencies/include/v8-internal.h	/^  static const int kExternalTwoByteRepresentationTag = 0x02;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kExternalized	dependencies/include/v8.h	/^enum class ArrayBufferCreationMode { kInternalized, kExternalized };$/;"	e	enum:v8::ArrayBufferCreationMode
kFalseValueRootIndex	dependencies/include/v8-internal.h	/^  static const int kFalseValueRootIndex = 8;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kFinalizer	dependencies/include/v8.h	/^enum class WeakCallbackType { kParameter, kInternalFields, kFinalizer };$/;"	e	enum:v8::WeakCallbackType
kFirstNonstringType	dependencies/include/v8-internal.h	/^  static const int kFirstNonstringType = 0x80;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kFixedArrayHeaderSize	dependencies/include/v8-internal.h	/^  static const int kFixedArrayHeaderSize = 2 * kApiTaggedSize;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kForeignAddressOffset	dependencies/include/v8-internal.h	/^  static const int kForeignAddressOffset = kApiTaggedSize;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kForeignType	dependencies/include/v8-internal.h	/^  static const int kForeignType = 0x87;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kFrozen	dependencies/include/v8.h	/^enum class IntegrityLevel { kFrozen, kSealed };$/;"	e	enum:v8::IntegrityLevel
kFulfilled	dependencies/include/v8.h	/^  enum PromiseState { kPending, kFulfilled, kRejected };$/;"	e	enum:v8::Promise::PromiseState
kFullStringRepresentationMask	dependencies/include/v8-internal.h	/^  static const int kFullStringRepresentationMask = 0x0f;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kFunctionName	dependencies/include/v8.h	/^    kFunctionName = 1 << 3,$/;"	e	enum:v8::StackTrace::StackTraceOptions
kGamma	dependencies/include/nlohmann/json.hpp	/^constexpr int kGamma = -32;$/;"	v	namespace:nlohmann::detail::dtoa_impl	typeref:typename:int
kGlobal	dependencies/include/v8.h	/^    kGlobal = 1 << 0,$/;"	e	enum:v8::RegExp::Flags
kHasNoSideEffect	dependencies/include/v8.h	/^  kHasNoSideEffect = 1 << 3,$/;"	e	enum:v8::PropertyHandlerFlags
kHasNoSideEffect	dependencies/include/v8.h	/^  kHasNoSideEffect,$/;"	e	enum:v8::SideEffectType
kHasSideEffect	dependencies/include/v8.h	/^  kHasSideEffect,$/;"	e	enum:v8::SideEffectType
kHasSideEffectToReceiver	dependencies/include/v8.h	/^  kHasSideEffectToReceiver$/;"	e	enum:v8::SideEffectType
kHeapNumber	dependencies/include/v8-profiler.h	/^    kHeapNumber = 7,     \/\/ Number stored in the heap.$/;"	e	enum:v8::HeapGraphNode::Type
kHeapObjectMapOffset	dependencies/include/v8-internal.h	/^  static const int kHeapObjectMapOffset = 0;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kHeapObjectTag	dependencies/include/v8-internal.h	/^const int kHeapObjectTag = 1;$/;"	v	namespace:v8::internal	typeref:typename:const int
kHeapObjectTagMask	dependencies/include/v8-internal.h	/^const intptr_t kHeapObjectTagMask = (1 << kHeapObjectTagSize) - 1;$/;"	v	namespace:v8::internal	typeref:typename:const intptr_t
kHeapObjectTagSize	dependencies/include/v8-internal.h	/^const int kHeapObjectTagSize = 2;$/;"	v	namespace:v8::internal	typeref:typename:const int
kHidden	dependencies/include/v8-profiler.h	/^    kHidden = 0,         \/\/ Hidden node, may be filtered when shown to user.$/;"	e	enum:v8::HeapGraphNode::Type
kHidden	dependencies/include/v8-profiler.h	/^    kHidden = 4,           \/\/ A link that is needed for proper sizes$/;"	e	enum:v8::HeapGraphEdge::Type
kHolderIndex	dependencies/include/v8.h	/^  static const int kHolderIndex = 0;$/;"	m	class:v8::FunctionCallbackInfo	typeref:typename:const int
kHolderIndex	dependencies/include/v8.h	/^  static const int kHolderIndex = 1;$/;"	m	class:v8::PropertyCallbackInfo	typeref:typename:const int
kIgnoreCase	dependencies/include/v8.h	/^    kIgnoreCase = 1 << 1,$/;"	e	enum:v8::RegExp::Flags
kIncludeCEntryFrame	dependencies/include/v8-profiler.h	/^  enum RecordCEntryFrame { kIncludeCEntryFrame, kSkipCEntryFrame };$/;"	e	enum:v8::TickSample::RecordCEntryFrame
kIncludeIndices	dependencies/include/v8.h	/^enum class IndexFilter { kIncludeIndices, kSkipIndices };$/;"	e	enum:v8::IndexFilter
kIncludePrototypes	dependencies/include/v8.h	/^enum class KeyCollectionMode { kOwnOnly, kIncludePrototypes };$/;"	e	enum:v8::KeyCollectionMode
kInstantiated	dependencies/include/v8.h	/^    kInstantiated,$/;"	e	enum:v8::Module::Status
kInstantiating	dependencies/include/v8.h	/^    kInstantiating,$/;"	e	enum:v8::Module::Status
kInternal	dependencies/include/v8-profiler.h	/^    kInternal = 3,         \/\/ A link that can't be accessed from JS,$/;"	e	enum:v8::HeapGraphEdge::Type
kInternalFieldCount	dependencies/include/v8.h	/^  static const int kInternalFieldCount = V8_ARRAY_BUFFER_INTERNAL_FIELD_COUNT;$/;"	m	class:v8::ArrayBuffer	typeref:typename:const int
kInternalFieldCount	dependencies/include/v8.h	/^  static const int kInternalFieldCount = V8_ARRAY_BUFFER_INTERNAL_FIELD_COUNT;$/;"	m	class:v8::SharedArrayBuffer	typeref:typename:const int
kInternalFieldCount	dependencies/include/v8.h	/^  static const int kInternalFieldCount =$/;"	m	class:v8::ArrayBufferView	typeref:typename:const int
kInternalFields	dependencies/include/v8.h	/^enum class WeakCallbackType { kParameter, kInternalFields, kFinalizer };$/;"	e	enum:v8::WeakCallbackType
kInternalFieldsInWeakCallback	dependencies/include/v8.h	/^static const int kInternalFieldsInWeakCallback = 2;$/;"	v	namespace:v8	typeref:typename:const int
kInternalized	dependencies/include/v8.h	/^  kInternalized$/;"	e	enum:v8::NewStringType
kInternalized	dependencies/include/v8.h	/^enum class ArrayBufferCreationMode { kInternalized, kExternalized };$/;"	e	enum:v8::ArrayBufferCreationMode
kInternalizedString	dependencies/include/v8.h	/^    kInternalizedString = static_cast<int>(v8::NewStringType::kInternalized)$/;"	e	enum:v8::String::NewStringType
kIsConstructor	dependencies/include/v8.h	/^    kIsConstructor = 1 << 5,$/;"	e	enum:v8::StackTrace::StackTraceOptions
kIsEval	dependencies/include/v8.h	/^    kIsEval = 1 << 4,$/;"	e	enum:v8::StackTrace::StackTraceOptions
kIsModule	dependencies/include/v8.h	/^    kIsModule = 1 << 3$/;"	e	enum:v8::ScriptOriginOptions::__anon94c341520203
kIsOpaque	dependencies/include/v8.h	/^    kIsOpaque = 1 << 1,$/;"	e	enum:v8::ScriptOriginOptions::__anon94c341520203
kIsSharedCrossOrigin	dependencies/include/v8.h	/^    kIsSharedCrossOrigin = 1,$/;"	e	enum:v8::ScriptOriginOptions::__anon94c341520203
kIsWasm	dependencies/include/v8.h	/^    kIsWasm = 1 << 2,$/;"	e	enum:v8::ScriptOriginOptions::__anon94c341520203
kIsolateEmbedderDataOffset	dependencies/include/v8-internal.h	/^  static const int kIsolateEmbedderDataOffset = 0;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kIsolateIndex	dependencies/include/v8.h	/^  static const int kIsolateIndex = 1;$/;"	m	class:v8::FunctionCallbackInfo	typeref:typename:const int
kIsolateIndex	dependencies/include/v8.h	/^  static const int kIsolateIndex = 2;$/;"	m	class:v8::PropertyCallbackInfo	typeref:typename:const int
kIsolateRootsOffset	dependencies/include/v8-internal.h	/^  static const int kIsolateRootsOffset =$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kJSApiObjectType	dependencies/include/v8-internal.h	/^  static const int kJSApiObjectType = 0x420;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kJSON	dependencies/include/v8-profiler.h	/^    kJSON = 0  \/\/ See format description near 'Serialize' method.$/;"	e	enum:v8::HeapSnapshot::SerializationFormat
kJSObjectHeaderSize	dependencies/include/v8-internal.h	/^  static const int kJSObjectHeaderSize = 3 * kApiTaggedSize;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kJSObjectHeaderSizeForEmbedderFields	dependencies/include/v8-internal.h	/^  static const int kJSObjectHeaderSizeForEmbedderFields =$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kJSObjectType	dependencies/include/v8-internal.h	/^  static const int kJSObjectType = 0x421;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kJSSpecialApiObjectType	dependencies/include/v8-internal.h	/^  static const int kJSSpecialApiObjectType = 0x410;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kKeepNumbers	dependencies/include/v8.h	/^enum class KeyConversionMode { kConvertToString, kKeepNumbers };$/;"	e	enum:v8::KeyConversionMode
kLeafNodeLineNumbers	dependencies/include/v8-profiler.h	/^  kLeafNodeLineNumbers,$/;"	e	enum:v8::CpuProfilingMode
kLineNumber	dependencies/include/v8.h	/^    kLineNumber = 1,$/;"	e	enum:v8::StackTrace::StackTraceOptions
kLineOffsetNotFound	dependencies/include/v8.h	/^  static const int kLineOffsetNotFound;$/;"	m	class:v8::Function	typeref:typename:const int
kMapInstanceTypeOffset	dependencies/include/v8-internal.h	/^  static const int kMapInstanceTypeOffset = 1 * kApiTaggedSize + kApiIntSize;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kMaxFramesCount	dependencies/include/v8-profiler.h	/^  static const unsigned kMaxFramesCount = (1 << kMaxFramesCountLog2) - 1;$/;"	m	struct:v8::TickSample	typeref:typename:const unsigned
kMaxFramesCountLog2	dependencies/include/v8-profiler.h	/^  static const unsigned kMaxFramesCountLog2 = 8;$/;"	m	struct:v8::TickSample	typeref:typename:const unsigned
kMaxLength	dependencies/include/v8.h	/^  static constexpr int kMaxLength = internal::kApiTaggedSize == 4$/;"	m	class:v8::String	typeref:typename:int
kMaxLength	dependencies/include/v8.h	/^  static constexpr size_t kMaxLength = internal::kSmiMaxValue;$/;"	m	class:v8::TypedArray	typeref:typename:size_t
kMultiline	dependencies/include/v8.h	/^    kMultiline = 1 << 2,$/;"	e	enum:v8::RegExp::Flags
kNative	dependencies/include/v8-profiler.h	/^    kNative = 8,         \/\/ Native object (not from V8 heap).$/;"	e	enum:v8::HeapGraphNode::Type
kNativeContextEmbedderDataOffset	dependencies/include/v8-internal.h	/^  static const int kNativeContextEmbedderDataOffset = 7 * kApiTaggedSize;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kNewTargetIndex	dependencies/include/v8.h	/^  static const int kNewTargetIndex = 5;$/;"	m	class:v8::FunctionCallbackInfo	typeref:typename:const int
kNoAccess	dependencies/include/v8-platform.h	/^    kNoAccess,$/;"	e	enum:v8::PageAllocator::Permission
kNoCacheBecauseCacheTooCold	dependencies/include/v8.h	/^    kNoCacheBecauseCacheTooCold,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseCachingDisabled	dependencies/include/v8.h	/^    kNoCacheBecauseCachingDisabled,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseDeferredProduceCodeCache	dependencies/include/v8.h	/^    kNoCacheBecauseDeferredProduceCodeCache$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseExtensionModule	dependencies/include/v8.h	/^    kNoCacheBecauseExtensionModule,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseInDocumentWrite	dependencies/include/v8.h	/^    kNoCacheBecauseInDocumentWrite,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseInlineScript	dependencies/include/v8.h	/^    kNoCacheBecauseInlineScript,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseInspector	dependencies/include/v8.h	/^    kNoCacheBecauseInspector,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseModule	dependencies/include/v8.h	/^    kNoCacheBecauseModule,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseNoResource	dependencies/include/v8.h	/^    kNoCacheBecauseNoResource,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecausePacScript	dependencies/include/v8.h	/^    kNoCacheBecausePacScript,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseResourceWithNoCacheHandler	dependencies/include/v8.h	/^    kNoCacheBecauseResourceWithNoCacheHandler,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseScriptTooSmall	dependencies/include/v8.h	/^    kNoCacheBecauseScriptTooSmall,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseStreamingSource	dependencies/include/v8.h	/^    kNoCacheBecauseStreamingSource,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheBecauseV8Extension	dependencies/include/v8.h	/^    kNoCacheBecauseV8Extension,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoCacheNoReason	dependencies/include/v8.h	/^    kNoCacheNoReason = 0,$/;"	e	enum:v8::ScriptCompiler::NoCacheReason
kNoColumnInfo	dependencies/include/v8.h	/^  static const int kNoColumnInfo = 0;$/;"	m	class:v8::Message	typeref:typename:const int
kNoColumnNumberInfo	dependencies/include/v8-profiler.h	/^  static const int kNoColumnNumberInfo = Message::kNoColumnInfo;$/;"	m	class:v8::AllocationProfile	typeref:typename:const int
kNoColumnNumberInfo	dependencies/include/v8-profiler.h	/^  static const int kNoColumnNumberInfo = Message::kNoColumnInfo;$/;"	m	class:v8::CpuProfileNode	typeref:typename:const int
kNoCompileOptions	dependencies/include/v8.h	/^    kNoCompileOptions = 0,$/;"	e	enum:v8::ScriptCompiler::CompileOptions
kNoLineNumberInfo	dependencies/include/v8-profiler.h	/^  static const int kNoLineNumberInfo = Message::kNoLineNumberInfo;$/;"	m	class:v8::AllocationProfile	typeref:typename:const int
kNoLineNumberInfo	dependencies/include/v8-profiler.h	/^  static const int kNoLineNumberInfo = Message::kNoLineNumberInfo;$/;"	m	class:v8::CpuProfileNode	typeref:typename:const int
kNoLineNumberInfo	dependencies/include/v8.h	/^  static const int kNoLineNumberInfo = 0;$/;"	m	class:v8::Message	typeref:typename:const int
kNoScriptId	dependencies/include/v8.h	/^  static const int kNoScriptId = 0;$/;"	m	class:v8::UnboundScript	typeref:typename:const int
kNoScriptIdInfo	dependencies/include/v8.h	/^  static const int kNoScriptIdInfo = 0;$/;"	m	class:v8::Message	typeref:typename:const int
kNodeClassIdOffset	dependencies/include/v8-internal.h	/^  static const int kNodeClassIdOffset = 1 * kApiTaggedSize;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kNodeFlagsOffset	dependencies/include/v8-internal.h	/^  static const int kNodeFlagsOffset = 1 * kApiTaggedSize + 3;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kNodeIsActiveShift	dependencies/include/v8-internal.h	/^  static const int kNodeIsActiveShift = 4;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kNodeIsIndependentShift	dependencies/include/v8-internal.h	/^  static const int kNodeIsIndependentShift = 3;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kNodeStateIsNearDeathValue	dependencies/include/v8-internal.h	/^  static const int kNodeStateIsNearDeathValue = 4;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kNodeStateIsPendingValue	dependencies/include/v8-internal.h	/^  static const int kNodeStateIsPendingValue = 3;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kNodeStateIsWeakValue	dependencies/include/v8-internal.h	/^  static const int kNodeStateIsWeakValue = 2;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kNodeStateMask	dependencies/include/v8-internal.h	/^  static const int kNodeStateMask = 0x7;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kNonMasking	dependencies/include/v8.h	/^  kNonMasking = 1 << 1,$/;"	e	enum:v8::PropertyHandlerFlags
kNone	dependencies/include/v8.h	/^    kNone = 0,$/;"	e	enum:v8::RegExp::Flags
kNone	dependencies/include/v8.h	/^  kNone = 0,$/;"	e	enum:v8::PropertyHandlerFlags
kNormal	dependencies/include/v8.h	/^    enum class AllocationMode { kNormal, kReservation };$/;"	e	enum:v8::ArrayBuffer::Allocator::AllocationMode
kNormal	dependencies/include/v8.h	/^  kNormal,$/;"	e	enum:v8::NewStringType
kNormalString	dependencies/include/v8.h	/^    kNormalString = static_cast<int>(v8::NewStringType::kNormal),$/;"	e	enum:v8::String::NewStringType
kNotWeak	dependencies/include/v8-util.h	/^  kNotWeak,$/;"	e	enum:v8::PersistentContainerCallbackType
kNullAddress	dependencies/include/v8-internal.h	/^static const Address kNullAddress = 0;$/;"	v	namespace:v8::internal	typeref:typename:const Address
kNullOddballKind	dependencies/include/v8-internal.h	/^  static const int kNullOddballKind = 3;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kNullValueRootIndex	dependencies/include/v8-internal.h	/^  static const int kNullValueRootIndex = 6;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kNumIsolateDataSlots	dependencies/include/v8-internal.h	/^  static const uint32_t kNumIsolateDataSlots = 4;$/;"	m	class:v8::internal::Internals	typeref:typename:const uint32_t
kObject	dependencies/include/v8-profiler.h	/^    kObject = 3,         \/\/ A JS object (except for arrays and strings).$/;"	e	enum:v8::HeapGraphNode::Type
kOddballKindOffset	dependencies/include/v8-internal.h	/^  static const int kOddballKindOffset = 4 * kApiTaggedSize + kApiDoubleSize;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kOddballType	dependencies/include/v8-internal.h	/^  static const int kOddballType = 0x83;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kOnlyInterceptStrings	dependencies/include/v8.h	/^  kOnlyInterceptStrings = 1 << 2,$/;"	e	enum:v8::PropertyHandlerFlags
kOverview	dependencies/include/v8.h	/^    kOverview = kLineNumber | kColumnOffset | kScriptName | kFunctionName,$/;"	e	enum:v8::StackTrace::StackTraceOptions
kOwnOnly	dependencies/include/v8.h	/^enum class KeyCollectionMode { kOwnOnly, kIncludePrototypes };$/;"	e	enum:v8::KeyCollectionMode
kParameter	dependencies/include/v8.h	/^enum class WeakCallbackType { kParameter, kInternalFields, kFinalizer };$/;"	e	enum:v8::WeakCallbackType
kPending	dependencies/include/v8.h	/^  enum PromiseState { kPending, kFulfilled, kRejected };$/;"	e	enum:v8::Promise::PromiseState
kPersistentContainerNotFound	dependencies/include/v8-util.h	/^static const uintptr_t kPersistentContainerNotFound = 0;$/;"	v	namespace:v8	typeref:typename:const uintptr_t
kPersistentHandleNoClassId	dependencies/include/v8-profiler.h	/^  static const uint16_t kPersistentHandleNoClassId = 0;$/;"	m	class:v8::HeapProfiler	typeref:typename:const uint16_t
kPrecision	dependencies/include/nlohmann/json.hpp	/^    static constexpr int kPrecision = 64; \/\/ = q$/;"	m	struct:nlohmann::detail::dtoa_impl::diyfp	typeref:typename:int
kProperty	dependencies/include/v8-profiler.h	/^    kProperty = 2,         \/\/ A named object property.$/;"	e	enum:v8::HeapGraphEdge::Type
kPtrComprIsolateRootBias	dependencies/include/v8-internal.h	/^  static constexpr size_t kPtrComprIsolateRootBias =$/;"	m	class:v8::internal::Internals	typeref:typename:size_t
kRead	dependencies/include/v8-platform.h	/^    kRead,$/;"	e	enum:v8::PageAllocator::Permission
kReadExecute	dependencies/include/v8-platform.h	/^    kReadExecute$/;"	e	enum:v8::PageAllocator::Permission
kReadWrite	dependencies/include/v8-platform.h	/^    kReadWrite,$/;"	e	enum:v8::PageAllocator::Permission
kReadWriteExecute	dependencies/include/v8-platform.h	/^    kReadWriteExecute,$/;"	e	enum:v8::PageAllocator::Permission
kRegExp	dependencies/include/v8-profiler.h	/^    kRegExp = 6,         \/\/ RegExp.$/;"	e	enum:v8::HeapGraphNode::Type
kRejected	dependencies/include/v8.h	/^  enum PromiseState { kPending, kFulfilled, kRejected };$/;"	e	enum:v8::Promise::PromiseState
kReservation	dependencies/include/v8.h	/^    enum class AllocationMode { kNormal, kReservation };$/;"	e	enum:v8::ArrayBuffer::Allocator::AllocationMode
kResetInDestructor	dependencies/include/v8.h	/^  static const bool kResetInDestructor = false;$/;"	m	class:v8::NonCopyablePersistentTraits	typeref:typename:const bool
kResetInDestructor	dependencies/include/v8.h	/^  static const bool kResetInDestructor = true;$/;"	m	struct:v8::CopyablePersistentTraits	typeref:typename:const bool
kReturnValueDefaultValueIndex	dependencies/include/v8.h	/^  static const int kReturnValueDefaultValueIndex = 2;$/;"	m	class:v8::FunctionCallbackInfo	typeref:typename:const int
kReturnValueDefaultValueIndex	dependencies/include/v8.h	/^  static const int kReturnValueDefaultValueIndex = 3;$/;"	m	class:v8::PropertyCallbackInfo	typeref:typename:const int
kReturnValueIndex	dependencies/include/v8.h	/^  static const int kReturnValueIndex = 3;$/;"	m	class:v8::FunctionCallbackInfo	typeref:typename:const int
kReturnValueIndex	dependencies/include/v8.h	/^  static const int kReturnValueIndex = 4;$/;"	m	class:v8::PropertyCallbackInfo	typeref:typename:const int
kRingBufferChunks	dependencies/include/libplatform/v8-tracing.h	/^  static const size_t kRingBufferChunks = 1024;$/;"	m	class:v8::platform::tracing::TraceBuffer	typeref:typename:const size_t
kSamplingForceGC	dependencies/include/v8-profiler.h	/^    kSamplingForceGC = 1 << 0,$/;"	e	enum:v8::HeapProfiler::SamplingFlags
kSamplingNoFlags	dependencies/include/v8-profiler.h	/^    kSamplingNoFlags = 0,$/;"	e	enum:v8::HeapProfiler::SamplingFlags
kScriptId	dependencies/include/v8.h	/^    kScriptId = 1 << 7,$/;"	e	enum:v8::StackTrace::StackTraceOptions
kScriptName	dependencies/include/v8.h	/^    kScriptName = 1 << 2,$/;"	e	enum:v8::StackTrace::StackTraceOptions
kScriptNameOrSourceURL	dependencies/include/v8.h	/^    kScriptNameOrSourceURL = 1 << 6,$/;"	e	enum:v8::StackTrace::StackTraceOptions
kSealed	dependencies/include/v8.h	/^enum class IntegrityLevel { kFrozen, kSealed };$/;"	e	enum:v8::IntegrityLevel
kShortcut	dependencies/include/v8-profiler.h	/^    kShortcut = 5,         \/\/ A link that must not be followed during$/;"	e	enum:v8::HeapGraphEdge::Type
kShouldThrowOnErrorIndex	dependencies/include/v8.h	/^  static const int kShouldThrowOnErrorIndex = 0;$/;"	m	class:v8::PropertyCallbackInfo	typeref:typename:const int
kSkipCEntryFrame	dependencies/include/v8-profiler.h	/^  enum RecordCEntryFrame { kIncludeCEntryFrame, kSkipCEntryFrame };$/;"	e	enum:v8::TickSample::RecordCEntryFrame
kSkipIndices	dependencies/include/v8.h	/^enum class IndexFilter { kIncludeIndices, kSkipIndices };$/;"	e	enum:v8::IndexFilter
kSlicedString	dependencies/include/v8-profiler.h	/^    kSlicedString = 11,  \/\/ Sliced string. A fragment of another string.$/;"	e	enum:v8::HeapGraphNode::Type
kSmiMaxValue	dependencies/include/v8-internal.h	/^const int kSmiMaxValue = -(kSmiMinValue + 1);$/;"	v	namespace:v8::internal	typeref:typename:const int
kSmiMinValue	dependencies/include/v8-internal.h	/^const int kSmiMinValue = (static_cast<unsigned int>(-1)) << (kSmiValueSize - 1);$/;"	v	namespace:v8::internal	typeref:typename:const int
kSmiShiftSize	dependencies/include/v8-internal.h	/^  enum { kSmiShiftSize = 0, kSmiValueSize = 31 };$/;"	e	enum:v8::internal::SmiTagging::__anona4fd579c0103
kSmiShiftSize	dependencies/include/v8-internal.h	/^  enum { kSmiShiftSize = 31, kSmiValueSize = 32 };$/;"	e	enum:v8::internal::SmiTagging::__anona4fd579c0203
kSmiShiftSize	dependencies/include/v8-internal.h	/^const int kSmiShiftSize = PlatformSmiTagging::kSmiShiftSize;$/;"	v	namespace:v8::internal	typeref:typename:const int
kSmiTag	dependencies/include/v8-internal.h	/^const int kSmiTag = 0;$/;"	v	namespace:v8::internal	typeref:typename:const int
kSmiTagMask	dependencies/include/v8-internal.h	/^const intptr_t kSmiTagMask = (1 << kSmiTagSize) - 1;$/;"	v	namespace:v8::internal	typeref:typename:const intptr_t
kSmiTagSize	dependencies/include/v8-internal.h	/^const int kSmiTagSize = 1;$/;"	v	namespace:v8::internal	typeref:typename:const int
kSmiValueSize	dependencies/include/v8-internal.h	/^  enum { kSmiShiftSize = 0, kSmiValueSize = 31 };$/;"	e	enum:v8::internal::SmiTagging::__anona4fd579c0103
kSmiValueSize	dependencies/include/v8-internal.h	/^  enum { kSmiShiftSize = 31, kSmiValueSize = 32 };$/;"	e	enum:v8::internal::SmiTagging::__anona4fd579c0203
kSmiValueSize	dependencies/include/v8-internal.h	/^const int kSmiValueSize = PlatformSmiTagging::kSmiValueSize;$/;"	v	namespace:v8::internal	typeref:typename:const int
kSticky	dependencies/include/v8.h	/^    kSticky = 1 << 3,$/;"	e	enum:v8::RegExp::Flags
kStressTypeDeopt	dependencies/include/v8-testing.h	/^    kStressTypeDeopt$/;"	e	enum:v8::Testing::StressType
kStressTypeOpt	dependencies/include/v8-testing.h	/^    kStressTypeOpt,$/;"	e	enum:v8::Testing::StressType
kString	dependencies/include/v8-profiler.h	/^    kString = 2,         \/\/ A string.$/;"	e	enum:v8::HeapGraphNode::Type
kStringEncodingMask	dependencies/include/v8-internal.h	/^  static const int kStringEncodingMask = 0x8;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kStringResourceOffset	dependencies/include/v8-internal.h	/^  static const int kStringResourceOffset = 1 * kApiTaggedSize + 2 * kApiIntSize;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kSymbol	dependencies/include/v8-profiler.h	/^    kSymbol = 12,        \/\/ A Symbol (ES6).$/;"	e	enum:v8::HeapGraphNode::Type
kSynthetic	dependencies/include/v8-profiler.h	/^    kSynthetic = 9,      \/\/ Synthetic object, usually used for grouping$/;"	e	enum:v8::HeapGraphNode::Type
kTheHoleValueRootIndex	dependencies/include/v8-internal.h	/^  static const int kTheHoleValueRootIndex = 5;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kThisIndex	dependencies/include/v8.h	/^  static const int kThisIndex = 6;$/;"	m	class:v8::PropertyCallbackInfo	typeref:typename:const int
kThrow	dependencies/include/v8.h	/^enum class ConstructorBehavior { kThrow, kAllow };$/;"	e	enum:v8::ConstructorBehavior
kTraceMaxNumArgs	dependencies/include/libplatform/v8-tracing.h	/^const int kTraceMaxNumArgs = 2;$/;"	v	namespace:v8::platform::tracing	typeref:typename:const int
kTrueValueRootIndex	dependencies/include/v8-internal.h	/^  static const int kTrueValueRootIndex = 7;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kUndefinedOddballKind	dependencies/include/v8-internal.h	/^  static const int kUndefinedOddballKind = 5;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kUndefinedValueRootIndex	dependencies/include/v8-internal.h	/^  static const int kUndefinedValueRootIndex = 4;$/;"	m	class:v8::internal::Internals	typeref:typename:const int
kUnicode	dependencies/include/v8.h	/^    kUnicode = 1 << 4,$/;"	e	enum:v8::RegExp::Flags
kUninstantiated	dependencies/include/v8.h	/^    kUninstantiated,$/;"	e	enum:v8::Module::Status
kUnknownObjectId	dependencies/include/v8-profiler.h	/^  static const SnapshotObjectId kUnknownObjectId = 0;$/;"	m	class:v8::HeapProfiler	typeref:typename:const SnapshotObjectId
kUnknownType	dependencies/include/v8-profiler.h	/^  kUnknownType = 0$/;"	e	enum:v8::CodeEventType
kWaitForWork	dependencies/include/libplatform/libplatform.h	/^  kWaitForWork = true$/;"	e	enum:v8::platform::MessageLoopBehavior
kWeak	dependencies/include/v8-profiler.h	/^    kWeak = 6              \/\/ A weak reference (ignored by the GC).$/;"	e	enum:v8::HeapGraphEdge::Type
kWeakHeapObjectTag	dependencies/include/v8-internal.h	/^const int kWeakHeapObjectTag = 3;$/;"	v	namespace:v8::internal	typeref:typename:const int
kWeakWithInternalFields	dependencies/include/v8-util.h	/^  kWeakWithInternalFields$/;"	e	enum:v8::PersistentContainerCallbackType
kWeakWithParameter	dependencies/include/v8-util.h	/^  kWeakWithParameter,$/;"	e	enum:v8::PersistentContainerCallbackType
keep_stack	dependencies/include/nlohmann/json.hpp	/^    std::vector<bool> keep_stack;$/;"	m	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:std::vector<bool>
key	dependencies/include/SFML/Window/Event.hpp	/^        KeyEvent              key;               \/\/\/< Key event parameters (Event::KeyPressed/;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:KeyEvent
key	dependencies/include/nlohmann/json.hpp	/^        key,$/;"	e	enum:nlohmann::detail::parser::parse_event_t
key	dependencies/include/nlohmann/json.hpp	/^    auto key() const -> decltype(std::declval<Base>().key())$/;"	f	class:nlohmann::detail::json_reverse_iterator	typeref:typename:decltype (std::declval<Base> ().key ())
key	dependencies/include/nlohmann/json.hpp	/^    bool key(string_t& \/*unused*\/)$/;"	f	class:nlohmann::detail::json_sax_acceptor	typeref:typename:bool
key	dependencies/include/nlohmann/json.hpp	/^    bool key(string_t& val)$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:bool
key	dependencies/include/nlohmann/json.hpp	/^    bool key(string_t& val)$/;"	f	class:nlohmann::detail::json_sax_dom_parser	typeref:typename:bool
key	dependencies/include/nlohmann/json.hpp	/^    const std::string& key() const$/;"	f	class:nlohmann::detail::iteration_proxy_value	typeref:typename:const std::string &
key	dependencies/include/nlohmann/json.hpp	/^    const typename object_t::key_type& key() const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:const typename object_t::key_type &
key_function_t	dependencies/include/nlohmann/json.hpp	/^using key_function_t =$/;"	t	namespace:nlohmann::detail
key_keep_stack	dependencies/include/nlohmann/json.hpp	/^    std::vector<bool> key_keep_stack;$/;"	m	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:std::vector<bool>
key_type_t	dependencies/include/nlohmann/json.hpp	/^using key_type_t = typename T::key_type;$/;"	t	namespace:nlohmann::detail	typeref:typename:T::key_type
label_	dependencies/include/v8-util.h	/^  const char* label_;$/;"	m	class:v8::PersistentValueMapBase	typeref:typename:const char *
lastBlendMode	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^        BlendMode lastBlendMode;  \/\/\/< Cached blending mode$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:BlendMode
lastTextureId	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^        Uint64    lastTextureId;  \/\/\/< Cached texture$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:Uint64
last_token	dependencies/include/nlohmann/json.hpp	/^    token_type last_token = token_type::uninitialized;$/;"	m	class:nlohmann::detail::parser	typeref:typename:token_type
left	dependencies/include/SFML/Graphics/Rect.hpp	/^    T left;   \/\/\/< Left coordinate of the rectangle$/;"	m	class:sf::Rect	typeref:typename:T
length	dependencies/include/SFML/Audio/Music.hpp	/^        T length; \/\/\/< The length of the time range$/;"	m	struct:sf::Music::Span	typeref:typename:T
length	dependencies/include/v8-inspector.h	/^  size_t length() const { return m_length; }$/;"	f	class:v8_inspector::StringView	typeref:typename:size_t
length	dependencies/include/v8.h	/^    int length() const { return length_; }$/;"	f	class:v8::String::Utf8Value	typeref:typename:int
length	dependencies/include/v8.h	/^    int length() const { return length_; }$/;"	f	class:v8::String::Value	typeref:typename:int
length	dependencies/include/v8.h	/^    int length;$/;"	m	struct:v8::ScriptCompiler::CachedData	typeref:typename:int
length_	dependencies/include/v8.h	/^    int length_;$/;"	m	class:v8::String::Utf8Value	typeref:typename:int
length_	dependencies/include/v8.h	/^    int length_;$/;"	m	class:v8::String::Value	typeref:typename:int
length_	dependencies/include/v8.h	/^  int length_;$/;"	m	class:v8::FunctionCallbackInfo	typeref:typename:int
length_in_bytes	dependencies/include/v8.h	/^  size_t length_in_bytes = 0;$/;"	m	struct:v8::MemoryRange	typeref:typename:size_t
less	dependencies/include/nlohmann/json.hpp	/^struct less< ::nlohmann::detail::value_t>$/;"	s	namespace:std
lexer	dependencies/include/nlohmann/json.hpp	/^    explicit lexer(detail::input_adapter_t&& adapter)$/;"	f	class:nlohmann::detail::lexer
lexer	dependencies/include/nlohmann/json.hpp	/^    using lexer = ::nlohmann::detail::lexer<basic_json>;$/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::detail::lexer<basic_json>
lexer	dependencies/include/nlohmann/json.hpp	/^class lexer$/;"	c	namespace:nlohmann::detail
lexer_t	dependencies/include/nlohmann/json.hpp	/^    using lexer_t = lexer<BasicJsonType>;$/;"	t	class:nlohmann::detail::parser	typeref:typename:lexer<BasicJsonType>
limit	dependencies/include/nlohmann/json.hpp	/^    const char* const limit;$/;"	m	class:nlohmann::detail::input_buffer_adapter	typeref:typename:const char * const
line	dependencies/include/v8-profiler.h	/^    int line;$/;"	m	struct:v8::CpuProfileNode::LineTick	typeref:typename:int
line_number	dependencies/include/v8-profiler.h	/^    int line_number;$/;"	m	struct:v8::AllocationProfile::Node	typeref:typename:int
line_number_	dependencies/include/v8.h	/^  int line_number_;$/;"	m	class:v8::Location	typeref:typename:int
lines_read	dependencies/include/nlohmann/json.hpp	/^    std::size_t lines_read = 0;$/;"	m	struct:nlohmann::detail::position_t	typeref:typename:std::size_t
literal_false	dependencies/include/nlohmann/json.hpp	/^        literal_false,    \/\/\/< the `false` literal$/;"	e	enum:nlohmann::detail::lexer::token_type
literal_null	dependencies/include/nlohmann/json.hpp	/^        literal_null,     \/\/\/< the `null` literal$/;"	e	enum:nlohmann::detail::lexer::token_type
literal_or_value	dependencies/include/nlohmann/json.hpp	/^        literal_or_value  \/\/\/< a literal or the begin of a value (only for diagnostics)$/;"	e	enum:nlohmann::detail::lexer::token_type
literal_true	dependencies/include/nlohmann/json.hpp	/^        literal_true,     \/\/\/< the `true` literal$/;"	e	enum:nlohmann::detail::lexer::token_type
little_endianess	dependencies/include/nlohmann/json.hpp	/^    static constexpr bool little_endianess(int num = 1) noexcept$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
loc	dependencies/include/nlohmann/json.hpp	/^    const std::lconv* loc = nullptr;$/;"	m	class:nlohmann::detail::serializer	typeref:typename:const std::lconv *
m	dependencies/include/nlohmann/json.hpp	/^    std::runtime_error m;$/;"	m	class:nlohmann::detail::exception	typeref:typename:std::runtime_error
m_actualSize	dependencies/include/SFML/Graphics/Texture.hpp	/^    Vector2u     m_actualSize;    \/\/\/< Actual texture size (can be greater than public size b/;"	m	class:sf::Texture	typeref:typename:Vector2u
m_address	dependencies/include/SFML/Network/IpAddress.hpp	/^    Uint32 m_address; \/\/\/< Address stored as an unsigned 32 bits integer$/;"	m	class:sf::IpAddress	typeref:typename:Uint32
m_arg	dependencies/include/SFML/System/Thread.inl	/^    A m_arg;$/;"	m	struct:priv::ThreadFunctorWithArg	typeref:typename:A	file:
m_body	dependencies/include/SFML/Network/Http.hpp	/^        std::string  m_body;         \/\/\/< Body of the request$/;"	m	class:sf::Http::Request	typeref:typename:std::string
m_body	dependencies/include/SFML/Network/Http.hpp	/^        std::string  m_body;         \/\/\/< Body of the response$/;"	m	class:sf::Http::Response	typeref:typename:std::string
m_bounds	dependencies/include/SFML/Graphics/Shape.hpp	/^    FloatRect      m_bounds;           \/\/\/< Bounding rectangle of the whole shape (outline + /;"	m	class:sf::Shape	typeref:typename:FloatRect
m_bounds	dependencies/include/SFML/Graphics/Text.hpp	/^    mutable FloatRect   m_bounds;              \/\/\/< Bounding rectangle of the text (in local /;"	m	class:sf::Text	typeref:typename:FloatRect
m_buffer	dependencies/include/SFML/Audio/Sound.hpp	/^    const SoundBuffer* m_buffer; \/\/\/< Sound buffer bound to the source$/;"	m	class:sf::Sound	typeref:typename:const SoundBuffer *
m_buffer	dependencies/include/SFML/Audio/SoundBuffer.hpp	/^    unsigned int       m_buffer;   \/\/\/< OpenAL buffer identifier$/;"	m	class:sf::SoundBuffer	typeref:typename:unsigned int
m_buffer	dependencies/include/SFML/Audio/SoundBufferRecorder.hpp	/^    SoundBuffer        m_buffer;  \/\/\/< Sound buffer that will contain the recorded data$/;"	m	class:sf::SoundBufferRecorder	typeref:typename:SoundBuffer
m_buffer	dependencies/include/SFML/Graphics/VertexBuffer.hpp	/^    unsigned int  m_buffer;        \/\/\/< Internal buffer identifier$/;"	m	class:sf::VertexBuffer	typeref:typename:unsigned int
m_buffer	dependencies/include/SFML/Network/UdpSocket.hpp	/^    std::vector<char> m_buffer; \/\/\/< Temporary buffer holding the received data in Receive(Pa/;"	m	class:sf::UdpSocket	typeref:typename:std::vector<char>
m_bufferSeeks	dependencies/include/SFML/Audio/SoundStream.hpp	/^    Int64         m_bufferSeeks[BufferCount]; \/\/\/< If buffer is an "end buffer", holds next s/;"	m	class:sf::SoundStream	typeref:typename:Int64[]
m_buffers	dependencies/include/SFML/Audio/SoundStream.hpp	/^    unsigned int  m_buffers[BufferCount];     \/\/\/< Sound buffers used to store temporary audi/;"	m	class:sf::SoundStream	typeref:typename:unsigned int[]
m_cache	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^    StatesCache m_cache;       \/\/\/< Render states cache$/;"	m	class:sf::RenderTarget	typeref:typename:StatesCache
m_cacheId	dependencies/include/SFML/Graphics/Texture.hpp	/^    Uint64       m_cacheId;       \/\/\/< Unique number that identifies the texture to the rende/;"	m	class:sf::Texture	typeref:typename:Uint64
m_center	dependencies/include/SFML/Graphics/View.hpp	/^    Vector2f          m_center;              \/\/\/< Center of the view, in scene coordinates$/;"	m	class:sf::View	typeref:typename:Vector2f
m_channelCount	dependencies/include/SFML/Audio/InputSoundFile.hpp	/^    unsigned int     m_channelCount; \/\/\/< Number of channels of the sound$/;"	m	class:sf::InputSoundFile	typeref:typename:unsigned int
m_channelCount	dependencies/include/SFML/Audio/SoundRecorder.hpp	/^    unsigned int       m_channelCount;       \/\/\/< Number of recording channels$/;"	m	class:sf::SoundRecorder	typeref:typename:unsigned int
m_channelCount	dependencies/include/SFML/Audio/SoundStream.hpp	/^    unsigned int  m_channelCount;             \/\/\/< Number of channels (1 = mono, 2 = stereo, /;"	m	class:sf::SoundStream	typeref:typename:unsigned int
m_characterSize	dependencies/include/SFML/Graphics/Text.hpp	/^    unsigned int        m_characterSize;       \/\/\/< Base size of characters, in pixels$/;"	m	class:sf::Text	typeref:typename:unsigned int
m_characters16	dependencies/include/v8-inspector.h	/^    const uint16_t* m_characters16;$/;"	m	union:v8_inspector::StringView::__anonf5fcbbf6010a	typeref:typename:const uint16_t *
m_characters8	dependencies/include/v8-inspector.h	/^    const uint8_t* m_characters8;$/;"	m	union:v8_inspector::StringView::__anonf5fcbbf6010a	typeref:typename:const uint8_t *
m_clock	dependencies/include/SFML/Window/Window.hpp	/^    Clock             m_clock;          \/\/\/< Clock for measuring the elapsed time between fra/;"	m	class:sf::Window	typeref:typename:Clock
m_commandSocket	dependencies/include/SFML/Network/Ftp.hpp	/^    TcpSocket   m_commandSocket; \/\/\/< Socket holding the control connection with the server$/;"	m	class:sf::Ftp	typeref:typename:TcpSocket
m_connection	dependencies/include/SFML/Network/Http.hpp	/^    TcpSocket      m_connection; \/\/\/< Connection to the host$/;"	m	class:sf::Http	typeref:typename:TcpSocket
m_context	dependencies/include/SFML/Window/Context.hpp	/^    priv::GlContext* m_context; \/\/\/< Internal OpenGL context$/;"	m	class:sf::Context	typeref:typename:priv::GlContext *
m_context	dependencies/include/SFML/Window/Window.hpp	/^    priv::GlContext*  m_context;        \/\/\/< Platform-specific implementation of the OpenGL c/;"	m	class:sf::Window	typeref:typename:priv::GlContext *
m_currentTexture	dependencies/include/SFML/Graphics/Shader.hpp	/^    int          m_currentTexture; \/\/\/< Location of the current texture in the shader$/;"	m	class:sf::Shader	typeref:typename:int
m_data	dependencies/include/SFML/Network/Packet.hpp	/^    std::vector<char> m_data;    \/\/\/< Data stored in the packet$/;"	m	class:sf::Packet	typeref:typename:std::vector<char>
m_data	dependencies/include/SFML/System/MemoryInputStream.hpp	/^    const char* m_data;   \/\/\/< Pointer to the data in memory$/;"	m	class:sf::MemoryInputStream	typeref:typename:const char *
m_defaultFrameBuffer	dependencies/include/SFML/Graphics/RenderWindow.hpp	/^    unsigned int m_defaultFrameBuffer; \/\/\/< Framebuffer to bind when targeting this window$/;"	m	class:sf::RenderWindow	typeref:typename:unsigned int
m_defaultView	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^    View        m_defaultView; \/\/\/< Default view$/;"	m	class:sf::RenderTarget	typeref:typename:View
m_deviceName	dependencies/include/SFML/Audio/SoundRecorder.hpp	/^    std::string        m_deviceName;         \/\/\/< Name of the audio capture device$/;"	m	class:sf::SoundRecorder	typeref:typename:std::string
m_directory	dependencies/include/SFML/Network/Ftp.hpp	/^        std::string m_directory; \/\/\/< Directory extracted from the response message$/;"	m	class:sf::Ftp::DirectoryResponse	typeref:typename:std::string
m_duration	dependencies/include/SFML/Audio/SoundBuffer.hpp	/^    Time               m_duration; \/\/\/< Sound duration$/;"	m	class:sf::SoundBuffer	typeref:typename:Time
m_entryPoint	dependencies/include/SFML/System/Thread.hpp	/^    priv::ThreadFunc* m_entryPoint; \/\/\/< Abstraction of the function to run$/;"	m	class:sf::Thread	typeref:typename:priv::ThreadFunc *
m_face	dependencies/include/SFML/Graphics/Font.hpp	/^    void*                      m_face;        \/\/\/< Pointer to the internal font face (it is t/;"	m	class:sf::Font	typeref:typename:void *
m_fboAttachment	dependencies/include/SFML/Graphics/Texture.hpp	/^    bool         m_fboAttachment; \/\/\/< Is this texture owned by a framebuffer object?$/;"	m	class:sf::Texture	typeref:typename:bool
m_fields	dependencies/include/SFML/Network/Http.hpp	/^        FieldTable   m_fields;       \/\/\/< Fields of the header associated to their value$/;"	m	class:sf::Http::Request	typeref:typename:FieldTable
m_fields	dependencies/include/SFML/Network/Http.hpp	/^        FieldTable   m_fields;       \/\/\/< Fields of the header$/;"	m	class:sf::Http::Response	typeref:typename:FieldTable
m_file	dependencies/include/SFML/Audio/Music.hpp	/^    InputSoundFile     m_file;     \/\/\/< The streamed music file$/;"	m	class:sf::Music	typeref:typename:InputSoundFile
m_file	dependencies/include/SFML/System/FileInputStream.hpp	/^    priv::ResourceStream* m_file;$/;"	m	class:sf::FileInputStream	typeref:typename:priv::ResourceStream *
m_file	dependencies/include/nlohmann/json.hpp	/^    std::FILE* m_file;$/;"	m	class:nlohmann::detail::file_input_adapter	typeref:typename:std::FILE *
m_fillColor	dependencies/include/SFML/Graphics/Shape.hpp	/^    Color          m_fillColor;        \/\/\/< Fill color$/;"	m	class:sf::Shape	typeref:typename:Color
m_fillColor	dependencies/include/SFML/Graphics/Text.hpp	/^    Color               m_fillColor;           \/\/\/< Text fill color$/;"	m	class:sf::Text	typeref:typename:Color
m_font	dependencies/include/SFML/Graphics/Text.hpp	/^    const Font*         m_font;                \/\/\/< Font used to display the string$/;"	m	class:sf::Text	typeref:typename:const Font *
m_fontTextureId	dependencies/include/SFML/Graphics/Text.hpp	/^    mutable Uint64      m_fontTextureId;       \/\/\/< The font texture id$/;"	m	class:sf::Text	typeref:typename:Uint64
m_format	dependencies/include/SFML/Audio/SoundStream.hpp	/^    Uint32        m_format;                   \/\/\/< Format of the internal sound buffers$/;"	m	class:sf::SoundStream	typeref:typename:Uint32
m_frameTimeLimit	dependencies/include/SFML/Window/Window.hpp	/^    Time              m_frameTimeLimit; \/\/\/< Current framerate limit$/;"	m	class:sf::Window	typeref:typename:Time
m_function	dependencies/include/SFML/System/Thread.inl	/^    F m_function;$/;"	m	struct:priv::ThreadFunctorWithArg	typeref:typename:F	file:
m_functor	dependencies/include/SFML/System/Thread.inl	/^    T m_functor;$/;"	m	struct:priv::ThreadFunctor	typeref:typename:T	file:
m_geometryNeedUpdate	dependencies/include/SFML/Graphics/Text.hpp	/^    mutable bool        m_geometryNeedUpdate;  \/\/\/< Does the geometry need to be recomputed?$/;"	m	class:sf::Text	typeref:typename:bool
m_hasMipmap	dependencies/include/SFML/Graphics/Texture.hpp	/^    bool         m_hasMipmap;     \/\/\/< Has the mipmap been generated?$/;"	m	class:sf::Texture	typeref:typename:bool
m_host	dependencies/include/SFML/Network/Http.hpp	/^    IpAddress      m_host;       \/\/\/< Web host address$/;"	m	class:sf::Http	typeref:typename:IpAddress
m_hostName	dependencies/include/SFML/Network/Http.hpp	/^    std::string    m_hostName;   \/\/\/< Web host name$/;"	m	class:sf::Http	typeref:typename:std::string
m_id	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^    Uint64      m_id;          \/\/\/< Unique number that identifies the RenderTarget$/;"	m	class:sf::RenderTarget	typeref:typename:Uint64
m_impl	dependencies/include/SFML/Graphics/RenderTexture.hpp	/^    priv::RenderTextureImpl* m_impl;    \/\/\/< Platform\/hardware specific implementation$/;"	m	class:sf::RenderTexture	typeref:typename:priv::RenderTextureImpl *
m_impl	dependencies/include/SFML/Network/SocketSelector.hpp	/^    SocketSelectorImpl* m_impl; \/\/\/< Opaque pointer to the implementation (which requires OS-/;"	m	class:sf::SocketSelector	typeref:typename:SocketSelectorImpl *
m_impl	dependencies/include/SFML/System/Thread.hpp	/^    priv::ThreadImpl* m_impl;       \/\/\/< OS-specific implementation of the thread$/;"	m	class:sf::Thread	typeref:typename:priv::ThreadImpl *
m_impl	dependencies/include/SFML/System/ThreadLocal.hpp	/^    priv::ThreadLocalImpl* m_impl; \/\/\/< Pointer to the OS specific implementation$/;"	m	class:sf::ThreadLocal	typeref:typename:priv::ThreadLocalImpl *
m_impl	dependencies/include/SFML/Window/Cursor.hpp	/^    priv::CursorImpl* m_impl; \/\/\/< Platform-specific implementation of the cursor$/;"	m	class:sf::Cursor	typeref:typename:priv::CursorImpl *
m_impl	dependencies/include/SFML/Window/Window.hpp	/^    priv::WindowImpl* m_impl;           \/\/\/< Platform-specific implementation of the window$/;"	m	class:sf::Window	typeref:typename:priv::WindowImpl *
m_info	dependencies/include/SFML/Graphics/Font.hpp	/^    Info                       m_info;        \/\/\/< Information about the font$/;"	m	class:sf::Font	typeref:typename:Info
m_insideBounds	dependencies/include/SFML/Graphics/Shape.hpp	/^    FloatRect      m_insideBounds;     \/\/\/< Bounding rectangle of the inside (fill)$/;"	m	class:sf::Shape	typeref:typename:FloatRect
m_invTransformUpdated	dependencies/include/SFML/Graphics/View.hpp	/^    mutable bool      m_invTransformUpdated; \/\/\/< Internal state telling if the inverse trans/;"	m	class:sf::View	typeref:typename:bool
m_inverseTransform	dependencies/include/SFML/Graphics/Transformable.hpp	/^    mutable Transform m_inverseTransform;           \/\/\/< Combined transformation of the objec/;"	m	class:sf::Transformable	typeref:typename:Transform
m_inverseTransform	dependencies/include/SFML/Graphics/View.hpp	/^    mutable Transform m_inverseTransform;    \/\/\/< Precomputed inverse projection transform co/;"	m	class:sf::View	typeref:typename:Transform
m_inverseTransformNeedUpdate	dependencies/include/SFML/Graphics/Transformable.hpp	/^    mutable bool      m_inverseTransformNeedUpdate; \/\/\/< Does the transform need to be recomp/;"	m	class:sf::Transformable	typeref:typename:bool
m_is8Bit	dependencies/include/v8-inspector.h	/^  bool m_is8Bit;$/;"	m	class:v8_inspector::StringView	typeref:typename:bool
m_isBlocking	dependencies/include/SFML/Network/Socket.hpp	/^    bool         m_isBlocking; \/\/\/< Current blocking mode of the socket$/;"	m	class:sf::Socket	typeref:typename:bool
m_isCapturing	dependencies/include/SFML/Audio/SoundRecorder.hpp	/^    bool               m_isCapturing;        \/\/\/< Capturing state$/;"	m	class:sf::SoundRecorder	typeref:typename:bool
m_isRepeated	dependencies/include/SFML/Graphics/Texture.hpp	/^    bool         m_isRepeated;    \/\/\/< Is the texture in repeat mode?$/;"	m	class:sf::Texture	typeref:typename:bool
m_isSmooth	dependencies/include/SFML/Graphics/Texture.hpp	/^    bool         m_isSmooth;      \/\/\/< Status of the smooth filter$/;"	m	class:sf::Texture	typeref:typename:bool
m_isStreaming	dependencies/include/SFML/Audio/SoundStream.hpp	/^    bool          m_isStreaming;              \/\/\/< Streaming state (true = playing, false = s/;"	m	class:sf::SoundStream	typeref:typename:bool
m_isValid	dependencies/include/SFML/Network/Packet.hpp	/^    bool              m_isValid; \/\/\/< Reading state of the packet$/;"	m	class:sf::Packet	typeref:typename:bool
m_it	dependencies/include/nlohmann/json.hpp	/^    difference_type m_it = (std::numeric_limits<std::ptrdiff_t>::min)();$/;"	m	class:nlohmann::detail::primitive_iterator_t	typeref:typename:difference_type
m_it	dependencies/include/nlohmann/json.hpp	/^    internal_iterator<typename std::remove_const<BasicJsonType>::type> m_it;$/;"	m	class:nlohmann::detail::iter_impl	typeref:typename:internal_iterator<typename std::remove_const<BasicJsonType>::type>
m_length	dependencies/include/v8-inspector.h	/^  size_t m_length;$/;"	m	class:v8_inspector::StringView	typeref:typename:size_t
m_letterSpacingFactor	dependencies/include/SFML/Graphics/Text.hpp	/^    float               m_letterSpacingFactor; \/\/\/< Spacing factor between letters$/;"	m	class:sf::Text	typeref:typename:float
m_lexer	dependencies/include/nlohmann/json.hpp	/^    lexer_t m_lexer;$/;"	m	class:nlohmann::detail::parser	typeref:typename:lexer_t
m_library	dependencies/include/SFML/Graphics/Font.hpp	/^    void*                      m_library;     \/\/\/< Pointer to the internal library interface /;"	m	class:sf::Font	typeref:typename:void *
m_lineSpacingFactor	dependencies/include/SFML/Graphics/Text.hpp	/^    float               m_lineSpacingFactor;   \/\/\/< Spacing factor between lines$/;"	m	class:sf::Text	typeref:typename:float
m_listing	dependencies/include/SFML/Network/Ftp.hpp	/^        std::vector<std::string> m_listing; \/\/\/< Directory\/file names extracted from the dat/;"	m	class:sf::Ftp::ListingResponse	typeref:typename:std::vector<std::string>
m_loop	dependencies/include/SFML/Audio/SoundStream.hpp	/^    bool          m_loop;                     \/\/\/< Loop flag (true to loop, false to play onc/;"	m	class:sf::SoundStream	typeref:typename:bool
m_loopSpan	dependencies/include/SFML/Audio/Music.hpp	/^    Span<Uint64>       m_loopSpan; \/\/\/< Loop Range Specifier$/;"	m	class:sf::Music	typeref:typename:Span<Uint64>
m_majorVersion	dependencies/include/SFML/Network/Http.hpp	/^        unsigned int m_majorVersion; \/\/\/< Major HTTP version$/;"	m	class:sf::Http::Request	typeref:typename:unsigned int
m_majorVersion	dependencies/include/SFML/Network/Http.hpp	/^        unsigned int m_majorVersion; \/\/\/< Major HTTP version$/;"	m	class:sf::Http::Response	typeref:typename:unsigned int
m_matrix	dependencies/include/SFML/Graphics/Transform.hpp	/^    float m_matrix[16]; \/\/\/< 4x4 matrix defining the transformation$/;"	m	class:sf::Transform	typeref:typename:float[16]
m_message	dependencies/include/SFML/Network/Ftp.hpp	/^        std::string m_message; \/\/\/< Last message received from the server$/;"	m	class:sf::Ftp::Response	typeref:typename:std::string
m_method	dependencies/include/SFML/Network/Http.hpp	/^        Method       m_method;       \/\/\/< Method to use for the request$/;"	m	class:sf::Http::Request	typeref:typename:Method
m_microseconds	dependencies/include/SFML/System/Time.hpp	/^    Int64 m_microseconds; \/\/\/< Time value stored as microseconds$/;"	m	class:sf::Time	typeref:typename:Int64
m_minorVersion	dependencies/include/SFML/Network/Http.hpp	/^        unsigned int m_minorVersion; \/\/\/< Minor HTTP version$/;"	m	class:sf::Http::Request	typeref:typename:unsigned int
m_minorVersion	dependencies/include/SFML/Network/Http.hpp	/^        unsigned int m_minorVersion; \/\/\/< Minor HTTP version$/;"	m	class:sf::Http::Response	typeref:typename:unsigned int
m_mutex	dependencies/include/SFML/Audio/Music.hpp	/^    Mutex              m_mutex;    \/\/\/< Mutex protecting the data$/;"	m	class:sf::Music	typeref:typename:Mutex
m_mutex	dependencies/include/SFML/System/Lock.hpp	/^    Mutex& m_mutex; \/\/\/< Mutex to lock \/ unlock$/;"	m	class:sf::Lock	typeref:typename:Mutex &
m_mutexImpl	dependencies/include/SFML/System/Mutex.hpp	/^    priv::MutexImpl* m_mutexImpl; \/\/\/< OS-specific implementation$/;"	m	class:sf::Mutex	typeref:typename:priv::MutexImpl *
m_object	dependencies/include/SFML/System/Thread.inl	/^    C* m_object;$/;"	m	struct:priv::ThreadMemberFunc	typeref:typename:C *	file:
m_object	dependencies/include/nlohmann/json.hpp	/^    pointer m_object = nullptr;$/;"	m	class:nlohmann::detail::iter_impl	typeref:typename:pointer
m_offset	dependencies/include/SFML/System/MemoryInputStream.hpp	/^    Int64       m_offset; \/\/\/< Current reading position$/;"	m	class:sf::MemoryInputStream	typeref:typename:Int64
m_origin	dependencies/include/SFML/Graphics/Transformable.hpp	/^    Vector2f          m_origin;                     \/\/\/< Origin of translation\/rotation\/sca/;"	m	class:sf::Transformable	typeref:typename:Vector2f
m_outlineColor	dependencies/include/SFML/Graphics/Shape.hpp	/^    Color          m_outlineColor;     \/\/\/< Outline color$/;"	m	class:sf::Shape	typeref:typename:Color
m_outlineColor	dependencies/include/SFML/Graphics/Text.hpp	/^    Color               m_outlineColor;        \/\/\/< Text outline color$/;"	m	class:sf::Text	typeref:typename:Color
m_outlineThickness	dependencies/include/SFML/Graphics/Shape.hpp	/^    float          m_outlineThickness; \/\/\/< Thickness of the shape's outline$/;"	m	class:sf::Shape	typeref:typename:float
m_outlineThickness	dependencies/include/SFML/Graphics/Text.hpp	/^    float               m_outlineThickness;    \/\/\/< Thickness of the text's outline$/;"	m	class:sf::Text	typeref:typename:float
m_outlineVertices	dependencies/include/SFML/Graphics/Shape.hpp	/^    VertexArray    m_outlineVertices;  \/\/\/< Vertex array containing the outline geometry$/;"	m	class:sf::Shape	typeref:typename:VertexArray
m_outlineVertices	dependencies/include/SFML/Graphics/Text.hpp	/^    mutable VertexArray m_outlineVertices;     \/\/\/< Vertex array containing the outline geome/;"	m	class:sf::Text	typeref:typename:VertexArray
m_pages	dependencies/include/SFML/Graphics/Font.hpp	/^    mutable PageTable          m_pages;       \/\/\/< Table containing the glyphs pages by chara/;"	m	class:sf::Font	typeref:typename:PageTable
m_pendingPacket	dependencies/include/SFML/Network/TcpSocket.hpp	/^    PendingPacket m_pendingPacket; \/\/\/< Temporary data of the packet currently being received$/;"	m	class:sf::TcpSocket	typeref:typename:PendingPacket
m_pixelBuffer	dependencies/include/SFML/Graphics/Font.hpp	/^    mutable std::vector<Uint8> m_pixelBuffer; \/\/\/< Pixel buffer holding a glyph's pixels befo/;"	m	class:sf::Font	typeref:typename:std::vector<Uint8>
m_pixels	dependencies/include/SFML/Graphics/Image.hpp	/^    std::vector<Uint8> m_pixels; \/\/\/< Pixels of the image$/;"	m	class:sf::Image	typeref:typename:std::vector<Uint8>
m_pixelsFlipped	dependencies/include/SFML/Graphics/Texture.hpp	/^    mutable bool m_pixelsFlipped; \/\/\/< To work around the inconsistency in Y orientation$/;"	m	class:sf::Texture	typeref:typename:bool
m_pointCount	dependencies/include/SFML/Graphics/CircleShape.hpp	/^    std::size_t m_pointCount; \/\/\/< Number of points composing the circle$/;"	m	class:sf::CircleShape	typeref:typename:std::size_t
m_points	dependencies/include/SFML/Graphics/ConvexShape.hpp	/^    std::vector<Vector2f> m_points; \/\/\/< Points composing the convex polygon$/;"	m	class:sf::ConvexShape	typeref:typename:std::vector<Vector2f>
m_port	dependencies/include/SFML/Network/Http.hpp	/^    unsigned short m_port;       \/\/\/< Port used for connection with host$/;"	m	class:sf::Http	typeref:typename:unsigned short
m_position	dependencies/include/SFML/Graphics/Transformable.hpp	/^    Vector2f          m_position;                   \/\/\/< Position of the object in the 2D wor/;"	m	class:sf::Transformable	typeref:typename:Vector2f
m_primitiveType	dependencies/include/SFML/Graphics/VertexArray.hpp	/^    PrimitiveType       m_primitiveType; \/\/\/< Type of primitives to draw$/;"	m	class:sf::VertexArray	typeref:typename:PrimitiveType
m_primitiveType	dependencies/include/SFML/Graphics/VertexBuffer.hpp	/^    PrimitiveType m_primitiveType; \/\/\/< Type of primitives to draw$/;"	m	class:sf::VertexBuffer	typeref:typename:PrimitiveType
m_processingInterval	dependencies/include/SFML/Audio/SoundRecorder.hpp	/^    Time               m_processingInterval; \/\/\/< Time period between calls to onProcessSampl/;"	m	class:sf::SoundRecorder	typeref:typename:Time
m_radius	dependencies/include/SFML/Graphics/CircleShape.hpp	/^    float       m_radius;     \/\/\/< Radius of the circle$/;"	m	class:sf::CircleShape	typeref:typename:float
m_readPos	dependencies/include/SFML/Network/Packet.hpp	/^    std::size_t       m_readPos; \/\/\/< Current reading position in the packet$/;"	m	class:sf::Packet	typeref:typename:std::size_t
m_reader	dependencies/include/SFML/Audio/InputSoundFile.hpp	/^    SoundFileReader* m_reader;       \/\/\/< Reader that handles I\/O on the file's format$/;"	m	class:sf::InputSoundFile	typeref:typename:SoundFileReader *
m_receiveBuffer	dependencies/include/SFML/Network/Ftp.hpp	/^    std::string m_receiveBuffer; \/\/\/< Received command data that is yet to be processed$/;"	m	class:sf::Ftp	typeref:typename:std::string
m_refCount	dependencies/include/SFML/Graphics/Font.hpp	/^    int*                       m_refCount;    \/\/\/< Reference counter used by implicit sharing$/;"	m	class:sf::Font	typeref:typename:int *
m_rotation	dependencies/include/SFML/Graphics/Transformable.hpp	/^    float             m_rotation;                   \/\/\/< Orientation of the object, in degree/;"	m	class:sf::Transformable	typeref:typename:float
m_rotation	dependencies/include/SFML/Graphics/View.hpp	/^    float             m_rotation;            \/\/\/< Angle of rotation of the view rectangle, in/;"	m	class:sf::View	typeref:typename:float
m_sRgb	dependencies/include/SFML/Graphics/Texture.hpp	/^    bool         m_sRgb;          \/\/\/< Should the texture source be converted from sRGB?$/;"	m	class:sf::Texture	typeref:typename:bool
m_sampleCount	dependencies/include/SFML/Audio/InputSoundFile.hpp	/^    Uint64           m_sampleCount;  \/\/\/< Total number of samples in the file$/;"	m	class:sf::InputSoundFile	typeref:typename:Uint64
m_sampleOffset	dependencies/include/SFML/Audio/InputSoundFile.hpp	/^    Uint64           m_sampleOffset; \/\/\/< Sample Read Position$/;"	m	class:sf::InputSoundFile	typeref:typename:Uint64
m_sampleRate	dependencies/include/SFML/Audio/InputSoundFile.hpp	/^    unsigned int     m_sampleRate;   \/\/\/< Number of samples per second$/;"	m	class:sf::InputSoundFile	typeref:typename:unsigned int
m_sampleRate	dependencies/include/SFML/Audio/SoundRecorder.hpp	/^    unsigned int       m_sampleRate;         \/\/\/< Sample rate$/;"	m	class:sf::SoundRecorder	typeref:typename:unsigned int
m_sampleRate	dependencies/include/SFML/Audio/SoundStream.hpp	/^    unsigned int  m_sampleRate;               \/\/\/< Frequency (samples \/ second)$/;"	m	class:sf::SoundStream	typeref:typename:unsigned int
m_samples	dependencies/include/SFML/Audio/Music.hpp	/^    std::vector<Int16> m_samples;  \/\/\/< Temporary buffer of samples$/;"	m	class:sf::Music	typeref:typename:std::vector<Int16>
m_samples	dependencies/include/SFML/Audio/SoundBuffer.hpp	/^    std::vector<Int16> m_samples;  \/\/\/< Samples buffer$/;"	m	class:sf::SoundBuffer	typeref:typename:std::vector<Int16>
m_samples	dependencies/include/SFML/Audio/SoundBufferRecorder.hpp	/^    std::vector<Int16> m_samples; \/\/\/< Temporary sample buffer to hold the recorded data$/;"	m	class:sf::SoundBufferRecorder	typeref:typename:std::vector<Int16>
m_samples	dependencies/include/SFML/Audio/SoundRecorder.hpp	/^    std::vector<Int16> m_samples;            \/\/\/< Buffer to store captured samples$/;"	m	class:sf::SoundRecorder	typeref:typename:std::vector<Int16>
m_samplesProcessed	dependencies/include/SFML/Audio/SoundStream.hpp	/^    Uint64        m_samplesProcessed;         \/\/\/< Number of buffers processed since beginnin/;"	m	class:sf::SoundStream	typeref:typename:Uint64
m_scale	dependencies/include/SFML/Graphics/Transformable.hpp	/^    Vector2f          m_scale;                      \/\/\/< Scale of the object$/;"	m	class:sf::Transformable	typeref:typename:Vector2f
m_sendPos	dependencies/include/SFML/Network/Packet.hpp	/^    std::size_t       m_sendPos; \/\/\/< Current send position in the packet (for handling parti/;"	m	class:sf::Packet	typeref:typename:std::size_t
m_shaderProgram	dependencies/include/SFML/Graphics/Shader.hpp	/^    unsigned int m_shaderProgram;  \/\/\/< OpenGL identifier for the program$/;"	m	class:sf::Shader	typeref:typename:unsigned int
m_size	dependencies/include/SFML/Graphics/Image.hpp	/^    Vector2u           m_size;   \/\/\/< Image size$/;"	m	class:sf::Image	typeref:typename:Vector2u
m_size	dependencies/include/SFML/Graphics/RectangleShape.hpp	/^    Vector2f m_size; \/\/\/< Size of the rectangle$/;"	m	class:sf::RectangleShape	typeref:typename:Vector2f
m_size	dependencies/include/SFML/Graphics/Texture.hpp	/^    Vector2u     m_size;          \/\/\/< Public texture size$/;"	m	class:sf::Texture	typeref:typename:Vector2u
m_size	dependencies/include/SFML/Graphics/VertexBuffer.hpp	/^    std::size_t   m_size;          \/\/\/< Size in Vertexes of the currently allocated buffer$/;"	m	class:sf::VertexBuffer	typeref:typename:std::size_t
m_size	dependencies/include/SFML/Graphics/View.hpp	/^    Vector2f          m_size;                \/\/\/< Size of the view, in scene coordinates$/;"	m	class:sf::View	typeref:typename:Vector2f
m_size	dependencies/include/SFML/System/MemoryInputStream.hpp	/^    Int64       m_size;   \/\/\/< Total size of the data$/;"	m	class:sf::MemoryInputStream	typeref:typename:Int64
m_size	dependencies/include/SFML/Window/Window.hpp	/^    Vector2u          m_size;           \/\/\/< Current size of the window$/;"	m	class:sf::Window	typeref:typename:Vector2u
m_socket	dependencies/include/SFML/Network/Socket.hpp	/^    SocketHandle m_socket;     \/\/\/< Socket descriptor$/;"	m	class:sf::Socket	typeref:typename:SocketHandle
m_sounds	dependencies/include/SFML/Audio/SoundBuffer.hpp	/^    mutable SoundList  m_sounds;   \/\/\/< List of sounds that are using this buffer$/;"	m	class:sf::SoundBuffer	typeref:typename:SoundList
m_source	dependencies/include/SFML/Audio/SoundSource.hpp	/^    unsigned int m_source; \/\/\/< OpenAL source identifier$/;"	m	class:sf::SoundSource	typeref:typename:unsigned int
m_startTime	dependencies/include/SFML/System/Clock.hpp	/^    Time m_startTime; \/\/\/< Time of last reset, in microseconds$/;"	m	class:sf::Clock	typeref:typename:Time
m_status	dependencies/include/SFML/Network/Ftp.hpp	/^        Status      m_status;  \/\/\/< Status code returned from the server$/;"	m	class:sf::Ftp::Response	typeref:typename:Status
m_status	dependencies/include/SFML/Network/Http.hpp	/^        Status       m_status;       \/\/\/< Status code$/;"	m	class:sf::Http::Response	typeref:typename:Status
m_stream	dependencies/include/SFML/Audio/InputSoundFile.hpp	/^    InputStream*     m_stream;       \/\/\/< Input stream used to access the file's data$/;"	m	class:sf::InputSoundFile	typeref:typename:InputStream *
m_stream	dependencies/include/SFML/Graphics/Font.hpp	/^    void*                      m_stream; \/\/\/< Asset file streamer (if loaded from file)$/;"	m	class:sf::Font	typeref:typename:void *
m_streamOwned	dependencies/include/SFML/Audio/InputSoundFile.hpp	/^    bool             m_streamOwned;  \/\/\/< Is the stream internal or external?$/;"	m	class:sf::InputSoundFile	typeref:typename:bool
m_streamRec	dependencies/include/SFML/Graphics/Font.hpp	/^    void*                      m_streamRec;   \/\/\/< Pointer to the stream rec instance (it is /;"	m	class:sf::Font	typeref:typename:void *
m_string	dependencies/include/SFML/Graphics/Text.hpp	/^    String              m_string;              \/\/\/< String to display$/;"	m	class:sf::Text	typeref:typename:String
m_string	dependencies/include/SFML/System/String.hpp	/^    std::basic_string<Uint32> m_string; \/\/\/< Internal string of UTF-32 characters$/;"	m	class:sf::String	typeref:typename:std::basic_string<Uint32>
m_stroker	dependencies/include/SFML/Graphics/Font.hpp	/^    void*                      m_stroker;     \/\/\/< Pointer to the stroker (it is typeless to /;"	m	class:sf::Font	typeref:typename:void *
m_style	dependencies/include/SFML/Graphics/Text.hpp	/^    Uint32              m_style;               \/\/\/< Text style (see Style enum)$/;"	m	class:sf::Text	typeref:typename:Uint32
m_texture	dependencies/include/SFML/Graphics/RenderTexture.hpp	/^    Texture                  m_texture; \/\/\/< Target texture to draw on$/;"	m	class:sf::RenderTexture	typeref:typename:Texture
m_texture	dependencies/include/SFML/Graphics/Shape.hpp	/^    const Texture* m_texture;          \/\/\/< Texture of the shape$/;"	m	class:sf::Shape	typeref:typename:const Texture *
m_texture	dependencies/include/SFML/Graphics/Sprite.hpp	/^    const Texture* m_texture;     \/\/\/< Texture of the sprite$/;"	m	class:sf::Sprite	typeref:typename:const Texture *
m_texture	dependencies/include/SFML/Graphics/Texture.hpp	/^    unsigned int m_texture;       \/\/\/< Internal texture identifier$/;"	m	class:sf::Texture	typeref:typename:unsigned int
m_textureRect	dependencies/include/SFML/Graphics/Shape.hpp	/^    IntRect        m_textureRect;      \/\/\/< Rectangle defining the area of the source texture/;"	m	class:sf::Shape	typeref:typename:IntRect
m_textureRect	dependencies/include/SFML/Graphics/Sprite.hpp	/^    IntRect        m_textureRect; \/\/\/< Rectangle defining the area of the source texture to d/;"	m	class:sf::Sprite	typeref:typename:IntRect
m_textures	dependencies/include/SFML/Graphics/Shader.hpp	/^    TextureTable m_textures;       \/\/\/< Texture variables in the shader, mapped to their loca/;"	m	class:sf::Shader	typeref:typename:TextureTable
m_thread	dependencies/include/SFML/Audio/SoundRecorder.hpp	/^    Thread             m_thread;             \/\/\/< Thread running the background recording tas/;"	m	class:sf::SoundRecorder	typeref:typename:Thread
m_thread	dependencies/include/SFML/Audio/SoundStream.hpp	/^    Thread        m_thread;                   \/\/\/< Thread running the background tasks$/;"	m	class:sf::SoundStream	typeref:typename:Thread
m_threadMutex	dependencies/include/SFML/Audio/SoundStream.hpp	/^    mutable Mutex m_threadMutex;              \/\/\/< Thread mutex$/;"	m	class:sf::SoundStream	typeref:typename:Mutex
m_threadStartState	dependencies/include/SFML/Audio/SoundStream.hpp	/^    Status        m_threadStartState;         \/\/\/< State the thread starts in (Playing, Pause/;"	m	class:sf::SoundStream	typeref:typename:Status
m_transform	dependencies/include/SFML/Graphics/Transformable.hpp	/^    mutable Transform m_transform;                  \/\/\/< Combined transformation of the objec/;"	m	class:sf::Transformable	typeref:typename:Transform
m_transform	dependencies/include/SFML/Graphics/View.hpp	/^    mutable Transform m_transform;           \/\/\/< Precomputed projection transform correspond/;"	m	class:sf::View	typeref:typename:Transform
m_transformNeedUpdate	dependencies/include/SFML/Graphics/Transformable.hpp	/^    mutable bool      m_transformNeedUpdate;        \/\/\/< Does the transform need to be recomp/;"	m	class:sf::Transformable	typeref:typename:bool
m_transformUpdated	dependencies/include/SFML/Graphics/View.hpp	/^    mutable bool      m_transformUpdated;    \/\/\/< Internal state telling if the transform nee/;"	m	class:sf::View	typeref:typename:bool
m_type	dependencies/include/SFML/Network/Socket.hpp	/^    Type         m_type;       \/\/\/< Type of the socket (TCP or UDP)$/;"	m	class:sf::Socket	typeref:typename:Type
m_type	dependencies/include/nlohmann/json.hpp	/^    value_t m_type = value_t::null;$/;"	m	class:nlohmann::basic_json	typeref:typename:value_t
m_uniforms	dependencies/include/SFML/Graphics/Shader.hpp	/^    UniformTable m_uniforms;       \/\/\/< Parameters location cache$/;"	m	class:sf::Shader	typeref:typename:UniformTable
m_uri	dependencies/include/SFML/Network/Http.hpp	/^        std::string  m_uri;          \/\/\/< Target URI of the request$/;"	m	class:sf::Http::Request	typeref:typename:std::string
m_usage	dependencies/include/SFML/Graphics/VertexBuffer.hpp	/^    Usage         m_usage;         \/\/\/< How this vertex buffer is to be used$/;"	m	class:sf::VertexBuffer	typeref:typename:Usage
m_valid	dependencies/include/SFML/Network/IpAddress.hpp	/^    bool   m_valid;   \/\/\/< Is the address valid?$/;"	m	class:sf::IpAddress	typeref:typename:bool
m_vertices	dependencies/include/SFML/Graphics/Shape.hpp	/^    VertexArray    m_vertices;         \/\/\/< Vertex array containing the fill geometry$/;"	m	class:sf::Shape	typeref:typename:VertexArray
m_vertices	dependencies/include/SFML/Graphics/Sprite.hpp	/^    Vertex         m_vertices[4]; \/\/\/< Vertices defining the sprite's geometry$/;"	m	class:sf::Sprite	typeref:typename:Vertex[4]
m_vertices	dependencies/include/SFML/Graphics/Text.hpp	/^    mutable VertexArray m_vertices;            \/\/\/< Vertex array containing the fill geometry$/;"	m	class:sf::Text	typeref:typename:VertexArray
m_vertices	dependencies/include/SFML/Graphics/VertexArray.hpp	/^    std::vector<Vertex> m_vertices;      \/\/\/< Vertices contained in the array$/;"	m	class:sf::VertexArray	typeref:typename:std::vector<Vertex>
m_view	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^    View        m_view;        \/\/\/< Current view$/;"	m	class:sf::RenderTarget	typeref:typename:View
m_viewport	dependencies/include/SFML/Graphics/View.hpp	/^    FloatRect         m_viewport;            \/\/\/< Viewport rectangle, expressed as a factor o/;"	m	class:sf::View	typeref:typename:FloatRect
m_writer	dependencies/include/SFML/Audio/OutputSoundFile.hpp	/^    SoundFileWriter* m_writer; \/\/\/< Writer that handles I\/O on the file's format$/;"	m	class:sf::OutputSoundFile	typeref:typename:SoundFileWriter *
main	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f	typeref:typename:void
main	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	build/default/CMakeFiles/feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f	typeref:typename:int
main	build/default/CMakeFiles/feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f	typeref:typename:int
main	dependencies/include/SFML/Main.hpp	/^    #define main /;"	d
main	src/Main.cpp	/^int main(){$/;"	f	typeref:typename:int
majorVersion	dependencies/include/SFML/Window/ContextSettings.hpp	/^    unsigned int majorVersion;      \/\/\/< Major number of the context version to create$/;"	m	struct:sf::ContextSettings	typeref:typename:unsigned int
make_index_sequence	dependencies/include/nlohmann/json.hpp	/^struct make_index_sequence$/;"	s	namespace:nlohmann::detail
make_index_sequence	dependencies/include/nlohmann/json.hpp	/^template<> struct make_index_sequence<0> : index_sequence<> {};$/;"	s	namespace:nlohmann::detail
make_index_sequence	dependencies/include/nlohmann/json.hpp	/^template<> struct make_index_sequence<1> : index_sequence<0> {};$/;"	s	namespace:nlohmann::detail
make_void	dependencies/include/nlohmann/json.hpp	/^template <typename ...Ts> struct make_void$/;"	s	namespace:nlohmann::detail
mapped_type_t	dependencies/include/nlohmann/json.hpp	/^using mapped_type_t = typename T::mapped_type;$/;"	t	namespace:nlohmann::detail	typeref:typename:T::mapped_type
maxAsyncCallStackDepthChanged	dependencies/include/v8-inspector.h	/^  virtual void maxAsyncCallStackDepthChanged(int depth) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
max_size	dependencies/include/nlohmann/json.hpp	/^    size_type max_size() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:size_type
memoryInfo	dependencies/include/v8-inspector.h	/^  virtual v8::MaybeLocal<v8::Value> memoryInfo(v8::Isolate*,$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:v8::MaybeLocal<v8::Value>
merge_and_renumber	dependencies/include/nlohmann/json.hpp	/^struct merge_and_renumber<index_sequence<I1...>, index_sequence<I2...>>$/;"	s	namespace:nlohmann::detail
merge_patch	dependencies/include/nlohmann/json.hpp	/^    void merge_patch(const basic_json& apply_patch)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
meta	dependencies/include/nlohmann/json.hpp	/^    static basic_json meta()$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
minorVersion	dependencies/include/SFML/Window/ContextSettings.hpp	/^    unsigned int minorVersion;      \/\/\/< Minor number of the context version to create$/;"	m	struct:sf::ContextSettings	typeref:typename:unsigned int
minus	dependencies/include/nlohmann/json.hpp	/^    diyfp minus;$/;"	m	struct:nlohmann::detail::dtoa_impl::boundaries	typeref:typename:diyfp
mode_	dependencies/include/libplatform/v8-tracing.h	/^  Mode mode_ = DISABLED;$/;"	m	class:v8::platform::tracing::TracingController	typeref:typename:Mode
mouseButton	dependencies/include/SFML/Window/Event.hpp	/^        MouseButtonEvent      mouseButton;       \/\/\/< Mouse button event parameters (Event::M/;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:MouseButtonEvent
mouseMove	dependencies/include/SFML/Window/Event.hpp	/^        MouseMoveEvent        mouseMove;         \/\/\/< Mouse move event parameters (Event::Mou/;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:MouseMoveEvent
mouseWheel	dependencies/include/SFML/Window/Event.hpp	/^        MouseWheelEvent       mouseWheel;        \/\/\/< Mouse wheel event parameters (Event::Mo/;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:MouseWheelEvent
mouseWheelScroll	dependencies/include/SFML/Window/Event.hpp	/^        MouseWheelScrollEvent mouseWheelScroll;  \/\/\/< Mouse wheel event parameters (Event::Mo/;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:MouseWheelScrollEvent
move	dependencies/include/nlohmann/json.hpp	/^        enum class patch_operations {add, remove, replace, move, copy, test, invalid};$/;"	e	enum:nlohmann::basic_json::patch::patch_operations
moved_or_copied	dependencies/include/nlohmann/json.hpp	/^    value_type moved_or_copied() const$/;"	f	class:nlohmann::detail::json_ref	typeref:typename:value_type
msgpack	dependencies/include/nlohmann/json.hpp	/^enum class input_format_t { json, cbor, msgpack, ubjson, bson };$/;"	e	enum:nlohmann::detail::input_format_t
mul	dependencies/include/nlohmann/json.hpp	/^    static diyfp mul(const diyfp& x, const diyfp& y) noexcept$/;"	f	struct:nlohmann::detail::dtoa_impl::diyfp	typeref:typename:diyfp
muteMetrics	dependencies/include/v8-inspector.h	/^  virtual void muteMetrics(int contextGroupId) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
mutex_	dependencies/include/libplatform/v8-tracing.h	/^  std::unique_ptr<base::Mutex> mutex_;$/;"	m	class:v8::platform::tracing::TracingController	typeref:typename:std::unique_ptr<base::Mutex>
name	dependencies/include/SFML/Window/Joystick.hpp	/^        String       name;      \/\/\/< Name of the joystick$/;"	m	struct:sf::Joystick::Identification	typeref:typename:String
name	dependencies/include/libplatform/v8-tracing.h	/^  const char* name() const { return name_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:const char *
name	dependencies/include/nlohmann/json.hpp	/^    static std::string name(const std::string& ename, int id_)$/;"	f	class:nlohmann::detail::exception	typeref:typename:std::string
name	dependencies/include/v8-profiler.h	/^    Local<String> name;$/;"	m	struct:v8::AllocationProfile::Node	typeref:typename:Local<String>
name_	dependencies/include/libplatform/v8-tracing.h	/^  const char* name_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:const char *
name_separator	dependencies/include/nlohmann/json.hpp	/^        name_separator,   \/\/\/< the name separator `:`$/;"	e	enum:nlohmann::detail::lexer::token_type
native_module_	dependencies/include/v8.h	/^  const std::shared_ptr<internal::wasm::NativeModule> native_module_;$/;"	m	class:v8::CompiledWasmModule	typeref:typename:const std::shared_ptr<internal::wasm::NativeModule>
next	dependencies/include/SFML/System/Utf.inl	/^In Utf<16>::next(In begin, In end)$/;"	f	class:Utf	typeref:typename:In
next	dependencies/include/SFML/System/Utf.inl	/^In Utf<32>::next(In begin, In \/*end*\/)$/;"	f	class:Utf	typeref:typename:In
next	dependencies/include/SFML/System/Utf.inl	/^In Utf<8>::next(In begin, In end)$/;"	f	class:Utf	typeref:typename:In
nextRow	dependencies/include/SFML/Graphics/Font.hpp	/^        unsigned int     nextRow; \/\/\/< Y position of the next new row in the texture$/;"	m	struct:sf::Font::Page	typeref:typename:unsigned int
next_byte_in_range	dependencies/include/nlohmann/json.hpp	/^    bool next_byte_in_range(std::initializer_list<int> ranges)$/;"	f	class:nlohmann::detail::lexer	typeref:typename:bool
next_free_	dependencies/include/libplatform/v8-tracing.h	/^  size_t next_free_ = 0;$/;"	m	class:v8::platform::tracing::TraceBufferChunk	typeref:typename:size_t
next_unget	dependencies/include/nlohmann/json.hpp	/^    bool next_unget = false;$/;"	m	class:nlohmann::detail::lexer	typeref:typename:bool
nlohmann	dependencies/include/nlohmann/json.hpp	/^namespace nlohmann$/;"	n
node_id	dependencies/include/v8-profiler.h	/^    uint32_t node_id;$/;"	m	struct:v8::AllocationProfile::Node	typeref:typename:uint32_t
node_id	dependencies/include/v8-profiler.h	/^    uint32_t node_id;$/;"	m	struct:v8::AllocationProfile::Sample	typeref:typename:uint32_t
nonesuch	dependencies/include/nlohmann/json.hpp	/^struct nonesuch$/;"	s	namespace:nlohmann::detail
normalize	dependencies/include/nlohmann/json.hpp	/^    static diyfp normalize(diyfp x) noexcept$/;"	f	struct:nlohmann::detail::dtoa_impl::diyfp	typeref:typename:diyfp
normalize_to	dependencies/include/nlohmann/json.hpp	/^    static diyfp normalize_to(const diyfp& x, const int target_exponent) noexcept$/;"	f	struct:nlohmann::detail::dtoa_impl::diyfp	typeref:typename:diyfp
null	dependencies/include/nlohmann/json.hpp	/^    bool null()$/;"	f	class:nlohmann::detail::json_sax_acceptor	typeref:typename:bool
null	dependencies/include/nlohmann/json.hpp	/^    bool null()$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:bool
null	dependencies/include/nlohmann/json.hpp	/^    bool null()$/;"	f	class:nlohmann::detail::json_sax_dom_parser	typeref:typename:bool
null	dependencies/include/nlohmann/json.hpp	/^    null,             \/\/\/< null value$/;"	e	enum:nlohmann::detail::value_t
null_function_t	dependencies/include/nlohmann/json.hpp	/^        is_detected_exact<bool, null_function_t, SAX>::value &&$/;"	m	struct:nlohmann::detail::is_sax	typeref:typename:bool
null_function_t	dependencies/include/nlohmann/json.hpp	/^using null_function_t = decltype(std::declval<T&>().null());$/;"	t	namespace:nlohmann::detail
num_args	dependencies/include/libplatform/v8-tracing.h	/^  int num_args() const { return num_args_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:int
num_args_	dependencies/include/libplatform/v8-tracing.h	/^  int num_args_ = 0;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:int
number_buffer	dependencies/include/nlohmann/json.hpp	/^    std::array<char, 64> number_buffer{{}};$/;"	m	class:nlohmann::detail::serializer	typeref:typename:std::array<char,64>
number_float	dependencies/include/nlohmann/json.hpp	/^        number_float_t number_float;$/;"	m	union:nlohmann::basic_json::json_value	typeref:typename:number_float_t
number_float	dependencies/include/nlohmann/json.hpp	/^    bool number_float(number_float_t \/*unused*\/, const string_t& \/*unused*\/)$/;"	f	class:nlohmann::detail::json_sax_acceptor	typeref:typename:bool
number_float	dependencies/include/nlohmann/json.hpp	/^    bool number_float(number_float_t val, const string_t& \/*unused*\/)$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:bool
number_float	dependencies/include/nlohmann/json.hpp	/^    bool number_float(number_float_t val, const string_t& \/*unused*\/)$/;"	f	class:nlohmann::detail::json_sax_dom_parser	typeref:typename:bool
number_float	dependencies/include/nlohmann/json.hpp	/^    number_float,     \/\/\/< number value (floating-point)$/;"	e	enum:nlohmann::detail::value_t
number_float_function_t	dependencies/include/nlohmann/json.hpp	/^using number_float_function_t = decltype(std::declval<T&>().number_float($/;"	t	namespace:nlohmann::detail
number_float_t	dependencies/include/nlohmann/json.hpp	/^    using number_float_t = NumberFloatType;$/;"	t	class:nlohmann::basic_json	typeref:typename:NumberFloatType
number_float_t	dependencies/include/nlohmann/json.hpp	/^    using number_float_t = typename BasicJsonType::number_float_t;$/;"	t	class:nlohmann::detail::binary_reader	typeref:typename:BasicJsonType::number_float_t
number_float_t	dependencies/include/nlohmann/json.hpp	/^    using number_float_t = typename BasicJsonType::number_float_t;$/;"	t	class:nlohmann::detail::json_sax_acceptor	typeref:typename:BasicJsonType::number_float_t
number_float_t	dependencies/include/nlohmann/json.hpp	/^    using number_float_t = typename BasicJsonType::number_float_t;$/;"	t	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:BasicJsonType::number_float_t
number_float_t	dependencies/include/nlohmann/json.hpp	/^    using number_float_t = typename BasicJsonType::number_float_t;$/;"	t	class:nlohmann::detail::json_sax_dom_parser	typeref:typename:BasicJsonType::number_float_t
number_float_t	dependencies/include/nlohmann/json.hpp	/^    using number_float_t = typename BasicJsonType::number_float_t;$/;"	t	class:nlohmann::detail::lexer	typeref:typename:BasicJsonType::number_float_t
number_float_t	dependencies/include/nlohmann/json.hpp	/^    using number_float_t = typename BasicJsonType::number_float_t;$/;"	t	class:nlohmann::detail::parser	typeref:typename:BasicJsonType::number_float_t
number_float_t	dependencies/include/nlohmann/json.hpp	/^    using number_float_t = typename BasicJsonType::number_float_t;$/;"	t	class:nlohmann::detail::serializer	typeref:typename:BasicJsonType::number_float_t
number_float_t	dependencies/include/nlohmann/json.hpp	/^    using number_float_t = typename BasicJsonType::number_float_t;$/;"	t	struct:nlohmann::detail::is_sax	typeref:typename:BasicJsonType::number_float_t
number_float_t	dependencies/include/nlohmann/json.hpp	/^    using number_float_t = typename BasicJsonType::number_float_t;$/;"	t	struct:nlohmann::detail::is_sax_static_asserts	typeref:typename:BasicJsonType::number_float_t
number_float_t	dependencies/include/nlohmann/json.hpp	/^    using number_float_t = typename BasicJsonType::number_float_t;$/;"	t	struct:nlohmann::json_sax	typeref:typename:BasicJsonType::number_float_t
number_integer	dependencies/include/nlohmann/json.hpp	/^        number_integer_t number_integer;$/;"	m	union:nlohmann::basic_json::json_value	typeref:typename:number_integer_t
number_integer	dependencies/include/nlohmann/json.hpp	/^    bool number_integer(number_integer_t \/*unused*\/)$/;"	f	class:nlohmann::detail::json_sax_acceptor	typeref:typename:bool
number_integer	dependencies/include/nlohmann/json.hpp	/^    bool number_integer(number_integer_t val)$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:bool
number_integer	dependencies/include/nlohmann/json.hpp	/^    bool number_integer(number_integer_t val)$/;"	f	class:nlohmann::detail::json_sax_dom_parser	typeref:typename:bool
number_integer	dependencies/include/nlohmann/json.hpp	/^    number_integer,   \/\/\/< number value (signed integer)$/;"	e	enum:nlohmann::detail::value_t
number_integer_function_t	dependencies/include/nlohmann/json.hpp	/^using number_integer_function_t =$/;"	t	namespace:nlohmann::detail
number_integer_t	dependencies/include/nlohmann/json.hpp	/^    using number_integer_t = NumberIntegerType;$/;"	t	class:nlohmann::basic_json	typeref:typename:NumberIntegerType
number_integer_t	dependencies/include/nlohmann/json.hpp	/^    using number_integer_t = typename BasicJsonType::number_integer_t;$/;"	t	class:nlohmann::detail::binary_reader	typeref:typename:BasicJsonType::number_integer_t
number_integer_t	dependencies/include/nlohmann/json.hpp	/^    using number_integer_t = typename BasicJsonType::number_integer_t;$/;"	t	class:nlohmann::detail::json_sax_acceptor	typeref:typename:BasicJsonType::number_integer_t
number_integer_t	dependencies/include/nlohmann/json.hpp	/^    using number_integer_t = typename BasicJsonType::number_integer_t;$/;"	t	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:BasicJsonType::number_integer_t
number_integer_t	dependencies/include/nlohmann/json.hpp	/^    using number_integer_t = typename BasicJsonType::number_integer_t;$/;"	t	class:nlohmann::detail::json_sax_dom_parser	typeref:typename:BasicJsonType::number_integer_t
number_integer_t	dependencies/include/nlohmann/json.hpp	/^    using number_integer_t = typename BasicJsonType::number_integer_t;$/;"	t	class:nlohmann::detail::lexer	typeref:typename:BasicJsonType::number_integer_t
number_integer_t	dependencies/include/nlohmann/json.hpp	/^    using number_integer_t = typename BasicJsonType::number_integer_t;$/;"	t	class:nlohmann::detail::parser	typeref:typename:BasicJsonType::number_integer_t
number_integer_t	dependencies/include/nlohmann/json.hpp	/^    using number_integer_t = typename BasicJsonType::number_integer_t;$/;"	t	class:nlohmann::detail::serializer	typeref:typename:BasicJsonType::number_integer_t
number_integer_t	dependencies/include/nlohmann/json.hpp	/^    using number_integer_t = typename BasicJsonType::number_integer_t;$/;"	t	struct:nlohmann::detail::is_sax	typeref:typename:BasicJsonType::number_integer_t
number_integer_t	dependencies/include/nlohmann/json.hpp	/^    using number_integer_t = typename BasicJsonType::number_integer_t;$/;"	t	struct:nlohmann::detail::is_sax_static_asserts	typeref:typename:BasicJsonType::number_integer_t
number_integer_t	dependencies/include/nlohmann/json.hpp	/^    using number_integer_t = typename BasicJsonType::number_integer_t;$/;"	t	struct:nlohmann::json_sax	typeref:typename:BasicJsonType::number_integer_t
number_unsigned	dependencies/include/nlohmann/json.hpp	/^        number_unsigned_t number_unsigned;$/;"	m	union:nlohmann::basic_json::json_value	typeref:typename:number_unsigned_t
number_unsigned	dependencies/include/nlohmann/json.hpp	/^    bool number_unsigned(number_unsigned_t \/*unused*\/)$/;"	f	class:nlohmann::detail::json_sax_acceptor	typeref:typename:bool
number_unsigned	dependencies/include/nlohmann/json.hpp	/^    bool number_unsigned(number_unsigned_t val)$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:bool
number_unsigned	dependencies/include/nlohmann/json.hpp	/^    bool number_unsigned(number_unsigned_t val)$/;"	f	class:nlohmann::detail::json_sax_dom_parser	typeref:typename:bool
number_unsigned	dependencies/include/nlohmann/json.hpp	/^    number_unsigned,  \/\/\/< number value (unsigned integer)$/;"	e	enum:nlohmann::detail::value_t
number_unsigned_function_t	dependencies/include/nlohmann/json.hpp	/^using number_unsigned_function_t =$/;"	t	namespace:nlohmann::detail
number_unsigned_t	dependencies/include/nlohmann/json.hpp	/^    using number_unsigned_t = NumberUnsignedType;$/;"	t	class:nlohmann::basic_json	typeref:typename:NumberUnsignedType
number_unsigned_t	dependencies/include/nlohmann/json.hpp	/^    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;$/;"	t	class:nlohmann::detail::binary_reader	typeref:typename:BasicJsonType::number_unsigned_t
number_unsigned_t	dependencies/include/nlohmann/json.hpp	/^    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;$/;"	t	class:nlohmann::detail::json_sax_acceptor	typeref:typename:BasicJsonType::number_unsigned_t
number_unsigned_t	dependencies/include/nlohmann/json.hpp	/^    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;$/;"	t	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:BasicJsonType::number_unsigned_t
number_unsigned_t	dependencies/include/nlohmann/json.hpp	/^    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;$/;"	t	class:nlohmann::detail::json_sax_dom_parser	typeref:typename:BasicJsonType::number_unsigned_t
number_unsigned_t	dependencies/include/nlohmann/json.hpp	/^    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;$/;"	t	class:nlohmann::detail::lexer	typeref:typename:BasicJsonType::number_unsigned_t
number_unsigned_t	dependencies/include/nlohmann/json.hpp	/^    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;$/;"	t	class:nlohmann::detail::parser	typeref:typename:BasicJsonType::number_unsigned_t
number_unsigned_t	dependencies/include/nlohmann/json.hpp	/^    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;$/;"	t	class:nlohmann::detail::serializer	typeref:typename:BasicJsonType::number_unsigned_t
number_unsigned_t	dependencies/include/nlohmann/json.hpp	/^    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;$/;"	t	struct:nlohmann::detail::is_sax	typeref:typename:BasicJsonType::number_unsigned_t
number_unsigned_t	dependencies/include/nlohmann/json.hpp	/^    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;$/;"	t	struct:nlohmann::detail::is_sax_static_asserts	typeref:typename:BasicJsonType::number_unsigned_t
number_unsigned_t	dependencies/include/nlohmann/json.hpp	/^    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;$/;"	t	struct:nlohmann::json_sax	typeref:typename:BasicJsonType::number_unsigned_t
o	dependencies/include/nlohmann/json.hpp	/^    output_adapter_t<char> o = nullptr;$/;"	m	class:nlohmann::detail::serializer	typeref:typename:output_adapter_t<char>
oa	dependencies/include/nlohmann/json.hpp	/^    output_adapter_t<CharType> oa = nullptr;$/;"	m	class:nlohmann::detail::binary_writer	typeref:typename:output_adapter_t<CharType>
oa	dependencies/include/nlohmann/json.hpp	/^    output_adapter_t<CharType> oa = nullptr;$/;"	m	class:nlohmann::detail::output_adapter	typeref:typename:output_adapter_t<CharType>
object	dependencies/include/nlohmann/json.hpp	/^        object_t* object;$/;"	m	union:nlohmann::basic_json::json_value	typeref:typename:object_t *
object	dependencies/include/nlohmann/json.hpp	/^    object,           \/\/\/< object (unordered set of name\/value pairs)$/;"	e	enum:nlohmann::detail::value_t
object	dependencies/include/nlohmann/json.hpp	/^    static basic_json object(initializer_list_t init = {})$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
object_comparator_t	dependencies/include/nlohmann/json.hpp	/^    using object_comparator_t = std::less<>;$/;"	t	class:nlohmann::basic_json	typeref:typename:std::less<>
object_comparator_t	dependencies/include/nlohmann/json.hpp	/^    using object_comparator_t = std::less<StringType>;$/;"	t	class:nlohmann::basic_json	typeref:typename:std::less<StringType>
object_element	dependencies/include/nlohmann/json.hpp	/^    BasicJsonType* object_element = nullptr;$/;"	m	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:BasicJsonType *
object_element	dependencies/include/nlohmann/json.hpp	/^    BasicJsonType* object_element = nullptr;$/;"	m	class:nlohmann::detail::json_sax_dom_parser	typeref:typename:BasicJsonType *
object_end	dependencies/include/nlohmann/json.hpp	/^        object_end,$/;"	e	enum:nlohmann::detail::parser::parse_event_t
object_iterator	dependencies/include/nlohmann/json.hpp	/^    typename BasicJsonType::object_t::iterator object_iterator {};$/;"	m	struct:nlohmann::detail::internal_iterator	typeref:typename:BasicJsonType::object_t::iterator
object_start	dependencies/include/nlohmann/json.hpp	/^        object_start,$/;"	e	enum:nlohmann::detail::parser::parse_event_t
object_t	dependencies/include/nlohmann/json.hpp	/^    using object_t = ObjectType<StringType,$/;"	t	class:nlohmann::basic_json	typeref:typename:ObjectType<StringType,basic_json,object_comparator_t,AllocatorType<std::pair<const StringType,basic_json>>>
object_t	dependencies/include/nlohmann/json.hpp	/^    using object_t = typename BasicJsonType::object_t;$/;"	t	class:nlohmann::detail::iter_impl	typeref:typename:BasicJsonType::object_t
object_t	dependencies/include/nlohmann/json.hpp	/^    using object_t = typename BasicJsonType::object_t;$/;"	t	struct:nlohmann::detail::is_compatible_object_type_impl	typeref:typename:BasicJsonType::object_t
object_t	dependencies/include/nlohmann/json.hpp	/^    using object_t = typename BasicJsonType::object_t;$/;"	t	struct:nlohmann::detail::is_constructible_object_type_impl	typeref:typename:BasicJsonType::object_t
observers_	dependencies/include/libplatform/v8-tracing.h	/^  std::unordered_set<v8::TracingController::TraceStateObserver*> observers_;$/;"	m	class:v8::platform::tracing::TracingController	typeref:typename:std::unordered_set<v8::TracingController::TraceStateObserver * >
offset	dependencies/include/SFML/Audio/Music.hpp	/^        T offset; \/\/\/< The beginning offset of the time range$/;"	m	struct:sf::Music::Span	typeref:typename:T
operator !=	dependencies/include/SFML/Graphics/Rect.inl	/^inline bool operator !=(const Rect<T>& left, const Rect<T>& right)$/;"	f	typeref:typename:bool
operator !=	dependencies/include/SFML/System/Vector2.inl	/^inline bool operator !=(const Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:bool
operator !=	dependencies/include/SFML/System/Vector3.inl	/^inline bool operator !=(const Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:bool
operator !=	dependencies/include/nlohmann/json.hpp	/^    bool operator!=(const iter_impl& other) const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:bool
operator !=	dependencies/include/nlohmann/json.hpp	/^    bool operator!=(const iteration_proxy_value& o) const noexcept$/;"	f	class:nlohmann::detail::iteration_proxy_value	typeref:typename:bool
operator !=	dependencies/include/nlohmann/json.hpp	/^    friend bool operator!=(const ScalarType lhs, const_reference rhs) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
operator !=	dependencies/include/nlohmann/json.hpp	/^    friend bool operator!=(const_reference lhs, const ScalarType rhs) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
operator !=	dependencies/include/nlohmann/json.hpp	/^    friend bool operator!=(const_reference lhs, const_reference rhs) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
operator !=	dependencies/include/nlohmann/json.hpp	/^    friend bool operator!=(json_pointer const& lhs,$/;"	f	class:nlohmann::json_pointer	typeref:typename:bool
operator !=	dependencies/include/v8.h	/^  V8_INLINE bool operator!=(const Local<S>& that) const {$/;"	f	class:v8::Local	typeref:typename:V8_INLINE bool
operator !=	dependencies/include/v8.h	/^  V8_INLINE bool operator!=(const Local<S>& that) const {$/;"	f	class:v8::PersistentBase	typeref:typename:V8_INLINE bool
operator !=	dependencies/include/v8.h	/^  V8_INLINE bool operator!=(const PersistentBase<S>& that) const {$/;"	f	class:v8::PersistentBase	typeref:typename:V8_INLINE bool
operator !=	dependencies/include/v8.h	/^  template <class S> V8_INLINE bool operator!=($/;"	f	class:v8::Local	typeref:typename:V8_INLINE bool
operator ()	dependencies/include/nlohmann/json.hpp	/^    auto operator()(BasicJsonType& j, T&& val) const noexcept(noexcept(to_json(j, std::forward<T/;"	f	struct:nlohmann::detail::to_json_fn	typeref:typename:auto
operator ()	dependencies/include/nlohmann/json.hpp	/^    auto operator()(const BasicJsonType& j, T& val) const$/;"	f	struct:nlohmann::detail::from_json_fn	typeref:typename:auto
operator ()	dependencies/include/nlohmann/json.hpp	/^    bool operator()(nlohmann::detail::value_t lhs,$/;"	f	struct:std::less	typeref:typename:bool
operator ()	dependencies/include/nlohmann/json.hpp	/^    std::size_t operator()(const nlohmann::json& j) const$/;"	f	struct:std::hash	typeref:typename:std::size_t
operator *	dependencies/include/SFML/System/ThreadLocalPtr.inl	/^T& ThreadLocalPtr<T>::operator *() const$/;"	f	class:sf::ThreadLocalPtr	typeref:typename:T &
operator *	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T> operator *(T left, const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T>
operator *	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T> operator *(const Vector2<T>& left, T right)$/;"	f	typeref:typename:Vector2<T>
operator *	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T> operator *(T left, const Vector3<T>& right)$/;"	f	typeref:typename:Vector3<T>
operator *	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T> operator *(const Vector3<T>& left, T right)$/;"	f	typeref:typename:Vector3<T>
operator *	dependencies/include/nlohmann/json.hpp	/^    iteration_proxy_value& operator*()$/;"	f	class:nlohmann::detail::iteration_proxy_value	typeref:typename:iteration_proxy_value &
operator *	dependencies/include/nlohmann/json.hpp	/^    reference operator*() const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:reference
operator *	dependencies/include/nlohmann/json.hpp	/^    value_type const& operator*() const$/;"	f	class:nlohmann::detail::json_ref	typeref:typename:value_type const &
operator *	dependencies/include/v8.h	/^    char* operator*() { return str_; }$/;"	f	class:v8::String::Utf8Value	typeref:typename:char *
operator *	dependencies/include/v8.h	/^    const char* operator*() const { return str_; }$/;"	f	class:v8::String::Utf8Value	typeref:typename:const char *
operator *	dependencies/include/v8.h	/^    const uint16_t* operator*() const { return str_; }$/;"	f	class:v8::String::Value	typeref:typename:const uint16_t *
operator *	dependencies/include/v8.h	/^    uint16_t* operator*() { return str_; }$/;"	f	class:v8::String::Value	typeref:typename:uint16_t *
operator *	dependencies/include/v8.h	/^  V8_INLINE T* operator*() const { return this->val_; }$/;"	f	class:v8::Global	typeref:typename:V8_INLINE T *
operator *	dependencies/include/v8.h	/^  V8_INLINE T* operator*() const { return this->val_; }$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE T *
operator *	dependencies/include/v8.h	/^  V8_INLINE T* operator*() const { return val_; }$/;"	f	class:v8::Local	typeref:typename:V8_INLINE T *
operator *=	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T>& operator *=(Vector2<T>& left, T right)$/;"	f	typeref:typename:Vector2<T> &
operator *=	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T>& operator *=(Vector3<T>& left, T right)$/;"	f	typeref:typename:Vector3<T> &
operator +	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T> operator +(const Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T>
operator +	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T> operator +(const Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:Vector3<T>
operator +	dependencies/include/nlohmann/json.hpp	/^    friend iter_impl operator+(difference_type i, const iter_impl& it)$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:iter_impl
operator +	dependencies/include/nlohmann/json.hpp	/^    iter_impl operator+(difference_type i) const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:iter_impl
operator +	dependencies/include/nlohmann/json.hpp	/^    json_reverse_iterator operator+(difference_type i) const$/;"	f	class:nlohmann::detail::json_reverse_iterator	typeref:typename:json_reverse_iterator
operator +	dependencies/include/nlohmann/json.hpp	/^    primitive_iterator_t operator+(difference_type n) noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:primitive_iterator_t
operator ++	dependencies/include/nlohmann/json.hpp	/^    iter_impl const operator++(int)$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:iter_impl const
operator ++	dependencies/include/nlohmann/json.hpp	/^    iter_impl& operator++()$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:iter_impl &
operator ++	dependencies/include/nlohmann/json.hpp	/^    iteration_proxy_value& operator++()$/;"	f	class:nlohmann::detail::iteration_proxy_value	typeref:typename:iteration_proxy_value &
operator ++	dependencies/include/nlohmann/json.hpp	/^    json_reverse_iterator const operator++(int)$/;"	f	class:nlohmann::detail::json_reverse_iterator	typeref:typename:json_reverse_iterator const
operator ++	dependencies/include/nlohmann/json.hpp	/^    json_reverse_iterator& operator++()$/;"	f	class:nlohmann::detail::json_reverse_iterator	typeref:typename:json_reverse_iterator &
operator ++	dependencies/include/nlohmann/json.hpp	/^    primitive_iterator_t const operator++(int) noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:primitive_iterator_t const
operator ++	dependencies/include/nlohmann/json.hpp	/^    primitive_iterator_t& operator++() noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:primitive_iterator_t &
operator +=	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T>& operator +=(Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T> &
operator +=	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T>& operator +=(Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:Vector3<T> &
operator +=	dependencies/include/nlohmann/json.hpp	/^    iter_impl& operator+=(difference_type i)$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:iter_impl &
operator +=	dependencies/include/nlohmann/json.hpp	/^    json_reverse_iterator& operator+=(difference_type i)$/;"	f	class:nlohmann::detail::json_reverse_iterator	typeref:typename:json_reverse_iterator &
operator +=	dependencies/include/nlohmann/json.hpp	/^    primitive_iterator_t& operator+=(difference_type n) noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:primitive_iterator_t &
operator +=	dependencies/include/nlohmann/json.hpp	/^    reference operator+=(basic_json&& val)$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
operator +=	dependencies/include/nlohmann/json.hpp	/^    reference operator+=(const basic_json& val)$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
operator +=	dependencies/include/nlohmann/json.hpp	/^    reference operator+=(const typename object_t::value_type& val)$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
operator +=	dependencies/include/nlohmann/json.hpp	/^    reference operator+=(initializer_list_t init)$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
operator -	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T> operator -(const Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T>
operator -	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T> operator -(const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T>
operator -	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T> operator -(const Vector3<T>& left)$/;"	f	typeref:typename:Vector3<T>
operator -	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T> operator -(const Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:Vector3<T>
operator -	dependencies/include/nlohmann/json.hpp	/^    difference_type operator-(const iter_impl& other) const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:difference_type
operator -	dependencies/include/nlohmann/json.hpp	/^    difference_type operator-(const json_reverse_iterator& other) const$/;"	f	class:nlohmann::detail::json_reverse_iterator	typeref:typename:difference_type
operator -	dependencies/include/nlohmann/json.hpp	/^    friend constexpr difference_type operator-(primitive_iterator_t lhs, primitive_iterator_t rh/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:difference_type
operator -	dependencies/include/nlohmann/json.hpp	/^    iter_impl operator-(difference_type i) const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:iter_impl
operator -	dependencies/include/nlohmann/json.hpp	/^    json_reverse_iterator operator-(difference_type i) const$/;"	f	class:nlohmann::detail::json_reverse_iterator	typeref:typename:json_reverse_iterator
operator --	dependencies/include/nlohmann/json.hpp	/^    iter_impl const operator--(int)$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:iter_impl const
operator --	dependencies/include/nlohmann/json.hpp	/^    iter_impl& operator--()$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:iter_impl &
operator --	dependencies/include/nlohmann/json.hpp	/^    json_reverse_iterator const operator--(int)$/;"	f	class:nlohmann::detail::json_reverse_iterator	typeref:typename:json_reverse_iterator const
operator --	dependencies/include/nlohmann/json.hpp	/^    json_reverse_iterator& operator--()$/;"	f	class:nlohmann::detail::json_reverse_iterator	typeref:typename:json_reverse_iterator &
operator --	dependencies/include/nlohmann/json.hpp	/^    primitive_iterator_t const operator--(int) noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:primitive_iterator_t const
operator --	dependencies/include/nlohmann/json.hpp	/^    primitive_iterator_t& operator--() noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:primitive_iterator_t &
operator -=	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T>& operator -=(Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T> &
operator -=	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T>& operator -=(Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:Vector3<T> &
operator -=	dependencies/include/nlohmann/json.hpp	/^    iter_impl& operator-=(difference_type i)$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:iter_impl &
operator -=	dependencies/include/nlohmann/json.hpp	/^    primitive_iterator_t& operator-=(difference_type n) noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:primitive_iterator_t &
operator ->	dependencies/include/SFML/System/ThreadLocalPtr.inl	/^T* ThreadLocalPtr<T>::operator ->() const$/;"	f	class:sf::ThreadLocalPtr	typeref:typename:T *
operator ->	dependencies/include/nlohmann/json.hpp	/^    pointer operator->() const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:pointer
operator ->	dependencies/include/nlohmann/json.hpp	/^    value_type const* operator->() const$/;"	f	class:nlohmann::detail::json_ref	typeref:typename:value_type const *
operator ->	dependencies/include/v8.h	/^  V8_INLINE T* operator->() const { return val_; }$/;"	f	class:v8::Local	typeref:typename:V8_INLINE T *
operator /	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T> operator \/(const Vector2<T>& left, T right)$/;"	f	typeref:typename:Vector2<T>
operator /	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T> operator \/(const Vector3<T>& left, T right)$/;"	f	typeref:typename:Vector3<T>
operator /=	dependencies/include/SFML/System/Vector2.inl	/^inline Vector2<T>& operator \/=(Vector2<T>& left, T right)$/;"	f	typeref:typename:Vector2<T> &
operator /=	dependencies/include/SFML/System/Vector3.inl	/^inline Vector3<T>& operator \/=(Vector3<T>& left, T right)$/;"	f	typeref:typename:Vector3<T> &
operator <	dependencies/include/nlohmann/json.hpp	/^    bool operator<(const iter_impl& other) const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:bool
operator <	dependencies/include/nlohmann/json.hpp	/^    friend bool operator<(const ScalarType lhs, const_reference rhs) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
operator <	dependencies/include/nlohmann/json.hpp	/^    friend bool operator<(const_reference lhs, const ScalarType rhs) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
operator <	dependencies/include/nlohmann/json.hpp	/^    friend bool operator<(const_reference lhs, const_reference rhs) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
operator <	dependencies/include/nlohmann/json.hpp	/^    friend constexpr bool operator<(primitive_iterator_t lhs, primitive_iterator_t rhs) noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:bool
operator <	dependencies/include/nlohmann/json.hpp	/^inline bool operator<(const value_t lhs, const value_t rhs) noexcept$/;"	f	namespace:nlohmann::detail	typeref:typename:bool
operator <<	dependencies/include/nlohmann/json.hpp	/^    friend std::istream& operator<<(basic_json& j, std::istream& i)$/;"	f	class:nlohmann::basic_json	typeref:typename:JSON_DEPRECATED std::istream &
operator <<	dependencies/include/nlohmann/json.hpp	/^    friend std::ostream& operator<<(std::ostream& o, const basic_json& j)$/;"	f	class:nlohmann::basic_json	typeref:typename:std::ostream &
operator <=	dependencies/include/nlohmann/json.hpp	/^    bool operator<=(const iter_impl& other) const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:bool
operator <=	dependencies/include/nlohmann/json.hpp	/^    friend bool operator<=(const ScalarType lhs, const_reference rhs) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
operator <=	dependencies/include/nlohmann/json.hpp	/^    friend bool operator<=(const_reference lhs, const ScalarType rhs) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
operator <=	dependencies/include/nlohmann/json.hpp	/^    friend bool operator<=(const_reference lhs, const_reference rhs) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
operator =	dependencies/include/SFML/System/ThreadLocalPtr.inl	/^ThreadLocalPtr<T>& ThreadLocalPtr<T>::operator =(T* value)$/;"	f	class:sf::ThreadLocalPtr	typeref:typename:ThreadLocalPtr<T> &
operator =	dependencies/include/SFML/System/ThreadLocalPtr.inl	/^ThreadLocalPtr<T>& ThreadLocalPtr<T>::operator =(const ThreadLocalPtr<T>& right)$/;"	f	class:sf::ThreadLocalPtr	typeref:typename:ThreadLocalPtr<T> &
operator =	dependencies/include/nlohmann/json.hpp	/^    basic_json& operator=(basic_json other) noexcept ($/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json &
operator =	dependencies/include/nlohmann/json.hpp	/^    iter_impl& operator=(const iter_impl<typename std::remove_const<BasicJsonType>::type>& other/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:iter_impl &
operator =	dependencies/include/v8-util.h	/^    void operator=(PersistentContainerValue value) {$/;"	f	class:v8::PersistentValueMapBase::PersistentValueReference	typeref:typename:void
operator =	dependencies/include/v8-util.h	/^    void operator=(const PersistentValueReference& other) {$/;"	f	class:v8::PersistentValueMapBase::PersistentValueReference	typeref:typename:void
operator =	dependencies/include/v8.h	/^  V8_INLINE Global& operator=(Global<S>&& rhs) {  \/\/ NOLINT$/;"	f	class:v8::Global	typeref:typename:V8_INLINE Global &
operator =	dependencies/include/v8.h	/^  V8_INLINE Persistent& operator=(const Persistent& that) {$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE Persistent &
operator =	dependencies/include/v8.h	/^  V8_INLINE Persistent& operator=(const Persistent<S, M2>& that) { \/\/ NOLINT$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE Persistent &
operator ==	dependencies/include/SFML/Graphics/Rect.inl	/^inline bool operator ==(const Rect<T>& left, const Rect<T>& right)$/;"	f	typeref:typename:bool
operator ==	dependencies/include/SFML/System/Vector2.inl	/^inline bool operator ==(const Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:bool
operator ==	dependencies/include/SFML/System/Vector3.inl	/^inline bool operator ==(const Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:bool
operator ==	dependencies/include/nlohmann/json.hpp	/^    bool operator==(const iter_impl& other) const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:bool
operator ==	dependencies/include/nlohmann/json.hpp	/^    bool operator==(const iteration_proxy_value& o) const noexcept$/;"	f	class:nlohmann::detail::iteration_proxy_value	typeref:typename:bool
operator ==	dependencies/include/nlohmann/json.hpp	/^    friend bool operator==(const ScalarType lhs, const_reference rhs) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
operator ==	dependencies/include/nlohmann/json.hpp	/^    friend bool operator==(const_reference lhs, const ScalarType rhs) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
operator ==	dependencies/include/nlohmann/json.hpp	/^    friend bool operator==(const_reference lhs, const_reference rhs) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
operator ==	dependencies/include/nlohmann/json.hpp	/^    friend bool operator==(json_pointer const& lhs,$/;"	f	class:nlohmann::json_pointer	typeref:typename:bool
operator ==	dependencies/include/nlohmann/json.hpp	/^    friend constexpr bool operator==(primitive_iterator_t lhs, primitive_iterator_t rhs) noexcep/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:bool
operator ==	dependencies/include/v8.h	/^  V8_INLINE bool operator==(const Local<S>& that) const {$/;"	f	class:v8::Local	typeref:typename:V8_INLINE bool
operator ==	dependencies/include/v8.h	/^  V8_INLINE bool operator==(const Local<S>& that) const {$/;"	f	class:v8::PersistentBase	typeref:typename:V8_INLINE bool
operator ==	dependencies/include/v8.h	/^  V8_INLINE bool operator==(const PersistentBase<S>& that) const {$/;"	f	class:v8::PersistentBase	typeref:typename:V8_INLINE bool
operator ==	dependencies/include/v8.h	/^  template <class S> V8_INLINE bool operator==($/;"	f	class:v8::Local	typeref:typename:V8_INLINE bool
operator >	dependencies/include/nlohmann/json.hpp	/^    bool operator>(const iter_impl& other) const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:bool
operator >	dependencies/include/nlohmann/json.hpp	/^    friend bool operator>(const ScalarType lhs, const_reference rhs) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
operator >	dependencies/include/nlohmann/json.hpp	/^    friend bool operator>(const_reference lhs, const ScalarType rhs) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
operator >	dependencies/include/nlohmann/json.hpp	/^    friend bool operator>(const_reference lhs, const_reference rhs) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
operator >=	dependencies/include/nlohmann/json.hpp	/^    bool operator>=(const iter_impl& other) const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:bool
operator >=	dependencies/include/nlohmann/json.hpp	/^    friend bool operator>=(const ScalarType lhs, const_reference rhs) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
operator >=	dependencies/include/nlohmann/json.hpp	/^    friend bool operator>=(const_reference lhs, const ScalarType rhs) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
operator >=	dependencies/include/nlohmann/json.hpp	/^    friend bool operator>=(const_reference lhs, const_reference rhs) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
operator >>	dependencies/include/nlohmann/json.hpp	/^    friend std::istream& operator>>(std::istream& i, basic_json& j)$/;"	f	class:nlohmann::basic_json	typeref:typename:std::istream &
operator >>	dependencies/include/nlohmann/json.hpp	/^    friend std::ostream& operator>>(const basic_json& j, std::ostream& o)$/;"	f	class:nlohmann::basic_json	typeref:typename:JSON_DEPRECATED std::ostream &
operator []	dependencies/include/nlohmann/json.hpp	/^    const_reference operator[](T* key) const$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reference
operator []	dependencies/include/nlohmann/json.hpp	/^    const_reference operator[](const json_pointer& ptr) const$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reference
operator []	dependencies/include/nlohmann/json.hpp	/^    const_reference operator[](const typename object_t::key_type& key) const$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reference
operator []	dependencies/include/nlohmann/json.hpp	/^    const_reference operator[](size_type idx) const$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reference
operator []	dependencies/include/nlohmann/json.hpp	/^    reference operator[](T* key)$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
operator []	dependencies/include/nlohmann/json.hpp	/^    reference operator[](const json_pointer& ptr)$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
operator []	dependencies/include/nlohmann/json.hpp	/^    reference operator[](const typename object_t::key_type& key)$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
operator []	dependencies/include/nlohmann/json.hpp	/^    reference operator[](difference_type n) const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:reference
operator []	dependencies/include/nlohmann/json.hpp	/^    reference operator[](difference_type n) const$/;"	f	class:nlohmann::detail::json_reverse_iterator	typeref:typename:reference
operator []	dependencies/include/nlohmann/json.hpp	/^    reference operator[](size_type idx)$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
options_	dependencies/include/v8.h	/^  ScriptOriginOptions options_;$/;"	m	class:v8::ScriptOrigin	typeref:typename:ScriptOriginOptions
origin	dependencies/include/v8-inspector.h	/^  StringView origin;$/;"	m	class:v8_inspector::V8ContextInfo	typeref:typename:StringView
other_array_t	dependencies/include/nlohmann/json.hpp	/^        using other_array_t = typename BasicJsonType::array_t;$/;"	t	function:nlohmann::basic_json::basic_json	typeref:typename:BasicJsonType::array_t
other_boolean_t	dependencies/include/nlohmann/json.hpp	/^        using other_boolean_t = typename BasicJsonType::boolean_t;$/;"	t	function:nlohmann::basic_json::basic_json	typeref:typename:BasicJsonType::boolean_t
other_error	dependencies/include/nlohmann/json.hpp	/^    other_error(int id_, const char* what_arg) : exception(id_, what_arg) {}$/;"	f	class:nlohmann::detail::other_error
other_error	dependencies/include/nlohmann/json.hpp	/^    using other_error = detail::other_error;$/;"	t	class:nlohmann::basic_json	typeref:typename:detail::other_error
other_error	dependencies/include/nlohmann/json.hpp	/^class other_error : public exception$/;"	c	namespace:nlohmann::detail
other_number_float_t	dependencies/include/nlohmann/json.hpp	/^        using other_number_float_t = typename BasicJsonType::number_float_t;$/;"	t	function:nlohmann::basic_json::basic_json	typeref:typename:BasicJsonType::number_float_t
other_number_integer_t	dependencies/include/nlohmann/json.hpp	/^        using other_number_integer_t = typename BasicJsonType::number_integer_t;$/;"	t	function:nlohmann::basic_json::basic_json	typeref:typename:BasicJsonType::number_integer_t
other_number_unsigned_t	dependencies/include/nlohmann/json.hpp	/^        using other_number_unsigned_t = typename BasicJsonType::number_unsigned_t;$/;"	t	function:nlohmann::basic_json::basic_json	typeref:typename:BasicJsonType::number_unsigned_t
other_object_t	dependencies/include/nlohmann/json.hpp	/^        using other_object_t = typename BasicJsonType::object_t;$/;"	t	function:nlohmann::basic_json::basic_json	typeref:typename:BasicJsonType::object_t
other_string_t	dependencies/include/nlohmann/json.hpp	/^        using other_string_t = typename BasicJsonType::string_t;$/;"	t	function:nlohmann::basic_json::basic_json	typeref:typename:BasicJsonType::string_t
out_of_range	dependencies/include/nlohmann/json.hpp	/^    out_of_range(int id_, const char* what_arg) : exception(id_, what_arg) {}$/;"	f	class:nlohmann::detail::out_of_range
out_of_range	dependencies/include/nlohmann/json.hpp	/^    using out_of_range = detail::out_of_range;$/;"	t	class:nlohmann::basic_json	typeref:typename:detail::out_of_range
out_of_range	dependencies/include/nlohmann/json.hpp	/^class out_of_range : public exception$/;"	c	namespace:nlohmann::detail
output_adapter	dependencies/include/nlohmann/json.hpp	/^    output_adapter(StringType& s)$/;"	f	class:nlohmann::detail::output_adapter
output_adapter	dependencies/include/nlohmann/json.hpp	/^    output_adapter(std::basic_ostream<CharType>& s)$/;"	f	class:nlohmann::detail::output_adapter
output_adapter	dependencies/include/nlohmann/json.hpp	/^    output_adapter(std::vector<CharType>& vec)$/;"	f	class:nlohmann::detail::output_adapter
output_adapter	dependencies/include/nlohmann/json.hpp	/^class output_adapter$/;"	c	namespace:nlohmann::detail
output_adapter_protocol	dependencies/include/nlohmann/json.hpp	/^template<typename CharType> struct output_adapter_protocol$/;"	s	namespace:nlohmann::detail
output_adapter_t	dependencies/include/nlohmann/json.hpp	/^    using output_adapter_t = ::nlohmann::detail::output_adapter_t<CharType>;$/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::detail::output_adapter_t<CharType>
output_adapter_t	dependencies/include/nlohmann/json.hpp	/^using output_adapter_t = std::shared_ptr<output_adapter_protocol<CharType>>;$/;"	t	namespace:nlohmann::detail	typeref:typename:std::shared_ptr<output_adapter_protocol<CharType>>
output_stream_adapter	dependencies/include/nlohmann/json.hpp	/^    explicit output_stream_adapter(std::basic_ostream<CharType>& s) noexcept$/;"	f	class:nlohmann::detail::output_stream_adapter
output_stream_adapter	dependencies/include/nlohmann/json.hpp	/^class output_stream_adapter : public output_adapter_protocol<CharType>$/;"	c	namespace:nlohmann::detail
output_string_adapter	dependencies/include/nlohmann/json.hpp	/^    explicit output_string_adapter(StringType& s) noexcept$/;"	f	class:nlohmann::detail::output_string_adapter
output_string_adapter	dependencies/include/nlohmann/json.hpp	/^class output_string_adapter : public output_adapter_protocol<CharType>$/;"	c	namespace:nlohmann::detail
output_vector_adapter	dependencies/include/nlohmann/json.hpp	/^    explicit output_vector_adapter(std::vector<CharType>& vec) noexcept$/;"	f	class:nlohmann::detail::output_vector_adapter
output_vector_adapter	dependencies/include/nlohmann/json.hpp	/^class output_vector_adapter : public output_adapter_protocol<CharType>$/;"	c	namespace:nlohmann::detail
owned_value	dependencies/include/nlohmann/json.hpp	/^    mutable value_type owned_value = nullptr;$/;"	m	class:nlohmann::detail::json_ref	typeref:typename:value_type
parameter_	dependencies/include/v8.h	/^  T* parameter_;$/;"	m	class:v8::WeakCallbackInfo	typeref:typename:T *
parameter_copy_storage_	dependencies/include/libplatform/v8-tracing.h	/^  char* parameter_copy_storage_ = nullptr;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:char *
parse	dependencies/include/nlohmann/json.hpp	/^    static basic_json parse(IteratorType first, IteratorType last,$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
parse	dependencies/include/nlohmann/json.hpp	/^    static basic_json parse(detail::input_adapter&& i,$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
parse	dependencies/include/nlohmann/json.hpp	/^    void parse(const bool strict, BasicJsonType& result)$/;"	f	class:nlohmann::detail::parser	typeref:typename:void
parse_bson_array	dependencies/include/nlohmann/json.hpp	/^    bool parse_bson_array()$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
parse_bson_element_internal	dependencies/include/nlohmann/json.hpp	/^    bool parse_bson_element_internal(const int element_type,$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
parse_bson_element_list	dependencies/include/nlohmann/json.hpp	/^    bool parse_bson_element_list(const bool is_array)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
parse_bson_internal	dependencies/include/nlohmann/json.hpp	/^    bool parse_bson_internal()$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
parse_cbor_internal	dependencies/include/nlohmann/json.hpp	/^    bool parse_cbor_internal(const bool get_char = true)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
parse_error	dependencies/include/nlohmann/json.hpp	/^        parse_error,      \/\/\/< indicating a parse error$/;"	e	enum:nlohmann::detail::lexer::token_type
parse_error	dependencies/include/nlohmann/json.hpp	/^    bool parse_error(std::size_t \/*unused*\/, const std::string& \/*unused*\/, const detail::ex/;"	f	class:nlohmann::detail::json_sax_acceptor	typeref:typename:bool
parse_error	dependencies/include/nlohmann/json.hpp	/^    bool parse_error(std::size_t \/*unused*\/, const std::string& \/*unused*\/,$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:bool
parse_error	dependencies/include/nlohmann/json.hpp	/^    bool parse_error(std::size_t \/*unused*\/, const std::string& \/*unused*\/,$/;"	f	class:nlohmann::detail::json_sax_dom_parser	typeref:typename:bool
parse_error	dependencies/include/nlohmann/json.hpp	/^    parse_error(int id_, std::size_t byte_, const char* what_arg)$/;"	f	class:nlohmann::detail::parse_error
parse_error	dependencies/include/nlohmann/json.hpp	/^    using parse_error = detail::parse_error;$/;"	t	class:nlohmann::basic_json	typeref:typename:detail::parse_error
parse_error	dependencies/include/nlohmann/json.hpp	/^class parse_error : public exception$/;"	c	namespace:nlohmann::detail
parse_error_function_t	dependencies/include/nlohmann/json.hpp	/^using parse_error_function_t = decltype(std::declval<T&>().parse_error($/;"	t	namespace:nlohmann::detail
parse_event_t	dependencies/include/nlohmann/json.hpp	/^    enum class parse_event_t : uint8_t$/;"	g	class:nlohmann::detail::parser	typeref:typename:uint8_t
parse_event_t	dependencies/include/nlohmann/json.hpp	/^    using parse_event_t = typename BasicJsonType::parse_event_t;$/;"	t	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:BasicJsonType::parse_event_t
parse_event_t	dependencies/include/nlohmann/json.hpp	/^    using parse_event_t = typename parser::parse_event_t;$/;"	t	class:nlohmann::basic_json	typeref:typename:parser::parse_event_t
parse_msgpack_internal	dependencies/include/nlohmann/json.hpp	/^    bool parse_msgpack_internal()$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
parse_ubjson_internal	dependencies/include/nlohmann/json.hpp	/^    bool parse_ubjson_internal(const bool get_char = true)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
parser	dependencies/include/nlohmann/json.hpp	/^    explicit parser(detail::input_adapter_t&& adapter,$/;"	f	class:nlohmann::detail::parser
parser	dependencies/include/nlohmann/json.hpp	/^    using parser = ::nlohmann::detail::parser<basic_json>;$/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::detail::parser<basic_json>
parser	dependencies/include/nlohmann/json.hpp	/^class parser$/;"	c	namespace:nlohmann::detail
parser_callback_t	dependencies/include/nlohmann/json.hpp	/^    using parser_callback_t = typename BasicJsonType::parser_callback_t;$/;"	t	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:BasicJsonType::parser_callback_t
parser_callback_t	dependencies/include/nlohmann/json.hpp	/^    using parser_callback_t = typename parser::parser_callback_t;$/;"	t	class:nlohmann::basic_json	typeref:typename:parser::parser_callback_t
parser_callback_t	dependencies/include/nlohmann/json.hpp	/^    using parser_callback_t =$/;"	t	class:nlohmann::detail::parser
patch	dependencies/include/nlohmann/json.hpp	/^    basic_json patch(const basic_json& json_patch) const$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
patch_operations	dependencies/include/nlohmann/json.hpp	/^        enum class patch_operations {add, remove, replace, move, copy, test, invalid};$/;"	g	function:nlohmann::basic_json::patch
pc	dependencies/include/v8-profiler.h	/^  void* pc;        \/\/ Instruction pointer.$/;"	m	struct:v8::TickSample	typeref:typename:void *
pc	dependencies/include/v8.h	/^  void* pc;  \/\/ Instruction pointer.$/;"	m	struct:v8::RegisterState	typeref:typename:void *
phase	dependencies/include/libplatform/v8-tracing.h	/^  char phase() const { return phase_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:char
phase_	dependencies/include/libplatform/v8-tracing.h	/^  char phase_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:char
pid	dependencies/include/libplatform/v8-tracing.h	/^  int pid() const { return pid_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:int
pid_	dependencies/include/libplatform/v8-tracing.h	/^  int pid_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:int
platform	dependencies/include/libplatform/libplatform.h	/^namespace platform {$/;"	n	namespace:v8
platform	dependencies/include/libplatform/v8-tracing.h	/^namespace platform {$/;"	n	namespace:v8
plus	dependencies/include/nlohmann/json.hpp	/^    diyfp plus;$/;"	m	struct:nlohmann::detail::dtoa_impl::boundaries	typeref:typename:diyfp
pointer	dependencies/include/nlohmann/json.hpp	/^    using pointer = T*;$/;"	t	struct:nlohmann::detail::iterator_traits	typeref:typename:T *
pointer	dependencies/include/nlohmann/json.hpp	/^    using pointer = typename It::pointer;$/;"	t	struct:nlohmann::detail::iterator_types	typeref:typename:It::pointer
pointer	dependencies/include/nlohmann/json.hpp	/^    using pointer = typename std::allocator_traits<allocator_type>::pointer;$/;"	t	class:nlohmann::basic_json	typeref:typename:std::allocator_traits<allocator_type>::pointer
pointer	dependencies/include/nlohmann/json.hpp	/^    using pointer = typename std::conditional<std::is_const<BasicJsonType>::value,$/;"	t	class:nlohmann::detail::iter_impl	typeref:typename:std::conditional<std::is_const<BasicJsonType>::value,typename BasicJsonType::const_pointer,typename BasicJsonType::pointer>::type
pointer	dependencies/include/nlohmann/json.hpp	/^    using pointer = value_type * ;$/;"	t	class:nlohmann::detail::iteration_proxy_value	typeref:typename:value_type *
pointer_t	dependencies/include/nlohmann/json.hpp	/^using pointer_t = typename T::pointer;$/;"	t	namespace:nlohmann::detail	typeref:typename:T::pointer
pop_back	dependencies/include/nlohmann/json.hpp	/^    std::string pop_back()$/;"	f	class:nlohmann::json_pointer	typeref:typename:std::string
position	dependencies/include/SFML/Graphics/Vertex.hpp	/^    Vector2f  position;  \/\/\/< 2D position of the vertex$/;"	m	class:sf::Vertex	typeref:typename:Vector2f
position	dependencies/include/SFML/Window/Event.hpp	/^        float          position;   \/\/\/< New position on the axis (in range [-100 .. 100])$/;"	m	struct:sf::Event::JoystickMoveEvent	typeref:typename:float
position	dependencies/include/nlohmann/json.hpp	/^    position_t position;$/;"	m	class:nlohmann::detail::lexer	typeref:typename:position_t
position	dependencies/include/v8-profiler.h	/^  size_t position;$/;"	m	struct:v8::CpuProfileDeoptFrame	typeref:typename:size_t
position_string	dependencies/include/nlohmann/json.hpp	/^    static std::string position_string(const position_t& pos)$/;"	f	class:nlohmann::detail::parse_error	typeref:typename:std::string
position_t	dependencies/include/nlohmann/json.hpp	/^struct position_t$/;"	s	namespace:nlohmann::detail
prev_limit_	dependencies/include/v8.h	/^  internal::Address* prev_limit_;$/;"	m	class:v8::HandleScope	typeref:typename:internal::Address *
prev_limit_	dependencies/include/v8.h	/^  internal::Address* prev_limit_;$/;"	m	class:v8::SealHandleScope	typeref:typename:internal::Address *
prev_next_	dependencies/include/v8.h	/^  internal::Address* prev_next_;$/;"	m	class:v8::HandleScope	typeref:typename:internal::Address *
prev_sealed_level_	dependencies/include/v8.h	/^  int prev_sealed_level_;$/;"	m	class:v8::SealHandleScope	typeref:typename:int
primitive_iterator	dependencies/include/nlohmann/json.hpp	/^    primitive_iterator_t primitive_iterator {};$/;"	m	struct:nlohmann::detail::internal_iterator	typeref:typename:primitive_iterator_t
primitive_iterator_t	dependencies/include/nlohmann/json.hpp	/^    using primitive_iterator_t = ::nlohmann::detail::primitive_iterator_t;$/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::detail::primitive_iterator_t
primitive_iterator_t	dependencies/include/nlohmann/json.hpp	/^class primitive_iterator_t$/;"	c	namespace:nlohmann::detail
priority_tag	dependencies/include/nlohmann/json.hpp	/^template<> struct priority_tag<0> {};$/;"	s	namespace:nlohmann::detail
priority_tag	dependencies/include/nlohmann/json.hpp	/^template<unsigned N> struct priority_tag : priority_tag < N - 1 > {};$/;"	s	namespace:nlohmann::detail
priv	dependencies/include/SFML/Audio/SoundFileFactory.inl	/^namespace priv$/;"	n	namespace:sf	file:
priv	dependencies/include/SFML/Graphics/Glsl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	dependencies/include/SFML/Graphics/RenderTexture.hpp	/^namespace priv$/;"	n	namespace:sf
priv	dependencies/include/SFML/System/FileInputStream.hpp	/^namespace priv$/;"	n	namespace:sf
priv	dependencies/include/SFML/System/Mutex.hpp	/^namespace priv$/;"	n	namespace:sf
priv	dependencies/include/SFML/System/Thread.hpp	/^namespace priv$/;"	n	namespace:sf
priv	dependencies/include/SFML/System/Thread.inl	/^namespace priv$/;"	n	file:
priv	dependencies/include/SFML/System/ThreadLocal.hpp	/^namespace priv$/;"	n	namespace:sf
priv	dependencies/include/SFML/Window/Context.hpp	/^namespace priv$/;"	n	namespace:sf
priv	dependencies/include/SFML/Window/Cursor.hpp	/^namespace priv$/;"	n	namespace:sf
priv	dependencies/include/SFML/Window/Window.hpp	/^namespace priv$/;"	n	namespace:sf
private_	dependencies/include/v8.h	/^  PrivateData* private_;$/;"	m	class:v8::PropertyDescriptor	typeref:typename:PrivateData *
private_	dependencies/include/v8.h	/^  PrivateData* private_;$/;"	m	class:v8::ValueDeserializer	typeref:typename:PrivateData *
private_	dependencies/include/v8.h	/^  PrivateData* private_;$/;"	m	class:v8::ValueSerializer	typeref:typename:PrivateData *
productId	dependencies/include/SFML/Window/Joystick.hpp	/^        unsigned int productId; \/\/\/< Product identifier$/;"	m	struct:sf::Joystick::Identification	typeref:typename:unsigned int
promise_	dependencies/include/v8.h	/^  Persistent<Promise, CopyablePersistentTraits<Promise>> promise_;$/;"	m	class:v8::WasmModuleObjectBuilderStreaming	typeref:typename:Persistent<Promise,CopyablePersistentTraits<Promise>>
promise_	dependencies/include/v8.h	/^  Persistent<Promise> promise_;$/;"	m	class:v8::WasmModuleObjectBuilderStreaming	typeref:typename:Persistent<Promise>
protocol	dependencies/include/v8-inspector.h	/^namespace protocol {$/;"	n	namespace:v8_inspector
push_back	dependencies/include/nlohmann/json.hpp	/^    void push_back(basic_json&& val)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
push_back	dependencies/include/nlohmann/json.hpp	/^    void push_back(const basic_json& val)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
push_back	dependencies/include/nlohmann/json.hpp	/^    void push_back(const typename object_t::value_type& val)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
push_back	dependencies/include/nlohmann/json.hpp	/^    void push_back(initializer_list_t init)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
qnxnto	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
qnxnto	build/default/CMakeFiles/3.13.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
query	dependencies/include/v8.h	/^  GenericNamedPropertyQueryCallback query;$/;"	m	struct:v8::NamedPropertyHandlerConfiguration	typeref:typename:GenericNamedPropertyQueryCallback
query	dependencies/include/v8.h	/^  IndexedPropertyQueryCallback query;$/;"	m	struct:v8::IndexedPropertyHandlerConfiguration	typeref:typename:IndexedPropertyQueryCallback
quitMessageLoopOnPause	dependencies/include/v8-inspector.h	/^  virtual void quitMessageLoopOnPause() {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
r	dependencies/include/SFML/Graphics/Color.hpp	/^    Uint8 r; \/\/\/< Red component$/;"	m	class:sf::Color	typeref:typename:Uint8
rbegin	dependencies/include/nlohmann/json.hpp	/^    const_reverse_iterator rbegin() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reverse_iterator
rbegin	dependencies/include/nlohmann/json.hpp	/^    reverse_iterator rbegin() noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:reverse_iterator
record_mode_	dependencies/include/libplatform/v8-tracing.h	/^  TraceRecordMode record_mode_;$/;"	m	class:v8::platform::tracing::TraceConfig	typeref:typename:TraceRecordMode
ref_stack	dependencies/include/nlohmann/json.hpp	/^    std::vector<BasicJsonType*> ref_stack;$/;"	m	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:std::vector<BasicJsonType * >
ref_stack	dependencies/include/nlohmann/json.hpp	/^    std::vector<BasicJsonType*> ref_stack;$/;"	m	class:nlohmann::detail::json_sax_dom_parser	typeref:typename:std::vector<BasicJsonType * >
reference	dependencies/include/nlohmann/json.hpp	/^    using reference = T&;$/;"	t	struct:nlohmann::detail::iterator_traits	typeref:typename:T &
reference	dependencies/include/nlohmann/json.hpp	/^    using reference = typename Base::reference;$/;"	t	class:nlohmann::detail::json_reverse_iterator	typeref:typename:Base::reference
reference	dependencies/include/nlohmann/json.hpp	/^    using reference = typename It::reference;$/;"	t	struct:nlohmann::detail::iterator_types	typeref:typename:It::reference
reference	dependencies/include/nlohmann/json.hpp	/^    using reference = value_type & ;$/;"	t	class:nlohmann::detail::iteration_proxy_value	typeref:typename:value_type &
reference	dependencies/include/nlohmann/json.hpp	/^    using reference = value_type&;$/;"	t	class:nlohmann::basic_json	typeref:typename:value_type &
reference	dependencies/include/nlohmann/json.hpp	/^    using reference =$/;"	t	class:nlohmann::detail::iter_impl	typeref:typename:std::conditional<std::is_const<BasicJsonType>::value,typename BasicJsonType::const_reference,typename BasicJsonType::reference>::type
reference_t	dependencies/include/nlohmann/json.hpp	/^using reference_t = typename T::reference;$/;"	t	namespace:nlohmann::detail	typeref:typename:T::reference
reference_tokens	dependencies/include/nlohmann/json.hpp	/^    std::vector<std::string> reference_tokens;$/;"	m	class:nlohmann::json_pointer	typeref:typename:std::vector<std::string>
registerReader	dependencies/include/SFML/Audio/SoundFileFactory.inl	/^void SoundFileFactory::registerReader()$/;"	f	class:sf::SoundFileFactory	typeref:typename:void
registerWriter	dependencies/include/SFML/Audio/SoundFileFactory.inl	/^void SoundFileFactory::registerWriter()$/;"	f	class:sf::SoundFileFactory	typeref:typename:void
reinterpret_bits	dependencies/include/nlohmann/json.hpp	/^Target reinterpret_bits(const Source source)$/;"	f	namespace:nlohmann::detail::dtoa_impl	typeref:typename:Target
rejected	dependencies/include/v8.h	/^    bool rejected;$/;"	m	struct:v8::ScriptCompiler::CachedData	typeref:typename:bool
remove	dependencies/include/nlohmann/json.hpp	/^        enum class patch_operations {add, remove, replace, move, copy, test, invalid};$/;"	e	enum:nlohmann::basic_json::patch::patch_operations
rend	dependencies/include/nlohmann/json.hpp	/^    const_reverse_iterator rend() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reverse_iterator
rend	dependencies/include/nlohmann/json.hpp	/^    reverse_iterator rend() noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:reverse_iterator
render	src/Game.cpp	/^void Game::render(){$/;"	f	class:Game	typeref:typename:void
replace	dependencies/include/nlohmann/json.hpp	/^        enum class patch_operations {add, remove, replace, move, copy, test, invalid};$/;"	e	enum:nlohmann::basic_json::patch::patch_operations
replace	dependencies/include/nlohmann/json.hpp	/^    replace, \/\/\/< replace invalid UTF-8 sequences with U+FFFD$/;"	e	enum:nlohmann::detail::error_handler_t
replace_substring	dependencies/include/nlohmann/json.hpp	/^    static void replace_substring(std::string& s, const std::string& f,$/;"	f	class:nlohmann::json_pointer	typeref:typename:void
reset	dependencies/include/nlohmann/json.hpp	/^    void reset() noexcept$/;"	f	class:nlohmann::detail::lexer	typeref:typename:void
resourceNameToUrl	dependencies/include/v8-inspector.h	/^  virtual std::unique_ptr<StringBuffer> resourceNameToUrl($/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:std::unique_ptr<StringBuffer>
resource_column_offset	dependencies/include/v8.h	/^    Local<Integer> resource_column_offset;$/;"	m	class:v8::ScriptCompiler::Source	typeref:typename:Local<Integer>
resource_column_offset_	dependencies/include/v8.h	/^  Local<Integer> resource_column_offset_;$/;"	m	class:v8::ScriptOrigin	typeref:typename:Local<Integer>
resource_line_offset	dependencies/include/v8.h	/^    Local<Integer> resource_line_offset;$/;"	m	class:v8::ScriptCompiler::Source	typeref:typename:Local<Integer>
resource_line_offset_	dependencies/include/v8.h	/^  Local<Integer> resource_line_offset_;$/;"	m	class:v8::ScriptOrigin	typeref:typename:Local<Integer>
resource_name	dependencies/include/v8.h	/^    Local<Value> resource_name;$/;"	m	class:v8::ScriptCompiler::Source	typeref:typename:Local<Value>
resource_name_	dependencies/include/v8.h	/^  Local<Value> resource_name_;$/;"	m	class:v8::ScriptOrigin	typeref:typename:Local<Value>
resource_options	dependencies/include/v8.h	/^    ScriptOriginOptions resource_options;$/;"	m	class:v8::ScriptCompiler::Source	typeref:typename:ScriptOriginOptions
ret	dependencies/include/nlohmann/json.hpp	/^        ValueType ret;$/;"	m	class:nlohmann::basic_json	typeref:typename:ValueType
reverse_iterator	dependencies/include/nlohmann/json.hpp	/^    using reverse_iterator = json_reverse_iterator<typename basic_json::iterator>;$/;"	t	class:nlohmann::basic_json	typeref:typename:json_reverse_iterator<typename basic_json::iterator>
root	dependencies/include/nlohmann/json.hpp	/^    BasicJsonType& root;$/;"	m	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:BasicJsonType &
root	dependencies/include/nlohmann/json.hpp	/^    BasicJsonType& root;$/;"	m	class:nlohmann::detail::json_sax_dom_parser	typeref:typename:BasicJsonType &
rows	dependencies/include/SFML/Graphics/Font.hpp	/^        std::vector<Row> rows;    \/\/\/< List containing the position of all the existing rows$/;"	m	struct:sf::Font::Page	typeref:typename:std::vector<Row>
run	dependencies/include/SFML/System/Thread.inl	/^    virtual void run() {(m_object->*m_function)();}$/;"	f	struct:priv::ThreadMemberFunc	typeref:typename:void	file:
run	dependencies/include/SFML/System/Thread.inl	/^    virtual void run() {m_function(m_arg);}$/;"	f	struct:priv::ThreadFunctorWithArg	typeref:typename:void	file:
run	dependencies/include/SFML/System/Thread.inl	/^    virtual void run() {m_functor();}$/;"	f	struct:priv::ThreadFunctor	typeref:typename:void	file:
runIfWaitingForDebugger	dependencies/include/v8-inspector.h	/^  virtual void runIfWaitingForDebugger(int contextGroupId) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
runMessageLoopOnPause	dependencies/include/v8-inspector.h	/^  virtual void runMessageLoopOnPause(int contextGroupId) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
running	src/Game.hpp	/^  bool running() { return isRunning };$/;"	f	class:Game	typeref:typename:bool
sRgbCapable	dependencies/include/SFML/Window/ContextSettings.hpp	/^    bool         sRgbCapable;       \/\/\/< Whether the context framebuffer is sRGB capable$/;"	m	struct:sf::ContextSettings	typeref:typename:bool
s_readers	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^    static ReaderFactoryArray s_readers; \/\/\/< List of all registered readers$/;"	m	class:sf::SoundFileFactory	typeref:typename:ReaderFactoryArray
s_writers	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^    static WriterFactoryArray s_writers; \/\/\/< List of all registered writers$/;"	m	class:sf::SoundFileFactory	typeref:typename:WriterFactoryArray
sampleCount	dependencies/include/SFML/Audio/SoundFileReader.hpp	/^        Uint64       sampleCount;  \/\/\/< Total number of samples in the file$/;"	m	struct:sf::SoundFileReader::Info	typeref:typename:Uint64
sampleCount	dependencies/include/SFML/Audio/SoundStream.hpp	/^        std::size_t  sampleCount; \/\/\/< Number of samples pointed by Samples$/;"	m	struct:sf::SoundStream::Chunk	typeref:typename:std::size_t
sampleRate	dependencies/include/SFML/Audio/SoundFileReader.hpp	/^        unsigned int sampleRate;   \/\/\/< Samples rate of the sound, in samples per second$/;"	m	struct:sf::SoundFileReader::Info	typeref:typename:unsigned int
sample_id	dependencies/include/v8-profiler.h	/^    uint64_t sample_id;$/;"	m	struct:v8::AllocationProfile::Sample	typeref:typename:uint64_t
samples	dependencies/include/SFML/Audio/SoundStream.hpp	/^        const Int16* samples;     \/\/\/< Pointer to the audio samples$/;"	m	struct:sf::SoundStream::Chunk	typeref:typename:const Int16 *
sax	dependencies/include/nlohmann/json.hpp	/^    json_sax_t* sax = nullptr;$/;"	m	class:nlohmann::detail::binary_reader	typeref:typename:json_sax_t *
sax_parse	dependencies/include/nlohmann/json.hpp	/^    bool sax_parse(SAX* sax, const bool strict = true)$/;"	f	class:nlohmann::detail::parser	typeref:typename:bool
sax_parse	dependencies/include/nlohmann/json.hpp	/^    bool sax_parse(const input_format_t format,$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
sax_parse	dependencies/include/nlohmann/json.hpp	/^    static bool sax_parse(IteratorType first, IteratorType last, SAX* sax)$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
sax_parse	dependencies/include/nlohmann/json.hpp	/^    static bool sax_parse(detail::input_adapter&& i, SAX* sax,$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
sax_parse_internal	dependencies/include/nlohmann/json.hpp	/^    bool sax_parse_internal(SAX* sax)$/;"	f	class:nlohmann::detail::parser	typeref:typename:bool
sb	dependencies/include/nlohmann/json.hpp	/^    std::streambuf& sb;$/;"	m	class:nlohmann::detail::input_stream_adapter	typeref:typename:std::streambuf &
scan	dependencies/include/nlohmann/json.hpp	/^    token_type scan()$/;"	f	class:nlohmann::detail::lexer	typeref:typename:token_type
scan_literal	dependencies/include/nlohmann/json.hpp	/^    token_type scan_literal(const char* literal_text, const std::size_t length,$/;"	f	class:nlohmann::detail::lexer	typeref:typename:token_type
scan_number	dependencies/include/nlohmann/json.hpp	/^    token_type scan_number()  \/\/ lgtm [cpp\/use-of-goto]$/;"	f	class:nlohmann::detail::lexer	typeref:typename:token_type
scan_string	dependencies/include/nlohmann/json.hpp	/^    token_type scan_string()$/;"	f	class:nlohmann::detail::lexer	typeref:typename:token_type
scope	dependencies/include/libplatform/v8-tracing.h	/^  const char* scope() const { return scope_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:const char *
scope_	dependencies/include/libplatform/v8-tracing.h	/^  const char* scope_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:const char *
script_id	dependencies/include/v8-profiler.h	/^    int script_id;$/;"	m	struct:v8::AllocationProfile::Node	typeref:typename:int
script_id	dependencies/include/v8-profiler.h	/^  int script_id;$/;"	m	struct:v8::CpuProfileDeoptFrame	typeref:typename:int
script_id_	dependencies/include/v8.h	/^  Local<Integer> script_id_;$/;"	m	class:v8::ScriptOrigin	typeref:typename:Local<Integer>
script_name	dependencies/include/v8-profiler.h	/^    Local<String> script_name;$/;"	m	struct:v8::AllocationProfile::Node	typeref:typename:Local<String>
sensor	dependencies/include/SFML/Window/Event.hpp	/^        SensorEvent           sensor;            \/\/\/< Sensor event parameters (Event::SensorC/;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:SensorEvent
seq	dependencies/include/libplatform/v8-tracing.h	/^  uint32_t seq() const { return seq_; }$/;"	f	class:v8::platform::tracing::TraceBufferChunk	typeref:typename:uint32_t
seq_	dependencies/include/libplatform/v8-tracing.h	/^  uint32_t seq_;$/;"	m	class:v8::platform::tracing::TraceBufferChunk	typeref:typename:uint32_t
serializer	dependencies/include/nlohmann/json.hpp	/^        is_detected_exact<T, from_json_function, serializer,$/;"	m	struct:nlohmann::detail::has_non_default_from_json	typeref:typename:bool
serializer	dependencies/include/nlohmann/json.hpp	/^        is_detected_exact<void, from_json_function, serializer,$/;"	m	struct:nlohmann::detail::has_from_json	typeref:typename:bool
serializer	dependencies/include/nlohmann/json.hpp	/^        is_detected_exact<void, to_json_function, serializer, BasicJsonType&,$/;"	m	struct:nlohmann::detail::has_to_json	typeref:typename:bool
serializer	dependencies/include/nlohmann/json.hpp	/^    serializer(output_adapter_t<char> s, const char ichar,$/;"	f	class:nlohmann::detail::serializer
serializer	dependencies/include/nlohmann/json.hpp	/^    using serializer = ::nlohmann::detail::serializer<basic_json>;$/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::detail::serializer<basic_json>
serializer	dependencies/include/nlohmann/json.hpp	/^    using serializer = typename BasicJsonType::template json_serializer<T, void>;$/;"	t	struct:nlohmann::detail::has_from_json	typeref:typename:BasicJsonType::template json_serializer<T,void>
serializer	dependencies/include/nlohmann/json.hpp	/^    using serializer = typename BasicJsonType::template json_serializer<T, void>;$/;"	t	struct:nlohmann::detail::has_non_default_from_json	typeref:typename:BasicJsonType::template json_serializer<T,void>
serializer	dependencies/include/nlohmann/json.hpp	/^    using serializer = typename BasicJsonType::template json_serializer<T, void>;$/;"	t	struct:nlohmann::detail::has_to_json	typeref:typename:BasicJsonType::template json_serializer<T,void>
serializer	dependencies/include/nlohmann/json.hpp	/^class serializer$/;"	c	namespace:nlohmann::detail
set_begin	dependencies/include/nlohmann/json.hpp	/^    void set_begin() noexcept$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:void
set_begin	dependencies/include/nlohmann/json.hpp	/^    void set_begin() noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:void
set_end	dependencies/include/nlohmann/json.hpp	/^    void set_end() noexcept$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:void
set_end	dependencies/include/nlohmann/json.hpp	/^    void set_end() noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:void
setter	dependencies/include/v8.h	/^  GenericNamedPropertySetterCallback setter;$/;"	m	struct:v8::NamedPropertyHandlerConfiguration	typeref:typename:GenericNamedPropertySetterCallback
setter	dependencies/include/v8.h	/^  IndexedPropertySetterCallback setter;$/;"	m	struct:v8::IndexedPropertyHandlerConfiguration	typeref:typename:IndexedPropertySetterCallback
sf	dependencies/include/SFML/Audio/AlResource.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/InputSoundFile.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/Listener.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/Music.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/OutputSoundFile.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/Sound.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/SoundBuffer.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/SoundBufferRecorder.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/SoundFileFactory.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/SoundFileFactory.inl	/^namespace sf$/;"	n	file:
sf	dependencies/include/SFML/Audio/SoundFileReader.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/SoundFileWriter.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/SoundRecorder.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/SoundSource.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Audio/SoundStream.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Config.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/BlendMode.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/CircleShape.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Color.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/ConvexShape.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Drawable.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Font.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Glsl.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Glyph.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Image.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/PrimitiveType.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Rect.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/RectangleShape.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/RenderStates.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/RenderTexture.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/RenderWindow.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Shader.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Shape.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Sprite.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Text.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Texture.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Transform.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Transformable.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/Vertex.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/VertexArray.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/VertexBuffer.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Graphics/View.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Network/Ftp.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Network/Http.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Network/IpAddress.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Network/Packet.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Network/Socket.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Network/SocketHandle.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Network/SocketSelector.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Network/TcpListener.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Network/TcpSocket.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Network/UdpSocket.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/Clock.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/Err.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/FileInputStream.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/InputStream.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/Lock.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/MemoryInputStream.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/Mutex.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/NativeActivity.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/NonCopyable.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/Sleep.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/String.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/Thread.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/ThreadLocal.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/ThreadLocalPtr.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/ThreadLocalPtr.inl	/^namespace sf$/;"	n	file:
sf	dependencies/include/SFML/System/Time.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/Utf.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/Vector2.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/System/Vector3.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/Clipboard.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/Context.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/ContextSettings.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/Cursor.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/Event.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/GlResource.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/Joystick.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/Keyboard.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/Mouse.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/Sensor.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/Touch.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/VideoMode.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/Window.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/WindowHandle.hpp	/^namespace sf$/;"	n
sf	dependencies/include/SFML/Window/WindowStyle.hpp	/^namespace sf$/;"	n
shader	dependencies/include/SFML/Graphics/RenderStates.hpp	/^    const Shader*  shader;    \/\/\/< Shader$/;"	m	class:sf::RenderStates	typeref:typename:const Shader *
shared_module_	dependencies/include/v8.h	/^    SharedModule shared_module_;$/;"	m	class:v8::WasmModuleObject::TransferrableModule	typeref:typename:SharedModule
shift	dependencies/include/SFML/Window/Event.hpp	/^        bool          shift;   \/\/\/< Is the Shift key pressed?$/;"	m	struct:sf::Event::KeyEvent	typeref:typename:bool
size	dependencies/include/SFML/Window/Event.hpp	/^        SizeEvent             size;              \/\/\/< Size event parameters (Event::Resized)$/;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:SizeEvent
size	dependencies/include/libplatform/v8-tracing.h	/^  size_t size() const { return next_free_; }$/;"	f	class:v8::platform::tracing::TraceBufferChunk	typeref:typename:size_t
size	dependencies/include/nlohmann/json.hpp	/^    size_type size() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:size_type
size	dependencies/include/nlohmann/json.hpp	/^    static constexpr std::size_t size() noexcept$/;"	f	struct:nlohmann::detail::index_sequence	typeref:typename:std::size_t
size	dependencies/include/v8-profiler.h	/^    size_t size;$/;"	m	struct:v8::AllocationProfile::Allocation	typeref:typename:size_t
size	dependencies/include/v8-profiler.h	/^    size_t size;$/;"	m	struct:v8::AllocationProfile::Sample	typeref:typename:size_t
size	dependencies/include/v8-profiler.h	/^  uint32_t size;  \/\/ New value of size field for the interval with this index.$/;"	m	struct:v8::HeapStatsUpdate	typeref:typename:uint32_t
size	dependencies/include/v8.h	/^    size_t size;$/;"	m	class:v8::WasmModuleObject	typeref:typename:size_t
size	dependencies/include/v8.h	/^  constexpr size_t size() const { return size_; }$/;"	f	class:v8::MemorySpan	typeref:typename:size_t
size	dependencies/include/v8.h	/^  size_t size = 0;$/;"	m	struct:v8::OwnedBuffer	typeref:typename:size_t
size_	dependencies/include/v8.h	/^  size_t size_ = 0;$/;"	m	class:v8::MemorySpan	typeref:typename:size_t
size_type	dependencies/include/nlohmann/json.hpp	/^        using size_type = typename BasicJsonType::size_type;$/;"	t	function:nlohmann::json_pointer::get_and_create	typeref:typename:BasicJsonType::size_type
size_type	dependencies/include/nlohmann/json.hpp	/^        using size_type = typename BasicJsonType::size_type;$/;"	t	function:nlohmann::json_pointer::get_checked	typeref:typename:BasicJsonType::size_type
size_type	dependencies/include/nlohmann/json.hpp	/^        using size_type = typename BasicJsonType::size_type;$/;"	t	function:nlohmann::json_pointer::get_unchecked	typeref:typename:BasicJsonType::size_type
size_type	dependencies/include/nlohmann/json.hpp	/^    using size_type = std::size_t;$/;"	t	class:nlohmann::basic_json	typeref:typename:std::size_t
skip_bom	dependencies/include/nlohmann/json.hpp	/^    bool skip_bom()$/;"	f	class:nlohmann::detail::lexer	typeref:typename:bool
source_map_url	dependencies/include/v8.h	/^    Local<Value> source_map_url;$/;"	m	class:v8::ScriptCompiler::Source	typeref:typename:Local<Value>
source_map_url_	dependencies/include/v8.h	/^  Local<Value> source_map_url_;$/;"	m	class:v8::ScriptOrigin	typeref:typename:Local<Value>
source_string	dependencies/include/v8.h	/^    Local<String> source_string;$/;"	m	class:v8::ScriptCompiler::Source	typeref:typename:Local<String>
sp	dependencies/include/v8.h	/^  void* sp;  \/\/ Stack pointer.$/;"	m	struct:v8::RegisterState	typeref:typename:void *
split	dependencies/include/nlohmann/json.hpp	/^    static std::vector<std::string> split(const std::string& reference_string)$/;"	f	class:nlohmann::json_pointer	typeref:typename:std::vector<std::string>
stack	dependencies/include/v8-profiler.h	/^  std::vector<CpuProfileDeoptFrame> stack;$/;"	m	struct:v8::CpuProfileDeoptInfo	typeref:typename:std::vector<CpuProfileDeoptFrame>
stack	dependencies/include/v8-profiler.h	/^  void* stack[kMaxFramesCount];                 \/\/ Call stack.$/;"	m	struct:v8::TickSample	typeref:typename:void * []
start	dependencies/include/v8.h	/^    const uint8_t* start;$/;"	m	class:v8::WasmModuleObject	typeref:typename:const uint8_t *
start	dependencies/include/v8.h	/^  const void* start = nullptr;$/;"	m	struct:v8::MemoryRange	typeref:typename:const void *
startRepeatingTimer	dependencies/include/v8-inspector.h	/^  virtual void startRepeatingTimer(double, TimerCallback, void* data) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
start_array	dependencies/include/nlohmann/json.hpp	/^    bool start_array(std::size_t  \/*unused*\/ = std::size_t(-1))$/;"	f	class:nlohmann::detail::json_sax_acceptor	typeref:typename:bool
start_array	dependencies/include/nlohmann/json.hpp	/^    bool start_array(std::size_t len)$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:bool
start_array	dependencies/include/nlohmann/json.hpp	/^    bool start_array(std::size_t len)$/;"	f	class:nlohmann::detail::json_sax_dom_parser	typeref:typename:bool
start_array_function_t	dependencies/include/nlohmann/json.hpp	/^using start_array_function_t =$/;"	t	namespace:nlohmann::detail
start_object	dependencies/include/nlohmann/json.hpp	/^    bool start_object(std::size_t  \/*unused*\/ = std::size_t(-1))$/;"	f	class:nlohmann::detail::json_sax_acceptor	typeref:typename:bool
start_object	dependencies/include/nlohmann/json.hpp	/^    bool start_object(std::size_t len)$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:bool
start_object	dependencies/include/nlohmann/json.hpp	/^    bool start_object(std::size_t len)$/;"	f	class:nlohmann::detail::json_sax_dom_parser	typeref:typename:bool
start_object_function_t	dependencies/include/nlohmann/json.hpp	/^using start_object_function_t =$/;"	t	namespace:nlohmann::detail
start_position	dependencies/include/v8-profiler.h	/^    int start_position;$/;"	m	struct:v8::AllocationProfile::Node	typeref:typename:int
state	dependencies/include/v8-profiler.h	/^  StateTag state;  \/\/ The state of the VM.$/;"	m	struct:v8::TickSample	typeref:typename:StateTag
static_const	dependencies/include/nlohmann/json.hpp	/^struct static_const$/;"	s	namespace:nlohmann::detail
std	dependencies/include/nlohmann/json.hpp	/^namespace std$/;"	n
stencilBits	dependencies/include/SFML/Window/ContextSettings.hpp	/^    unsigned int stencilBits;       \/\/\/< Bits of the stencil buffer$/;"	m	struct:sf::ContextSettings	typeref:typename:unsigned int
str	dependencies/include/nlohmann/json.hpp	/^    StringType& str;$/;"	m	class:nlohmann::detail::output_string_adapter	typeref:typename:StringType &
str	dependencies/include/nlohmann/json.hpp	/^    const WideStringType& str;$/;"	m	class:nlohmann::detail::wide_string_input_adapter	typeref:typename:const WideStringType &
str_	dependencies/include/v8.h	/^    char* str_;$/;"	m	class:v8::String::Utf8Value	typeref:typename:char *
str_	dependencies/include/v8.h	/^    uint16_t* str_;$/;"	m	class:v8::String::Value	typeref:typename:uint16_t *
stream	dependencies/include/nlohmann/json.hpp	/^    std::basic_ostream<CharType>& stream;$/;"	m	class:nlohmann::detail::output_stream_adapter	typeref:typename:std::basic_ostream<CharType> &
streaming_decoder_	dependencies/include/v8.h	/^  std::shared_ptr<internal::wasm::StreamingDecoder> streaming_decoder_;$/;"	m	class:v8::WasmModuleObjectBuilderStreaming	typeref:typename:std::shared_ptr<internal::wasm::StreamingDecoder>
strict	dependencies/include/nlohmann/json.hpp	/^    strict,  \/\/\/< throw a type_error exception in case of invalid UTF-8$/;"	e	enum:nlohmann::detail::error_handler_t
string	dependencies/include/nlohmann/json.hpp	/^        string_t* string;$/;"	m	union:nlohmann::basic_json::json_value	typeref:typename:string_t *
string	dependencies/include/nlohmann/json.hpp	/^    bool string(string_t& \/*unused*\/)$/;"	f	class:nlohmann::detail::json_sax_acceptor	typeref:typename:bool
string	dependencies/include/nlohmann/json.hpp	/^    bool string(string_t& val)$/;"	f	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:bool
string	dependencies/include/nlohmann/json.hpp	/^    bool string(string_t& val)$/;"	f	class:nlohmann::detail::json_sax_dom_parser	typeref:typename:bool
string	dependencies/include/nlohmann/json.hpp	/^    string,           \/\/\/< string value$/;"	e	enum:nlohmann::detail::value_t
string_buffer	dependencies/include/nlohmann/json.hpp	/^    std::array<char, 512> string_buffer{{}};$/;"	m	class:nlohmann::detail::serializer	typeref:typename:std::array<char,512>
string_function_t	dependencies/include/nlohmann/json.hpp	/^using string_function_t =$/;"	t	namespace:nlohmann::detail
string_t	dependencies/include/nlohmann/json.hpp	/^    using string_t = StringType;$/;"	t	class:nlohmann::basic_json	typeref:typename:StringType
string_t	dependencies/include/nlohmann/json.hpp	/^    using string_t = typename BasicJsonType::string_t;$/;"	t	class:nlohmann::detail::binary_reader	typeref:typename:BasicJsonType::string_t
string_t	dependencies/include/nlohmann/json.hpp	/^    using string_t = typename BasicJsonType::string_t;$/;"	t	class:nlohmann::detail::binary_writer	typeref:typename:BasicJsonType::string_t
string_t	dependencies/include/nlohmann/json.hpp	/^    using string_t = typename BasicJsonType::string_t;$/;"	t	class:nlohmann::detail::json_sax_acceptor	typeref:typename:BasicJsonType::string_t
string_t	dependencies/include/nlohmann/json.hpp	/^    using string_t = typename BasicJsonType::string_t;$/;"	t	class:nlohmann::detail::json_sax_dom_callback_parser	typeref:typename:BasicJsonType::string_t
string_t	dependencies/include/nlohmann/json.hpp	/^    using string_t = typename BasicJsonType::string_t;$/;"	t	class:nlohmann::detail::json_sax_dom_parser	typeref:typename:BasicJsonType::string_t
string_t	dependencies/include/nlohmann/json.hpp	/^    using string_t = typename BasicJsonType::string_t;$/;"	t	class:nlohmann::detail::lexer	typeref:typename:BasicJsonType::string_t
string_t	dependencies/include/nlohmann/json.hpp	/^    using string_t = typename BasicJsonType::string_t;$/;"	t	class:nlohmann::detail::parser	typeref:typename:BasicJsonType::string_t
string_t	dependencies/include/nlohmann/json.hpp	/^    using string_t = typename BasicJsonType::string_t;$/;"	t	class:nlohmann::detail::serializer	typeref:typename:BasicJsonType::string_t
string_t	dependencies/include/nlohmann/json.hpp	/^    using string_t = typename BasicJsonType::string_t;$/;"	t	struct:nlohmann::detail::is_sax	typeref:typename:BasicJsonType::string_t
string_t	dependencies/include/nlohmann/json.hpp	/^    using string_t = typename BasicJsonType::string_t;$/;"	t	struct:nlohmann::detail::is_sax_static_asserts	typeref:typename:BasicJsonType::string_t
string_t	dependencies/include/nlohmann/json.hpp	/^    using string_t = typename BasicJsonType::string_t;$/;"	t	struct:nlohmann::json_sax	typeref:typename:BasicJsonType::string_t
strtof	dependencies/include/nlohmann/json.hpp	/^    static void strtof(double& f, const char* str, char** endptr) noexcept$/;"	f	class:nlohmann::detail::lexer	typeref:typename:void
strtof	dependencies/include/nlohmann/json.hpp	/^    static void strtof(float& f, const char* str, char** endptr) noexcept$/;"	f	class:nlohmann::detail::lexer	typeref:typename:void
strtof	dependencies/include/nlohmann/json.hpp	/^    static void strtof(long double& f, const char* str, char** endptr) noexcept$/;"	f	class:nlohmann::detail::lexer	typeref:typename:void
sub	dependencies/include/nlohmann/json.hpp	/^    static diyfp sub(const diyfp& x, const diyfp& y) noexcept$/;"	f	struct:nlohmann::detail::dtoa_impl::diyfp	typeref:typename:diyfp
swap	dependencies/include/nlohmann/json.hpp	/^    void swap(array_t& other)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
swap	dependencies/include/nlohmann/json.hpp	/^    void swap(object_t& other)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
swap	dependencies/include/nlohmann/json.hpp	/^    void swap(reference other) noexcept ($/;"	f	class:nlohmann::basic_json	typeref:typename:void
swap	dependencies/include/nlohmann/json.hpp	/^    void swap(string_t& other)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
system	dependencies/include/SFML/Window/Event.hpp	/^        bool          system;  \/\/\/< Is the System key pressed?$/;"	m	struct:sf::Event::KeyEvent	typeref:typename:bool
test	dependencies/include/nlohmann/json.hpp	/^        enum class patch_operations {add, remove, replace, move, copy, test, invalid};$/;"	e	enum:nlohmann::basic_json::patch::patch_operations
texCoords	dependencies/include/SFML/Graphics/Vertex.hpp	/^    Vector2f  texCoords; \/\/\/< Coordinates of the texture's pixel to map to the vertex$/;"	m	class:sf::Vertex	typeref:typename:Vector2f
texCoordsArrayEnabled	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^        bool      texCoordsArrayEnabled; \/\/\/< Is GL_TEXTURE_COORD_ARRAY client state enabled?$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:bool
text	dependencies/include/SFML/Window/Event.hpp	/^        TextEvent             text;              \/\/\/< Text event parameters (Event::TextEnter/;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:TextEvent
texture	dependencies/include/SFML/Graphics/Font.hpp	/^        Texture          texture; \/\/\/< Texture containing the pixels of the glyphs$/;"	m	struct:sf::Font::Page	typeref:typename:Texture
texture	dependencies/include/SFML/Graphics/RenderStates.hpp	/^    const Texture* texture;   \/\/\/< Texture$/;"	m	class:sf::RenderStates	typeref:typename:const Texture *
textureRect	dependencies/include/SFML/Graphics/Glyph.hpp	/^    IntRect   textureRect; \/\/\/< Texture coordinates of the glyph inside the font's texture$/;"	m	class:sf::Glyph	typeref:typename:IntRect
thousands_sep	dependencies/include/nlohmann/json.hpp	/^    const char thousands_sep = '\\0';$/;"	m	class:nlohmann::detail::serializer	typeref:typename:const char
tid	dependencies/include/libplatform/v8-tracing.h	/^  int tid() const { return tid_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:int
tid_	dependencies/include/libplatform/v8-tracing.h	/^  int tid_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:int
toAnsi	dependencies/include/SFML/System/Utf.inl	/^Out Utf<16>::toAnsi(In begin, In end, Out output, char replacement, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
toAnsi	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::toAnsi(In begin, In end, Out output, char replacement, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
toAnsi	dependencies/include/SFML/System/Utf.inl	/^Out Utf<8>::toAnsi(In begin, In end, Out output, char replacement, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
toLatin1	dependencies/include/SFML/System/Utf.inl	/^Out Utf<16>::toLatin1(In begin, In end, Out output, char replacement)$/;"	f	class:Utf	typeref:typename:Out
toLatin1	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::toLatin1(In begin, In end, Out output, char replacement)$/;"	f	class:Utf	typeref:typename:Out
toLatin1	dependencies/include/SFML/System/Utf.inl	/^Out Utf<8>::toLatin1(In begin, In end, Out output, char replacement)$/;"	f	class:Utf	typeref:typename:Out
toUtf16	dependencies/include/SFML/System/Utf.inl	/^Out Utf<16>::toUtf16(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf16	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::toUtf16(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf16	dependencies/include/SFML/System/Utf.inl	/^Out Utf<8>::toUtf16(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf32	dependencies/include/SFML/System/Utf.inl	/^Out Utf<16>::toUtf32(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf32	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::toUtf32(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf32	dependencies/include/SFML/System/Utf.inl	/^Out Utf<8>::toUtf32(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf8	dependencies/include/SFML/System/Utf.inl	/^Out Utf<16>::toUtf8(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf8	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::toUtf8(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf8	dependencies/include/SFML/System/Utf.inl	/^Out Utf<8>::toUtf8(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toWide	dependencies/include/SFML/System/Utf.inl	/^Out Utf<16>::toWide(In begin, In end, Out output, wchar_t replacement)$/;"	f	class:Utf	typeref:typename:Out
toWide	dependencies/include/SFML/System/Utf.inl	/^Out Utf<32>::toWide(In begin, In end, Out output, wchar_t replacement)$/;"	f	class:Utf	typeref:typename:Out
toWide	dependencies/include/SFML/System/Utf.inl	/^Out Utf<8>::toWide(In begin, In end, Out output, wchar_t replacement)$/;"	f	class:Utf	typeref:typename:Out
to_bson	dependencies/include/nlohmann/json.hpp	/^    static std::vector<uint8_t> to_bson(const basic_json& j)$/;"	f	class:nlohmann::basic_json	typeref:typename:std::vector<uint8_t>
to_bson	dependencies/include/nlohmann/json.hpp	/^    static void to_bson(const basic_json& j, detail::output_adapter<char> o)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
to_bson	dependencies/include/nlohmann/json.hpp	/^    static void to_bson(const basic_json& j, detail::output_adapter<uint8_t> o)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
to_cbor	dependencies/include/nlohmann/json.hpp	/^    static std::vector<uint8_t> to_cbor(const basic_json& j)$/;"	f	class:nlohmann::basic_json	typeref:typename:std::vector<uint8_t>
to_cbor	dependencies/include/nlohmann/json.hpp	/^    static void to_cbor(const basic_json& j, detail::output_adapter<char> o)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
to_cbor	dependencies/include/nlohmann/json.hpp	/^    static void to_cbor(const basic_json& j, detail::output_adapter<uint8_t> o)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
to_char_type	dependencies/include/nlohmann/json.hpp	/^    static CharType to_char_type(std::uint8_t x) noexcept$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:CharType
to_char_type	dependencies/include/nlohmann/json.hpp	/^    static constexpr CharType to_char_type(InputCharType x) noexcept$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:CharType
to_char_type	dependencies/include/nlohmann/json.hpp	/^    static constexpr CharType to_char_type(std::uint8_t x) noexcept$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:CharType
to_chars	dependencies/include/nlohmann/json.hpp	/^char* to_chars(char* first, const char* last, FloatType value)$/;"	f	namespace:nlohmann::detail	typeref:typename:char *
to_json	dependencies/include/nlohmann/json.hpp	/^    static auto to_json(BasicJsonType& j, ValueType&& val) noexcept($/;"	f	struct:nlohmann::adl_serializer	typeref:typename:auto
to_json	dependencies/include/nlohmann/json.hpp	/^constexpr const auto& to_json = detail::static_const<detail::to_json_fn>::value;$/;"	v	namespace:nlohmann::__anond356d9080610	typeref:typename:const auto &
to_json	dependencies/include/nlohmann/json.hpp	/^void to_json(BasicJsonType& j, CompatibleNumberIntegerType val) noexcept$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	dependencies/include/nlohmann/json.hpp	/^void to_json(BasicJsonType& j, CompatibleNumberUnsignedType val) noexcept$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	dependencies/include/nlohmann/json.hpp	/^void to_json(BasicJsonType& j, EnumType e) noexcept$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	dependencies/include/nlohmann/json.hpp	/^void to_json(BasicJsonType& j, FloatType val) noexcept$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	dependencies/include/nlohmann/json.hpp	/^void to_json(BasicJsonType& j, T b) noexcept$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	dependencies/include/nlohmann/json.hpp	/^void to_json(BasicJsonType& j, const CompatibleArrayType& arr)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	dependencies/include/nlohmann/json.hpp	/^void to_json(BasicJsonType& j, const CompatibleObjectType& obj)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	dependencies/include/nlohmann/json.hpp	/^void to_json(BasicJsonType& j, const CompatibleString& s)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	dependencies/include/nlohmann/json.hpp	/^void to_json(BasicJsonType& j, const T(&arr)[N])$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	dependencies/include/nlohmann/json.hpp	/^void to_json(BasicJsonType& j, const std::pair<Args...>& p)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	dependencies/include/nlohmann/json.hpp	/^void to_json(BasicJsonType& j, const std::tuple<Args...>& t)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	dependencies/include/nlohmann/json.hpp	/^void to_json(BasicJsonType& j, const std::valarray<T>& arr)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	dependencies/include/nlohmann/json.hpp	/^void to_json(BasicJsonType& j, const std::vector<bool>& e)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	dependencies/include/nlohmann/json.hpp	/^void to_json(BasicJsonType& j, typename BasicJsonType::array_t&& arr)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	dependencies/include/nlohmann/json.hpp	/^void to_json(BasicJsonType& j, typename BasicJsonType::object_t&& obj)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	dependencies/include/nlohmann/json.hpp	/^void to_json(BasicJsonType& j, typename BasicJsonType::string_t&& s)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json_fn	dependencies/include/nlohmann/json.hpp	/^struct to_json_fn$/;"	s	namespace:nlohmann::detail
to_json_function	dependencies/include/nlohmann/json.hpp	/^        is_detected_exact<void, to_json_function, serializer, BasicJsonType&,$/;"	m	struct:nlohmann::detail::has_to_json	typeref:typename:bool
to_json_function	dependencies/include/nlohmann/json.hpp	/^using to_json_function = decltype(T::to_json(std::declval<Args>()...));$/;"	t	namespace:nlohmann::detail
to_json_tuple_impl	dependencies/include/nlohmann/json.hpp	/^void to_json_tuple_impl(BasicJsonType& j, const Tuple& t, index_sequence<Idx...> \/*unused*\/)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_msgpack	dependencies/include/nlohmann/json.hpp	/^    static std::vector<uint8_t> to_msgpack(const basic_json& j)$/;"	f	class:nlohmann::basic_json	typeref:typename:std::vector<uint8_t>
to_msgpack	dependencies/include/nlohmann/json.hpp	/^    static void to_msgpack(const basic_json& j, detail::output_adapter<char> o)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
to_msgpack	dependencies/include/nlohmann/json.hpp	/^    static void to_msgpack(const basic_json& j, detail::output_adapter<uint8_t> o)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
to_string	dependencies/include/nlohmann/json.hpp	/^    std::string to_string() const$/;"	f	class:nlohmann::json_pointer	typeref:typename:std::string
to_ubjson	dependencies/include/nlohmann/json.hpp	/^    static std::vector<uint8_t> to_ubjson(const basic_json& j,$/;"	f	class:nlohmann::basic_json	typeref:typename:std::vector<uint8_t>
to_ubjson	dependencies/include/nlohmann/json.hpp	/^    static void to_ubjson(const basic_json& j, detail::output_adapter<char> o,$/;"	f	class:nlohmann::basic_json	typeref:typename:void
to_ubjson	dependencies/include/nlohmann/json.hpp	/^    static void to_ubjson(const basic_json& j, detail::output_adapter<uint8_t> o,$/;"	f	class:nlohmann::basic_json	typeref:typename:void
token_buffer	dependencies/include/nlohmann/json.hpp	/^    string_t token_buffer {};$/;"	m	class:nlohmann::detail::lexer	typeref:typename:string_t
token_string	dependencies/include/nlohmann/json.hpp	/^    std::vector<char> token_string {};$/;"	m	class:nlohmann::detail::lexer	typeref:typename:std::vector<char>
token_type	dependencies/include/nlohmann/json.hpp	/^    enum class token_type$/;"	g	class:nlohmann::detail::lexer
token_type	dependencies/include/nlohmann/json.hpp	/^    using token_type = typename lexer_t::token_type;$/;"	t	class:nlohmann::detail::parser	typeref:typename:lexer_t::token_type
token_type_name	dependencies/include/nlohmann/json.hpp	/^    static const char* token_type_name(const token_type t) noexcept$/;"	f	class:nlohmann::detail::lexer	typeref:typename:const char *
top	dependencies/include/SFML/Graphics/Font.hpp	/^        unsigned int top;    \/\/\/< Y position of the row into the texture$/;"	m	struct:sf::Font::Row	typeref:typename:unsigned int
top	dependencies/include/SFML/Graphics/Rect.hpp	/^    T top;    \/\/\/< Top coordinate of the rectangle$/;"	m	class:sf::Rect	typeref:typename:T
top	dependencies/include/nlohmann/json.hpp	/^    json_pointer top() const$/;"	f	class:nlohmann::json_pointer	typeref:typename:json_pointer
tos	dependencies/include/v8-profiler.h	/^    void* tos;  \/\/ Top stack value (*sp).$/;"	m	union:v8::TickSample::__anon2dc9d442010a	typeref:typename:void *
touch	dependencies/include/SFML/Window/Event.hpp	/^        TouchEvent            touch;             \/\/\/< Touch events parameters (Event::TouchBe/;"	m	union:sf::Event::__anon9e6e9dae010a	typeref:typename:TouchEvent
trace_buffer_	dependencies/include/libplatform/v8-tracing.h	/^  std::unique_ptr<TraceBuffer> trace_buffer_;$/;"	m	class:v8::platform::tracing::TracingController	typeref:typename:std::unique_ptr<TraceBuffer>
trace_config_	dependencies/include/libplatform/v8-tracing.h	/^  std::unique_ptr<TraceConfig> trace_config_;$/;"	m	class:v8::platform::tracing::TracingController	typeref:typename:std::unique_ptr<TraceConfig>
tracing	dependencies/include/libplatform/v8-tracing.h	/^namespace tracing {$/;"	n	namespace:v8::platform
traits	dependencies/include/nlohmann/json.hpp	/^    using traits = iterator_traits<T>;$/;"	t	struct:nlohmann::detail::is_iterator_traits	typeref:typename:iterator_traits<T>
transform	dependencies/include/SFML/Graphics/RenderStates.hpp	/^    Transform      transform; \/\/\/< Transform$/;"	m	class:sf::RenderStates	typeref:typename:Transform
ts	dependencies/include/libplatform/v8-tracing.h	/^  int64_t ts() { return ts_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:int64_t
ts_	dependencies/include/libplatform/v8-tracing.h	/^  int64_t ts_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:int64_t
tts	dependencies/include/libplatform/v8-tracing.h	/^  int64_t tts() { return tts_; }$/;"	f	class:v8::platform::tracing::TraceObject	typeref:typename:int64_t
tts_	dependencies/include/libplatform/v8-tracing.h	/^  int64_t tts_;$/;"	m	class:v8::platform::tracing::TraceObject	typeref:typename:int64_t
tuple_element	dependencies/include/nlohmann/json.hpp	/^class tuple_element<N, ::nlohmann::detail::iteration_proxy_value<IteratorType >>$/;"	c	namespace:std
tuple_size	dependencies/include/nlohmann/json.hpp	/^class tuple_size<::nlohmann::detail::iteration_proxy_value<IteratorType>>$/;"	c	namespace:std
type	dependencies/include/SFML/Window/Event.hpp	/^        Sensor::Type type; \/\/\/< Type of the sensor$/;"	m	struct:sf::Event::SensorEvent	typeref:typename:Sensor::Type
type	dependencies/include/SFML/Window/Event.hpp	/^    EventType type; \/\/\/< Type of the event$/;"	m	class:sf::Event	typeref:typename:EventType
type	dependencies/include/nlohmann/json.hpp	/^    constexpr value_t type() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:value_t
type	dependencies/include/nlohmann/json.hpp	/^    using type = Default;$/;"	t	struct:nlohmann::detail::detector	typeref:typename:Default
type	dependencies/include/nlohmann/json.hpp	/^    using type = Op<Args...>;$/;"	t	struct:nlohmann::detail::detector	typeref:typename:Op<Args...>
type	dependencies/include/nlohmann/json.hpp	/^    using type = decltype($/;"	t	class:std::tuple_element
type	dependencies/include/nlohmann/json.hpp	/^    using type = index_sequence;$/;"	t	struct:nlohmann::detail::index_sequence	typeref:typename:index_sequence
type	dependencies/include/nlohmann/json.hpp	/^    using type = void;$/;"	t	struct:nlohmann::detail::make_void	typeref:typename:void
type_error	dependencies/include/nlohmann/json.hpp	/^    type_error(int id_, const char* what_arg) : exception(id_, what_arg) {}$/;"	f	class:nlohmann::detail::type_error
type_error	dependencies/include/nlohmann/json.hpp	/^    using type_error = detail::type_error;$/;"	t	class:nlohmann::basic_json	typeref:typename:detail::type_error
type_error	dependencies/include/nlohmann/json.hpp	/^class type_error : public exception$/;"	c	namespace:nlohmann::detail
type_name	dependencies/include/nlohmann/json.hpp	/^    const char* type_name() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const char *
ubjson	dependencies/include/nlohmann/json.hpp	/^enum class input_format_t { json, cbor, msgpack, ubjson, bson };$/;"	e	enum:nlohmann::detail::input_format_t
ubjson_prefix	dependencies/include/nlohmann/json.hpp	/^    CharType ubjson_prefix(const BasicJsonType& j) const noexcept$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:CharType
uncvref_t	dependencies/include/nlohmann/json.hpp	/^using uncvref_t = typename std::remove_cv<typename std::remove_reference<T>::type>::type;$/;"	t	namespace:nlohmann::detail	typeref:typename:std::remove_cv<typename std::remove_reference<T>::type>::type
underlying_type	dependencies/include/nlohmann/json.hpp	/^    using underlying_type = typename std::underlying_type<EnumType>::type;$/;"	t	function:nlohmann::detail::to_json	typeref:typename:std::underlying_type<EnumType>::type
unescape	dependencies/include/nlohmann/json.hpp	/^    static void unescape(std::string& s)$/;"	f	class:nlohmann::json_pointer	typeref:typename:void
unexpect_eof	dependencies/include/nlohmann/json.hpp	/^    bool unexpect_eof(const input_format_t format, const char* context) const$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
unflatten	dependencies/include/nlohmann/json.hpp	/^    basic_json unflatten() const$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
unflatten	dependencies/include/nlohmann/json.hpp	/^    unflatten(const BasicJsonType& value)$/;"	f	class:nlohmann::json_pointer	typeref:typename:BasicJsonType
unget	dependencies/include/nlohmann/json.hpp	/^    void unget()$/;"	f	class:nlohmann::detail::lexer	typeref:typename:void
unicode	dependencies/include/SFML/Window/Event.hpp	/^        Uint32 unicode; \/\/\/< UTF-32 Unicode value of the character$/;"	m	struct:sf::Event::TextEvent	typeref:typename:Uint32
uninitialized	dependencies/include/nlohmann/json.hpp	/^        uninitialized,    \/\/\/< indicating the scanner is uninitialized$/;"	e	enum:nlohmann::detail::lexer::token_type
unmuteMetrics	dependencies/include/v8-inspector.h	/^  virtual void unmuteMetrics(int contextGroupId) {}$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:void
unregisterReader	dependencies/include/SFML/Audio/SoundFileFactory.inl	/^void SoundFileFactory::unregisterReader()$/;"	f	class:sf::SoundFileFactory	typeref:typename:void
unregisterWriter	dependencies/include/SFML/Audio/SoundFileFactory.inl	/^void SoundFileFactory::unregisterWriter()$/;"	f	class:sf::SoundFileFactory	typeref:typename:void
update	dependencies/include/nlohmann/json.hpp	/^    void update(const_iterator first, const_iterator last)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
update	dependencies/include/nlohmann/json.hpp	/^    void update(const_reference j)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
update	src/Game.cpp	/^void Game::update(){$/;"	f	class:Game	typeref:typename:void
update_stats	dependencies/include/v8-profiler.h	/^  bool update_stats : 1;  \/\/ Whether the sample should update aggregated stats.$/;"	m	struct:v8::TickSample	typeref:typename:bool:1
useVertexCache	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^        bool      useVertexCache; \/\/\/< Did we previously use the vertex cache?$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:bool
utf8_bytes_filled	dependencies/include/nlohmann/json.hpp	/^    std::size_t utf8_bytes_filled = 0;$/;"	m	class:nlohmann::detail::wide_string_input_adapter	typeref:typename:std::size_t
utf8_bytes_index	dependencies/include/nlohmann/json.hpp	/^    std::size_t utf8_bytes_index = 0;$/;"	m	class:nlohmann::detail::wide_string_input_adapter	typeref:typename:std::size_t
v	dependencies/include/nlohmann/json.hpp	/^    std::vector<CharType>& v;$/;"	m	class:nlohmann::detail::output_vector_adapter	typeref:typename:std::vector<CharType> &
v8	dependencies/include/libplatform/libplatform.h	/^namespace v8 {$/;"	n
v8	dependencies/include/libplatform/v8-tracing.h	/^namespace v8 {$/;"	n
v8	dependencies/include/v8-internal.h	/^namespace v8 {$/;"	n
v8	dependencies/include/v8-platform.h	/^namespace v8 {$/;"	n
v8	dependencies/include/v8-profiler.h	/^namespace v8 {$/;"	n
v8	dependencies/include/v8-testing.h	/^namespace v8 {$/;"	n
v8	dependencies/include/v8-util.h	/^namespace v8 {$/;"	n
v8	dependencies/include/v8-value-serializer-version.h	/^namespace v8 {$/;"	n
v8	dependencies/include/v8-wasm-trap-handler-posix.h	/^namespace v8 {$/;"	n
v8	dependencies/include/v8-wasm-trap-handler-win.h	/^namespace v8 {$/;"	n
v8	dependencies/include/v8.h	/^namespace v8 {$/;"	n
v8_inspector	dependencies/include/v8-inspector.h	/^namespace v8_inspector {$/;"	n
val_	dependencies/include/v8.h	/^  T* val_;$/;"	m	class:v8::Eternal	typeref:typename:T *
val_	dependencies/include/v8.h	/^  T* val_;$/;"	m	class:v8::Local	typeref:typename:T *
val_	dependencies/include/v8.h	/^  T* val_;$/;"	m	class:v8::MaybeLocal	typeref:typename:T *
val_	dependencies/include/v8.h	/^  T* val_;$/;"	m	class:v8::PersistentBase	typeref:typename:T *
value	dependencies/include/nlohmann/json.hpp	/^        value$/;"	e	enum:nlohmann::detail::parser::parse_event_t
value	dependencies/include/nlohmann/json.hpp	/^    ValueType value(const json_pointer& ptr, const ValueType& default_value) const$/;"	f	class:nlohmann::basic_json	typeref:typename:ValueType
value	dependencies/include/nlohmann/json.hpp	/^    ValueType value(const typename object_t::key_type& key, const ValueType& default_value) cons/;"	f	class:nlohmann::basic_json	typeref:typename:ValueType
value	dependencies/include/nlohmann/json.hpp	/^    reference value() const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:reference
value	dependencies/include/nlohmann/json.hpp	/^    reference value() const$/;"	f	class:nlohmann::detail::json_reverse_iterator	typeref:typename:reference
value	dependencies/include/nlohmann/json.hpp	/^    static constexpr T value{};$/;"	m	struct:nlohmann::detail::static_const	typeref:typename:T
value	dependencies/include/nlohmann/json.hpp	/^    static constexpr auto value =$/;"	m	struct:nlohmann::detail::is_compatible_integer_type_impl	typeref:typename:auto
value	dependencies/include/nlohmann/json.hpp	/^    static constexpr auto value =$/;"	m	struct:nlohmann::detail::is_compatible_string_type_impl	typeref:typename:auto
value	dependencies/include/nlohmann/json.hpp	/^    static constexpr auto value =$/;"	m	struct:nlohmann::detail::is_constructible_string_type_impl	typeref:typename:auto
value	dependencies/include/nlohmann/json.hpp	/^    static constexpr auto value =$/;"	m	struct:nlohmann::detail::is_iterator_traits	typeref:typename:auto
value	dependencies/include/nlohmann/json.hpp	/^    static constexpr bool value =$/;"	m	struct:nlohmann::detail::has_from_json	typeref:typename:bool
value	dependencies/include/nlohmann/json.hpp	/^    static constexpr bool value =$/;"	m	struct:nlohmann::detail::has_non_default_from_json	typeref:typename:bool
value	dependencies/include/nlohmann/json.hpp	/^    static constexpr bool value =$/;"	m	struct:nlohmann::detail::has_to_json	typeref:typename:bool
value	dependencies/include/nlohmann/json.hpp	/^    static constexpr bool value =$/;"	m	struct:nlohmann::detail::is_compatible_array_type_impl	typeref:typename:bool
value	dependencies/include/nlohmann/json.hpp	/^    static constexpr bool value =$/;"	m	struct:nlohmann::detail::is_compatible_object_type_impl	typeref:typename:bool
value	dependencies/include/nlohmann/json.hpp	/^    static constexpr bool value =$/;"	m	struct:nlohmann::detail::is_compatible_type_impl	typeref:typename:bool
value	dependencies/include/nlohmann/json.hpp	/^    static constexpr bool value =$/;"	m	struct:nlohmann::detail::is_constructible_array_type_impl	typeref:typename:bool
value	dependencies/include/nlohmann/json.hpp	/^    static constexpr bool value =$/;"	m	struct:nlohmann::detail::is_constructible_object_type_impl	typeref:typename:bool
value	dependencies/include/nlohmann/json.hpp	/^    static constexpr bool value =$/;"	m	struct:nlohmann::detail::is_sax	typeref:typename:bool
value	dependencies/include/nlohmann/json.hpp	/^    string_t value(const json_pointer& ptr, const char* default_value) const$/;"	f	class:nlohmann::basic_json	typeref:typename:string_t
value	dependencies/include/nlohmann/json.hpp	/^    string_t value(const typename object_t::key_type& key, const char* default_value) const$/;"	f	class:nlohmann::basic_json	typeref:typename:string_t
value	dependencies/include/nlohmann/json.hpp	/^    typename IteratorType::reference value() const$/;"	f	class:nlohmann::detail::iteration_proxy_value	typeref:typename:IteratorType::reference
value	dependencies/include/nlohmann/json.hpp	/^constexpr T static_const<T>::value;$/;"	m	class:nlohmann::detail::static_const<T>	typeref:typename:T
valueSubtype	dependencies/include/v8-inspector.h	/^  virtual std::unique_ptr<StringBuffer> valueSubtype(v8::Local<v8::Value>) {$/;"	f	class:v8_inspector::V8InspectorClient	typeref:typename:std::unique_ptr<StringBuffer>
value_	dependencies/include/v8-util.h	/^    PersistentContainerValue value_;$/;"	m	class:v8::PersistentValueMapBase::PersistentValueReference	typeref:typename:PersistentContainerValue
value_	dependencies/include/v8.h	/^  internal::Address* value_;$/;"	m	class:v8::ReturnValue	typeref:typename:internal::Address *
value_float	dependencies/include/nlohmann/json.hpp	/^        value_float,      \/\/\/< an floating point number -- use get_number_float() for actual /;"	e	enum:nlohmann::detail::lexer::token_type
value_float	dependencies/include/nlohmann/json.hpp	/^    number_float_t value_float = 0;$/;"	m	class:nlohmann::detail::lexer	typeref:typename:number_float_t
value_integer	dependencies/include/nlohmann/json.hpp	/^        value_integer,    \/\/\/< a signed integer -- use get_number_integer() for actual value$/;"	e	enum:nlohmann::detail::lexer::token_type
value_integer	dependencies/include/nlohmann/json.hpp	/^    number_integer_t value_integer = 0;$/;"	m	class:nlohmann::detail::lexer	typeref:typename:number_integer_t
value_ref	dependencies/include/nlohmann/json.hpp	/^    value_type* value_ref = nullptr;$/;"	m	class:nlohmann::detail::json_ref	typeref:typename:value_type *
value_separator	dependencies/include/nlohmann/json.hpp	/^        value_separator,  \/\/\/< the value separator `,`$/;"	e	enum:nlohmann::detail::lexer::token_type
value_string	dependencies/include/nlohmann/json.hpp	/^        value_string,     \/\/\/< a string -- use get_string() for actual value$/;"	e	enum:nlohmann::detail::lexer::token_type
value_t	dependencies/include/nlohmann/json.hpp	/^    using value_t = detail::value_t;$/;"	t	class:nlohmann::basic_json	typeref:typename:detail::value_t
value_t	dependencies/include/nlohmann/json.hpp	/^    using value_t = std::false_type;$/;"	t	struct:nlohmann::detail::detector	typeref:typename:std::false_type
value_t	dependencies/include/nlohmann/json.hpp	/^    using value_t = std::true_type;$/;"	t	struct:nlohmann::detail::detector	typeref:typename:std::true_type
value_t	dependencies/include/nlohmann/json.hpp	/^enum class value_t : std::uint8_t$/;"	g	namespace:nlohmann::detail	typeref:typename:std::uint8_t
value_type	dependencies/include/nlohmann/json.hpp	/^    using value_type = BasicJsonType;$/;"	t	class:nlohmann::detail::json_ref	typeref:typename:BasicJsonType
value_type	dependencies/include/nlohmann/json.hpp	/^    using value_type = T;$/;"	t	struct:nlohmann::detail::iterator_traits	typeref:typename:T
value_type	dependencies/include/nlohmann/json.hpp	/^    using value_type = basic_json;$/;"	t	class:nlohmann::basic_json	typeref:typename:basic_json
value_type	dependencies/include/nlohmann/json.hpp	/^    using value_type = iteration_proxy_value;$/;"	t	class:nlohmann::detail::iteration_proxy_value	typeref:typename:iteration_proxy_value
value_type	dependencies/include/nlohmann/json.hpp	/^    using value_type = std::size_t;$/;"	t	struct:nlohmann::detail::index_sequence	typeref:typename:std::size_t
value_type	dependencies/include/nlohmann/json.hpp	/^    using value_type = typename BasicJsonType::value_type;$/;"	t	class:nlohmann::detail::iter_impl	typeref:typename:BasicJsonType::value_type
value_type	dependencies/include/nlohmann/json.hpp	/^    using value_type = typename ConstructibleObjectType::value_type;$/;"	t	function:nlohmann::detail::from_json	typeref:typename:ConstructibleObjectType::value_type
value_type	dependencies/include/nlohmann/json.hpp	/^    using value_type = typename It::value_type;$/;"	t	struct:nlohmann::detail::iterator_types	typeref:typename:It::value_type
value_type_t	dependencies/include/nlohmann/json.hpp	/^using value_type_t = typename T::value_type;$/;"	t	namespace:nlohmann::detail	typeref:typename:T::value_type
value_unsigned	dependencies/include/nlohmann/json.hpp	/^        value_unsigned,   \/\/\/< an unsigned integer -- use get_number_unsigned() for actual va/;"	e	enum:nlohmann::detail::lexer::token_type
value_unsigned	dependencies/include/nlohmann/json.hpp	/^    number_unsigned_t value_unsigned = 0;$/;"	m	class:nlohmann::detail::lexer	typeref:typename:number_unsigned_t
values_	dependencies/include/v8.h	/^  internal::Address* values_;$/;"	m	class:v8::FunctionCallbackInfo	typeref:typename:internal::Address *
vector	dependencies/include/v8-profiler.h	/^template class V8_EXPORT std::vector<v8::CpuProfileDeoptFrame>;$/;"	m	class:std	typeref:class:V8_EXPORT
vector	dependencies/include/v8-profiler.h	/^template class V8_EXPORT std::vector<v8::CpuProfileDeoptInfo>;$/;"	m	class:std	typeref:class:V8_EXPORT
vendorId	dependencies/include/SFML/Window/Joystick.hpp	/^        unsigned int vendorId;  \/\/\/< Manufacturer identifier$/;"	m	struct:sf::Joystick::Identification	typeref:typename:unsigned int
vertexCache	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^        Vertex    vertexCache[VertexCacheSize]; \/\/\/< Pre-transformed vertices cache$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:Vertex[]
viewChanged	dependencies/include/SFML/Graphics/RenderTarget.hpp	/^        bool      viewChanged;    \/\/\/< Has the current view changed since last draw?$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:bool
vm_state	dependencies/include/v8.h	/^  StateTag vm_state;              \/\/ Current VM state.$/;"	m	struct:v8::SampleInfo	typeref:typename:StateTag
void_t	dependencies/include/nlohmann/json.hpp	/^template <typename ...Ts> using void_t = typename make_void<Ts...>::type;$/;"	t	namespace:nlohmann::detail	typeref:typename:make_void<Ts...>::type
volatile	build/default/CMakeFiles/3.13.1/CompilerIdC/CMakeCCompilerId.c	/^# define volatile$/;"	d	file:
w	dependencies/include/SFML/Graphics/Glsl.inl	/^    T w; \/\/\/< 4th component (W) of the 4D vector$/;"	m	struct:Vector4	typeref:typename:T	file:
w	dependencies/include/nlohmann/json.hpp	/^    diyfp w;$/;"	m	struct:nlohmann::detail::dtoa_impl::boundaries	typeref:typename:diyfp
wasm	dependencies/include/v8.h	/^namespace wasm {$/;"	n	namespace:v8::internal
what	dependencies/include/nlohmann/json.hpp	/^    const char* what() const noexcept override$/;"	f	class:nlohmann::detail::exception	typeref:typename:const char *
wheel	dependencies/include/SFML/Window/Event.hpp	/^        Mouse::Wheel wheel; \/\/\/< Which wheel (for mice with multiple ones)$/;"	m	struct:sf::Event::MouseWheelScrollEvent	typeref:typename:Mouse::Wheel
wide_string_input_adapter	dependencies/include/nlohmann/json.hpp	/^    explicit wide_string_input_adapter(const WideStringType& w)  noexcept$/;"	f	class:nlohmann::detail::wide_string_input_adapter
wide_string_input_adapter	dependencies/include/nlohmann/json.hpp	/^class wide_string_input_adapter : public input_adapter_protocol$/;"	c	namespace:nlohmann::detail
wide_string_input_helper	dependencies/include/nlohmann/json.hpp	/^struct wide_string_input_helper$/;"	s	namespace:nlohmann::detail
wide_string_input_helper	dependencies/include/nlohmann/json.hpp	/^struct wide_string_input_helper<WideStringType, 2>$/;"	s	namespace:nlohmann::detail
width	dependencies/include/SFML/Graphics/Font.hpp	/^        unsigned int width;  \/\/\/< Current width of the row$/;"	m	struct:sf::Font::Row	typeref:typename:unsigned int
width	dependencies/include/SFML/Graphics/Rect.hpp	/^    T width;  \/\/\/< Width of the rectangle$/;"	m	class:sf::Rect	typeref:typename:T
width	dependencies/include/SFML/Window/Event.hpp	/^        unsigned int width;  \/\/\/< New width, in pixels$/;"	m	struct:sf::Event::SizeEvent	typeref:typename:unsigned int
width	dependencies/include/SFML/Window/VideoMode.hpp	/^    unsigned int width;        \/\/\/< Video mode width, in pixels$/;"	m	class:sf::VideoMode	typeref:typename:unsigned int
window	src/Game.hpp	/^  SDL_Window *window;$/;"	m	class:Game	typeref:typename:SDL_Window *
write_bson	dependencies/include/nlohmann/json.hpp	/^    void write_bson(const BasicJsonType& j)$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:void
write_bson_array	dependencies/include/nlohmann/json.hpp	/^    void write_bson_array(const string_t& name,$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:void
write_bson_boolean	dependencies/include/nlohmann/json.hpp	/^    void write_bson_boolean(const string_t& name,$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:void
write_bson_double	dependencies/include/nlohmann/json.hpp	/^    void write_bson_double(const string_t& name,$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:void
write_bson_element	dependencies/include/nlohmann/json.hpp	/^    void write_bson_element(const string_t& name,$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:void
write_bson_entry_header	dependencies/include/nlohmann/json.hpp	/^    void write_bson_entry_header(const string_t& name,$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:void
write_bson_integer	dependencies/include/nlohmann/json.hpp	/^    void write_bson_integer(const string_t& name,$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:void
write_bson_null	dependencies/include/nlohmann/json.hpp	/^    void write_bson_null(const string_t& name)$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:void
write_bson_object	dependencies/include/nlohmann/json.hpp	/^    void write_bson_object(const typename BasicJsonType::object_t& value)$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:void
write_bson_object_entry	dependencies/include/nlohmann/json.hpp	/^    void write_bson_object_entry(const string_t& name,$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:void
write_bson_string	dependencies/include/nlohmann/json.hpp	/^    void write_bson_string(const string_t& name,$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:void
write_bson_unsigned	dependencies/include/nlohmann/json.hpp	/^    void write_bson_unsigned(const string_t& name,$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:void
write_cbor	dependencies/include/nlohmann/json.hpp	/^    void write_cbor(const BasicJsonType& j)$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:void
write_character	dependencies/include/nlohmann/json.hpp	/^    void write_character(CharType c) override$/;"	f	class:nlohmann::detail::output_stream_adapter	typeref:typename:void
write_character	dependencies/include/nlohmann/json.hpp	/^    void write_character(CharType c) override$/;"	f	class:nlohmann::detail::output_string_adapter	typeref:typename:void
write_character	dependencies/include/nlohmann/json.hpp	/^    void write_character(CharType c) override$/;"	f	class:nlohmann::detail::output_vector_adapter	typeref:typename:void
write_characters	dependencies/include/nlohmann/json.hpp	/^    void write_characters(const CharType* s, std::size_t length) override$/;"	f	class:nlohmann::detail::output_stream_adapter	typeref:typename:void
write_characters	dependencies/include/nlohmann/json.hpp	/^    void write_characters(const CharType* s, std::size_t length) override$/;"	f	class:nlohmann::detail::output_string_adapter	typeref:typename:void
write_characters	dependencies/include/nlohmann/json.hpp	/^    void write_characters(const CharType* s, std::size_t length) override$/;"	f	class:nlohmann::detail::output_vector_adapter	typeref:typename:void
write_msgpack	dependencies/include/nlohmann/json.hpp	/^    void write_msgpack(const BasicJsonType& j)$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:void
write_number	dependencies/include/nlohmann/json.hpp	/^    void write_number(const NumberType n)$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:void
write_number_with_ubjson_prefix	dependencies/include/nlohmann/json.hpp	/^    void write_number_with_ubjson_prefix(const NumberType n,$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:void
write_ubjson	dependencies/include/nlohmann/json.hpp	/^    void write_ubjson(const BasicJsonType& j, const bool use_count,$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:void
x	dependencies/include/SFML/Graphics/Glsl.inl	/^    T x; \/\/\/< 1st component (X) of the 4D vector$/;"	m	struct:Vector4	typeref:typename:T	file:
x	dependencies/include/SFML/System/Vector2.hpp	/^    T x; \/\/\/< X coordinate of the vector$/;"	m	class:sf::Vector2	typeref:typename:T
x	dependencies/include/SFML/System/Vector3.hpp	/^    T x; \/\/\/< X coordinate of the vector$/;"	m	class:sf::Vector3	typeref:typename:T
x	dependencies/include/SFML/Window/Event.hpp	/^        float x;           \/\/\/< Current value of the sensor on X axis$/;"	m	struct:sf::Event::SensorEvent	typeref:typename:float
x	dependencies/include/SFML/Window/Event.hpp	/^        int           x;      \/\/\/< X position of the mouse pointer, relative to the left of t/;"	m	struct:sf::Event::MouseButtonEvent	typeref:typename:int
x	dependencies/include/SFML/Window/Event.hpp	/^        int          x;     \/\/\/< X position of the mouse pointer, relative to the left of the/;"	m	struct:sf::Event::MouseWheelScrollEvent	typeref:typename:int
x	dependencies/include/SFML/Window/Event.hpp	/^        int x;               \/\/\/< X position of the touch, relative to the left of the owner /;"	m	struct:sf::Event::TouchEvent	typeref:typename:int
x	dependencies/include/SFML/Window/Event.hpp	/^        int x;     \/\/\/< X position of the mouse pointer, relative to the left of the owner wi/;"	m	struct:sf::Event::MouseWheelEvent	typeref:typename:int
x	dependencies/include/SFML/Window/Event.hpp	/^        int x; \/\/\/< X position of the mouse pointer, relative to the left of the owner window$/;"	m	struct:sf::Event::MouseMoveEvent	typeref:typename:int
y	dependencies/include/SFML/Graphics/Glsl.inl	/^    T y; \/\/\/< 2nd component (Y) of the 4D vector$/;"	m	struct:Vector4	typeref:typename:T	file:
y	dependencies/include/SFML/System/Vector2.hpp	/^    T y; \/\/\/< Y coordinate of the vector$/;"	m	class:sf::Vector2	typeref:typename:T
y	dependencies/include/SFML/System/Vector3.hpp	/^    T y; \/\/\/< Y coordinate of the vector$/;"	m	class:sf::Vector3	typeref:typename:T
y	dependencies/include/SFML/Window/Event.hpp	/^        float y;           \/\/\/< Current value of the sensor on Y axis$/;"	m	struct:sf::Event::SensorEvent	typeref:typename:float
y	dependencies/include/SFML/Window/Event.hpp	/^        int           y;      \/\/\/< Y position of the mouse pointer, relative to the top of th/;"	m	struct:sf::Event::MouseButtonEvent	typeref:typename:int
y	dependencies/include/SFML/Window/Event.hpp	/^        int          y;     \/\/\/< Y position of the mouse pointer, relative to the top of the /;"	m	struct:sf::Event::MouseWheelScrollEvent	typeref:typename:int
y	dependencies/include/SFML/Window/Event.hpp	/^        int y;               \/\/\/< Y position of the touch, relative to the top of the owner w/;"	m	struct:sf::Event::TouchEvent	typeref:typename:int
y	dependencies/include/SFML/Window/Event.hpp	/^        int y;     \/\/\/< Y position of the mouse pointer, relative to the top of the owner win/;"	m	struct:sf::Event::MouseWheelEvent	typeref:typename:int
y	dependencies/include/SFML/Window/Event.hpp	/^        int y; \/\/\/< Y position of the mouse pointer, relative to the top of the owner window$/;"	m	struct:sf::Event::MouseMoveEvent	typeref:typename:int
z	dependencies/include/SFML/Graphics/Glsl.inl	/^    T z; \/\/\/< 3rd component (Z) of the 4D vector$/;"	m	struct:Vector4	typeref:typename:T	file:
z	dependencies/include/SFML/System/Vector3.hpp	/^    T z; \/\/\/< Z coordinate of the vector$/;"	m	class:sf::Vector3	typeref:typename:T
z	dependencies/include/SFML/Window/Event.hpp	/^        float z;           \/\/\/< Current value of the sensor on Z axis$/;"	m	struct:sf::Event::SensorEvent	typeref:typename:float
~Drawable	dependencies/include/SFML/Graphics/Drawable.hpp	/^    virtual ~Drawable() {}$/;"	f	class:sf::Drawable
~Game	src/Game.cpp	/^Game::~Game(){$/;"	f	class:Game
~Global	dependencies/include/v8.h	/^  V8_INLINE ~Global() { this->Reset(); }$/;"	f	class:v8::Global	typeref:typename:V8_INLINE
~InputStream	dependencies/include/SFML/System/InputStream.hpp	/^    virtual ~InputStream() {}$/;"	f	class:sf::InputStream
~NonCopyable	dependencies/include/SFML/System/NonCopyable.hpp	/^    ~NonCopyable() {}$/;"	f	class:sf::NonCopyable
~Persistent	dependencies/include/v8.h	/^  V8_INLINE ~Persistent() {$/;"	f	class:v8::Persistent	typeref:typename:V8_INLINE
~PersistentValueMapBase	dependencies/include/v8-util.h	/^  ~PersistentValueMapBase() { Clear(); }$/;"	f	class:v8::PersistentValueMapBase
~PersistentValueVector	dependencies/include/v8-util.h	/^  ~PersistentValueVector() {$/;"	f	class:v8::PersistentValueVector
~SoundFileReader	dependencies/include/SFML/Audio/SoundFileReader.hpp	/^    virtual ~SoundFileReader() {}$/;"	f	class:sf::SoundFileReader
~SoundFileWriter	dependencies/include/SFML/Audio/SoundFileWriter.hpp	/^    virtual ~SoundFileWriter() {}$/;"	f	class:sf::SoundFileWriter
~ThreadFunc	dependencies/include/SFML/System/Thread.inl	/^    virtual ~ThreadFunc() {}$/;"	f	struct:priv::ThreadFunc	file:
~basic_json	dependencies/include/nlohmann/json.hpp	/^    ~basic_json() noexcept$/;"	f	class:nlohmann::basic_json
~input_stream_adapter	dependencies/include/nlohmann/json.hpp	/^    ~input_stream_adapter() override$/;"	f	class:nlohmann::detail::input_stream_adapter
